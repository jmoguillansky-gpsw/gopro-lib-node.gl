/* Generated by Cython 0.29.17 */

/* BEGIN: Cython Metadata
{
    "distutils": {
        "define_macros": [
            [
                "GRAPHICS_BACKEND_VULKAN",
                "1"
            ],
            [
                "WINDOW_BACKEND_GLFW",
                "1"
            ]
        ],
        "depends": [
            "../src/nodegl.h"
        ],
        "extra_compile_args": [
            "-O0",
            "-std=c++17"
        ],
        "include_dirs": [
            "../src",
            "../porting/ngfx",
            "../integ",
            "../../ngfx",
            "../../ngfx/src",
            "/usr/include/glm"
        ],
        "language": "c++",
        "libraries": [
            "ngfx",
            "NodeGL"
        ],
        "library_dirs": [
            "../../cmake-build-debug",
            "../../cmake-build-debug/NodeGL"
        ],
        "name": "pynodegl",
        "sources": [
            "pynodegl.pyx"
        ]
    },
    "module_name": "pynodegl"
}
END: Cython Metadata */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.6+ or Python 3.3+.
#else
#define CYTHON_ABI "0_29_17"
#define CYTHON_HEX_VERSION 0x001D11F0
#define CYTHON_FUTURE_DIVISION 1
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #if PY_VERSION_HEX >= 0x02070000
    #define HAVE_LONG_LONG
  #endif
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 0
  #elif !defined(CYTHON_USE_PYTYPE_LOOKUP)
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT (PY_VERSION_HEX >= 0x03050000)
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1)
  #endif
  #ifndef CYTHON_USE_DICT_VERSIONS
    #define CYTHON_USE_DICT_VERSIONS (PY_VERSION_HEX >= 0x030600B1)
  #endif
  #ifndef CYTHON_USE_EXC_INFO_STACK
    #define CYTHON_USE_EXC_INFO_STACK (PY_VERSION_HEX >= 0x030700A3)
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
  #undef SHIFT
  #undef BASE
  #undef MASK
  #ifdef SIZEOF_VOID_P
    enum { __pyx_check_sizeof_voidp = 1 / (int)(SIZEOF_VOID_P == sizeof(void*)) };
  #endif
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
           typedef unsigned char     uint8_t;
           typedef unsigned int      uint32_t;
        #else
           typedef unsigned __int8   uint8_t;
           typedef unsigned __int32  uint32_t;
        #endif
    #endif
#else
   #include <stdint.h>
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus) && __cplusplus >= 201103L
    #if __has_cpp_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH [[fallthrough]]
    #elif __has_cpp_attribute(clang::fallthrough)
      #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
    #elif __has_cpp_attribute(gnu::fallthrough)
      #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__ ) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
#if PY_VERSION_HEX >= 0x030800A4 && PY_VERSION_HEX < 0x030800B2
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, 0, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#else
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#endif
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef METH_STACKLESS
  #define METH_STACKLESS 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)\
    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)))))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030400A1
  #define PyMem_RawMalloc(n)           PyMem_Malloc(n)
  #define PyMem_RawRealloc(p, n)       PyMem_Realloc(p, n)
  #define PyMem_RawFree(p)             PyMem_Free(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if !CYTHON_FAST_THREAD_STATE || PY_VERSION_HEX < 0x02070000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {
  *key = PyThread_create_key();
  return 0;
}
static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {
  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {
  PyObject_Free(key);
}
static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {
  return PyThread_get_key_value(*key);
}
#endif
#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStr(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
#else
#define __Pyx_PyDict_GetItemStr(dict, name)  PyDict_GetItem(dict, name)
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None || (PyString_Check(b) && !PyString_CheckExact(b)))) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None || (PyUnicode_Check(b) && !PyUnicode_CheckExact(b)))) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#ifndef PyObject_Unicode
  #define PyObject_Unicode             PyObject_Str
#endif
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
#else
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : (Py_INCREF(func), func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif


#define __PYX_ERR(f_index, lineno, Ln_error) \
{ \
  __pyx_filename = __pyx_f[f_index]; __pyx_lineno = lineno; __pyx_clineno = __LINE__; goto Ln_error; \
}

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__pynodegl
#define __PYX_HAVE_API__pynodegl
/* Early includes */
#include <string.h>
#include <stdlib.h>
#include <stdint.h>
#include "nodegl.h"
#include <stdio.h>
#include "pythread.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_UTF8 1
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT (PY_MAJOR_VERSION >= 3 && __PYX_DEFAULT_STRING_ENCODING_IS_UTF8)
#define __PYX_DEFAULT_STRING_ENCODING "utf8"
#define __Pyx_PyObject_FromString __Pyx_PyUnicode_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit) {
    return (size_t) i < (size_t) limit;
}
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u) {
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c) + 1);
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

static PyObject *__pyx_m = NULL;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_cython_runtime = NULL;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "nodes_def.pyx",
  "pynodegl.pyx",
  "stringsource",
  "array.pxd",
  "type.pxd",
  "bool.pxd",
  "complex.pxd",
};
/* NoFastGil.proto */
#define __Pyx_PyGILState_Ensure PyGILState_Ensure
#define __Pyx_PyGILState_Release PyGILState_Release
#define __Pyx_FastGIL_Remember()
#define __Pyx_FastGIL_Forget()
#define __Pyx_FastGilFuncInit()

/* ForceInitThreads.proto */
#ifndef __PYX_FORCE_INIT_THREADS
  #define __PYX_FORCE_INIT_THREADS 0
#endif


/*--- Type declarations ---*/
#ifndef _ARRAYARRAY_H
struct arrayobject;
typedef struct arrayobject arrayobject;
#endif
struct __pyx_obj_8pynodegl__Node;
struct __pyx_obj_8pynodegl__AnimatedBuffer;
struct __pyx_obj_8pynodegl_AnimatedBufferFloat;
struct __pyx_obj_8pynodegl_AnimatedBufferVec2;
struct __pyx_obj_8pynodegl_AnimatedBufferVec3;
struct __pyx_obj_8pynodegl_AnimatedBufferVec4;
struct __pyx_obj_8pynodegl_AnimatedTime;
struct __pyx_obj_8pynodegl_AnimatedFloat;
struct __pyx_obj_8pynodegl_AnimatedVec2;
struct __pyx_obj_8pynodegl_AnimatedVec3;
struct __pyx_obj_8pynodegl_AnimatedVec4;
struct __pyx_obj_8pynodegl_AnimatedQuat;
struct __pyx_obj_8pynodegl_AnimKeyFrameFloat;
struct __pyx_obj_8pynodegl_AnimKeyFrameVec2;
struct __pyx_obj_8pynodegl_AnimKeyFrameVec3;
struct __pyx_obj_8pynodegl_AnimKeyFrameVec4;
struct __pyx_obj_8pynodegl_AnimKeyFrameQuat;
struct __pyx_obj_8pynodegl_AnimKeyFrameBuffer;
struct __pyx_obj_8pynodegl_Block;
struct __pyx_obj_8pynodegl__Buffer;
struct __pyx_obj_8pynodegl_BufferByte;
struct __pyx_obj_8pynodegl_BufferBVec2;
struct __pyx_obj_8pynodegl_BufferBVec3;
struct __pyx_obj_8pynodegl_BufferBVec4;
struct __pyx_obj_8pynodegl_BufferInt;
struct __pyx_obj_8pynodegl_BufferInt64;
struct __pyx_obj_8pynodegl_BufferIVec2;
struct __pyx_obj_8pynodegl_BufferIVec3;
struct __pyx_obj_8pynodegl_BufferIVec4;
struct __pyx_obj_8pynodegl_BufferShort;
struct __pyx_obj_8pynodegl_BufferSVec2;
struct __pyx_obj_8pynodegl_BufferSVec3;
struct __pyx_obj_8pynodegl_BufferSVec4;
struct __pyx_obj_8pynodegl_BufferUByte;
struct __pyx_obj_8pynodegl_BufferUBVec2;
struct __pyx_obj_8pynodegl_BufferUBVec3;
struct __pyx_obj_8pynodegl_BufferUBVec4;
struct __pyx_obj_8pynodegl_BufferUInt;
struct __pyx_obj_8pynodegl_BufferUIVec2;
struct __pyx_obj_8pynodegl_BufferUIVec3;
struct __pyx_obj_8pynodegl_BufferUIVec4;
struct __pyx_obj_8pynodegl_BufferUShort;
struct __pyx_obj_8pynodegl_BufferUSVec2;
struct __pyx_obj_8pynodegl_BufferUSVec3;
struct __pyx_obj_8pynodegl_BufferUSVec4;
struct __pyx_obj_8pynodegl_BufferFloat;
struct __pyx_obj_8pynodegl_BufferVec2;
struct __pyx_obj_8pynodegl_BufferVec3;
struct __pyx_obj_8pynodegl_BufferVec4;
struct __pyx_obj_8pynodegl_BufferMat4;
struct __pyx_obj_8pynodegl_Camera;
struct __pyx_obj_8pynodegl_Circle;
struct __pyx_obj_8pynodegl_Compute;
struct __pyx_obj_8pynodegl_ComputeProgram;
struct __pyx_obj_8pynodegl_Geometry;
struct __pyx_obj_8pynodegl_GraphicConfig;
struct __pyx_obj_8pynodegl_Group;
struct __pyx_obj_8pynodegl_HUD;
struct __pyx_obj_8pynodegl_Identity;
struct __pyx_obj_8pynodegl_Media;
struct __pyx_obj_8pynodegl_Program;
struct __pyx_obj_8pynodegl_Quad;
struct __pyx_obj_8pynodegl_Render;
struct __pyx_obj_8pynodegl_RenderToTexture;
struct __pyx_obj_8pynodegl_Rotate;
struct __pyx_obj_8pynodegl_RotateQuat;
struct __pyx_obj_8pynodegl_Scale;
struct __pyx_obj_8pynodegl_Text;
struct __pyx_obj_8pynodegl_Texture2D;
struct __pyx_obj_8pynodegl_Texture3D;
struct __pyx_obj_8pynodegl_TextureCube;
struct __pyx_obj_8pynodegl_TimeRangeFilter;
struct __pyx_obj_8pynodegl_TimeRangeModeCont;
struct __pyx_obj_8pynodegl_TimeRangeModeNoop;
struct __pyx_obj_8pynodegl_TimeRangeModeOnce;
struct __pyx_obj_8pynodegl_Transform;
struct __pyx_obj_8pynodegl_Translate;
struct __pyx_obj_8pynodegl_Triangle;
struct __pyx_obj_8pynodegl_StreamedInt;
struct __pyx_obj_8pynodegl_StreamedFloat;
struct __pyx_obj_8pynodegl_StreamedVec2;
struct __pyx_obj_8pynodegl_StreamedVec3;
struct __pyx_obj_8pynodegl_StreamedVec4;
struct __pyx_obj_8pynodegl_StreamedMat4;
struct __pyx_obj_8pynodegl_StreamedBufferInt;
struct __pyx_obj_8pynodegl_StreamedBufferFloat;
struct __pyx_obj_8pynodegl_StreamedBufferVec2;
struct __pyx_obj_8pynodegl_StreamedBufferVec3;
struct __pyx_obj_8pynodegl_StreamedBufferVec4;
struct __pyx_obj_8pynodegl_StreamedBufferMat4;
struct __pyx_obj_8pynodegl_UniformInt;
struct __pyx_obj_8pynodegl_UniformMat4;
struct __pyx_obj_8pynodegl_UniformFloat;
struct __pyx_obj_8pynodegl_UniformVec2;
struct __pyx_obj_8pynodegl_UniformVec3;
struct __pyx_obj_8pynodegl_UniformVec4;
struct __pyx_obj_8pynodegl_UniformQuat;
struct __pyx_obj_8pynodegl_UserSwitch;
struct __pyx_obj_8pynodegl_Viewer;

/* "nodes_def.pyx":102
 * 
 * 
 * cdef class _Node:             # <<<<<<<<<<<<<<
 *     cdef ngl_node *ctx
 * 
 */
struct __pyx_obj_8pynodegl__Node {
  PyObject_HEAD
  struct ngl_node *ctx;
};


/* "nodes_def.pyx":176
 * 
 * 
 * cdef class _AnimatedBuffer(_Node):             # <<<<<<<<<<<<<<
 * 
 *     def _init_params(self, keyframes=None, *args, **kwargs):
 */
struct __pyx_obj_8pynodegl__AnimatedBuffer {
  struct __pyx_obj_8pynodegl__Node __pyx_base;
};


/* "nodes_def.pyx":187
 * 
 * 
 * cdef class AnimatedBufferFloat(_AnimatedBuffer):             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, *args, **kwargs):
 */
struct __pyx_obj_8pynodegl_AnimatedBufferFloat {
  struct __pyx_obj_8pynodegl__AnimatedBuffer __pyx_base;
};


/* "nodes_def.pyx":197
 * 
 * 
 * cdef class AnimatedBufferVec2(_AnimatedBuffer):             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, *args, **kwargs):
 */
struct __pyx_obj_8pynodegl_AnimatedBufferVec2 {
  struct __pyx_obj_8pynodegl__AnimatedBuffer __pyx_base;
};


/* "nodes_def.pyx":207
 * 
 * 
 * cdef class AnimatedBufferVec3(_AnimatedBuffer):             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, *args, **kwargs):
 */
struct __pyx_obj_8pynodegl_AnimatedBufferVec3 {
  struct __pyx_obj_8pynodegl__AnimatedBuffer __pyx_base;
};


/* "nodes_def.pyx":217
 * 
 * 
 * cdef class AnimatedBufferVec4(_AnimatedBuffer):             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, *args, **kwargs):
 */
struct __pyx_obj_8pynodegl_AnimatedBufferVec4 {
  struct __pyx_obj_8pynodegl__AnimatedBuffer __pyx_base;
};


/* "nodes_def.pyx":227
 * 
 * 
 * cdef class AnimatedTime(_Node):             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, keyframes=None, *args, **kwargs):
 */
struct __pyx_obj_8pynodegl_AnimatedTime {
  struct __pyx_obj_8pynodegl__Node __pyx_base;
};


/* "nodes_def.pyx":243
 * 
 * 
 * cdef class AnimatedFloat(_Node):             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, keyframes=None, *args, **kwargs):
 */
struct __pyx_obj_8pynodegl_AnimatedFloat {
  struct __pyx_obj_8pynodegl__Node __pyx_base;
};


/* "nodes_def.pyx":264
 * 
 * 
 * cdef class AnimatedVec2(_Node):             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, keyframes=None, *args, **kwargs):
 */
struct __pyx_obj_8pynodegl_AnimatedVec2 {
  struct __pyx_obj_8pynodegl__Node __pyx_base;
};


/* "nodes_def.pyx":285
 * 
 * 
 * cdef class AnimatedVec3(_Node):             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, keyframes=None, *args, **kwargs):
 */
struct __pyx_obj_8pynodegl_AnimatedVec3 {
  struct __pyx_obj_8pynodegl__Node __pyx_base;
};


/* "nodes_def.pyx":306
 * 
 * 
 * cdef class AnimatedVec4(_Node):             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, keyframes=None, *args, **kwargs):
 */
struct __pyx_obj_8pynodegl_AnimatedVec4 {
  struct __pyx_obj_8pynodegl__Node __pyx_base;
};


/* "nodes_def.pyx":327
 * 
 * 
 * cdef class AnimatedQuat(_Node):             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, keyframes=None, as_mat4=None, *args, **kwargs):
 */
struct __pyx_obj_8pynodegl_AnimatedQuat {
  struct __pyx_obj_8pynodegl__Node __pyx_base;
};


/* "nodes_def.pyx":353
 * 
 * 
 * cdef class AnimKeyFrameFloat(_Node):             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, double time, double value, easing=None, easing_args=None, easing_start_offset=None, easing_end_offset=None, *args, **kwargs):
 */
struct __pyx_obj_8pynodegl_AnimKeyFrameFloat {
  struct __pyx_obj_8pynodegl__Node __pyx_base;
};


/* "nodes_def.pyx":384
 * 
 * 
 * cdef class AnimKeyFrameVec2(_Node):             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, double time, value, easing=None, easing_args=None, easing_start_offset=None, easing_end_offset=None, *args, **kwargs):
 */
struct __pyx_obj_8pynodegl_AnimKeyFrameVec2 {
  struct __pyx_obj_8pynodegl__Node __pyx_base;
};


/* "nodes_def.pyx":423
 * 
 * 
 * cdef class AnimKeyFrameVec3(_Node):             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, double time, value, easing=None, easing_args=None, easing_start_offset=None, easing_end_offset=None, *args, **kwargs):
 */
struct __pyx_obj_8pynodegl_AnimKeyFrameVec3 {
  struct __pyx_obj_8pynodegl__Node __pyx_base;
};


/* "nodes_def.pyx":462
 * 
 * 
 * cdef class AnimKeyFrameVec4(_Node):             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, double time, value, easing=None, easing_args=None, easing_start_offset=None, easing_end_offset=None, *args, **kwargs):
 */
struct __pyx_obj_8pynodegl_AnimKeyFrameVec4 {
  struct __pyx_obj_8pynodegl__Node __pyx_base;
};


/* "nodes_def.pyx":501
 * 
 * 
 * cdef class AnimKeyFrameQuat(_Node):             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, double time, quat, easing=None, easing_args=None, easing_start_offset=None, easing_end_offset=None, *args, **kwargs):
 */
struct __pyx_obj_8pynodegl_AnimKeyFrameQuat {
  struct __pyx_obj_8pynodegl__Node __pyx_base;
};


/* "nodes_def.pyx":540
 * 
 * 
 * cdef class AnimKeyFrameBuffer(_Node):             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, double time, data=None, easing=None, easing_args=None, easing_start_offset=None, easing_end_offset=None, *args, **kwargs):
 */
struct __pyx_obj_8pynodegl_AnimKeyFrameBuffer {
  struct __pyx_obj_8pynodegl__Node __pyx_base;
};


/* "nodes_def.pyx":580
 * 
 * 
 * cdef class Block(_Node):             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, fields=None, layout=None, *args, **kwargs):
 */
struct __pyx_obj_8pynodegl_Block {
  struct __pyx_obj_8pynodegl__Node __pyx_base;
};


/* "nodes_def.pyx":601
 * 
 * 
 * cdef class _Buffer(_Node):             # <<<<<<<<<<<<<<
 * 
 *     def _init_params(self, count=None, data=None, filename=None, block=None, block_field=None, *args, **kwargs):
 */
struct __pyx_obj_8pynodegl__Buffer {
  struct __pyx_obj_8pynodegl__Node __pyx_base;
};


/* "nodes_def.pyx":636
 * 
 * 
 * cdef class BufferByte(_Buffer):             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, *args, **kwargs):
 */
struct __pyx_obj_8pynodegl_BufferByte {
  struct __pyx_obj_8pynodegl__Buffer __pyx_base;
};


/* "nodes_def.pyx":646
 * 
 * 
 * cdef class BufferBVec2(_Buffer):             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, *args, **kwargs):
 */
struct __pyx_obj_8pynodegl_BufferBVec2 {
  struct __pyx_obj_8pynodegl__Buffer __pyx_base;
};


/* "nodes_def.pyx":656
 * 
 * 
 * cdef class BufferBVec3(_Buffer):             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, *args, **kwargs):
 */
struct __pyx_obj_8pynodegl_BufferBVec3 {
  struct __pyx_obj_8pynodegl__Buffer __pyx_base;
};


/* "nodes_def.pyx":666
 * 
 * 
 * cdef class BufferBVec4(_Buffer):             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, *args, **kwargs):
 */
struct __pyx_obj_8pynodegl_BufferBVec4 {
  struct __pyx_obj_8pynodegl__Buffer __pyx_base;
};


/* "nodes_def.pyx":676
 * 
 * 
 * cdef class BufferInt(_Buffer):             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, *args, **kwargs):
 */
struct __pyx_obj_8pynodegl_BufferInt {
  struct __pyx_obj_8pynodegl__Buffer __pyx_base;
};


/* "nodes_def.pyx":686
 * 
 * 
 * cdef class BufferInt64(_Buffer):             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, *args, **kwargs):
 */
struct __pyx_obj_8pynodegl_BufferInt64 {
  struct __pyx_obj_8pynodegl__Buffer __pyx_base;
};


/* "nodes_def.pyx":696
 * 
 * 
 * cdef class BufferIVec2(_Buffer):             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, *args, **kwargs):
 */
struct __pyx_obj_8pynodegl_BufferIVec2 {
  struct __pyx_obj_8pynodegl__Buffer __pyx_base;
};


/* "nodes_def.pyx":706
 * 
 * 
 * cdef class BufferIVec3(_Buffer):             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, *args, **kwargs):
 */
struct __pyx_obj_8pynodegl_BufferIVec3 {
  struct __pyx_obj_8pynodegl__Buffer __pyx_base;
};


/* "nodes_def.pyx":716
 * 
 * 
 * cdef class BufferIVec4(_Buffer):             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, *args, **kwargs):
 */
struct __pyx_obj_8pynodegl_BufferIVec4 {
  struct __pyx_obj_8pynodegl__Buffer __pyx_base;
};


/* "nodes_def.pyx":726
 * 
 * 
 * cdef class BufferShort(_Buffer):             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, *args, **kwargs):
 */
struct __pyx_obj_8pynodegl_BufferShort {
  struct __pyx_obj_8pynodegl__Buffer __pyx_base;
};


/* "nodes_def.pyx":736
 * 
 * 
 * cdef class BufferSVec2(_Buffer):             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, *args, **kwargs):
 */
struct __pyx_obj_8pynodegl_BufferSVec2 {
  struct __pyx_obj_8pynodegl__Buffer __pyx_base;
};


/* "nodes_def.pyx":746
 * 
 * 
 * cdef class BufferSVec3(_Buffer):             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, *args, **kwargs):
 */
struct __pyx_obj_8pynodegl_BufferSVec3 {
  struct __pyx_obj_8pynodegl__Buffer __pyx_base;
};


/* "nodes_def.pyx":756
 * 
 * 
 * cdef class BufferSVec4(_Buffer):             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, *args, **kwargs):
 */
struct __pyx_obj_8pynodegl_BufferSVec4 {
  struct __pyx_obj_8pynodegl__Buffer __pyx_base;
};


/* "nodes_def.pyx":766
 * 
 * 
 * cdef class BufferUByte(_Buffer):             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, *args, **kwargs):
 */
struct __pyx_obj_8pynodegl_BufferUByte {
  struct __pyx_obj_8pynodegl__Buffer __pyx_base;
};


/* "nodes_def.pyx":776
 * 
 * 
 * cdef class BufferUBVec2(_Buffer):             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, *args, **kwargs):
 */
struct __pyx_obj_8pynodegl_BufferUBVec2 {
  struct __pyx_obj_8pynodegl__Buffer __pyx_base;
};


/* "nodes_def.pyx":786
 * 
 * 
 * cdef class BufferUBVec3(_Buffer):             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, *args, **kwargs):
 */
struct __pyx_obj_8pynodegl_BufferUBVec3 {
  struct __pyx_obj_8pynodegl__Buffer __pyx_base;
};


/* "nodes_def.pyx":796
 * 
 * 
 * cdef class BufferUBVec4(_Buffer):             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, *args, **kwargs):
 */
struct __pyx_obj_8pynodegl_BufferUBVec4 {
  struct __pyx_obj_8pynodegl__Buffer __pyx_base;
};


/* "nodes_def.pyx":806
 * 
 * 
 * cdef class BufferUInt(_Buffer):             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, *args, **kwargs):
 */
struct __pyx_obj_8pynodegl_BufferUInt {
  struct __pyx_obj_8pynodegl__Buffer __pyx_base;
};


/* "nodes_def.pyx":816
 * 
 * 
 * cdef class BufferUIVec2(_Buffer):             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, *args, **kwargs):
 */
struct __pyx_obj_8pynodegl_BufferUIVec2 {
  struct __pyx_obj_8pynodegl__Buffer __pyx_base;
};


/* "nodes_def.pyx":826
 * 
 * 
 * cdef class BufferUIVec3(_Buffer):             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, *args, **kwargs):
 */
struct __pyx_obj_8pynodegl_BufferUIVec3 {
  struct __pyx_obj_8pynodegl__Buffer __pyx_base;
};


/* "nodes_def.pyx":836
 * 
 * 
 * cdef class BufferUIVec4(_Buffer):             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, *args, **kwargs):
 */
struct __pyx_obj_8pynodegl_BufferUIVec4 {
  struct __pyx_obj_8pynodegl__Buffer __pyx_base;
};


/* "nodes_def.pyx":846
 * 
 * 
 * cdef class BufferUShort(_Buffer):             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, *args, **kwargs):
 */
struct __pyx_obj_8pynodegl_BufferUShort {
  struct __pyx_obj_8pynodegl__Buffer __pyx_base;
};


/* "nodes_def.pyx":856
 * 
 * 
 * cdef class BufferUSVec2(_Buffer):             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, *args, **kwargs):
 */
struct __pyx_obj_8pynodegl_BufferUSVec2 {
  struct __pyx_obj_8pynodegl__Buffer __pyx_base;
};


/* "nodes_def.pyx":866
 * 
 * 
 * cdef class BufferUSVec3(_Buffer):             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, *args, **kwargs):
 */
struct __pyx_obj_8pynodegl_BufferUSVec3 {
  struct __pyx_obj_8pynodegl__Buffer __pyx_base;
};


/* "nodes_def.pyx":876
 * 
 * 
 * cdef class BufferUSVec4(_Buffer):             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, *args, **kwargs):
 */
struct __pyx_obj_8pynodegl_BufferUSVec4 {
  struct __pyx_obj_8pynodegl__Buffer __pyx_base;
};


/* "nodes_def.pyx":886
 * 
 * 
 * cdef class BufferFloat(_Buffer):             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, *args, **kwargs):
 */
struct __pyx_obj_8pynodegl_BufferFloat {
  struct __pyx_obj_8pynodegl__Buffer __pyx_base;
};


/* "nodes_def.pyx":896
 * 
 * 
 * cdef class BufferVec2(_Buffer):             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, *args, **kwargs):
 */
struct __pyx_obj_8pynodegl_BufferVec2 {
  struct __pyx_obj_8pynodegl__Buffer __pyx_base;
};


/* "nodes_def.pyx":906
 * 
 * 
 * cdef class BufferVec3(_Buffer):             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, *args, **kwargs):
 */
struct __pyx_obj_8pynodegl_BufferVec3 {
  struct __pyx_obj_8pynodegl__Buffer __pyx_base;
};


/* "nodes_def.pyx":916
 * 
 * 
 * cdef class BufferVec4(_Buffer):             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, *args, **kwargs):
 */
struct __pyx_obj_8pynodegl_BufferVec4 {
  struct __pyx_obj_8pynodegl__Buffer __pyx_base;
};


/* "nodes_def.pyx":926
 * 
 * 
 * cdef class BufferMat4(_Buffer):             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, *args, **kwargs):
 */
struct __pyx_obj_8pynodegl_BufferMat4 {
  struct __pyx_obj_8pynodegl__Buffer __pyx_base;
};


/* "nodes_def.pyx":936
 * 
 * 
 * cdef class Camera(_Node):             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, _Node child, eye=None, center=None, up=None, perspective=None, orthographic=None, clipping=None, eye_transform=None, center_transform=None, up_transform=None, fov_anim=None, *args, **kwargs):
 */
struct __pyx_obj_8pynodegl_Camera {
  struct __pyx_obj_8pynodegl__Node __pyx_base;
};


/* "nodes_def.pyx":1047
 * 
 * 
 * cdef class Circle(_Node):             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, radius=None, npoints=None, *args, **kwargs):
 */
struct __pyx_obj_8pynodegl_Circle {
  struct __pyx_obj_8pynodegl__Node __pyx_base;
};


/* "nodes_def.pyx":1068
 * 
 * 
 * cdef class Compute(_Node):             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, int nb_group_x, int nb_group_y, int nb_group_z, _Node program, textures=None, uniforms=None, blocks=None, *args, **kwargs):
 */
struct __pyx_obj_8pynodegl_Compute {
  struct __pyx_obj_8pynodegl__Node __pyx_base;
};


/* "nodes_def.pyx":1096
 * 
 * 
 * cdef class ComputeProgram(_Node):             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, const char *compute, *args, **kwargs):
 */
struct __pyx_obj_8pynodegl_ComputeProgram {
  struct __pyx_obj_8pynodegl__Node __pyx_base;
};


/* "nodes_def.pyx":1107
 * 
 * 
 * cdef class Geometry(_Node):             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, _Node vertices, uvcoords=None, normals=None, indices=None, topology=None, *args, **kwargs):
 */
struct __pyx_obj_8pynodegl_Geometry {
  struct __pyx_obj_8pynodegl__Node __pyx_base;
};


/* "nodes_def.pyx":1140
 * 
 * 
 * cdef class GraphicConfig(_Node):             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, _Node child, blend=None, blend_src_factor=None, blend_dst_factor=None, blend_src_factor_a=None, blend_dst_factor_a=None, blend_op=None, blend_op_a=None, color_write_mask=None, depth_test=None, depth_write_mask=None, depth_func=None, stencil_test=None, stencil_write_mask=None, stencil_func=None, stencil_ref=None, stencil_read_mask=None, stencil_fail=None, stencil_depth_fail=None, stencil_depth_pass=None, cull_face=None, cull_face_mode=None, scissor_test=None, scissor=None, *args, **kwargs):
 */
struct __pyx_obj_8pynodegl_GraphicConfig {
  struct __pyx_obj_8pynodegl__Node __pyx_base;
};


/* "nodes_def.pyx":1276
 * 
 * 
 * cdef class Group(_Node):             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, children=None, *args, **kwargs):
 */
struct __pyx_obj_8pynodegl_Group {
  struct __pyx_obj_8pynodegl__Node __pyx_base;
};


/* "nodes_def.pyx":1292
 * 
 * 
 * cdef class HUD(_Node):             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, _Node child, measure_window=None, refresh_rate=None, export_filename=None, bg_color=None, aspect_ratio=None, *args, **kwargs):
 */
struct __pyx_obj_8pynodegl_HUD {
  struct __pyx_obj_8pynodegl__Node __pyx_base;
};


/* "nodes_def.pyx":1344
 * 
 * 
 * cdef class Identity(_Node):             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, *args, **kwargs):
 */
struct __pyx_obj_8pynodegl_Identity {
  struct __pyx_obj_8pynodegl__Node __pyx_base;
};


/* "nodes_def.pyx":1355
 * 
 * 
 * cdef class Media(_Node):             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, const char *filename, sxplayer_min_level=None, time_anim=None, audio_tex=None, max_nb_packets=None, max_nb_frames=None, max_nb_sink=None, max_pixels=None, stream_idx=None, *args, **kwargs):
 */
struct __pyx_obj_8pynodegl_Media {
  struct __pyx_obj_8pynodegl__Node __pyx_base;
};


/* "nodes_def.pyx":1406
 * 
 * 
 * cdef class Program(_Node):             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, vertex='default.vert', fragment='default.frag', *args, **kwargs):
 */
struct __pyx_obj_8pynodegl_Program {
  struct __pyx_obj_8pynodegl__Node __pyx_base;
};


/* "nodes_def.pyx":1427
 * 
 * 
 * cdef class Quad(_Node):             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, corner=None, width=None, height=None, uv_corner=None, uv_width=None, uv_height=None, *args, **kwargs):
 */
struct __pyx_obj_8pynodegl_Quad {
  struct __pyx_obj_8pynodegl__Node __pyx_base;
};


/* "nodes_def.pyx":1516
 * 
 * 
 * cdef class Render(_Node):             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, _Node geometry, program=None, textures=None, uniforms=None, blocks=None, attributes=None, instance_attributes=None, nb_instances=None, *args, **kwargs):
 */
struct __pyx_obj_8pynodegl_Render {
  struct __pyx_obj_8pynodegl__Node __pyx_base;
};


/* "nodes_def.pyx":1564
 * 
 * 
 * cdef class RenderToTexture(_Node):             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, _Node child, color_textures=None, depth_texture=None, samples=None, clear_color=None, features=None, vflip=None, *args, **kwargs):
 */
struct __pyx_obj_8pynodegl_RenderToTexture {
  struct __pyx_obj_8pynodegl__Node __pyx_base;
};


/* "nodes_def.pyx":1615
 * 
 * 
 * cdef class Rotate(_Node):             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, _Node child, angle=None, axis=None, anchor=None, anim=None, *args, **kwargs):
 */
struct __pyx_obj_8pynodegl_Rotate {
  struct __pyx_obj_8pynodegl__Node __pyx_base;
};


/* "nodes_def.pyx":1664
 * 
 * 
 * cdef class RotateQuat(_Node):             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, _Node child, quat=None, anchor=None, anim=None, *args, **kwargs):
 */
struct __pyx_obj_8pynodegl_RotateQuat {
  struct __pyx_obj_8pynodegl__Node __pyx_base;
};


/* "nodes_def.pyx":1708
 * 
 * 
 * cdef class Scale(_Node):             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, _Node child, factors=None, anchor=None, anim=None, *args, **kwargs):
 */
struct __pyx_obj_8pynodegl_Scale {
  struct __pyx_obj_8pynodegl__Node __pyx_base;
};


/* "nodes_def.pyx":1752
 * 
 * 
 * cdef class Text(_Node):             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, const char *text, fg_color=None, bg_color=None, box_corner=None, box_width=None, box_height=None, padding=None, font_scale=None, valign=None, halign=None, aspect_ratio=None, min_filter=None, mag_filter=None, mipmap_filter=None, *args, **kwargs):
 */
struct __pyx_obj_8pynodegl_Text {
  struct __pyx_obj_8pynodegl__Node __pyx_base;
};


/* "nodes_def.pyx":1871
 * 
 * 
 * cdef class Texture2D(_Node):             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, format=None, width=None, height=None, min_filter=None, mag_filter=None, mipmap_filter=None, wrap_s=None, wrap_t=None, access=None, data_src=None, direct_rendering=None, *args, **kwargs):
 */
struct __pyx_obj_8pynodegl_Texture2D {
  struct __pyx_obj_8pynodegl__Node __pyx_base;
};


/* "nodes_def.pyx":1937
 * 
 * 
 * cdef class Texture3D(_Node):             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, format=None, width=None, height=None, depth=None, min_filter=None, mag_filter=None, mipmap_filter=None, wrap_s=None, wrap_t=None, wrap_r=None, access=None, data_src=None, *args, **kwargs):
 */
struct __pyx_obj_8pynodegl_Texture3D {
  struct __pyx_obj_8pynodegl__Node __pyx_base;
};


/* "nodes_def.pyx":2008
 * 
 * 
 * cdef class TextureCube(_Node):             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, format=None, size=None, min_filter=None, mag_filter=None, mipmap_filter=None, wrap_s=None, wrap_t=None, wrap_r=None, access=None, data_src=None, *args, **kwargs):
 */
struct __pyx_obj_8pynodegl_TextureCube {
  struct __pyx_obj_8pynodegl__Node __pyx_base;
};


/* "nodes_def.pyx":2069
 * 
 * 
 * cdef class TimeRangeFilter(_Node):             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, _Node child, ranges=None, prefetch_time=None, max_idle_time=None, *args, **kwargs):
 */
struct __pyx_obj_8pynodegl_TimeRangeFilter {
  struct __pyx_obj_8pynodegl__Node __pyx_base;
};


/* "nodes_def.pyx":2097
 * 
 * 
 * cdef class TimeRangeModeCont(_Node):             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, double start_time, *args, **kwargs):
 */
struct __pyx_obj_8pynodegl_TimeRangeModeCont {
  struct __pyx_obj_8pynodegl__Node __pyx_base;
};


/* "nodes_def.pyx":2108
 * 
 * 
 * cdef class TimeRangeModeNoop(_Node):             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, double start_time, *args, **kwargs):
 */
struct __pyx_obj_8pynodegl_TimeRangeModeNoop {
  struct __pyx_obj_8pynodegl__Node __pyx_base;
};


/* "nodes_def.pyx":2119
 * 
 * 
 * cdef class TimeRangeModeOnce(_Node):             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, double start_time, double render_time, *args, **kwargs):
 */
struct __pyx_obj_8pynodegl_TimeRangeModeOnce {
  struct __pyx_obj_8pynodegl__Node __pyx_base;
};


/* "nodes_def.pyx":2130
 * 
 * 
 * cdef class Transform(_Node):             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, _Node child, matrix=None, *args, **kwargs):
 */
struct __pyx_obj_8pynodegl_Transform {
  struct __pyx_obj_8pynodegl__Node __pyx_base;
};


/* "nodes_def.pyx":2156
 * 
 * 
 * cdef class Translate(_Node):             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, _Node child, vector=None, anim=None, *args, **kwargs):
 */
struct __pyx_obj_8pynodegl_Translate {
  struct __pyx_obj_8pynodegl__Node __pyx_base;
};


/* "nodes_def.pyx":2187
 * 
 * 
 * cdef class Triangle(_Node):             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, edge0, edge1, edge2, uv_edge0=None, uv_edge1=None, uv_edge2=None, *args, **kwargs):
 */
struct __pyx_obj_8pynodegl_Triangle {
  struct __pyx_obj_8pynodegl__Node __pyx_base;
};


/* "nodes_def.pyx":2261
 * 
 * 
 * cdef class StreamedInt(_Node):             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, _Node timestamps, _Node buffer, timebase=None, time_anim=None, *args, **kwargs):
 */
struct __pyx_obj_8pynodegl_StreamedInt {
  struct __pyx_obj_8pynodegl__Node __pyx_base;
};


/* "nodes_def.pyx":2289
 * 
 * 
 * cdef class StreamedFloat(_Node):             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, _Node timestamps, _Node buffer, timebase=None, time_anim=None, *args, **kwargs):
 */
struct __pyx_obj_8pynodegl_StreamedFloat {
  struct __pyx_obj_8pynodegl__Node __pyx_base;
};


/* "nodes_def.pyx":2317
 * 
 * 
 * cdef class StreamedVec2(_Node):             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, _Node timestamps, _Node buffer, timebase=None, time_anim=None, *args, **kwargs):
 */
struct __pyx_obj_8pynodegl_StreamedVec2 {
  struct __pyx_obj_8pynodegl__Node __pyx_base;
};


/* "nodes_def.pyx":2345
 * 
 * 
 * cdef class StreamedVec3(_Node):             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, _Node timestamps, _Node buffer, timebase=None, time_anim=None, *args, **kwargs):
 */
struct __pyx_obj_8pynodegl_StreamedVec3 {
  struct __pyx_obj_8pynodegl__Node __pyx_base;
};


/* "nodes_def.pyx":2373
 * 
 * 
 * cdef class StreamedVec4(_Node):             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, _Node timestamps, _Node buffer, timebase=None, time_anim=None, *args, **kwargs):
 */
struct __pyx_obj_8pynodegl_StreamedVec4 {
  struct __pyx_obj_8pynodegl__Node __pyx_base;
};


/* "nodes_def.pyx":2401
 * 
 * 
 * cdef class StreamedMat4(_Node):             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, _Node timestamps, _Node buffer, timebase=None, time_anim=None, *args, **kwargs):
 */
struct __pyx_obj_8pynodegl_StreamedMat4 {
  struct __pyx_obj_8pynodegl__Node __pyx_base;
};


/* "nodes_def.pyx":2429
 * 
 * 
 * cdef class StreamedBufferInt(_Node):             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, int count, _Node timestamps, _Node buffer, timebase=None, time_anim=None, *args, **kwargs):
 */
struct __pyx_obj_8pynodegl_StreamedBufferInt {
  struct __pyx_obj_8pynodegl__Node __pyx_base;
};


/* "nodes_def.pyx":2457
 * 
 * 
 * cdef class StreamedBufferFloat(_Node):             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, int count, _Node timestamps, _Node buffer, timebase=None, time_anim=None, *args, **kwargs):
 */
struct __pyx_obj_8pynodegl_StreamedBufferFloat {
  struct __pyx_obj_8pynodegl__Node __pyx_base;
};


/* "nodes_def.pyx":2485
 * 
 * 
 * cdef class StreamedBufferVec2(_Node):             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, int count, _Node timestamps, _Node buffer, timebase=None, time_anim=None, *args, **kwargs):
 */
struct __pyx_obj_8pynodegl_StreamedBufferVec2 {
  struct __pyx_obj_8pynodegl__Node __pyx_base;
};


/* "nodes_def.pyx":2513
 * 
 * 
 * cdef class StreamedBufferVec3(_Node):             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, int count, _Node timestamps, _Node buffer, timebase=None, time_anim=None, *args, **kwargs):
 */
struct __pyx_obj_8pynodegl_StreamedBufferVec3 {
  struct __pyx_obj_8pynodegl__Node __pyx_base;
};


/* "nodes_def.pyx":2541
 * 
 * 
 * cdef class StreamedBufferVec4(_Node):             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, int count, _Node timestamps, _Node buffer, timebase=None, time_anim=None, *args, **kwargs):
 */
struct __pyx_obj_8pynodegl_StreamedBufferVec4 {
  struct __pyx_obj_8pynodegl__Node __pyx_base;
};


/* "nodes_def.pyx":2569
 * 
 * 
 * cdef class StreamedBufferMat4(_Node):             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, int count, _Node timestamps, _Node buffer, timebase=None, time_anim=None, *args, **kwargs):
 */
struct __pyx_obj_8pynodegl_StreamedBufferMat4 {
  struct __pyx_obj_8pynodegl__Node __pyx_base;
};


/* "nodes_def.pyx":2597
 * 
 * 
 * cdef class UniformInt(_Node):             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, value=None, *args, **kwargs):
 */
struct __pyx_obj_8pynodegl_UniformInt {
  struct __pyx_obj_8pynodegl__Node __pyx_base;
};


/* "nodes_def.pyx":2613
 * 
 * 
 * cdef class UniformMat4(_Node):             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, value=None, transform=None, *args, **kwargs):
 */
struct __pyx_obj_8pynodegl_UniformMat4 {
  struct __pyx_obj_8pynodegl__Node __pyx_base;
};


/* "nodes_def.pyx":2642
 * 
 * 
 * cdef class UniformFloat(_Node):             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, value=None, *args, **kwargs):
 */
struct __pyx_obj_8pynodegl_UniformFloat {
  struct __pyx_obj_8pynodegl__Node __pyx_base;
};


/* "nodes_def.pyx":2658
 * 
 * 
 * cdef class UniformVec2(_Node):             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, value=None, *args, **kwargs):
 */
struct __pyx_obj_8pynodegl_UniformVec2 {
  struct __pyx_obj_8pynodegl__Node __pyx_base;
};


/* "nodes_def.pyx":2682
 * 
 * 
 * cdef class UniformVec3(_Node):             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, value=None, *args, **kwargs):
 */
struct __pyx_obj_8pynodegl_UniformVec3 {
  struct __pyx_obj_8pynodegl__Node __pyx_base;
};


/* "nodes_def.pyx":2706
 * 
 * 
 * cdef class UniformVec4(_Node):             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, value=None, *args, **kwargs):
 */
struct __pyx_obj_8pynodegl_UniformVec4 {
  struct __pyx_obj_8pynodegl__Node __pyx_base;
};


/* "nodes_def.pyx":2730
 * 
 * 
 * cdef class UniformQuat(_Node):             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, value=None, as_mat4=None, *args, **kwargs):
 */
struct __pyx_obj_8pynodegl_UniformQuat {
  struct __pyx_obj_8pynodegl__Node __pyx_base;
};


/* "nodes_def.pyx":2759
 * 
 * 
 * cdef class UserSwitch(_Node):             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, _Node child, enabled=None, *args, **kwargs):
 */
struct __pyx_obj_8pynodegl_UserSwitch {
  struct __pyx_obj_8pynodegl__Node __pyx_base;
};


/* "pynodegl.pyx":169
 * 
 * 
 * cdef class Viewer:             # <<<<<<<<<<<<<<
 *     cdef ngl_ctx *ctx
 *     cdef object capture_buffer
 */
struct __pyx_obj_8pynodegl_Viewer {
  PyObject_HEAD
  struct ngl_ctx *ctx;
  PyObject *capture_buffer;
};


/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#define __Pyx_PyErr_Occurred()  __pyx_tstate->curexc_type
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* GetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_GetException(type, value, tb)  __Pyx__GetException(__pyx_tstate, type, value, tb)
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* SwapException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSwap(type, value, tb)  __Pyx__ExceptionSwap(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* GetTopmostException.proto */
#if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem * __Pyx_PyErr_GetTopmostException(PyThreadState *tstate);
#endif

/* SaveResetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSave(type, value, tb)  __Pyx__ExceptionSave(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#define __Pyx_ExceptionReset(type, value, tb)  __Pyx__ExceptionReset(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
#else
#define __Pyx_ExceptionSave(type, value, tb)   PyErr_GetExcInfo(type, value, tb)
#define __Pyx_ExceptionReset(type, value, tb)  PyErr_SetExcInfo(type, value, tb)
#endif

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* PyCFunctionFastCall.proto */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject *__Pyx_PyCFunction_FastCall(PyObject *func, PyObject **args, Py_ssize_t nargs);
#else
#define __Pyx_PyCFunction_FastCall(func, args, nargs)  (assert(0), NULL)
#endif

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs);
#else
#define __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs) _PyFunction_FastCallDict(func, args, nargs, kwargs)
#endif
#define __Pyx_BUILD_ASSERT_EXPR(cond)\
    (sizeof(char [1 - 2*!(cond)]) - 1)
#ifndef Py_MEMBER_SIZE
#define Py_MEMBER_SIZE(type, member) sizeof(((type *)0)->member)
#endif
  static size_t __pyx_pyframe_localsplus_offset = 0;
  #include "frameobject.h"
  #define __Pxy_PyFrame_Initialize_Offsets()\
    ((void)__Pyx_BUILD_ASSERT_EXPR(sizeof(PyFrameObject) == offsetof(PyFrameObject, f_localsplus) + Py_MEMBER_SIZE(PyFrameObject, f_localsplus)),\
     (void)(__pyx_pyframe_localsplus_offset = ((size_t)PyFrame_Type.tp_basicsize) - Py_MEMBER_SIZE(PyFrameObject, f_localsplus)))
  #define __Pyx_PyFrame_GetLocalsplus(frame)\
    (assert(__pyx_pyframe_localsplus_offset), (PyObject **)(((char *)(frame)) + __pyx_pyframe_localsplus_offset))
#endif

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* UnpackUnboundCMethod.proto */
typedef struct {
    PyObject *type;
    PyObject **method_name;
    PyCFunction func;
    PyObject *method;
    int flag;
} __Pyx_CachedCFunction;

/* CallUnboundCMethod1.proto */
static PyObject* __Pyx__CallUnboundCMethod1(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg);
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_CallUnboundCMethod1(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg);
#else
#define __Pyx_CallUnboundCMethod1(cfunc, self, arg)  __Pyx__CallUnboundCMethod1(cfunc, self, arg)
#endif

/* IterFinish.proto */
static CYTHON_INLINE int __Pyx_IterFinish(void);

/* PyObjectCallNoArg.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
#else
#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
#endif

/* PyObjectGetMethod.proto */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method);

/* PyObjectCallMethod0.proto */
static PyObject* __Pyx_PyObject_CallMethod0(PyObject* obj, PyObject* method_name);

/* RaiseNeedMoreValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

/* RaiseTooManyValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

/* UnpackItemEndCheck.proto */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected);

/* RaiseNoneIterError.proto */
static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void);

/* UnpackTupleError.proto */
static void __Pyx_UnpackTupleError(PyObject *, Py_ssize_t index);

/* UnpackTuple2.proto */
#define __Pyx_unpack_tuple2(tuple, value1, value2, is_tuple, has_known_size, decref_tuple)\
    (likely(is_tuple || PyTuple_Check(tuple)) ?\
        (likely(has_known_size || PyTuple_GET_SIZE(tuple) == 2) ?\
            __Pyx_unpack_tuple2_exact(tuple, value1, value2, decref_tuple) :\
            (__Pyx_UnpackTupleError(tuple, 2), -1)) :\
        __Pyx_unpack_tuple2_generic(tuple, value1, value2, has_known_size, decref_tuple))
static CYTHON_INLINE int __Pyx_unpack_tuple2_exact(
    PyObject* tuple, PyObject** value1, PyObject** value2, int decref_tuple);
static int __Pyx_unpack_tuple2_generic(
    PyObject* tuple, PyObject** value1, PyObject** value2, int has_known_size, int decref_tuple);

/* dict_iter.proto */
static CYTHON_INLINE PyObject* __Pyx_dict_iterator(PyObject* dict, int is_dict, PyObject* method_name,
                                                   Py_ssize_t* p_orig_length, int* p_is_dict);
static CYTHON_INLINE int __Pyx_dict_iter_next(PyObject* dict_or_iter, Py_ssize_t orig_length, Py_ssize_t* ppos,
                                              PyObject** pkey, PyObject** pvalue, PyObject** pitem, int is_dict);

/* PyObjectCall2Args.proto */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2);

/* GetAttr.proto */
static CYTHON_INLINE PyObject *__Pyx_GetAttr(PyObject *, PyObject *);

/* HasAttr.proto */
static CYTHON_INLINE int __Pyx_HasAttr(PyObject *, PyObject *);

/* GetItemInt.proto */
#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

/* KeywordStringCheck.proto */
static int __Pyx_CheckKeywordStrings(PyObject *kwdict, const char* function_name, int kw_allowed);

/* BuildPyUnicode.proto */
static PyObject* __Pyx_PyUnicode_BuildFromAscii(Py_ssize_t ulength, char* chars, int clength,
                                                int prepend_sign, char padding_char);

/* CIntToPyUnicode.proto */
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_From_long(long value, Py_ssize_t width, char padding_char, char format_char);

/* CIntToPyUnicode.proto */
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_From_Py_ssize_t(Py_ssize_t value, Py_ssize_t width, char padding_char, char format_char);

/* IncludeStringH.proto */
#include <string.h>

/* JoinPyUnicode.proto */
static PyObject* __Pyx_PyUnicode_Join(PyObject* value_tuple, Py_ssize_t value_count, Py_ssize_t result_ulength,
                                      Py_UCS4 max_char);

/* ArgTypeTest.proto */
#define __Pyx_ArgTypeTest(obj, type, none_allowed, name, exact)\
    ((likely((Py_TYPE(obj) == type) | (none_allowed && (obj == Py_None)))) ? 1 :\
        __Pyx__ArgTypeTest(obj, type, name, exact))
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact);

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyInt_AddObjC(op1, op2, intval, inplace, zerodivision_check)\
    (inplace ? PyNumber_InPlaceAdd(op1, op2) : PyNumber_Add(op1, op2))
#endif

/* dict_getitem_default.proto */
static PyObject* __Pyx_PyDict_GetItemDefault(PyObject* d, PyObject* key, PyObject* default_value);

/* CallUnboundCMethod2.proto */
static PyObject* __Pyx__CallUnboundCMethod2(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg1, PyObject* arg2);
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030600B1
static CYTHON_INLINE PyObject *__Pyx_CallUnboundCMethod2(__Pyx_CachedCFunction *cfunc, PyObject *self, PyObject *arg1, PyObject *arg2);
#else
#define __Pyx_CallUnboundCMethod2(cfunc, self, arg1, arg2)  __Pyx__CallUnboundCMethod2(cfunc, self, arg1, arg2)
#endif

/* PyDictVersioning.proto */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
#define __PYX_DICT_VERSION_INIT  ((PY_UINT64_T) -1)
#define __PYX_GET_DICT_VERSION(dict)  (((PyDictObject*)(dict))->ma_version_tag)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\
    (version_var) = __PYX_GET_DICT_VERSION(dict);\
    (cache_var) = (value);
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP) {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    if (likely(__PYX_GET_DICT_VERSION(DICT) == __pyx_dict_version)) {\
        (VAR) = __pyx_dict_cached_value;\
    } else {\
        (VAR) = __pyx_dict_cached_value = (LOOKUP);\
        __pyx_dict_version = __PYX_GET_DICT_VERSION(DICT);\
    }\
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj);
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj);
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version);
#else
#define __PYX_GET_DICT_VERSION(dict)  (0)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP)  (VAR) = (LOOKUP);
#endif

/* GetModuleGlobalName.proto */
#if CYTHON_USE_DICT_VERSIONS
#define __Pyx_GetModuleGlobalName(var, name)  {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    (var) = (likely(__pyx_dict_version == __PYX_GET_DICT_VERSION(__pyx_d))) ?\
        (likely(__pyx_dict_cached_value) ? __Pyx_NewRef(__pyx_dict_cached_value) : __Pyx_GetBuiltinName(name)) :\
        __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
#define __Pyx_GetModuleGlobalNameUncached(var, name)  {\
    PY_UINT64_T __pyx_dict_version;\
    PyObject *__pyx_dict_cached_value;\
    (var) = __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value);
#else
#define __Pyx_GetModuleGlobalName(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name);
#endif

/* PyObject_GenericGetAttrNoDict.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttrNoDict PyObject_GenericGetAttr
#endif

/* PyObject_GenericGetAttr.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttr PyObject_GenericGetAttr
#endif

/* PyErrExceptionMatches.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);
#else
#define __Pyx_PyErr_ExceptionMatches(err)  PyErr_ExceptionMatches(err)
#endif

/* PyObjectGetAttrStrNoError.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name);

/* SetupReduce.proto */
static int __Pyx_setup_reduce(PyObject* type_obj);

/* TypeImport.proto */
#ifndef __PYX_HAVE_RT_ImportType_proto
#define __PYX_HAVE_RT_ImportType_proto
enum __Pyx_ImportType_CheckSize {
   __Pyx_ImportType_CheckSize_Error = 0,
   __Pyx_ImportType_CheckSize_Warn = 1,
   __Pyx_ImportType_CheckSize_Ignore = 2
};
static PyTypeObject *__Pyx_ImportType(PyObject* module, const char *module_name, const char *class_name, size_t size, enum __Pyx_ImportType_CheckSize check_size);
#endif

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* ArrayAPI.proto */
#ifndef _ARRAYARRAY_H
#define _ARRAYARRAY_H
typedef struct arraydescr {
    int typecode;
    int itemsize;
    PyObject * (*getitem)(struct arrayobject *, Py_ssize_t);
    int (*setitem)(struct arrayobject *, Py_ssize_t, PyObject *);
#if PY_MAJOR_VERSION >= 3
    char *formats;
#endif
} arraydescr;
struct arrayobject {
    PyObject_HEAD
    Py_ssize_t ob_size;
    union {
        char *ob_item;
        float *as_floats;
        double *as_doubles;
        int *as_ints;
        unsigned int *as_uints;
        unsigned char *as_uchars;
        signed char *as_schars;
        char *as_chars;
        unsigned long *as_ulongs;
        long *as_longs;
#if PY_MAJOR_VERSION >= 3
        unsigned long long *as_ulonglongs;
        long long *as_longlongs;
#endif
        short *as_shorts;
        unsigned short *as_ushorts;
        Py_UNICODE *as_pyunicodes;
        void *as_voidptr;
    } data;
    Py_ssize_t allocated;
    struct arraydescr *ob_descr;
    PyObject *weakreflist;
#if PY_MAJOR_VERSION >= 3
        int ob_exports;
#endif
};
#ifndef NO_NEWARRAY_INLINE
static CYTHON_INLINE PyObject * newarrayobject(PyTypeObject *type, Py_ssize_t size,
    struct arraydescr *descr) {
    arrayobject *op;
    size_t nbytes;
    if (size < 0) {
        PyErr_BadInternalCall();
        return NULL;
    }
    nbytes = size * descr->itemsize;
    if (nbytes / descr->itemsize != (size_t)size) {
        return PyErr_NoMemory();
    }
    op = (arrayobject *) type->tp_alloc(type, 0);
    if (op == NULL) {
        return NULL;
    }
    op->ob_descr = descr;
    op->allocated = size;
    op->weakreflist = NULL;
    op->ob_size = size;
    if (size <= 0) {
        op->data.ob_item = NULL;
    }
    else {
        op->data.ob_item = PyMem_NEW(char, nbytes);
        if (op->data.ob_item == NULL) {
            Py_DECREF(op);
            return PyErr_NoMemory();
        }
    }
    return (PyObject *) op;
}
#else
PyObject* newarrayobject(PyTypeObject *type, Py_ssize_t size,
    struct arraydescr *descr);
#endif
static CYTHON_INLINE int resize(arrayobject *self, Py_ssize_t n) {
    void *items = (void*) self->data.ob_item;
    PyMem_Resize(items, char, (size_t)(n * self->ob_descr->itemsize));
    if (items == NULL) {
        PyErr_NoMemory();
        return -1;
    }
    self->data.ob_item = (char*) items;
    self->ob_size = n;
    self->allocated = n;
    return 0;
}
static CYTHON_INLINE int resize_smart(arrayobject *self, Py_ssize_t n) {
    void *items = (void*) self->data.ob_item;
    Py_ssize_t newsize;
    if (n < self->allocated && n*4 > self->allocated) {
        self->ob_size = n;
        return 0;
    }
    newsize = n + (n / 2) + 1;
    if (newsize <= n) {
        PyErr_NoMemory();
        return -1;
    }
    PyMem_Resize(items, char, (size_t)(newsize * self->ob_descr->itemsize));
    if (items == NULL) {
        PyErr_NoMemory();
        return -1;
    }
    self->data.ob_item = (char*) items;
    self->ob_size = n;
    self->allocated = newsize;
    return 0;
}
#endif

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);


/* Module declarations from 'libc.string' */

/* Module declarations from 'libc.stdlib' */

/* Module declarations from 'libc.stdint' */

/* Module declarations from 'cpython.version' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.type' */
static PyTypeObject *__pyx_ptype_7cpython_4type_type = 0;

/* Module declarations from 'libc.stdio' */

/* Module declarations from 'cpython.object' */

/* Module declarations from 'cpython.ref' */

/* Module declarations from 'cpython.exc' */

/* Module declarations from 'cpython.module' */

/* Module declarations from 'cpython.mem' */

/* Module declarations from 'cpython.tuple' */

/* Module declarations from 'cpython.list' */

/* Module declarations from 'cpython.sequence' */

/* Module declarations from 'cpython.mapping' */

/* Module declarations from 'cpython.iterator' */

/* Module declarations from 'cpython.number' */

/* Module declarations from 'cpython.int' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.bool' */
static PyTypeObject *__pyx_ptype_7cpython_4bool_bool = 0;

/* Module declarations from 'cpython.long' */

/* Module declarations from 'cpython.float' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.complex' */
static PyTypeObject *__pyx_ptype_7cpython_7complex_complex = 0;

/* Module declarations from 'cpython.string' */

/* Module declarations from 'cpython.unicode' */

/* Module declarations from 'cpython.dict' */

/* Module declarations from 'cpython.instance' */

/* Module declarations from 'cpython.function' */

/* Module declarations from 'cpython.method' */

/* Module declarations from 'cpython.weakref' */

/* Module declarations from 'cpython.getargs' */

/* Module declarations from 'cpython.pythread' */

/* Module declarations from 'cpython.pystate' */

/* Module declarations from 'cpython.cobject' */

/* Module declarations from 'cpython.oldbuffer' */

/* Module declarations from 'cpython.set' */

/* Module declarations from 'cpython.buffer' */

/* Module declarations from 'cpython.bytes' */

/* Module declarations from 'cpython.pycapsule' */

/* Module declarations from 'cpython' */

/* Module declarations from 'array' */

/* Module declarations from 'cpython.array' */
static PyTypeObject *__pyx_ptype_7cpython_5array_array = 0;
static CYTHON_INLINE int __pyx_f_7cpython_5array_extend_buffer(arrayobject *, char *, Py_ssize_t); /*proto*/

/* Module declarations from 'pynodegl' */
static PyTypeObject *__pyx_ptype_8pynodegl__Node = 0;
static PyTypeObject *__pyx_ptype_8pynodegl__AnimatedBuffer = 0;
static PyTypeObject *__pyx_ptype_8pynodegl_AnimatedBufferFloat = 0;
static PyTypeObject *__pyx_ptype_8pynodegl_AnimatedBufferVec2 = 0;
static PyTypeObject *__pyx_ptype_8pynodegl_AnimatedBufferVec3 = 0;
static PyTypeObject *__pyx_ptype_8pynodegl_AnimatedBufferVec4 = 0;
static PyTypeObject *__pyx_ptype_8pynodegl_AnimatedTime = 0;
static PyTypeObject *__pyx_ptype_8pynodegl_AnimatedFloat = 0;
static PyTypeObject *__pyx_ptype_8pynodegl_AnimatedVec2 = 0;
static PyTypeObject *__pyx_ptype_8pynodegl_AnimatedVec3 = 0;
static PyTypeObject *__pyx_ptype_8pynodegl_AnimatedVec4 = 0;
static PyTypeObject *__pyx_ptype_8pynodegl_AnimatedQuat = 0;
static PyTypeObject *__pyx_ptype_8pynodegl_AnimKeyFrameFloat = 0;
static PyTypeObject *__pyx_ptype_8pynodegl_AnimKeyFrameVec2 = 0;
static PyTypeObject *__pyx_ptype_8pynodegl_AnimKeyFrameVec3 = 0;
static PyTypeObject *__pyx_ptype_8pynodegl_AnimKeyFrameVec4 = 0;
static PyTypeObject *__pyx_ptype_8pynodegl_AnimKeyFrameQuat = 0;
static PyTypeObject *__pyx_ptype_8pynodegl_AnimKeyFrameBuffer = 0;
static PyTypeObject *__pyx_ptype_8pynodegl_Block = 0;
static PyTypeObject *__pyx_ptype_8pynodegl__Buffer = 0;
static PyTypeObject *__pyx_ptype_8pynodegl_BufferByte = 0;
static PyTypeObject *__pyx_ptype_8pynodegl_BufferBVec2 = 0;
static PyTypeObject *__pyx_ptype_8pynodegl_BufferBVec3 = 0;
static PyTypeObject *__pyx_ptype_8pynodegl_BufferBVec4 = 0;
static PyTypeObject *__pyx_ptype_8pynodegl_BufferInt = 0;
static PyTypeObject *__pyx_ptype_8pynodegl_BufferInt64 = 0;
static PyTypeObject *__pyx_ptype_8pynodegl_BufferIVec2 = 0;
static PyTypeObject *__pyx_ptype_8pynodegl_BufferIVec3 = 0;
static PyTypeObject *__pyx_ptype_8pynodegl_BufferIVec4 = 0;
static PyTypeObject *__pyx_ptype_8pynodegl_BufferShort = 0;
static PyTypeObject *__pyx_ptype_8pynodegl_BufferSVec2 = 0;
static PyTypeObject *__pyx_ptype_8pynodegl_BufferSVec3 = 0;
static PyTypeObject *__pyx_ptype_8pynodegl_BufferSVec4 = 0;
static PyTypeObject *__pyx_ptype_8pynodegl_BufferUByte = 0;
static PyTypeObject *__pyx_ptype_8pynodegl_BufferUBVec2 = 0;
static PyTypeObject *__pyx_ptype_8pynodegl_BufferUBVec3 = 0;
static PyTypeObject *__pyx_ptype_8pynodegl_BufferUBVec4 = 0;
static PyTypeObject *__pyx_ptype_8pynodegl_BufferUInt = 0;
static PyTypeObject *__pyx_ptype_8pynodegl_BufferUIVec2 = 0;
static PyTypeObject *__pyx_ptype_8pynodegl_BufferUIVec3 = 0;
static PyTypeObject *__pyx_ptype_8pynodegl_BufferUIVec4 = 0;
static PyTypeObject *__pyx_ptype_8pynodegl_BufferUShort = 0;
static PyTypeObject *__pyx_ptype_8pynodegl_BufferUSVec2 = 0;
static PyTypeObject *__pyx_ptype_8pynodegl_BufferUSVec3 = 0;
static PyTypeObject *__pyx_ptype_8pynodegl_BufferUSVec4 = 0;
static PyTypeObject *__pyx_ptype_8pynodegl_BufferFloat = 0;
static PyTypeObject *__pyx_ptype_8pynodegl_BufferVec2 = 0;
static PyTypeObject *__pyx_ptype_8pynodegl_BufferVec3 = 0;
static PyTypeObject *__pyx_ptype_8pynodegl_BufferVec4 = 0;
static PyTypeObject *__pyx_ptype_8pynodegl_BufferMat4 = 0;
static PyTypeObject *__pyx_ptype_8pynodegl_Camera = 0;
static PyTypeObject *__pyx_ptype_8pynodegl_Circle = 0;
static PyTypeObject *__pyx_ptype_8pynodegl_Compute = 0;
static PyTypeObject *__pyx_ptype_8pynodegl_ComputeProgram = 0;
static PyTypeObject *__pyx_ptype_8pynodegl_Geometry = 0;
static PyTypeObject *__pyx_ptype_8pynodegl_GraphicConfig = 0;
static PyTypeObject *__pyx_ptype_8pynodegl_Group = 0;
static PyTypeObject *__pyx_ptype_8pynodegl_HUD = 0;
static PyTypeObject *__pyx_ptype_8pynodegl_Identity = 0;
static PyTypeObject *__pyx_ptype_8pynodegl_Media = 0;
static PyTypeObject *__pyx_ptype_8pynodegl_Program = 0;
static PyTypeObject *__pyx_ptype_8pynodegl_Quad = 0;
static PyTypeObject *__pyx_ptype_8pynodegl_Render = 0;
static PyTypeObject *__pyx_ptype_8pynodegl_RenderToTexture = 0;
static PyTypeObject *__pyx_ptype_8pynodegl_Rotate = 0;
static PyTypeObject *__pyx_ptype_8pynodegl_RotateQuat = 0;
static PyTypeObject *__pyx_ptype_8pynodegl_Scale = 0;
static PyTypeObject *__pyx_ptype_8pynodegl_Text = 0;
static PyTypeObject *__pyx_ptype_8pynodegl_Texture2D = 0;
static PyTypeObject *__pyx_ptype_8pynodegl_Texture3D = 0;
static PyTypeObject *__pyx_ptype_8pynodegl_TextureCube = 0;
static PyTypeObject *__pyx_ptype_8pynodegl_TimeRangeFilter = 0;
static PyTypeObject *__pyx_ptype_8pynodegl_TimeRangeModeCont = 0;
static PyTypeObject *__pyx_ptype_8pynodegl_TimeRangeModeNoop = 0;
static PyTypeObject *__pyx_ptype_8pynodegl_TimeRangeModeOnce = 0;
static PyTypeObject *__pyx_ptype_8pynodegl_Transform = 0;
static PyTypeObject *__pyx_ptype_8pynodegl_Translate = 0;
static PyTypeObject *__pyx_ptype_8pynodegl_Triangle = 0;
static PyTypeObject *__pyx_ptype_8pynodegl_StreamedInt = 0;
static PyTypeObject *__pyx_ptype_8pynodegl_StreamedFloat = 0;
static PyTypeObject *__pyx_ptype_8pynodegl_StreamedVec2 = 0;
static PyTypeObject *__pyx_ptype_8pynodegl_StreamedVec3 = 0;
static PyTypeObject *__pyx_ptype_8pynodegl_StreamedVec4 = 0;
static PyTypeObject *__pyx_ptype_8pynodegl_StreamedMat4 = 0;
static PyTypeObject *__pyx_ptype_8pynodegl_StreamedBufferInt = 0;
static PyTypeObject *__pyx_ptype_8pynodegl_StreamedBufferFloat = 0;
static PyTypeObject *__pyx_ptype_8pynodegl_StreamedBufferVec2 = 0;
static PyTypeObject *__pyx_ptype_8pynodegl_StreamedBufferVec3 = 0;
static PyTypeObject *__pyx_ptype_8pynodegl_StreamedBufferVec4 = 0;
static PyTypeObject *__pyx_ptype_8pynodegl_StreamedBufferMat4 = 0;
static PyTypeObject *__pyx_ptype_8pynodegl_UniformInt = 0;
static PyTypeObject *__pyx_ptype_8pynodegl_UniformMat4 = 0;
static PyTypeObject *__pyx_ptype_8pynodegl_UniformFloat = 0;
static PyTypeObject *__pyx_ptype_8pynodegl_UniformVec2 = 0;
static PyTypeObject *__pyx_ptype_8pynodegl_UniformVec3 = 0;
static PyTypeObject *__pyx_ptype_8pynodegl_UniformVec4 = 0;
static PyTypeObject *__pyx_ptype_8pynodegl_UniformQuat = 0;
static PyTypeObject *__pyx_ptype_8pynodegl_UserSwitch = 0;
static PyTypeObject *__pyx_ptype_8pynodegl_Viewer = 0;
static PyObject *__pyx_f_8pynodegl__ret_pystr(char *); /*proto*/
static PyObject *__pyx_f_8pynodegl__eval_solve(PyObject *, PyObject *, PyObject *, PyObject *, PyObject *); /*proto*/
#define __Pyx_MODULE_NAME "pynodegl"
extern int __pyx_module_is_main_pynodegl;
int __pyx_module_is_main_pynodegl = 0;

/* Implementation of 'pynodegl' */
static PyObject *__pyx_builtin_TypeError;
static PyObject *__pyx_builtin_MemoryError;
static PyObject *__pyx_builtin_enumerate;
static PyObject *__pyx_builtin_range;
static const char __pyx_k_[] = "";
static const char __pyx_k_d[] = "d";
static const char __pyx_k_t[] = "t";
static const char __pyx_k_v[] = "v";
static const char __pyx_k_up[] = "up";
static const char __pyx_k_HUD[] = "HUD";
static const char __pyx_k_arg[] = "arg";
static const char __pyx_k_eye[] = "eye";
static const char __pyx_k_get[] = "get";
static const char __pyx_k_Node[] = "_Node";
static const char __pyx_k_Quad[] = "Quad";
static const char __pyx_k_Text[] = "Text";
static const char __pyx_k_anim[] = "anim";
static const char __pyx_k_args[] = "args";
static const char __pyx_k_axis[] = "axis";
static const char __pyx_k_data[] = "data";
static const char __pyx_k_iter[] = "__iter__";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_name[] = "name";
static const char __pyx_k_quat[] = "quat";
static const char __pyx_k_size[] = "size";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_text[] = "text";
static const char __pyx_k_time[] = "time";
static const char __pyx_k_Block[] = "Block";
static const char __pyx_k_Group[] = "Group";
static const char __pyx_k_Media[] = "Media";
static const char __pyx_k_Scale[] = "Scale";
static const char __pyx_k_angle[] = "angle";
static const char __pyx_k_blend[] = "blend";
static const char __pyx_k_block[] = "block";
static const char __pyx_k_child[] = "child";
static const char __pyx_k_count[] = "count";
static const char __pyx_k_depth[] = "depth";
static const char __pyx_k_edge0[] = "edge0";
static const char __pyx_k_edge1[] = "edge1";
static const char __pyx_k_edge2[] = "edge2";
static const char __pyx_k_items[] = "items";
static const char __pyx_k_label[] = "label";
static const char __pyx_k_level[] = "level";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_value[] = "value";
static const char __pyx_k_vflip[] = "vflip";
static const char __pyx_k_width[] = "width";
static const char __pyx_k_Buffer[] = "_Buffer";
static const char __pyx_k_Camera[] = "Camera";
static const char __pyx_k_Circle[] = "Circle";
static const char __pyx_k_Render[] = "Render";
static const char __pyx_k_Rotate[] = "Rotate";
static const char __pyx_k_Viewer[] = "Viewer";
static const char __pyx_k_access[] = "access";
static const char __pyx_k_anchor[] = "anchor";
static const char __pyx_k_blocks[] = "blocks";
static const char __pyx_k_buffer[] = "buffer";
static const char __pyx_k_center[] = "center";
static const char __pyx_k_corner[] = "corner";
static const char __pyx_k_easing[] = "easing";
static const char __pyx_k_fields[] = "fields";
static const char __pyx_k_format[] = "format";
static const char __pyx_k_halign[] = "halign";
static const char __pyx_k_handle[] = "handle";
static const char __pyx_k_height[] = "height";
static const char __pyx_k_layout[] = "layout";
static const char __pyx_k_matrix[] = "matrix";
static const char __pyx_k_name_2[] = "__name__";
static const char __pyx_k_radius[] = "radius";
static const char __pyx_k_ranges[] = "ranges";
static const char __pyx_k_reduce[] = "__reduce__";
static const char __pyx_k_set_up[] = "set_up";
static const char __pyx_k_update[] = "update";
static const char __pyx_k_valign[] = "valign";
static const char __pyx_k_values[] = " values";
static const char __pyx_k_vector[] = "vector";
static const char __pyx_k_vertex[] = "vertex";
static const char __pyx_k_window[] = "window";
static const char __pyx_k_wrap_r[] = "wrap_r";
static const char __pyx_k_wrap_s[] = "wrap_s";
static const char __pyx_k_wrap_t[] = "wrap_t";
static const char __pyx_k_Compute[] = "Compute";
static const char __pyx_k_Program[] = "Program";
static const char __pyx_k_as_mat4[] = "as_mat4";
static const char __pyx_k_backend[] = "backend";
static const char __pyx_k_but_got[] = " but got ";
static const char __pyx_k_compute[] = "compute";
static const char __pyx_k_display[] = "display";
static const char __pyx_k_enabled[] = "enabled";
static const char __pyx_k_factors[] = "factors";
static const char __pyx_k_indices[] = "indices";
static const char __pyx_k_normals[] = "normals";
static const char __pyx_k_npoints[] = "npoints";
static const char __pyx_k_offsets[] = "offsets";
static const char __pyx_k_padding[] = "padding";
static const char __pyx_k_program[] = "program";
static const char __pyx_k_samples[] = "samples";
static const char __pyx_k_scissor[] = "scissor";
static const char __pyx_k_set_eye[] = "set_eye";
static const char __pyx_k_Geometry[] = "Geometry";
static const char __pyx_k_Identity[] = "Identity";
static const char __pyx_k_LOG_INFO[] = "LOG_INFO";
static const char __pyx_k_Triangle[] = "Triangle";
static const char __pyx_k_bg_color[] = "bg_color";
static const char __pyx_k_blend_op[] = "blend_op";
static const char __pyx_k_children[] = "children";
static const char __pyx_k_clipping[] = "clipping";
static const char __pyx_k_data_src[] = "data_src";
static const char __pyx_k_features[] = "features";
static const char __pyx_k_fg_color[] = "fg_color";
static const char __pyx_k_filename[] = "filename";
static const char __pyx_k_fov_anim[] = "fov_anim";
static const char __pyx_k_fragment[] = "fragment";
static const char __pyx_k_geometry[] = "geometry";
static const char __pyx_k_getstate[] = "__getstate__";
static const char __pyx_k_itemsize[] = "itemsize";
static const char __pyx_k_platform[] = "platform";
static const char __pyx_k_pynodegl[] = "pynodegl";
static const char __pyx_k_set_anim[] = "set_anim";
static const char __pyx_k_set_axis[] = "set_axis";
static const char __pyx_k_set_data[] = "set_data";
static const char __pyx_k_set_quat[] = "set_quat";
static const char __pyx_k_set_size[] = "set_size";
static const char __pyx_k_setstate[] = "__setstate__";
static const char __pyx_k_textures[] = "textures";
static const char __pyx_k_timebase[] = "timebase";
static const char __pyx_k_topology[] = "topology";
static const char __pyx_k_uniforms[] = "uniforms";
static const char __pyx_k_uv_edge0[] = "uv_edge0";
static const char __pyx_k_uv_edge1[] = "uv_edge1";
static const char __pyx_k_uv_edge2[] = "uv_edge2";
static const char __pyx_k_uv_width[] = "uv_width";
static const char __pyx_k_uvcoords[] = "uvcoords";
static const char __pyx_k_vertices[] = "vertices";
static const char __pyx_k_viewport[] = "viewport";
static const char __pyx_k_BufferInt[] = "BufferInt";
static const char __pyx_k_LOG_DEBUG[] = "LOG_DEBUG";
static const char __pyx_k_LOG_ERROR[] = "LOG_ERROR";
static const char __pyx_k_Texture2D[] = "Texture2D";
static const char __pyx_k_Texture3D[] = "Texture3D";
static const char __pyx_k_Transform[] = "Transform";
static const char __pyx_k_Translate[] = "Translate";
static const char __pyx_k_TypeError[] = "TypeError";
static const char __pyx_k_audio_tex[] = "audio_tex";
static const char __pyx_k_box_width[] = "box_width";
static const char __pyx_k_cull_face[] = "cull_face";
static const char __pyx_k_enumerate[] = "enumerate";
static const char __pyx_k_keyframes[] = "keyframes";
static const char __pyx_k_offscreen[] = "offscreen";
static const char __pyx_k_reduce_ex[] = "__reduce_ex__";
static const char __pyx_k_set_angle[] = "set_angle";
static const char __pyx_k_set_blend[] = "set_blend";
static const char __pyx_k_set_block[] = "set_block";
static const char __pyx_k_set_count[] = "set_count";
static const char __pyx_k_set_depth[] = "set_depth";
static const char __pyx_k_set_label[] = "set_label";
static const char __pyx_k_set_value[] = "set_value";
static const char __pyx_k_set_vflip[] = "set_vflip";
static const char __pyx_k_set_width[] = "set_width";
static const char __pyx_k_time_anim[] = "time_anim";
static const char __pyx_k_transform[] = "transform";
static const char __pyx_k_uv_corner[] = "uv_corner";
static const char __pyx_k_uv_height[] = "uv_height";
static const char __pyx_k_BufferByte[] = "BufferByte";
static const char __pyx_k_BufferMat4[] = "BufferMat4";
static const char __pyx_k_BufferUInt[] = "BufferUInt";
static const char __pyx_k_BufferVec2[] = "BufferVec2";
static const char __pyx_k_BufferVec3[] = "BufferVec3";
static const char __pyx_k_BufferVec4[] = "BufferVec4";
static const char __pyx_k_RotateQuat[] = "RotateQuat";
static const char __pyx_k_UniformInt[] = "UniformInt";
static const char __pyx_k_UserSwitch[] = "UserSwitch";
static const char __pyx_k_add_ranges[] = "add_ranges";
static const char __pyx_k_attributes[] = "attributes";
static const char __pyx_k_blend_op_a[] = "blend_op_a";
static const char __pyx_k_box_corner[] = "box_corner";
static const char __pyx_k_box_height[] = "box_height";
static const char __pyx_k_depth_func[] = "depth_func";
static const char __pyx_k_depth_test[] = "depth_test";
static const char __pyx_k_field_name[] = "field_name";
static const char __pyx_k_font_scale[] = "font_scale";
static const char __pyx_k_mag_filter[] = "mag_filter";
static const char __pyx_k_max_pixels[] = "max_pixels";
static const char __pyx_k_min_filter[] = "min_filter";
static const char __pyx_k_nb_group_x[] = "nb_group_x";
static const char __pyx_k_nb_group_y[] = "nb_group_y";
static const char __pyx_k_nb_group_z[] = "nb_group_z";
static const char __pyx_k_set_access[] = "set_access";
static const char __pyx_k_set_anchor[] = "set_anchor";
static const char __pyx_k_set_center[] = "set_center";
static const char __pyx_k_set_corner[] = "set_corner";
static const char __pyx_k_set_easing[] = "set_easing";
static const char __pyx_k_set_format[] = "set_format";
static const char __pyx_k_set_halign[] = "set_halign";
static const char __pyx_k_set_height[] = "set_height";
static const char __pyx_k_set_layout[] = "set_layout";
static const char __pyx_k_set_matrix[] = "set_matrix";
static const char __pyx_k_set_radius[] = "set_radius";
static const char __pyx_k_set_valign[] = "set_valign";
static const char __pyx_k_set_vector[] = "set_vector";
static const char __pyx_k_set_vertex[] = "set_vertex";
static const char __pyx_k_set_wrap_r[] = "set_wrap_r";
static const char __pyx_k_set_wrap_s[] = "set_wrap_s";
static const char __pyx_k_set_wrap_t[] = "set_wrap_t";
static const char __pyx_k_start_time[] = "start_time";
static const char __pyx_k_stream_idx[] = "stream_idx";
static const char __pyx_k_timestamps[] = "timestamps";
static const char __pyx_k_BufferBVec2[] = "BufferBVec2";
static const char __pyx_k_BufferBVec3[] = "BufferBVec3";
static const char __pyx_k_BufferBVec4[] = "BufferBVec4";
static const char __pyx_k_BufferFloat[] = "BufferFloat";
static const char __pyx_k_BufferIVec2[] = "BufferIVec2";
static const char __pyx_k_BufferIVec3[] = "BufferIVec3";
static const char __pyx_k_BufferIVec4[] = "BufferIVec4";
static const char __pyx_k_BufferInt64[] = "BufferInt64";
static const char __pyx_k_BufferSVec2[] = "BufferSVec2";
static const char __pyx_k_BufferSVec3[] = "BufferSVec3";
static const char __pyx_k_BufferSVec4[] = "BufferSVec4";
static const char __pyx_k_BufferShort[] = "BufferShort";
static const char __pyx_k_BufferUByte[] = "BufferUByte";
static const char __pyx_k_LOG_VERBOSE[] = "LOG_VERBOSE";
static const char __pyx_k_LOG_WARNING[] = "LOG_WARNING";
static const char __pyx_k_MemoryError[] = "MemoryError";
static const char __pyx_k_StreamedInt[] = "StreamedInt";
static const char __pyx_k_TextureCube[] = "TextureCube";
static const char __pyx_k_UniformMat4[] = "UniformMat4";
static const char __pyx_k_UniformQuat[] = "UniformQuat";
static const char __pyx_k_UniformVec2[] = "UniformVec2";
static const char __pyx_k_UniformVec3[] = "UniformVec3";
static const char __pyx_k_UniformVec4[] = "UniformVec4";
static const char __pyx_k_block_field[] = "block_field";
static const char __pyx_k_buffer_info[] = "buffer_info";
static const char __pyx_k_clear_color[] = "clear_color";
static const char __pyx_k_easing_args[] = "easing_args";
static const char __pyx_k_init_params[] = "_init_params";
static const char __pyx_k_max_nb_sink[] = "max_nb_sink";
static const char __pyx_k_perspective[] = "perspective";
static const char __pyx_k_render_time[] = "render_time";
static const char __pyx_k_set_as_mat4[] = "set_as_mat4";
static const char __pyx_k_set_enabled[] = "set_enabled";
static const char __pyx_k_set_factors[] = "set_factors";
static const char __pyx_k_set_indices[] = "set_indices";
static const char __pyx_k_set_normals[] = "set_normals";
static const char __pyx_k_set_npoints[] = "set_npoints";
static const char __pyx_k_set_padding[] = "set_padding";
static const char __pyx_k_set_program[] = "set_program";
static const char __pyx_k_set_samples[] = "set_samples";
static const char __pyx_k_set_scissor[] = "set_scissor";
static const char __pyx_k_stencil_ref[] = "stencil_ref";
static const char __pyx_k_update_dict[] = "_update_dict";
static const char __pyx_k_AnimatedQuat[] = "AnimatedQuat";
static const char __pyx_k_AnimatedTime[] = "AnimatedTime";
static const char __pyx_k_AnimatedVec2[] = "AnimatedVec2";
static const char __pyx_k_AnimatedVec3[] = "AnimatedVec3";
static const char __pyx_k_AnimatedVec4[] = "AnimatedVec4";
static const char __pyx_k_BACKEND_AUTO[] = "BACKEND_AUTO";
static const char __pyx_k_BACKEND_NGFX[] = "BACKEND_NGFX";
static const char __pyx_k_BufferUBVec2[] = "BufferUBVec2";
static const char __pyx_k_BufferUBVec3[] = "BufferUBVec3";
static const char __pyx_k_BufferUBVec4[] = "BufferUBVec4";
static const char __pyx_k_BufferUIVec2[] = "BufferUIVec2";
static const char __pyx_k_BufferUIVec3[] = "BufferUIVec3";
static const char __pyx_k_BufferUIVec4[] = "BufferUIVec4";
static const char __pyx_k_BufferUSVec2[] = "BufferUSVec2";
static const char __pyx_k_BufferUSVec3[] = "BufferUSVec3";
static const char __pyx_k_BufferUSVec4[] = "BufferUSVec4";
static const char __pyx_k_BufferUShort[] = "BufferUShort";
static const char __pyx_k_PLATFORM_IOS[] = "PLATFORM_IOS";
static const char __pyx_k_StreamedMat4[] = "StreamedMat4";
static const char __pyx_k_StreamedVec2[] = "StreamedVec2";
static const char __pyx_k_StreamedVec3[] = "StreamedVec3";
static const char __pyx_k_StreamedVec4[] = "StreamedVec4";
static const char __pyx_k_UniformFloat[] = "UniformFloat";
static const char __pyx_k_add_children[] = "add_children";
static const char __pyx_k_add_nodelist[] = "_add_nodelist";
static const char __pyx_k_aspect_ratio[] = "aspect_ratio";
static const char __pyx_k_default_frag[] = "default.frag";
static const char __pyx_k_default_vert[] = "default.vert";
static const char __pyx_k_easing_solve[] = "easing_solve";
static const char __pyx_k_nb_instances[] = "nb_instances";
static const char __pyx_k_orthographic[] = "orthographic";
static const char __pyx_k_pynodegl_pyx[] = "pynodegl.pyx";
static const char __pyx_k_refresh_rate[] = "refresh_rate";
static const char __pyx_k_scissor_test[] = "scissor_test";
static const char __pyx_k_set_bg_color[] = "set_bg_color";
static const char __pyx_k_set_blend_op[] = "set_blend_op";
static const char __pyx_k_set_clipping[] = "set_clipping";
static const char __pyx_k_set_data_src[] = "set_data_src";
static const char __pyx_k_set_features[] = "set_features";
static const char __pyx_k_set_fg_color[] = "set_fg_color";
static const char __pyx_k_set_filename[] = "set_filename";
static const char __pyx_k_set_fov_anim[] = "set_fov_anim";
static const char __pyx_k_set_fragment[] = "set_fragment";
static const char __pyx_k_set_timebase[] = "set_timebase";
static const char __pyx_k_set_topology[] = "set_topology";
static const char __pyx_k_set_uv_edge0[] = "set_uv_edge0";
static const char __pyx_k_set_uv_edge1[] = "set_uv_edge1";
static const char __pyx_k_set_uv_edge2[] = "set_uv_edge2";
static const char __pyx_k_set_uv_width[] = "set_uv_width";
static const char __pyx_k_set_uvcoords[] = "set_uvcoords";
static const char __pyx_k_stencil_fail[] = "stencil_fail";
static const char __pyx_k_stencil_func[] = "stencil_func";
static const char __pyx_k_stencil_test[] = "stencil_test";
static const char __pyx_k_up_transform[] = "up_transform";
static const char __pyx_k_AnimatedFloat[] = "AnimatedFloat";
static const char __pyx_k_GraphicConfig[] = "GraphicConfig";
static const char __pyx_k_PLATFORM_AUTO[] = "PLATFORM_AUTO";
static const char __pyx_k_PLATFORM_XLIB[] = "PLATFORM_XLIB";
static const char __pyx_k_StreamedFloat[] = "StreamedFloat";
static const char __pyx_k_add_keyframes[] = "add_keyframes";
static const char __pyx_k_depth_texture[] = "depth_texture";
static const char __pyx_k_eye_transform[] = "eye_transform";
static const char __pyx_k_max_idle_time[] = "max_idle_time";
static const char __pyx_k_max_nb_frames[] = "max_nb_frames";
static const char __pyx_k_mipmap_filter[] = "mipmap_filter";
static const char __pyx_k_prefetch_time[] = "prefetch_time";
static const char __pyx_k_reduce_cython[] = "__reduce_cython__";
static const char __pyx_k_set_audio_tex[] = "set_audio_tex";
static const char __pyx_k_set_box_width[] = "set_box_width";
static const char __pyx_k_set_cull_face[] = "set_cull_face";
static const char __pyx_k_set_time_anim[] = "set_time_anim";
static const char __pyx_k_set_transform[] = "set_transform";
static const char __pyx_k_set_uv_corner[] = "set_uv_corner";
static const char __pyx_k_set_uv_height[] = "set_uv_height";
static const char __pyx_k_swap_interval[] = "swap_interval";
static const char __pyx_k_update_blocks[] = "update_blocks";
static const char __pyx_k_update_fields[] = "update_fields";
static const char __pyx_k_AnimatedBuffer[] = "_AnimatedBuffer";
static const char __pyx_k_BACKEND_OPENGL[] = "BACKEND_OPENGL";
static const char __pyx_k_ComputeProgram[] = "ComputeProgram";
static const char __pyx_k_PLATFORM_MACOS[] = "PLATFORM_MACOS";
static const char __pyx_k_add_doublelist[] = "_add_doublelist";
static const char __pyx_k_capture_buffer[] = "capture_buffer";
static const char __pyx_k_color_textures[] = "color_textures";
static const char __pyx_k_cull_face_mode[] = "cull_face_mode";
static const char __pyx_k_max_nb_packets[] = "max_nb_packets";
static const char __pyx_k_measure_window[] = "measure_window";
static const char __pyx_k_set_blend_op_a[] = "set_blend_op_a";
static const char __pyx_k_set_box_corner[] = "set_box_corner";
static const char __pyx_k_set_box_height[] = "set_box_height";
static const char __pyx_k_set_depth_func[] = "set_depth_func";
static const char __pyx_k_set_depth_test[] = "set_depth_test";
static const char __pyx_k_set_font_scale[] = "set_font_scale";
static const char __pyx_k_set_mag_filter[] = "set_mag_filter";
static const char __pyx_k_set_max_pixels[] = "set_max_pixels";
static const char __pyx_k_set_min_filter[] = "set_min_filter";
static const char __pyx_k_set_stream_idx[] = "set_stream_idx";
static const char __pyx_k_Error_solving_s[] = "Error solving %s";
static const char __pyx_k_RenderToTexture[] = "RenderToTexture";
static const char __pyx_k_TimeRangeFilter[] = "TimeRangeFilter";
static const char __pyx_k_add_easing_args[] = "add_easing_args";
static const char __pyx_k_easing_evaluate[] = "easing_evaluate";
static const char __pyx_k_export_filename[] = "export_filename";
static const char __pyx_k_set_block_field[] = "set_block_field";
static const char __pyx_k_set_clear_color[] = "set_clear_color";
static const char __pyx_k_set_max_nb_sink[] = "set_max_nb_sink";
static const char __pyx_k_set_perspective[] = "set_perspective";
static const char __pyx_k_set_stencil_ref[] = "set_stencil_ref";
static const char __pyx_k_set_surface_pts[] = "set_surface_pts";
static const char __pyx_k_setstate_cython[] = "__setstate_cython__";
static const char __pyx_k_update_textures[] = "update_textures";
static const char __pyx_k_update_uniforms[] = "update_uniforms";
static const char __pyx_k_AnimKeyFrameQuat[] = "AnimKeyFrameQuat";
static const char __pyx_k_AnimKeyFrameVec2[] = "AnimKeyFrameVec2";
static const char __pyx_k_AnimKeyFrameVec3[] = "AnimKeyFrameVec3";
static const char __pyx_k_AnimKeyFrameVec4[] = "AnimKeyFrameVec4";
static const char __pyx_k_BACKEND_OPENGLES[] = "BACKEND_OPENGLES";
static const char __pyx_k_PLATFORM_ANDROID[] = "PLATFORM_ANDROID";
static const char __pyx_k_PLATFORM_WINDOWS[] = "PLATFORM_WINDOWS";
static const char __pyx_k_blend_dst_factor[] = "blend_dst_factor";
static const char __pyx_k_blend_src_factor[] = "blend_src_factor";
static const char __pyx_k_center_transform[] = "center_transform";
static const char __pyx_k_color_write_mask[] = "color_write_mask";
static const char __pyx_k_depth_write_mask[] = "depth_write_mask";
static const char __pyx_k_direct_rendering[] = "direct_rendering";
static const char __pyx_k_set_aspect_ratio[] = "set_aspect_ratio";
static const char __pyx_k_set_nb_instances[] = "set_nb_instances";
static const char __pyx_k_set_orthographic[] = "set_orthographic";
static const char __pyx_k_set_refresh_rate[] = "set_refresh_rate";
static const char __pyx_k_set_scissor_test[] = "set_scissor_test";
static const char __pyx_k_set_stencil_fail[] = "set_stencil_fail";
static const char __pyx_k_set_stencil_func[] = "set_stencil_func";
static const char __pyx_k_set_stencil_test[] = "set_stencil_test";
static const char __pyx_k_set_up_transform[] = "set_up_transform";
static const char __pyx_k_AnimKeyFrameFloat[] = "AnimKeyFrameFloat";
static const char __pyx_k_StreamedBufferInt[] = "StreamedBufferInt";
static const char __pyx_k_TimeRangeModeCont[] = "TimeRangeModeCont";
static const char __pyx_k_TimeRangeModeNoop[] = "TimeRangeModeNoop";
static const char __pyx_k_TimeRangeModeOnce[] = "TimeRangeModeOnce";
static const char __pyx_k_easing_end_offset[] = "easing_end_offset";
static const char __pyx_k_log_set_min_level[] = "log_set_min_level";
static const char __pyx_k_set_depth_texture[] = "set_depth_texture";
static const char __pyx_k_set_eye_transform[] = "set_eye_transform";
static const char __pyx_k_set_max_idle_time[] = "set_max_idle_time";
static const char __pyx_k_set_max_nb_frames[] = "set_max_nb_frames";
static const char __pyx_k_set_mipmap_filter[] = "set_mipmap_filter";
static const char __pyx_k_set_prefetch_time[] = "set_prefetch_time";
static const char __pyx_k_stencil_read_mask[] = "stencil_read_mask";
static const char __pyx_k_update_attributes[] = "update_attributes";
static const char __pyx_k_AnimKeyFrameBuffer[] = "AnimKeyFrameBuffer";
static const char __pyx_k_AnimatedBufferVec2[] = "AnimatedBufferVec2";
static const char __pyx_k_AnimatedBufferVec3[] = "AnimatedBufferVec3";
static const char __pyx_k_AnimatedBufferVec4[] = "AnimatedBufferVec4";
static const char __pyx_k_Error_evaluating_s[] = "Error evaluating %s";
static const char __pyx_k_StreamedBufferMat4[] = "StreamedBufferMat4";
static const char __pyx_k_StreamedBufferVec2[] = "StreamedBufferVec2";
static const char __pyx_k_StreamedBufferVec3[] = "StreamedBufferVec3";
static const char __pyx_k_StreamedBufferVec4[] = "StreamedBufferVec4";
static const char __pyx_k_add_color_textures[] = "add_color_textures";
static const char __pyx_k_blend_dst_factor_a[] = "blend_dst_factor_a";
static const char __pyx_k_blend_src_factor_a[] = "blend_src_factor_a";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_set_cull_face_mode[] = "set_cull_face_mode";
static const char __pyx_k_set_max_nb_packets[] = "set_max_nb_packets";
static const char __pyx_k_set_measure_window[] = "set_measure_window";
static const char __pyx_k_stencil_depth_fail[] = "stencil_depth_fail";
static const char __pyx_k_stencil_depth_pass[] = "stencil_depth_pass";
static const char __pyx_k_stencil_write_mask[] = "stencil_write_mask";
static const char __pyx_k_sxplayer_min_level[] = "sxplayer_min_level";
static const char __pyx_k_AnimatedBufferFloat[] = "AnimatedBufferFloat";
static const char __pyx_k_StreamedBufferFloat[] = "StreamedBufferFloat";
static const char __pyx_k_easing_start_offset[] = "easing_start_offset";
static const char __pyx_k_instance_attributes[] = "instance_attributes";
static const char __pyx_k_set_export_filename[] = "set_export_filename";
static const char __pyx_k_set_blend_dst_factor[] = "set_blend_dst_factor";
static const char __pyx_k_set_blend_src_factor[] = "set_blend_src_factor";
static const char __pyx_k_set_center_transform[] = "set_center_transform";
static const char __pyx_k_set_color_write_mask[] = "set_color_write_mask";
static const char __pyx_k_set_depth_write_mask[] = "set_depth_write_mask";
static const char __pyx_k_set_direct_rendering[] = "set_direct_rendering";
static const char __pyx_k_set_easing_end_offset[] = "set_easing_end_offset";
static const char __pyx_k_set_stencil_read_mask[] = "set_stencil_read_mask";
static const char __pyx_k_s_must_be_of_type_dict[] = "%s must be of type dict";
static const char __pyx_k_set_blend_dst_factor_a[] = "set_blend_dst_factor_a";
static const char __pyx_k_set_blend_src_factor_a[] = "set_blend_src_factor_a";
static const char __pyx_k_set_stencil_depth_fail[] = "set_stencil_depth_fail";
static const char __pyx_k_set_stencil_depth_pass[] = "set_stencil_depth_pass";
static const char __pyx_k_set_stencil_write_mask[] = "set_stencil_write_mask";
static const char __pyx_k_set_sxplayer_min_level[] = "set_sxplayer_min_level";
static const char __pyx_k_set_easing_start_offset[] = "set_easing_start_offset";
static const char __pyx_k_update_instance_attributes[] = "update_instance_attributes";
static const char __pyx_k_anchor_parameter_is_expected_to[] = "anchor parameter is expected to be vec";
static const char __pyx_k_box_width_parameter_is_expected[] = "box_width parameter is expected to be vec";
static const char __pyx_k_center_parameter_is_expected_to[] = "center parameter is expected to be vec";
static const char __pyx_k_corner_parameter_is_expected_to[] = "corner parameter is expected to be vec";
static const char __pyx_k_eye_parameter_is_expected_to_be[] = "eye parameter is expected to be vec";
static const char __pyx_k_height_parameter_is_expected_to[] = "height parameter is expected to be vec";
static const char __pyx_k_matrix_parameter_is_expected_to[] = "matrix parameter is expected to be vec";
static const char __pyx_k_self_ctx_cannot_be_converted_to[] = "self.ctx cannot be converted to a Python object for pickling";
static const char __pyx_k_update__s_takes_a_dictionary_of[] = "update_%s() takes a dictionary of <string, Node>";
static const char __pyx_k_uv_corner_parameter_is_expected[] = "uv_corner parameter is expected to be vec";
static const char __pyx_k_uv_height_parameter_is_expected[] = "uv_height parameter is expected to be vec";
static const char __pyx_k_vector_parameter_is_expected_to[] = "vector parameter is expected to be vec";
static const char __pyx_k_Easings_do_not_support_more_than[] = "Easings do not support more than 2 arguments";
static const char __pyx_k_add__s_takes_elements_as_positio[] = "add_%s() takes elements as positional arguments, not list";
static const char __pyx_k_axis_parameter_is_expected_to_be[] = "axis parameter is expected to be vec";
static const char __pyx_k_bg_color_parameter_is_expected_t[] = "bg_color parameter is expected to be vec";
static const char __pyx_k_box_corner_parameter_is_expected[] = "box_corner parameter is expected to be vec";
static const char __pyx_k_box_height_parameter_is_expected[] = "box_height parameter is expected to be vec";
static const char __pyx_k_clear_color_parameter_is_expecte[] = "clear_color parameter is expected to be vec";
static const char __pyx_k_clipping_parameter_is_expected_t[] = "clipping parameter is expected to be vec";
static const char __pyx_k_edge0_parameter_is_expected_to_b[] = "edge0 parameter is expected to be vec";
static const char __pyx_k_edge1_parameter_is_expected_to_b[] = "edge1 parameter is expected to be vec";
static const char __pyx_k_edge2_parameter_is_expected_to_b[] = "edge2 parameter is expected to be vec";
static const char __pyx_k_factors_parameter_is_expected_to[] = "factors parameter is expected to be vec";
static const char __pyx_k_fg_color_parameter_is_expected_t[] = "fg_color parameter is expected to be vec";
static const char __pyx_k_no_default___reduce___due_to_non[] = "no default __reduce__ due to non-trivial __cinit__";
static const char __pyx_k_orthographic_parameter_is_expect[] = "orthographic parameter is expected to be vec";
static const char __pyx_k_perspective_parameter_is_expecte[] = "perspective parameter is expected to be vec";
static const char __pyx_k_quat_parameter_is_expected_to_be[] = "quat parameter is expected to be vec";
static const char __pyx_k_scissor_parameter_is_expected_to[] = "scissor parameter is expected to be vec";
static const char __pyx_k_up_parameter_is_expected_to_be_v[] = "up parameter is expected to be vec";
static const char __pyx_k_uv_edge0_parameter_is_expected_t[] = "uv_edge0 parameter is expected to be vec";
static const char __pyx_k_uv_edge1_parameter_is_expected_t[] = "uv_edge1 parameter is expected to be vec";
static const char __pyx_k_uv_edge2_parameter_is_expected_t[] = "uv_edge2 parameter is expected to be vec";
static const char __pyx_k_uv_width_parameter_is_expected_t[] = "uv_width parameter is expected to be vec";
static const char __pyx_k_value_parameter_is_expected_to_b[] = "value parameter is expected to be vec";
static const char __pyx_k_width_parameter_is_expected_to_b[] = "width parameter is expected to be vec";
static PyObject *__pyx_kp_u_;
static PyObject *__pyx_n_s_AnimKeyFrameBuffer;
static PyObject *__pyx_n_s_AnimKeyFrameFloat;
static PyObject *__pyx_n_s_AnimKeyFrameQuat;
static PyObject *__pyx_n_s_AnimKeyFrameVec2;
static PyObject *__pyx_n_s_AnimKeyFrameVec3;
static PyObject *__pyx_n_s_AnimKeyFrameVec4;
static PyObject *__pyx_n_s_AnimatedBuffer;
static PyObject *__pyx_n_s_AnimatedBufferFloat;
static PyObject *__pyx_n_s_AnimatedBufferVec2;
static PyObject *__pyx_n_s_AnimatedBufferVec3;
static PyObject *__pyx_n_s_AnimatedBufferVec4;
static PyObject *__pyx_n_s_AnimatedFloat;
static PyObject *__pyx_n_s_AnimatedQuat;
static PyObject *__pyx_n_s_AnimatedTime;
static PyObject *__pyx_n_s_AnimatedVec2;
static PyObject *__pyx_n_s_AnimatedVec3;
static PyObject *__pyx_n_s_AnimatedVec4;
static PyObject *__pyx_n_s_BACKEND_AUTO;
static PyObject *__pyx_n_s_BACKEND_NGFX;
static PyObject *__pyx_n_s_BACKEND_OPENGL;
static PyObject *__pyx_n_s_BACKEND_OPENGLES;
static PyObject *__pyx_n_s_Block;
static PyObject *__pyx_n_s_Buffer;
static PyObject *__pyx_n_s_BufferBVec2;
static PyObject *__pyx_n_s_BufferBVec3;
static PyObject *__pyx_n_s_BufferBVec4;
static PyObject *__pyx_n_s_BufferByte;
static PyObject *__pyx_n_s_BufferFloat;
static PyObject *__pyx_n_s_BufferIVec2;
static PyObject *__pyx_n_s_BufferIVec3;
static PyObject *__pyx_n_s_BufferIVec4;
static PyObject *__pyx_n_s_BufferInt;
static PyObject *__pyx_n_s_BufferInt64;
static PyObject *__pyx_n_s_BufferMat4;
static PyObject *__pyx_n_s_BufferSVec2;
static PyObject *__pyx_n_s_BufferSVec3;
static PyObject *__pyx_n_s_BufferSVec4;
static PyObject *__pyx_n_s_BufferShort;
static PyObject *__pyx_n_s_BufferUBVec2;
static PyObject *__pyx_n_s_BufferUBVec3;
static PyObject *__pyx_n_s_BufferUBVec4;
static PyObject *__pyx_n_s_BufferUByte;
static PyObject *__pyx_n_s_BufferUIVec2;
static PyObject *__pyx_n_s_BufferUIVec3;
static PyObject *__pyx_n_s_BufferUIVec4;
static PyObject *__pyx_n_s_BufferUInt;
static PyObject *__pyx_n_s_BufferUSVec2;
static PyObject *__pyx_n_s_BufferUSVec3;
static PyObject *__pyx_n_s_BufferUSVec4;
static PyObject *__pyx_n_s_BufferUShort;
static PyObject *__pyx_n_s_BufferVec2;
static PyObject *__pyx_n_s_BufferVec3;
static PyObject *__pyx_n_s_BufferVec4;
static PyObject *__pyx_n_s_Camera;
static PyObject *__pyx_n_s_Circle;
static PyObject *__pyx_n_s_Compute;
static PyObject *__pyx_n_s_ComputeProgram;
static PyObject *__pyx_kp_u_Easings_do_not_support_more_than;
static PyObject *__pyx_kp_u_Error_evaluating_s;
static PyObject *__pyx_kp_u_Error_solving_s;
static PyObject *__pyx_n_s_Geometry;
static PyObject *__pyx_n_s_GraphicConfig;
static PyObject *__pyx_n_s_Group;
static PyObject *__pyx_n_s_HUD;
static PyObject *__pyx_n_s_Identity;
static PyObject *__pyx_n_s_LOG_DEBUG;
static PyObject *__pyx_n_s_LOG_ERROR;
static PyObject *__pyx_n_s_LOG_INFO;
static PyObject *__pyx_n_s_LOG_VERBOSE;
static PyObject *__pyx_n_s_LOG_WARNING;
static PyObject *__pyx_n_s_Media;
static PyObject *__pyx_n_s_MemoryError;
static PyObject *__pyx_n_s_Node;
static PyObject *__pyx_n_s_PLATFORM_ANDROID;
static PyObject *__pyx_n_s_PLATFORM_AUTO;
static PyObject *__pyx_n_s_PLATFORM_IOS;
static PyObject *__pyx_n_s_PLATFORM_MACOS;
static PyObject *__pyx_n_s_PLATFORM_WINDOWS;
static PyObject *__pyx_n_s_PLATFORM_XLIB;
static PyObject *__pyx_n_s_Program;
static PyObject *__pyx_n_s_Quad;
static PyObject *__pyx_n_s_Render;
static PyObject *__pyx_n_s_RenderToTexture;
static PyObject *__pyx_n_s_Rotate;
static PyObject *__pyx_n_s_RotateQuat;
static PyObject *__pyx_n_s_Scale;
static PyObject *__pyx_n_s_StreamedBufferFloat;
static PyObject *__pyx_n_s_StreamedBufferInt;
static PyObject *__pyx_n_s_StreamedBufferMat4;
static PyObject *__pyx_n_s_StreamedBufferVec2;
static PyObject *__pyx_n_s_StreamedBufferVec3;
static PyObject *__pyx_n_s_StreamedBufferVec4;
static PyObject *__pyx_n_s_StreamedFloat;
static PyObject *__pyx_n_s_StreamedInt;
static PyObject *__pyx_n_s_StreamedMat4;
static PyObject *__pyx_n_s_StreamedVec2;
static PyObject *__pyx_n_s_StreamedVec3;
static PyObject *__pyx_n_s_StreamedVec4;
static PyObject *__pyx_n_s_Text;
static PyObject *__pyx_n_s_Texture2D;
static PyObject *__pyx_n_s_Texture3D;
static PyObject *__pyx_n_s_TextureCube;
static PyObject *__pyx_n_s_TimeRangeFilter;
static PyObject *__pyx_n_s_TimeRangeModeCont;
static PyObject *__pyx_n_s_TimeRangeModeNoop;
static PyObject *__pyx_n_s_TimeRangeModeOnce;
static PyObject *__pyx_n_s_Transform;
static PyObject *__pyx_n_s_Translate;
static PyObject *__pyx_n_s_Triangle;
static PyObject *__pyx_n_s_TypeError;
static PyObject *__pyx_n_s_UniformFloat;
static PyObject *__pyx_n_s_UniformInt;
static PyObject *__pyx_n_s_UniformMat4;
static PyObject *__pyx_n_s_UniformQuat;
static PyObject *__pyx_n_s_UniformVec2;
static PyObject *__pyx_n_s_UniformVec3;
static PyObject *__pyx_n_s_UniformVec4;
static PyObject *__pyx_n_s_UserSwitch;
static PyObject *__pyx_n_s_Viewer;
static PyObject *__pyx_n_s_access;
static PyObject *__pyx_kp_u_add__s_takes_elements_as_positio;
static PyObject *__pyx_n_s_add_children;
static PyObject *__pyx_n_s_add_color_textures;
static PyObject *__pyx_n_s_add_doublelist;
static PyObject *__pyx_n_s_add_easing_args;
static PyObject *__pyx_n_s_add_keyframes;
static PyObject *__pyx_n_s_add_nodelist;
static PyObject *__pyx_n_s_add_ranges;
static PyObject *__pyx_n_s_anchor;
static PyObject *__pyx_kp_u_anchor_parameter_is_expected_to;
static PyObject *__pyx_n_s_angle;
static PyObject *__pyx_n_s_anim;
static PyObject *__pyx_n_s_arg;
static PyObject *__pyx_n_s_args;
static PyObject *__pyx_n_s_as_mat4;
static PyObject *__pyx_n_s_aspect_ratio;
static PyObject *__pyx_n_s_attributes;
static PyObject *__pyx_n_u_attributes;
static PyObject *__pyx_n_s_audio_tex;
static PyObject *__pyx_n_s_axis;
static PyObject *__pyx_kp_u_axis_parameter_is_expected_to_be;
static PyObject *__pyx_n_u_backend;
static PyObject *__pyx_n_s_bg_color;
static PyObject *__pyx_kp_u_bg_color_parameter_is_expected_t;
static PyObject *__pyx_n_s_blend;
static PyObject *__pyx_n_s_blend_dst_factor;
static PyObject *__pyx_n_s_blend_dst_factor_a;
static PyObject *__pyx_n_s_blend_op;
static PyObject *__pyx_n_s_blend_op_a;
static PyObject *__pyx_n_s_blend_src_factor;
static PyObject *__pyx_n_s_blend_src_factor_a;
static PyObject *__pyx_n_s_block;
static PyObject *__pyx_n_s_block_field;
static PyObject *__pyx_n_s_blocks;
static PyObject *__pyx_n_u_blocks;
static PyObject *__pyx_n_s_box_corner;
static PyObject *__pyx_kp_u_box_corner_parameter_is_expected;
static PyObject *__pyx_n_s_box_height;
static PyObject *__pyx_kp_u_box_height_parameter_is_expected;
static PyObject *__pyx_n_s_box_width;
static PyObject *__pyx_kp_u_box_width_parameter_is_expected;
static PyObject *__pyx_n_s_buffer;
static PyObject *__pyx_n_s_buffer_info;
static PyObject *__pyx_kp_u_but_got;
static PyObject *__pyx_n_u_capture_buffer;
static PyObject *__pyx_n_s_center;
static PyObject *__pyx_kp_u_center_parameter_is_expected_to;
static PyObject *__pyx_n_s_center_transform;
static PyObject *__pyx_n_s_child;
static PyObject *__pyx_n_s_children;
static PyObject *__pyx_n_u_children;
static PyObject *__pyx_n_s_clear_color;
static PyObject *__pyx_n_u_clear_color;
static PyObject *__pyx_kp_u_clear_color_parameter_is_expecte;
static PyObject *__pyx_n_s_cline_in_traceback;
static PyObject *__pyx_n_s_clipping;
static PyObject *__pyx_kp_u_clipping_parameter_is_expected_t;
static PyObject *__pyx_n_s_color_textures;
static PyObject *__pyx_n_u_color_textures;
static PyObject *__pyx_n_s_color_write_mask;
static PyObject *__pyx_n_s_compute;
static PyObject *__pyx_n_s_corner;
static PyObject *__pyx_kp_u_corner_parameter_is_expected_to;
static PyObject *__pyx_n_s_count;
static PyObject *__pyx_n_s_cull_face;
static PyObject *__pyx_n_s_cull_face_mode;
static PyObject *__pyx_n_u_d;
static PyObject *__pyx_n_s_data;
static PyObject *__pyx_n_s_data_src;
static PyObject *__pyx_kp_u_default_frag;
static PyObject *__pyx_kp_u_default_vert;
static PyObject *__pyx_n_s_depth;
static PyObject *__pyx_n_s_depth_func;
static PyObject *__pyx_n_s_depth_test;
static PyObject *__pyx_n_s_depth_texture;
static PyObject *__pyx_n_s_depth_write_mask;
static PyObject *__pyx_n_s_direct_rendering;
static PyObject *__pyx_n_u_display;
static PyObject *__pyx_n_s_easing;
static PyObject *__pyx_n_s_easing_args;
static PyObject *__pyx_n_u_easing_args;
static PyObject *__pyx_n_s_easing_end_offset;
static PyObject *__pyx_n_s_easing_evaluate;
static PyObject *__pyx_n_s_easing_solve;
static PyObject *__pyx_n_s_easing_start_offset;
static PyObject *__pyx_n_s_edge0;
static PyObject *__pyx_kp_u_edge0_parameter_is_expected_to_b;
static PyObject *__pyx_n_s_edge1;
static PyObject *__pyx_kp_u_edge1_parameter_is_expected_to_b;
static PyObject *__pyx_n_s_edge2;
static PyObject *__pyx_kp_u_edge2_parameter_is_expected_to_b;
static PyObject *__pyx_n_s_enabled;
static PyObject *__pyx_n_s_enumerate;
static PyObject *__pyx_n_s_export_filename;
static PyObject *__pyx_n_s_eye;
static PyObject *__pyx_kp_u_eye_parameter_is_expected_to_be;
static PyObject *__pyx_n_s_eye_transform;
static PyObject *__pyx_n_s_factors;
static PyObject *__pyx_kp_u_factors_parameter_is_expected_to;
static PyObject *__pyx_n_s_features;
static PyObject *__pyx_n_s_fg_color;
static PyObject *__pyx_kp_u_fg_color_parameter_is_expected_t;
static PyObject *__pyx_n_s_field_name;
static PyObject *__pyx_n_s_fields;
static PyObject *__pyx_n_u_fields;
static PyObject *__pyx_n_s_filename;
static PyObject *__pyx_n_s_font_scale;
static PyObject *__pyx_n_s_format;
static PyObject *__pyx_n_s_fov_anim;
static PyObject *__pyx_n_s_fragment;
static PyObject *__pyx_n_s_geometry;
static PyObject *__pyx_n_s_get;
static PyObject *__pyx_n_s_getstate;
static PyObject *__pyx_n_s_halign;
static PyObject *__pyx_n_u_handle;
static PyObject *__pyx_n_s_height;
static PyObject *__pyx_n_u_height;
static PyObject *__pyx_kp_u_height_parameter_is_expected_to;
static PyObject *__pyx_n_s_indices;
static PyObject *__pyx_n_s_init_params;
static PyObject *__pyx_n_s_instance_attributes;
static PyObject *__pyx_n_u_instance_attributes;
static PyObject *__pyx_n_s_items;
static PyObject *__pyx_n_s_itemsize;
static PyObject *__pyx_n_u_iter;
static PyObject *__pyx_n_s_keyframes;
static PyObject *__pyx_n_u_keyframes;
static PyObject *__pyx_n_s_label;
static PyObject *__pyx_n_s_layout;
static PyObject *__pyx_n_s_level;
static PyObject *__pyx_n_s_log_set_min_level;
static PyObject *__pyx_n_s_mag_filter;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_matrix;
static PyObject *__pyx_kp_u_matrix_parameter_is_expected_to;
static PyObject *__pyx_n_s_max_idle_time;
static PyObject *__pyx_n_s_max_nb_frames;
static PyObject *__pyx_n_s_max_nb_packets;
static PyObject *__pyx_n_s_max_nb_sink;
static PyObject *__pyx_n_s_max_pixels;
static PyObject *__pyx_n_s_measure_window;
static PyObject *__pyx_n_s_min_filter;
static PyObject *__pyx_n_s_mipmap_filter;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_n_s_name_2;
static PyObject *__pyx_n_s_nb_group_x;
static PyObject *__pyx_n_s_nb_group_y;
static PyObject *__pyx_n_s_nb_group_z;
static PyObject *__pyx_n_s_nb_instances;
static PyObject *__pyx_kp_s_no_default___reduce___due_to_non;
static PyObject *__pyx_n_s_normals;
static PyObject *__pyx_n_s_npoints;
static PyObject *__pyx_n_u_offscreen;
static PyObject *__pyx_n_s_offsets;
static PyObject *__pyx_n_s_orthographic;
static PyObject *__pyx_kp_u_orthographic_parameter_is_expect;
static PyObject *__pyx_n_s_padding;
static PyObject *__pyx_n_s_perspective;
static PyObject *__pyx_kp_u_perspective_parameter_is_expecte;
static PyObject *__pyx_n_u_platform;
static PyObject *__pyx_n_s_prefetch_time;
static PyObject *__pyx_n_s_program;
static PyObject *__pyx_n_s_pynodegl;
static PyObject *__pyx_kp_s_pynodegl_pyx;
static PyObject *__pyx_n_s_quat;
static PyObject *__pyx_kp_u_quat_parameter_is_expected_to_be;
static PyObject *__pyx_n_s_radius;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_ranges;
static PyObject *__pyx_n_u_ranges;
static PyObject *__pyx_n_s_reduce;
static PyObject *__pyx_n_s_reduce_cython;
static PyObject *__pyx_n_s_reduce_ex;
static PyObject *__pyx_n_s_refresh_rate;
static PyObject *__pyx_n_s_render_time;
static PyObject *__pyx_kp_u_s_must_be_of_type_dict;
static PyObject *__pyx_n_s_samples;
static PyObject *__pyx_n_u_samples;
static PyObject *__pyx_n_s_scissor;
static PyObject *__pyx_kp_u_scissor_parameter_is_expected_to;
static PyObject *__pyx_n_s_scissor_test;
static PyObject *__pyx_kp_s_self_ctx_cannot_be_converted_to;
static PyObject *__pyx_n_s_set_access;
static PyObject *__pyx_n_s_set_anchor;
static PyObject *__pyx_n_s_set_angle;
static PyObject *__pyx_n_s_set_anim;
static PyObject *__pyx_n_s_set_as_mat4;
static PyObject *__pyx_n_s_set_aspect_ratio;
static PyObject *__pyx_n_s_set_audio_tex;
static PyObject *__pyx_n_s_set_axis;
static PyObject *__pyx_n_s_set_bg_color;
static PyObject *__pyx_n_s_set_blend;
static PyObject *__pyx_n_s_set_blend_dst_factor;
static PyObject *__pyx_n_s_set_blend_dst_factor_a;
static PyObject *__pyx_n_s_set_blend_op;
static PyObject *__pyx_n_s_set_blend_op_a;
static PyObject *__pyx_n_s_set_blend_src_factor;
static PyObject *__pyx_n_s_set_blend_src_factor_a;
static PyObject *__pyx_n_s_set_block;
static PyObject *__pyx_n_s_set_block_field;
static PyObject *__pyx_n_s_set_box_corner;
static PyObject *__pyx_n_s_set_box_height;
static PyObject *__pyx_n_s_set_box_width;
static PyObject *__pyx_n_s_set_center;
static PyObject *__pyx_n_s_set_center_transform;
static PyObject *__pyx_n_s_set_clear_color;
static PyObject *__pyx_n_s_set_clipping;
static PyObject *__pyx_n_s_set_color_write_mask;
static PyObject *__pyx_n_s_set_corner;
static PyObject *__pyx_n_s_set_count;
static PyObject *__pyx_n_s_set_cull_face;
static PyObject *__pyx_n_s_set_cull_face_mode;
static PyObject *__pyx_n_s_set_data;
static PyObject *__pyx_n_s_set_data_src;
static PyObject *__pyx_n_s_set_depth;
static PyObject *__pyx_n_s_set_depth_func;
static PyObject *__pyx_n_s_set_depth_test;
static PyObject *__pyx_n_s_set_depth_texture;
static PyObject *__pyx_n_s_set_depth_write_mask;
static PyObject *__pyx_n_s_set_direct_rendering;
static PyObject *__pyx_n_s_set_easing;
static PyObject *__pyx_n_s_set_easing_end_offset;
static PyObject *__pyx_n_s_set_easing_start_offset;
static PyObject *__pyx_n_s_set_enabled;
static PyObject *__pyx_n_s_set_export_filename;
static PyObject *__pyx_n_s_set_eye;
static PyObject *__pyx_n_s_set_eye_transform;
static PyObject *__pyx_n_s_set_factors;
static PyObject *__pyx_n_s_set_features;
static PyObject *__pyx_n_s_set_fg_color;
static PyObject *__pyx_n_s_set_filename;
static PyObject *__pyx_n_s_set_font_scale;
static PyObject *__pyx_n_s_set_format;
static PyObject *__pyx_n_s_set_fov_anim;
static PyObject *__pyx_n_s_set_fragment;
static PyObject *__pyx_n_s_set_halign;
static PyObject *__pyx_n_s_set_height;
static PyObject *__pyx_n_s_set_indices;
static PyObject *__pyx_n_s_set_label;
static PyObject *__pyx_n_s_set_layout;
static PyObject *__pyx_n_s_set_mag_filter;
static PyObject *__pyx_n_s_set_matrix;
static PyObject *__pyx_n_s_set_max_idle_time;
static PyObject *__pyx_n_s_set_max_nb_frames;
static PyObject *__pyx_n_s_set_max_nb_packets;
static PyObject *__pyx_n_s_set_max_nb_sink;
static PyObject *__pyx_n_s_set_max_pixels;
static PyObject *__pyx_n_s_set_measure_window;
static PyObject *__pyx_n_s_set_min_filter;
static PyObject *__pyx_n_s_set_mipmap_filter;
static PyObject *__pyx_n_s_set_nb_instances;
static PyObject *__pyx_n_s_set_normals;
static PyObject *__pyx_n_s_set_npoints;
static PyObject *__pyx_n_s_set_orthographic;
static PyObject *__pyx_n_s_set_padding;
static PyObject *__pyx_n_s_set_perspective;
static PyObject *__pyx_n_s_set_prefetch_time;
static PyObject *__pyx_n_s_set_program;
static PyObject *__pyx_n_s_set_quat;
static PyObject *__pyx_n_s_set_radius;
static PyObject *__pyx_n_s_set_refresh_rate;
static PyObject *__pyx_n_s_set_samples;
static PyObject *__pyx_n_s_set_scissor;
static PyObject *__pyx_n_s_set_scissor_test;
static PyObject *__pyx_n_s_set_size;
static PyObject *__pyx_n_s_set_stencil_depth_fail;
static PyObject *__pyx_n_s_set_stencil_depth_pass;
static PyObject *__pyx_n_s_set_stencil_fail;
static PyObject *__pyx_n_s_set_stencil_func;
static PyObject *__pyx_n_s_set_stencil_read_mask;
static PyObject *__pyx_n_s_set_stencil_ref;
static PyObject *__pyx_n_s_set_stencil_test;
static PyObject *__pyx_n_s_set_stencil_write_mask;
static PyObject *__pyx_n_s_set_stream_idx;
static PyObject *__pyx_n_u_set_surface_pts;
static PyObject *__pyx_n_s_set_sxplayer_min_level;
static PyObject *__pyx_n_s_set_time_anim;
static PyObject *__pyx_n_s_set_timebase;
static PyObject *__pyx_n_s_set_topology;
static PyObject *__pyx_n_s_set_transform;
static PyObject *__pyx_n_s_set_up;
static PyObject *__pyx_n_s_set_up_transform;
static PyObject *__pyx_n_s_set_uv_corner;
static PyObject *__pyx_n_s_set_uv_edge0;
static PyObject *__pyx_n_s_set_uv_edge1;
static PyObject *__pyx_n_s_set_uv_edge2;
static PyObject *__pyx_n_s_set_uv_height;
static PyObject *__pyx_n_s_set_uv_width;
static PyObject *__pyx_n_s_set_uvcoords;
static PyObject *__pyx_n_s_set_valign;
static PyObject *__pyx_n_s_set_value;
static PyObject *__pyx_n_s_set_vector;
static PyObject *__pyx_n_s_set_vertex;
static PyObject *__pyx_n_s_set_vflip;
static PyObject *__pyx_n_s_set_width;
static PyObject *__pyx_n_s_set_wrap_r;
static PyObject *__pyx_n_s_set_wrap_s;
static PyObject *__pyx_n_s_set_wrap_t;
static PyObject *__pyx_n_s_setstate;
static PyObject *__pyx_n_s_setstate_cython;
static PyObject *__pyx_n_s_size;
static PyObject *__pyx_n_s_start_time;
static PyObject *__pyx_n_s_stencil_depth_fail;
static PyObject *__pyx_n_s_stencil_depth_pass;
static PyObject *__pyx_n_s_stencil_fail;
static PyObject *__pyx_n_s_stencil_func;
static PyObject *__pyx_n_s_stencil_read_mask;
static PyObject *__pyx_n_s_stencil_ref;
static PyObject *__pyx_n_s_stencil_test;
static PyObject *__pyx_n_s_stencil_write_mask;
static PyObject *__pyx_n_s_stream_idx;
static PyObject *__pyx_n_u_swap_interval;
static PyObject *__pyx_n_s_sxplayer_min_level;
static PyObject *__pyx_n_s_t;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_text;
static PyObject *__pyx_n_s_textures;
static PyObject *__pyx_n_u_textures;
static PyObject *__pyx_n_s_time;
static PyObject *__pyx_n_s_time_anim;
static PyObject *__pyx_n_s_timebase;
static PyObject *__pyx_n_s_timestamps;
static PyObject *__pyx_n_s_topology;
static PyObject *__pyx_n_s_transform;
static PyObject *__pyx_n_s_uniforms;
static PyObject *__pyx_n_u_uniforms;
static PyObject *__pyx_n_s_up;
static PyObject *__pyx_kp_u_up_parameter_is_expected_to_be_v;
static PyObject *__pyx_n_s_up_transform;
static PyObject *__pyx_n_s_update;
static PyObject *__pyx_kp_u_update__s_takes_a_dictionary_of;
static PyObject *__pyx_n_s_update_attributes;
static PyObject *__pyx_n_s_update_blocks;
static PyObject *__pyx_n_s_update_dict;
static PyObject *__pyx_n_s_update_fields;
static PyObject *__pyx_n_s_update_instance_attributes;
static PyObject *__pyx_n_s_update_textures;
static PyObject *__pyx_n_s_update_uniforms;
static PyObject *__pyx_n_s_uv_corner;
static PyObject *__pyx_kp_u_uv_corner_parameter_is_expected;
static PyObject *__pyx_n_s_uv_edge0;
static PyObject *__pyx_kp_u_uv_edge0_parameter_is_expected_t;
static PyObject *__pyx_n_s_uv_edge1;
static PyObject *__pyx_kp_u_uv_edge1_parameter_is_expected_t;
static PyObject *__pyx_n_s_uv_edge2;
static PyObject *__pyx_kp_u_uv_edge2_parameter_is_expected_t;
static PyObject *__pyx_n_s_uv_height;
static PyObject *__pyx_kp_u_uv_height_parameter_is_expected;
static PyObject *__pyx_n_s_uv_width;
static PyObject *__pyx_kp_u_uv_width_parameter_is_expected_t;
static PyObject *__pyx_n_s_uvcoords;
static PyObject *__pyx_n_s_v;
static PyObject *__pyx_n_s_valign;
static PyObject *__pyx_n_s_value;
static PyObject *__pyx_kp_u_value_parameter_is_expected_to_b;
static PyObject *__pyx_kp_u_values;
static PyObject *__pyx_n_s_vector;
static PyObject *__pyx_kp_u_vector_parameter_is_expected_to;
static PyObject *__pyx_n_s_vertex;
static PyObject *__pyx_n_s_vertices;
static PyObject *__pyx_n_s_vflip;
static PyObject *__pyx_n_s_viewport;
static PyObject *__pyx_n_u_viewport;
static PyObject *__pyx_n_s_width;
static PyObject *__pyx_n_u_width;
static PyObject *__pyx_kp_u_width_parameter_is_expected_to_b;
static PyObject *__pyx_n_u_window;
static PyObject *__pyx_n_s_wrap_r;
static PyObject *__pyx_n_s_wrap_s;
static PyObject *__pyx_n_s_wrap_t;
static PyObject *__pyx_pf_8pynodegl_5_Node_4cptr___get__(struct __pyx_obj_8pynodegl__Node *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pynodegl_5_Node_serialize(struct __pyx_obj_8pynodegl__Node *__pyx_v_self, PyObject *__pyx_v_filename); /* proto */
static PyObject *__pyx_pf_8pynodegl_5_Node_2dot(struct __pyx_obj_8pynodegl__Node *__pyx_v_self); /* proto */
static void __pyx_pf_8pynodegl_5_Node_4__dealloc__(struct __pyx_obj_8pynodegl__Node *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pynodegl_5_Node_6_update_dict(struct __pyx_obj_8pynodegl__Node *__pyx_v_self, PyObject *__pyx_v_field_name, PyObject *__pyx_v_arg, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_8pynodegl_5_Node_8_init_params(struct __pyx_obj_8pynodegl__Node *__pyx_v_self, PyObject *__pyx_v_label); /* proto */
static PyObject *__pyx_pf_8pynodegl_5_Node_10_add_nodelist(struct __pyx_obj_8pynodegl__Node *__pyx_v_self, PyObject *__pyx_v_field_name, PyObject *__pyx_v_elems); /* proto */
static PyObject *__pyx_pf_8pynodegl_5_Node_12_add_doublelist(struct __pyx_obj_8pynodegl__Node *__pyx_v_self, PyObject *__pyx_v_field_name, PyObject *__pyx_v_elems); /* proto */
static PyObject *__pyx_pf_8pynodegl_5_Node_14set_label(struct __pyx_obj_8pynodegl__Node *__pyx_v_self, char const *__pyx_v_label); /* proto */
static PyObject *__pyx_pf_8pynodegl_5_Node_16__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl__Node *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pynodegl_5_Node_18__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl__Node *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_8pynodegl_15_AnimatedBuffer__init_params(struct __pyx_obj_8pynodegl__AnimatedBuffer *__pyx_v_self, PyObject *__pyx_v_keyframes, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_8pynodegl_15_AnimatedBuffer_2add_keyframes(struct __pyx_obj_8pynodegl__AnimatedBuffer *__pyx_v_self, PyObject *__pyx_v_keyframes); /* proto */
static PyObject *__pyx_pf_8pynodegl_15_AnimatedBuffer_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl__AnimatedBuffer *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pynodegl_15_AnimatedBuffer_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl__AnimatedBuffer *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_8pynodegl_19AnimatedBufferFloat___init__(struct __pyx_obj_8pynodegl_AnimatedBufferFloat *__pyx_v_self, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_8pynodegl_19AnimatedBufferFloat_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_AnimatedBufferFloat *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pynodegl_19AnimatedBufferFloat_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_AnimatedBufferFloat *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_8pynodegl_18AnimatedBufferVec2___init__(struct __pyx_obj_8pynodegl_AnimatedBufferVec2 *__pyx_v_self, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_8pynodegl_18AnimatedBufferVec2_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_AnimatedBufferVec2 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pynodegl_18AnimatedBufferVec2_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_AnimatedBufferVec2 *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_8pynodegl_18AnimatedBufferVec3___init__(struct __pyx_obj_8pynodegl_AnimatedBufferVec3 *__pyx_v_self, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_8pynodegl_18AnimatedBufferVec3_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_AnimatedBufferVec3 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pynodegl_18AnimatedBufferVec3_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_AnimatedBufferVec3 *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_8pynodegl_18AnimatedBufferVec4___init__(struct __pyx_obj_8pynodegl_AnimatedBufferVec4 *__pyx_v_self, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_8pynodegl_18AnimatedBufferVec4_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_AnimatedBufferVec4 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pynodegl_18AnimatedBufferVec4_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_AnimatedBufferVec4 *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_8pynodegl_12AnimatedTime___init__(struct __pyx_obj_8pynodegl_AnimatedTime *__pyx_v_self, PyObject *__pyx_v_keyframes, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_8pynodegl_12AnimatedTime_2add_keyframes(struct __pyx_obj_8pynodegl_AnimatedTime *__pyx_v_self, PyObject *__pyx_v_keyframes); /* proto */
static PyObject *__pyx_pf_8pynodegl_12AnimatedTime_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_AnimatedTime *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pynodegl_12AnimatedTime_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_AnimatedTime *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_8pynodegl_13AnimatedFloat___init__(struct __pyx_obj_8pynodegl_AnimatedFloat *__pyx_v_self, PyObject *__pyx_v_keyframes, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_8pynodegl_13AnimatedFloat_2evaluate(struct __pyx_obj_8pynodegl_AnimatedFloat *__pyx_v_self, PyObject *__pyx_v_t); /* proto */
static PyObject *__pyx_pf_8pynodegl_13AnimatedFloat_4add_keyframes(struct __pyx_obj_8pynodegl_AnimatedFloat *__pyx_v_self, PyObject *__pyx_v_keyframes); /* proto */
static PyObject *__pyx_pf_8pynodegl_13AnimatedFloat_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_AnimatedFloat *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pynodegl_13AnimatedFloat_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_AnimatedFloat *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_8pynodegl_12AnimatedVec2___init__(struct __pyx_obj_8pynodegl_AnimatedVec2 *__pyx_v_self, PyObject *__pyx_v_keyframes, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_8pynodegl_12AnimatedVec2_2evaluate(struct __pyx_obj_8pynodegl_AnimatedVec2 *__pyx_v_self, PyObject *__pyx_v_t); /* proto */
static PyObject *__pyx_pf_8pynodegl_12AnimatedVec2_4add_keyframes(struct __pyx_obj_8pynodegl_AnimatedVec2 *__pyx_v_self, PyObject *__pyx_v_keyframes); /* proto */
static PyObject *__pyx_pf_8pynodegl_12AnimatedVec2_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_AnimatedVec2 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pynodegl_12AnimatedVec2_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_AnimatedVec2 *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_8pynodegl_12AnimatedVec3___init__(struct __pyx_obj_8pynodegl_AnimatedVec3 *__pyx_v_self, PyObject *__pyx_v_keyframes, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_8pynodegl_12AnimatedVec3_2evaluate(struct __pyx_obj_8pynodegl_AnimatedVec3 *__pyx_v_self, PyObject *__pyx_v_t); /* proto */
static PyObject *__pyx_pf_8pynodegl_12AnimatedVec3_4add_keyframes(struct __pyx_obj_8pynodegl_AnimatedVec3 *__pyx_v_self, PyObject *__pyx_v_keyframes); /* proto */
static PyObject *__pyx_pf_8pynodegl_12AnimatedVec3_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_AnimatedVec3 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pynodegl_12AnimatedVec3_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_AnimatedVec3 *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_8pynodegl_12AnimatedVec4___init__(struct __pyx_obj_8pynodegl_AnimatedVec4 *__pyx_v_self, PyObject *__pyx_v_keyframes, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_8pynodegl_12AnimatedVec4_2evaluate(struct __pyx_obj_8pynodegl_AnimatedVec4 *__pyx_v_self, PyObject *__pyx_v_t); /* proto */
static PyObject *__pyx_pf_8pynodegl_12AnimatedVec4_4add_keyframes(struct __pyx_obj_8pynodegl_AnimatedVec4 *__pyx_v_self, PyObject *__pyx_v_keyframes); /* proto */
static PyObject *__pyx_pf_8pynodegl_12AnimatedVec4_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_AnimatedVec4 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pynodegl_12AnimatedVec4_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_AnimatedVec4 *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_8pynodegl_12AnimatedQuat___init__(struct __pyx_obj_8pynodegl_AnimatedQuat *__pyx_v_self, PyObject *__pyx_v_keyframes, PyObject *__pyx_v_as_mat4, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_8pynodegl_12AnimatedQuat_2evaluate(struct __pyx_obj_8pynodegl_AnimatedQuat *__pyx_v_self, PyObject *__pyx_v_t); /* proto */
static PyObject *__pyx_pf_8pynodegl_12AnimatedQuat_4add_keyframes(struct __pyx_obj_8pynodegl_AnimatedQuat *__pyx_v_self, PyObject *__pyx_v_keyframes); /* proto */
static PyObject *__pyx_pf_8pynodegl_12AnimatedQuat_6set_as_mat4(struct __pyx_obj_8pynodegl_AnimatedQuat *__pyx_v_self, int __pyx_v_as_mat4); /* proto */
static PyObject *__pyx_pf_8pynodegl_12AnimatedQuat_8__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_AnimatedQuat *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pynodegl_12AnimatedQuat_10__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_AnimatedQuat *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_8pynodegl_17AnimKeyFrameFloat___init__(struct __pyx_obj_8pynodegl_AnimKeyFrameFloat *__pyx_v_self, double __pyx_v_time, double __pyx_v_value, PyObject *__pyx_v_easing, PyObject *__pyx_v_easing_args, PyObject *__pyx_v_easing_start_offset, PyObject *__pyx_v_easing_end_offset, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_8pynodegl_17AnimKeyFrameFloat_2set_easing(struct __pyx_obj_8pynodegl_AnimKeyFrameFloat *__pyx_v_self, char const *__pyx_v_easing); /* proto */
static PyObject *__pyx_pf_8pynodegl_17AnimKeyFrameFloat_4add_easing_args(struct __pyx_obj_8pynodegl_AnimKeyFrameFloat *__pyx_v_self, PyObject *__pyx_v_easing_args); /* proto */
static PyObject *__pyx_pf_8pynodegl_17AnimKeyFrameFloat_6set_easing_start_offset(struct __pyx_obj_8pynodegl_AnimKeyFrameFloat *__pyx_v_self, double __pyx_v_easing_start_offset); /* proto */
static PyObject *__pyx_pf_8pynodegl_17AnimKeyFrameFloat_8set_easing_end_offset(struct __pyx_obj_8pynodegl_AnimKeyFrameFloat *__pyx_v_self, double __pyx_v_easing_end_offset); /* proto */
static PyObject *__pyx_pf_8pynodegl_17AnimKeyFrameFloat_10__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_AnimKeyFrameFloat *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pynodegl_17AnimKeyFrameFloat_12__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_AnimKeyFrameFloat *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_8pynodegl_16AnimKeyFrameVec2___init__(struct __pyx_obj_8pynodegl_AnimKeyFrameVec2 *__pyx_v_self, double __pyx_v_time, PyObject *__pyx_v_value, PyObject *__pyx_v_easing, PyObject *__pyx_v_easing_args, PyObject *__pyx_v_easing_start_offset, PyObject *__pyx_v_easing_end_offset, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_8pynodegl_16AnimKeyFrameVec2_2set_easing(struct __pyx_obj_8pynodegl_AnimKeyFrameVec2 *__pyx_v_self, char const *__pyx_v_easing); /* proto */
static PyObject *__pyx_pf_8pynodegl_16AnimKeyFrameVec2_4add_easing_args(struct __pyx_obj_8pynodegl_AnimKeyFrameVec2 *__pyx_v_self, PyObject *__pyx_v_easing_args); /* proto */
static PyObject *__pyx_pf_8pynodegl_16AnimKeyFrameVec2_6set_easing_start_offset(struct __pyx_obj_8pynodegl_AnimKeyFrameVec2 *__pyx_v_self, double __pyx_v_easing_start_offset); /* proto */
static PyObject *__pyx_pf_8pynodegl_16AnimKeyFrameVec2_8set_easing_end_offset(struct __pyx_obj_8pynodegl_AnimKeyFrameVec2 *__pyx_v_self, double __pyx_v_easing_end_offset); /* proto */
static PyObject *__pyx_pf_8pynodegl_16AnimKeyFrameVec2_10__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_AnimKeyFrameVec2 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pynodegl_16AnimKeyFrameVec2_12__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_AnimKeyFrameVec2 *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_8pynodegl_16AnimKeyFrameVec3___init__(struct __pyx_obj_8pynodegl_AnimKeyFrameVec3 *__pyx_v_self, double __pyx_v_time, PyObject *__pyx_v_value, PyObject *__pyx_v_easing, PyObject *__pyx_v_easing_args, PyObject *__pyx_v_easing_start_offset, PyObject *__pyx_v_easing_end_offset, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_8pynodegl_16AnimKeyFrameVec3_2set_easing(struct __pyx_obj_8pynodegl_AnimKeyFrameVec3 *__pyx_v_self, char const *__pyx_v_easing); /* proto */
static PyObject *__pyx_pf_8pynodegl_16AnimKeyFrameVec3_4add_easing_args(struct __pyx_obj_8pynodegl_AnimKeyFrameVec3 *__pyx_v_self, PyObject *__pyx_v_easing_args); /* proto */
static PyObject *__pyx_pf_8pynodegl_16AnimKeyFrameVec3_6set_easing_start_offset(struct __pyx_obj_8pynodegl_AnimKeyFrameVec3 *__pyx_v_self, double __pyx_v_easing_start_offset); /* proto */
static PyObject *__pyx_pf_8pynodegl_16AnimKeyFrameVec3_8set_easing_end_offset(struct __pyx_obj_8pynodegl_AnimKeyFrameVec3 *__pyx_v_self, double __pyx_v_easing_end_offset); /* proto */
static PyObject *__pyx_pf_8pynodegl_16AnimKeyFrameVec3_10__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_AnimKeyFrameVec3 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pynodegl_16AnimKeyFrameVec3_12__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_AnimKeyFrameVec3 *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_8pynodegl_16AnimKeyFrameVec4___init__(struct __pyx_obj_8pynodegl_AnimKeyFrameVec4 *__pyx_v_self, double __pyx_v_time, PyObject *__pyx_v_value, PyObject *__pyx_v_easing, PyObject *__pyx_v_easing_args, PyObject *__pyx_v_easing_start_offset, PyObject *__pyx_v_easing_end_offset, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_8pynodegl_16AnimKeyFrameVec4_2set_easing(struct __pyx_obj_8pynodegl_AnimKeyFrameVec4 *__pyx_v_self, char const *__pyx_v_easing); /* proto */
static PyObject *__pyx_pf_8pynodegl_16AnimKeyFrameVec4_4add_easing_args(struct __pyx_obj_8pynodegl_AnimKeyFrameVec4 *__pyx_v_self, PyObject *__pyx_v_easing_args); /* proto */
static PyObject *__pyx_pf_8pynodegl_16AnimKeyFrameVec4_6set_easing_start_offset(struct __pyx_obj_8pynodegl_AnimKeyFrameVec4 *__pyx_v_self, double __pyx_v_easing_start_offset); /* proto */
static PyObject *__pyx_pf_8pynodegl_16AnimKeyFrameVec4_8set_easing_end_offset(struct __pyx_obj_8pynodegl_AnimKeyFrameVec4 *__pyx_v_self, double __pyx_v_easing_end_offset); /* proto */
static PyObject *__pyx_pf_8pynodegl_16AnimKeyFrameVec4_10__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_AnimKeyFrameVec4 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pynodegl_16AnimKeyFrameVec4_12__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_AnimKeyFrameVec4 *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_8pynodegl_16AnimKeyFrameQuat___init__(struct __pyx_obj_8pynodegl_AnimKeyFrameQuat *__pyx_v_self, double __pyx_v_time, PyObject *__pyx_v_quat, PyObject *__pyx_v_easing, PyObject *__pyx_v_easing_args, PyObject *__pyx_v_easing_start_offset, PyObject *__pyx_v_easing_end_offset, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_8pynodegl_16AnimKeyFrameQuat_2set_easing(struct __pyx_obj_8pynodegl_AnimKeyFrameQuat *__pyx_v_self, char const *__pyx_v_easing); /* proto */
static PyObject *__pyx_pf_8pynodegl_16AnimKeyFrameQuat_4add_easing_args(struct __pyx_obj_8pynodegl_AnimKeyFrameQuat *__pyx_v_self, PyObject *__pyx_v_easing_args); /* proto */
static PyObject *__pyx_pf_8pynodegl_16AnimKeyFrameQuat_6set_easing_start_offset(struct __pyx_obj_8pynodegl_AnimKeyFrameQuat *__pyx_v_self, double __pyx_v_easing_start_offset); /* proto */
static PyObject *__pyx_pf_8pynodegl_16AnimKeyFrameQuat_8set_easing_end_offset(struct __pyx_obj_8pynodegl_AnimKeyFrameQuat *__pyx_v_self, double __pyx_v_easing_end_offset); /* proto */
static PyObject *__pyx_pf_8pynodegl_16AnimKeyFrameQuat_10__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_AnimKeyFrameQuat *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pynodegl_16AnimKeyFrameQuat_12__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_AnimKeyFrameQuat *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_8pynodegl_18AnimKeyFrameBuffer___init__(struct __pyx_obj_8pynodegl_AnimKeyFrameBuffer *__pyx_v_self, double __pyx_v_time, PyObject *__pyx_v_data, PyObject *__pyx_v_easing, PyObject *__pyx_v_easing_args, PyObject *__pyx_v_easing_start_offset, PyObject *__pyx_v_easing_end_offset, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_8pynodegl_18AnimKeyFrameBuffer_2set_data(struct __pyx_obj_8pynodegl_AnimKeyFrameBuffer *__pyx_v_self, arrayobject *__pyx_v_data); /* proto */
static PyObject *__pyx_pf_8pynodegl_18AnimKeyFrameBuffer_4set_easing(struct __pyx_obj_8pynodegl_AnimKeyFrameBuffer *__pyx_v_self, char const *__pyx_v_easing); /* proto */
static PyObject *__pyx_pf_8pynodegl_18AnimKeyFrameBuffer_6add_easing_args(struct __pyx_obj_8pynodegl_AnimKeyFrameBuffer *__pyx_v_self, PyObject *__pyx_v_easing_args); /* proto */
static PyObject *__pyx_pf_8pynodegl_18AnimKeyFrameBuffer_8set_easing_start_offset(struct __pyx_obj_8pynodegl_AnimKeyFrameBuffer *__pyx_v_self, double __pyx_v_easing_start_offset); /* proto */
static PyObject *__pyx_pf_8pynodegl_18AnimKeyFrameBuffer_10set_easing_end_offset(struct __pyx_obj_8pynodegl_AnimKeyFrameBuffer *__pyx_v_self, double __pyx_v_easing_end_offset); /* proto */
static PyObject *__pyx_pf_8pynodegl_18AnimKeyFrameBuffer_12__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_AnimKeyFrameBuffer *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pynodegl_18AnimKeyFrameBuffer_14__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_AnimKeyFrameBuffer *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_8pynodegl_5Block___init__(struct __pyx_obj_8pynodegl_Block *__pyx_v_self, PyObject *__pyx_v_fields, PyObject *__pyx_v_layout, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_8pynodegl_5Block_2update_fields(struct __pyx_obj_8pynodegl_Block *__pyx_v_self, PyObject *__pyx_v_arg, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_8pynodegl_5Block_4set_layout(struct __pyx_obj_8pynodegl_Block *__pyx_v_self, char const *__pyx_v_layout); /* proto */
static PyObject *__pyx_pf_8pynodegl_5Block_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_Block *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pynodegl_5Block_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_Block *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_8pynodegl_7_Buffer__init_params(struct __pyx_obj_8pynodegl__Buffer *__pyx_v_self, PyObject *__pyx_v_count, PyObject *__pyx_v_data, PyObject *__pyx_v_filename, PyObject *__pyx_v_block, PyObject *__pyx_v_block_field, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_8pynodegl_7_Buffer_2set_count(struct __pyx_obj_8pynodegl__Buffer *__pyx_v_self, int __pyx_v_count); /* proto */
static PyObject *__pyx_pf_8pynodegl_7_Buffer_4set_data(struct __pyx_obj_8pynodegl__Buffer *__pyx_v_self, arrayobject *__pyx_v_data); /* proto */
static PyObject *__pyx_pf_8pynodegl_7_Buffer_6set_filename(struct __pyx_obj_8pynodegl__Buffer *__pyx_v_self, char const *__pyx_v_filename); /* proto */
static PyObject *__pyx_pf_8pynodegl_7_Buffer_8set_block(struct __pyx_obj_8pynodegl__Buffer *__pyx_v_self, struct __pyx_obj_8pynodegl__Node *__pyx_v_block); /* proto */
static PyObject *__pyx_pf_8pynodegl_7_Buffer_10set_block_field(struct __pyx_obj_8pynodegl__Buffer *__pyx_v_self, char const *__pyx_v_block_field); /* proto */
static PyObject *__pyx_pf_8pynodegl_7_Buffer_12__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl__Buffer *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pynodegl_7_Buffer_14__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl__Buffer *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_8pynodegl_10BufferByte___init__(struct __pyx_obj_8pynodegl_BufferByte *__pyx_v_self, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_8pynodegl_10BufferByte_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_BufferByte *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pynodegl_10BufferByte_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_BufferByte *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_8pynodegl_11BufferBVec2___init__(struct __pyx_obj_8pynodegl_BufferBVec2 *__pyx_v_self, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_8pynodegl_11BufferBVec2_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_BufferBVec2 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pynodegl_11BufferBVec2_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_BufferBVec2 *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_8pynodegl_11BufferBVec3___init__(struct __pyx_obj_8pynodegl_BufferBVec3 *__pyx_v_self, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_8pynodegl_11BufferBVec3_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_BufferBVec3 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pynodegl_11BufferBVec3_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_BufferBVec3 *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_8pynodegl_11BufferBVec4___init__(struct __pyx_obj_8pynodegl_BufferBVec4 *__pyx_v_self, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_8pynodegl_11BufferBVec4_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_BufferBVec4 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pynodegl_11BufferBVec4_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_BufferBVec4 *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_8pynodegl_9BufferInt___init__(struct __pyx_obj_8pynodegl_BufferInt *__pyx_v_self, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_8pynodegl_9BufferInt_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_BufferInt *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pynodegl_9BufferInt_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_BufferInt *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_8pynodegl_11BufferInt64___init__(struct __pyx_obj_8pynodegl_BufferInt64 *__pyx_v_self, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_8pynodegl_11BufferInt64_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_BufferInt64 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pynodegl_11BufferInt64_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_BufferInt64 *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_8pynodegl_11BufferIVec2___init__(struct __pyx_obj_8pynodegl_BufferIVec2 *__pyx_v_self, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_8pynodegl_11BufferIVec2_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_BufferIVec2 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pynodegl_11BufferIVec2_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_BufferIVec2 *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_8pynodegl_11BufferIVec3___init__(struct __pyx_obj_8pynodegl_BufferIVec3 *__pyx_v_self, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_8pynodegl_11BufferIVec3_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_BufferIVec3 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pynodegl_11BufferIVec3_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_BufferIVec3 *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_8pynodegl_11BufferIVec4___init__(struct __pyx_obj_8pynodegl_BufferIVec4 *__pyx_v_self, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_8pynodegl_11BufferIVec4_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_BufferIVec4 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pynodegl_11BufferIVec4_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_BufferIVec4 *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_8pynodegl_11BufferShort___init__(struct __pyx_obj_8pynodegl_BufferShort *__pyx_v_self, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_8pynodegl_11BufferShort_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_BufferShort *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pynodegl_11BufferShort_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_BufferShort *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_8pynodegl_11BufferSVec2___init__(struct __pyx_obj_8pynodegl_BufferSVec2 *__pyx_v_self, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_8pynodegl_11BufferSVec2_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_BufferSVec2 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pynodegl_11BufferSVec2_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_BufferSVec2 *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_8pynodegl_11BufferSVec3___init__(struct __pyx_obj_8pynodegl_BufferSVec3 *__pyx_v_self, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_8pynodegl_11BufferSVec3_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_BufferSVec3 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pynodegl_11BufferSVec3_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_BufferSVec3 *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_8pynodegl_11BufferSVec4___init__(struct __pyx_obj_8pynodegl_BufferSVec4 *__pyx_v_self, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_8pynodegl_11BufferSVec4_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_BufferSVec4 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pynodegl_11BufferSVec4_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_BufferSVec4 *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_8pynodegl_11BufferUByte___init__(struct __pyx_obj_8pynodegl_BufferUByte *__pyx_v_self, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_8pynodegl_11BufferUByte_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_BufferUByte *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pynodegl_11BufferUByte_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_BufferUByte *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_8pynodegl_12BufferUBVec2___init__(struct __pyx_obj_8pynodegl_BufferUBVec2 *__pyx_v_self, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_8pynodegl_12BufferUBVec2_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_BufferUBVec2 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pynodegl_12BufferUBVec2_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_BufferUBVec2 *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_8pynodegl_12BufferUBVec3___init__(struct __pyx_obj_8pynodegl_BufferUBVec3 *__pyx_v_self, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_8pynodegl_12BufferUBVec3_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_BufferUBVec3 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pynodegl_12BufferUBVec3_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_BufferUBVec3 *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_8pynodegl_12BufferUBVec4___init__(struct __pyx_obj_8pynodegl_BufferUBVec4 *__pyx_v_self, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_8pynodegl_12BufferUBVec4_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_BufferUBVec4 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pynodegl_12BufferUBVec4_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_BufferUBVec4 *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_8pynodegl_10BufferUInt___init__(struct __pyx_obj_8pynodegl_BufferUInt *__pyx_v_self, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_8pynodegl_10BufferUInt_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_BufferUInt *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pynodegl_10BufferUInt_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_BufferUInt *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_8pynodegl_12BufferUIVec2___init__(struct __pyx_obj_8pynodegl_BufferUIVec2 *__pyx_v_self, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_8pynodegl_12BufferUIVec2_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_BufferUIVec2 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pynodegl_12BufferUIVec2_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_BufferUIVec2 *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_8pynodegl_12BufferUIVec3___init__(struct __pyx_obj_8pynodegl_BufferUIVec3 *__pyx_v_self, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_8pynodegl_12BufferUIVec3_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_BufferUIVec3 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pynodegl_12BufferUIVec3_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_BufferUIVec3 *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_8pynodegl_12BufferUIVec4___init__(struct __pyx_obj_8pynodegl_BufferUIVec4 *__pyx_v_self, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_8pynodegl_12BufferUIVec4_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_BufferUIVec4 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pynodegl_12BufferUIVec4_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_BufferUIVec4 *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_8pynodegl_12BufferUShort___init__(struct __pyx_obj_8pynodegl_BufferUShort *__pyx_v_self, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_8pynodegl_12BufferUShort_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_BufferUShort *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pynodegl_12BufferUShort_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_BufferUShort *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_8pynodegl_12BufferUSVec2___init__(struct __pyx_obj_8pynodegl_BufferUSVec2 *__pyx_v_self, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_8pynodegl_12BufferUSVec2_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_BufferUSVec2 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pynodegl_12BufferUSVec2_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_BufferUSVec2 *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_8pynodegl_12BufferUSVec3___init__(struct __pyx_obj_8pynodegl_BufferUSVec3 *__pyx_v_self, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_8pynodegl_12BufferUSVec3_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_BufferUSVec3 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pynodegl_12BufferUSVec3_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_BufferUSVec3 *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_8pynodegl_12BufferUSVec4___init__(struct __pyx_obj_8pynodegl_BufferUSVec4 *__pyx_v_self, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_8pynodegl_12BufferUSVec4_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_BufferUSVec4 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pynodegl_12BufferUSVec4_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_BufferUSVec4 *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_8pynodegl_11BufferFloat___init__(struct __pyx_obj_8pynodegl_BufferFloat *__pyx_v_self, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_8pynodegl_11BufferFloat_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_BufferFloat *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pynodegl_11BufferFloat_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_BufferFloat *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_8pynodegl_10BufferVec2___init__(struct __pyx_obj_8pynodegl_BufferVec2 *__pyx_v_self, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_8pynodegl_10BufferVec2_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_BufferVec2 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pynodegl_10BufferVec2_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_BufferVec2 *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_8pynodegl_10BufferVec3___init__(struct __pyx_obj_8pynodegl_BufferVec3 *__pyx_v_self, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_8pynodegl_10BufferVec3_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_BufferVec3 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pynodegl_10BufferVec3_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_BufferVec3 *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_8pynodegl_10BufferVec4___init__(struct __pyx_obj_8pynodegl_BufferVec4 *__pyx_v_self, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_8pynodegl_10BufferVec4_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_BufferVec4 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pynodegl_10BufferVec4_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_BufferVec4 *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_8pynodegl_10BufferMat4___init__(struct __pyx_obj_8pynodegl_BufferMat4 *__pyx_v_self, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_8pynodegl_10BufferMat4_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_BufferMat4 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pynodegl_10BufferMat4_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_BufferMat4 *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_8pynodegl_6Camera___init__(struct __pyx_obj_8pynodegl_Camera *__pyx_v_self, struct __pyx_obj_8pynodegl__Node *__pyx_v_child, PyObject *__pyx_v_eye, PyObject *__pyx_v_center, PyObject *__pyx_v_up, PyObject *__pyx_v_perspective, PyObject *__pyx_v_orthographic, PyObject *__pyx_v_clipping, PyObject *__pyx_v_eye_transform, PyObject *__pyx_v_center_transform, PyObject *__pyx_v_up_transform, PyObject *__pyx_v_fov_anim, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_8pynodegl_6Camera_2set_eye(struct __pyx_obj_8pynodegl_Camera *__pyx_v_self, PyObject *__pyx_v_eye); /* proto */
static PyObject *__pyx_pf_8pynodegl_6Camera_4set_center(struct __pyx_obj_8pynodegl_Camera *__pyx_v_self, PyObject *__pyx_v_center); /* proto */
static PyObject *__pyx_pf_8pynodegl_6Camera_6set_up(struct __pyx_obj_8pynodegl_Camera *__pyx_v_self, PyObject *__pyx_v_up); /* proto */
static PyObject *__pyx_pf_8pynodegl_6Camera_8set_perspective(struct __pyx_obj_8pynodegl_Camera *__pyx_v_self, PyObject *__pyx_v_perspective); /* proto */
static PyObject *__pyx_pf_8pynodegl_6Camera_10set_orthographic(struct __pyx_obj_8pynodegl_Camera *__pyx_v_self, PyObject *__pyx_v_orthographic); /* proto */
static PyObject *__pyx_pf_8pynodegl_6Camera_12set_clipping(struct __pyx_obj_8pynodegl_Camera *__pyx_v_self, PyObject *__pyx_v_clipping); /* proto */
static PyObject *__pyx_pf_8pynodegl_6Camera_14set_eye_transform(struct __pyx_obj_8pynodegl_Camera *__pyx_v_self, struct __pyx_obj_8pynodegl__Node *__pyx_v_eye_transform); /* proto */
static PyObject *__pyx_pf_8pynodegl_6Camera_16set_center_transform(struct __pyx_obj_8pynodegl_Camera *__pyx_v_self, struct __pyx_obj_8pynodegl__Node *__pyx_v_center_transform); /* proto */
static PyObject *__pyx_pf_8pynodegl_6Camera_18set_up_transform(struct __pyx_obj_8pynodegl_Camera *__pyx_v_self, struct __pyx_obj_8pynodegl__Node *__pyx_v_up_transform); /* proto */
static PyObject *__pyx_pf_8pynodegl_6Camera_20set_fov_anim(struct __pyx_obj_8pynodegl_Camera *__pyx_v_self, struct __pyx_obj_8pynodegl__Node *__pyx_v_fov_anim); /* proto */
static PyObject *__pyx_pf_8pynodegl_6Camera_22__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_Camera *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pynodegl_6Camera_24__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_Camera *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_8pynodegl_6Circle___init__(struct __pyx_obj_8pynodegl_Circle *__pyx_v_self, PyObject *__pyx_v_radius, PyObject *__pyx_v_npoints, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_8pynodegl_6Circle_2set_radius(struct __pyx_obj_8pynodegl_Circle *__pyx_v_self, double __pyx_v_radius); /* proto */
static PyObject *__pyx_pf_8pynodegl_6Circle_4set_npoints(struct __pyx_obj_8pynodegl_Circle *__pyx_v_self, int __pyx_v_npoints); /* proto */
static PyObject *__pyx_pf_8pynodegl_6Circle_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_Circle *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pynodegl_6Circle_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_Circle *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_8pynodegl_7Compute___init__(struct __pyx_obj_8pynodegl_Compute *__pyx_v_self, int __pyx_v_nb_group_x, int __pyx_v_nb_group_y, int __pyx_v_nb_group_z, struct __pyx_obj_8pynodegl__Node *__pyx_v_program, PyObject *__pyx_v_textures, PyObject *__pyx_v_uniforms, PyObject *__pyx_v_blocks, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_8pynodegl_7Compute_2update_textures(struct __pyx_obj_8pynodegl_Compute *__pyx_v_self, PyObject *__pyx_v_arg, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_8pynodegl_7Compute_4update_uniforms(struct __pyx_obj_8pynodegl_Compute *__pyx_v_self, PyObject *__pyx_v_arg, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_8pynodegl_7Compute_6update_blocks(struct __pyx_obj_8pynodegl_Compute *__pyx_v_self, PyObject *__pyx_v_arg, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_8pynodegl_7Compute_8__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_Compute *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pynodegl_7Compute_10__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_Compute *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_8pynodegl_14ComputeProgram___init__(struct __pyx_obj_8pynodegl_ComputeProgram *__pyx_v_self, char const *__pyx_v_compute, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_8pynodegl_14ComputeProgram_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_ComputeProgram *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pynodegl_14ComputeProgram_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_ComputeProgram *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_8pynodegl_8Geometry___init__(struct __pyx_obj_8pynodegl_Geometry *__pyx_v_self, struct __pyx_obj_8pynodegl__Node *__pyx_v_vertices, PyObject *__pyx_v_uvcoords, PyObject *__pyx_v_normals, PyObject *__pyx_v_indices, PyObject *__pyx_v_topology, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_8pynodegl_8Geometry_2set_uvcoords(struct __pyx_obj_8pynodegl_Geometry *__pyx_v_self, struct __pyx_obj_8pynodegl__Node *__pyx_v_uvcoords); /* proto */
static PyObject *__pyx_pf_8pynodegl_8Geometry_4set_normals(struct __pyx_obj_8pynodegl_Geometry *__pyx_v_self, struct __pyx_obj_8pynodegl__Node *__pyx_v_normals); /* proto */
static PyObject *__pyx_pf_8pynodegl_8Geometry_6set_indices(struct __pyx_obj_8pynodegl_Geometry *__pyx_v_self, struct __pyx_obj_8pynodegl__Node *__pyx_v_indices); /* proto */
static PyObject *__pyx_pf_8pynodegl_8Geometry_8set_topology(struct __pyx_obj_8pynodegl_Geometry *__pyx_v_self, char const *__pyx_v_topology); /* proto */
static PyObject *__pyx_pf_8pynodegl_8Geometry_10__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_Geometry *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pynodegl_8Geometry_12__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_Geometry *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_8pynodegl_13GraphicConfig___init__(struct __pyx_obj_8pynodegl_GraphicConfig *__pyx_v_self, struct __pyx_obj_8pynodegl__Node *__pyx_v_child, PyObject *__pyx_v_blend, PyObject *__pyx_v_blend_src_factor, PyObject *__pyx_v_blend_dst_factor, PyObject *__pyx_v_blend_src_factor_a, PyObject *__pyx_v_blend_dst_factor_a, PyObject *__pyx_v_blend_op, PyObject *__pyx_v_blend_op_a, PyObject *__pyx_v_color_write_mask, PyObject *__pyx_v_depth_test, PyObject *__pyx_v_depth_write_mask, PyObject *__pyx_v_depth_func, PyObject *__pyx_v_stencil_test, PyObject *__pyx_v_stencil_write_mask, PyObject *__pyx_v_stencil_func, PyObject *__pyx_v_stencil_ref, PyObject *__pyx_v_stencil_read_mask, PyObject *__pyx_v_stencil_fail, PyObject *__pyx_v_stencil_depth_fail, PyObject *__pyx_v_stencil_depth_pass, PyObject *__pyx_v_cull_face, PyObject *__pyx_v_cull_face_mode, PyObject *__pyx_v_scissor_test, PyObject *__pyx_v_scissor, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_8pynodegl_13GraphicConfig_2set_blend(struct __pyx_obj_8pynodegl_GraphicConfig *__pyx_v_self, int __pyx_v_blend); /* proto */
static PyObject *__pyx_pf_8pynodegl_13GraphicConfig_4set_blend_src_factor(struct __pyx_obj_8pynodegl_GraphicConfig *__pyx_v_self, char const *__pyx_v_blend_src_factor); /* proto */
static PyObject *__pyx_pf_8pynodegl_13GraphicConfig_6set_blend_dst_factor(struct __pyx_obj_8pynodegl_GraphicConfig *__pyx_v_self, char const *__pyx_v_blend_dst_factor); /* proto */
static PyObject *__pyx_pf_8pynodegl_13GraphicConfig_8set_blend_src_factor_a(struct __pyx_obj_8pynodegl_GraphicConfig *__pyx_v_self, char const *__pyx_v_blend_src_factor_a); /* proto */
static PyObject *__pyx_pf_8pynodegl_13GraphicConfig_10set_blend_dst_factor_a(struct __pyx_obj_8pynodegl_GraphicConfig *__pyx_v_self, char const *__pyx_v_blend_dst_factor_a); /* proto */
static PyObject *__pyx_pf_8pynodegl_13GraphicConfig_12set_blend_op(struct __pyx_obj_8pynodegl_GraphicConfig *__pyx_v_self, char const *__pyx_v_blend_op); /* proto */
static PyObject *__pyx_pf_8pynodegl_13GraphicConfig_14set_blend_op_a(struct __pyx_obj_8pynodegl_GraphicConfig *__pyx_v_self, char const *__pyx_v_blend_op_a); /* proto */
static PyObject *__pyx_pf_8pynodegl_13GraphicConfig_16set_color_write_mask(struct __pyx_obj_8pynodegl_GraphicConfig *__pyx_v_self, char const *__pyx_v_color_write_mask); /* proto */
static PyObject *__pyx_pf_8pynodegl_13GraphicConfig_18set_depth_test(struct __pyx_obj_8pynodegl_GraphicConfig *__pyx_v_self, int __pyx_v_depth_test); /* proto */
static PyObject *__pyx_pf_8pynodegl_13GraphicConfig_20set_depth_write_mask(struct __pyx_obj_8pynodegl_GraphicConfig *__pyx_v_self, int __pyx_v_depth_write_mask); /* proto */
static PyObject *__pyx_pf_8pynodegl_13GraphicConfig_22set_depth_func(struct __pyx_obj_8pynodegl_GraphicConfig *__pyx_v_self, char const *__pyx_v_depth_func); /* proto */
static PyObject *__pyx_pf_8pynodegl_13GraphicConfig_24set_stencil_test(struct __pyx_obj_8pynodegl_GraphicConfig *__pyx_v_self, int __pyx_v_stencil_test); /* proto */
static PyObject *__pyx_pf_8pynodegl_13GraphicConfig_26set_stencil_write_mask(struct __pyx_obj_8pynodegl_GraphicConfig *__pyx_v_self, int __pyx_v_stencil_write_mask); /* proto */
static PyObject *__pyx_pf_8pynodegl_13GraphicConfig_28set_stencil_func(struct __pyx_obj_8pynodegl_GraphicConfig *__pyx_v_self, char const *__pyx_v_stencil_func); /* proto */
static PyObject *__pyx_pf_8pynodegl_13GraphicConfig_30set_stencil_ref(struct __pyx_obj_8pynodegl_GraphicConfig *__pyx_v_self, int __pyx_v_stencil_ref); /* proto */
static PyObject *__pyx_pf_8pynodegl_13GraphicConfig_32set_stencil_read_mask(struct __pyx_obj_8pynodegl_GraphicConfig *__pyx_v_self, int __pyx_v_stencil_read_mask); /* proto */
static PyObject *__pyx_pf_8pynodegl_13GraphicConfig_34set_stencil_fail(struct __pyx_obj_8pynodegl_GraphicConfig *__pyx_v_self, char const *__pyx_v_stencil_fail); /* proto */
static PyObject *__pyx_pf_8pynodegl_13GraphicConfig_36set_stencil_depth_fail(struct __pyx_obj_8pynodegl_GraphicConfig *__pyx_v_self, char const *__pyx_v_stencil_depth_fail); /* proto */
static PyObject *__pyx_pf_8pynodegl_13GraphicConfig_38set_stencil_depth_pass(struct __pyx_obj_8pynodegl_GraphicConfig *__pyx_v_self, char const *__pyx_v_stencil_depth_pass); /* proto */
static PyObject *__pyx_pf_8pynodegl_13GraphicConfig_40set_cull_face(struct __pyx_obj_8pynodegl_GraphicConfig *__pyx_v_self, int __pyx_v_cull_face); /* proto */
static PyObject *__pyx_pf_8pynodegl_13GraphicConfig_42set_cull_face_mode(struct __pyx_obj_8pynodegl_GraphicConfig *__pyx_v_self, char const *__pyx_v_cull_face_mode); /* proto */
static PyObject *__pyx_pf_8pynodegl_13GraphicConfig_44set_scissor_test(struct __pyx_obj_8pynodegl_GraphicConfig *__pyx_v_self, int __pyx_v_scissor_test); /* proto */
static PyObject *__pyx_pf_8pynodegl_13GraphicConfig_46set_scissor(struct __pyx_obj_8pynodegl_GraphicConfig *__pyx_v_self, PyObject *__pyx_v_scissor); /* proto */
static PyObject *__pyx_pf_8pynodegl_13GraphicConfig_48__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_GraphicConfig *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pynodegl_13GraphicConfig_50__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_GraphicConfig *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_8pynodegl_5Group___init__(struct __pyx_obj_8pynodegl_Group *__pyx_v_self, PyObject *__pyx_v_children, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_8pynodegl_5Group_2add_children(struct __pyx_obj_8pynodegl_Group *__pyx_v_self, PyObject *__pyx_v_children); /* proto */
static PyObject *__pyx_pf_8pynodegl_5Group_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_Group *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pynodegl_5Group_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_Group *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_8pynodegl_3HUD___init__(struct __pyx_obj_8pynodegl_HUD *__pyx_v_self, struct __pyx_obj_8pynodegl__Node *__pyx_v_child, PyObject *__pyx_v_measure_window, PyObject *__pyx_v_refresh_rate, PyObject *__pyx_v_export_filename, PyObject *__pyx_v_bg_color, PyObject *__pyx_v_aspect_ratio, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_8pynodegl_3HUD_2set_measure_window(struct __pyx_obj_8pynodegl_HUD *__pyx_v_self, int __pyx_v_measure_window); /* proto */
static PyObject *__pyx_pf_8pynodegl_3HUD_4set_refresh_rate(struct __pyx_obj_8pynodegl_HUD *__pyx_v_self, PyObject *__pyx_v_refresh_rate); /* proto */
static PyObject *__pyx_pf_8pynodegl_3HUD_6set_export_filename(struct __pyx_obj_8pynodegl_HUD *__pyx_v_self, char const *__pyx_v_export_filename); /* proto */
static PyObject *__pyx_pf_8pynodegl_3HUD_8set_bg_color(struct __pyx_obj_8pynodegl_HUD *__pyx_v_self, PyObject *__pyx_v_bg_color); /* proto */
static PyObject *__pyx_pf_8pynodegl_3HUD_10set_aspect_ratio(struct __pyx_obj_8pynodegl_HUD *__pyx_v_self, PyObject *__pyx_v_aspect_ratio); /* proto */
static PyObject *__pyx_pf_8pynodegl_3HUD_12__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_HUD *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pynodegl_3HUD_14__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_HUD *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_8pynodegl_8Identity___init__(struct __pyx_obj_8pynodegl_Identity *__pyx_v_self, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_8pynodegl_8Identity_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_Identity *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pynodegl_8Identity_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_Identity *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_8pynodegl_5Media___init__(struct __pyx_obj_8pynodegl_Media *__pyx_v_self, char const *__pyx_v_filename, PyObject *__pyx_v_sxplayer_min_level, PyObject *__pyx_v_time_anim, PyObject *__pyx_v_audio_tex, PyObject *__pyx_v_max_nb_packets, PyObject *__pyx_v_max_nb_frames, PyObject *__pyx_v_max_nb_sink, PyObject *__pyx_v_max_pixels, PyObject *__pyx_v_stream_idx, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_8pynodegl_5Media_2set_sxplayer_min_level(struct __pyx_obj_8pynodegl_Media *__pyx_v_self, char const *__pyx_v_sxplayer_min_level); /* proto */
static PyObject *__pyx_pf_8pynodegl_5Media_4set_time_anim(struct __pyx_obj_8pynodegl_Media *__pyx_v_self, struct __pyx_obj_8pynodegl__Node *__pyx_v_time_anim); /* proto */
static PyObject *__pyx_pf_8pynodegl_5Media_6set_audio_tex(struct __pyx_obj_8pynodegl_Media *__pyx_v_self, int __pyx_v_audio_tex); /* proto */
static PyObject *__pyx_pf_8pynodegl_5Media_8set_max_nb_packets(struct __pyx_obj_8pynodegl_Media *__pyx_v_self, int __pyx_v_max_nb_packets); /* proto */
static PyObject *__pyx_pf_8pynodegl_5Media_10set_max_nb_frames(struct __pyx_obj_8pynodegl_Media *__pyx_v_self, int __pyx_v_max_nb_frames); /* proto */
static PyObject *__pyx_pf_8pynodegl_5Media_12set_max_nb_sink(struct __pyx_obj_8pynodegl_Media *__pyx_v_self, int __pyx_v_max_nb_sink); /* proto */
static PyObject *__pyx_pf_8pynodegl_5Media_14set_max_pixels(struct __pyx_obj_8pynodegl_Media *__pyx_v_self, int __pyx_v_max_pixels); /* proto */
static PyObject *__pyx_pf_8pynodegl_5Media_16set_stream_idx(struct __pyx_obj_8pynodegl_Media *__pyx_v_self, int __pyx_v_stream_idx); /* proto */
static PyObject *__pyx_pf_8pynodegl_5Media_18__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_Media *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pynodegl_5Media_20__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_Media *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_8pynodegl_7Program___init__(struct __pyx_obj_8pynodegl_Program *__pyx_v_self, PyObject *__pyx_v_vertex, PyObject *__pyx_v_fragment, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_8pynodegl_7Program_2set_vertex(struct __pyx_obj_8pynodegl_Program *__pyx_v_self, char const *__pyx_v_vertex); /* proto */
static PyObject *__pyx_pf_8pynodegl_7Program_4set_fragment(struct __pyx_obj_8pynodegl_Program *__pyx_v_self, char const *__pyx_v_fragment); /* proto */
static PyObject *__pyx_pf_8pynodegl_7Program_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_Program *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pynodegl_7Program_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_Program *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_8pynodegl_4Quad___init__(struct __pyx_obj_8pynodegl_Quad *__pyx_v_self, PyObject *__pyx_v_corner, PyObject *__pyx_v_width, PyObject *__pyx_v_height, PyObject *__pyx_v_uv_corner, PyObject *__pyx_v_uv_width, PyObject *__pyx_v_uv_height, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_8pynodegl_4Quad_2set_corner(struct __pyx_obj_8pynodegl_Quad *__pyx_v_self, PyObject *__pyx_v_corner); /* proto */
static PyObject *__pyx_pf_8pynodegl_4Quad_4set_width(struct __pyx_obj_8pynodegl_Quad *__pyx_v_self, PyObject *__pyx_v_width); /* proto */
static PyObject *__pyx_pf_8pynodegl_4Quad_6set_height(struct __pyx_obj_8pynodegl_Quad *__pyx_v_self, PyObject *__pyx_v_height); /* proto */
static PyObject *__pyx_pf_8pynodegl_4Quad_8set_uv_corner(struct __pyx_obj_8pynodegl_Quad *__pyx_v_self, PyObject *__pyx_v_uv_corner); /* proto */
static PyObject *__pyx_pf_8pynodegl_4Quad_10set_uv_width(struct __pyx_obj_8pynodegl_Quad *__pyx_v_self, PyObject *__pyx_v_uv_width); /* proto */
static PyObject *__pyx_pf_8pynodegl_4Quad_12set_uv_height(struct __pyx_obj_8pynodegl_Quad *__pyx_v_self, PyObject *__pyx_v_uv_height); /* proto */
static PyObject *__pyx_pf_8pynodegl_4Quad_14__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_Quad *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pynodegl_4Quad_16__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_Quad *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_8pynodegl_6Render___init__(struct __pyx_obj_8pynodegl_Render *__pyx_v_self, struct __pyx_obj_8pynodegl__Node *__pyx_v_geometry, PyObject *__pyx_v_program, PyObject *__pyx_v_textures, PyObject *__pyx_v_uniforms, PyObject *__pyx_v_blocks, PyObject *__pyx_v_attributes, PyObject *__pyx_v_instance_attributes, PyObject *__pyx_v_nb_instances, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_8pynodegl_6Render_2set_program(struct __pyx_obj_8pynodegl_Render *__pyx_v_self, struct __pyx_obj_8pynodegl__Node *__pyx_v_program); /* proto */
static PyObject *__pyx_pf_8pynodegl_6Render_4update_textures(struct __pyx_obj_8pynodegl_Render *__pyx_v_self, PyObject *__pyx_v_arg, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_8pynodegl_6Render_6update_uniforms(struct __pyx_obj_8pynodegl_Render *__pyx_v_self, PyObject *__pyx_v_arg, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_8pynodegl_6Render_8update_blocks(struct __pyx_obj_8pynodegl_Render *__pyx_v_self, PyObject *__pyx_v_arg, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_8pynodegl_6Render_10update_attributes(struct __pyx_obj_8pynodegl_Render *__pyx_v_self, PyObject *__pyx_v_arg, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_8pynodegl_6Render_12update_instance_attributes(struct __pyx_obj_8pynodegl_Render *__pyx_v_self, PyObject *__pyx_v_arg, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_8pynodegl_6Render_14set_nb_instances(struct __pyx_obj_8pynodegl_Render *__pyx_v_self, int __pyx_v_nb_instances); /* proto */
static PyObject *__pyx_pf_8pynodegl_6Render_16__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_Render *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pynodegl_6Render_18__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_Render *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_8pynodegl_15RenderToTexture___init__(struct __pyx_obj_8pynodegl_RenderToTexture *__pyx_v_self, struct __pyx_obj_8pynodegl__Node *__pyx_v_child, PyObject *__pyx_v_color_textures, PyObject *__pyx_v_depth_texture, PyObject *__pyx_v_samples, PyObject *__pyx_v_clear_color, PyObject *__pyx_v_features, PyObject *__pyx_v_vflip, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_8pynodegl_15RenderToTexture_2add_color_textures(struct __pyx_obj_8pynodegl_RenderToTexture *__pyx_v_self, PyObject *__pyx_v_color_textures); /* proto */
static PyObject *__pyx_pf_8pynodegl_15RenderToTexture_4set_depth_texture(struct __pyx_obj_8pynodegl_RenderToTexture *__pyx_v_self, struct __pyx_obj_8pynodegl__Node *__pyx_v_depth_texture); /* proto */
static PyObject *__pyx_pf_8pynodegl_15RenderToTexture_6set_samples(struct __pyx_obj_8pynodegl_RenderToTexture *__pyx_v_self, int __pyx_v_samples); /* proto */
static PyObject *__pyx_pf_8pynodegl_15RenderToTexture_8set_clear_color(struct __pyx_obj_8pynodegl_RenderToTexture *__pyx_v_self, PyObject *__pyx_v_clear_color); /* proto */
static PyObject *__pyx_pf_8pynodegl_15RenderToTexture_10set_features(struct __pyx_obj_8pynodegl_RenderToTexture *__pyx_v_self, char const *__pyx_v_features); /* proto */
static PyObject *__pyx_pf_8pynodegl_15RenderToTexture_12set_vflip(struct __pyx_obj_8pynodegl_RenderToTexture *__pyx_v_self, int __pyx_v_vflip); /* proto */
static PyObject *__pyx_pf_8pynodegl_15RenderToTexture_14__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_RenderToTexture *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pynodegl_15RenderToTexture_16__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_RenderToTexture *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_8pynodegl_6Rotate___init__(struct __pyx_obj_8pynodegl_Rotate *__pyx_v_self, struct __pyx_obj_8pynodegl__Node *__pyx_v_child, PyObject *__pyx_v_angle, PyObject *__pyx_v_axis, PyObject *__pyx_v_anchor, PyObject *__pyx_v_anim, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_8pynodegl_6Rotate_2set_angle(struct __pyx_obj_8pynodegl_Rotate *__pyx_v_self, double __pyx_v_angle); /* proto */
static PyObject *__pyx_pf_8pynodegl_6Rotate_4set_axis(struct __pyx_obj_8pynodegl_Rotate *__pyx_v_self, PyObject *__pyx_v_axis); /* proto */
static PyObject *__pyx_pf_8pynodegl_6Rotate_6set_anchor(struct __pyx_obj_8pynodegl_Rotate *__pyx_v_self, PyObject *__pyx_v_anchor); /* proto */
static PyObject *__pyx_pf_8pynodegl_6Rotate_8set_anim(struct __pyx_obj_8pynodegl_Rotate *__pyx_v_self, struct __pyx_obj_8pynodegl__Node *__pyx_v_anim); /* proto */
static PyObject *__pyx_pf_8pynodegl_6Rotate_10__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_Rotate *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pynodegl_6Rotate_12__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_Rotate *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_8pynodegl_10RotateQuat___init__(struct __pyx_obj_8pynodegl_RotateQuat *__pyx_v_self, struct __pyx_obj_8pynodegl__Node *__pyx_v_child, PyObject *__pyx_v_quat, PyObject *__pyx_v_anchor, PyObject *__pyx_v_anim, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_8pynodegl_10RotateQuat_2set_quat(struct __pyx_obj_8pynodegl_RotateQuat *__pyx_v_self, PyObject *__pyx_v_quat); /* proto */
static PyObject *__pyx_pf_8pynodegl_10RotateQuat_4set_anchor(struct __pyx_obj_8pynodegl_RotateQuat *__pyx_v_self, PyObject *__pyx_v_anchor); /* proto */
static PyObject *__pyx_pf_8pynodegl_10RotateQuat_6set_anim(struct __pyx_obj_8pynodegl_RotateQuat *__pyx_v_self, struct __pyx_obj_8pynodegl__Node *__pyx_v_anim); /* proto */
static PyObject *__pyx_pf_8pynodegl_10RotateQuat_8__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_RotateQuat *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pynodegl_10RotateQuat_10__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_RotateQuat *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_8pynodegl_5Scale___init__(struct __pyx_obj_8pynodegl_Scale *__pyx_v_self, struct __pyx_obj_8pynodegl__Node *__pyx_v_child, PyObject *__pyx_v_factors, PyObject *__pyx_v_anchor, PyObject *__pyx_v_anim, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_8pynodegl_5Scale_2set_factors(struct __pyx_obj_8pynodegl_Scale *__pyx_v_self, PyObject *__pyx_v_factors); /* proto */
static PyObject *__pyx_pf_8pynodegl_5Scale_4set_anchor(struct __pyx_obj_8pynodegl_Scale *__pyx_v_self, PyObject *__pyx_v_anchor); /* proto */
static PyObject *__pyx_pf_8pynodegl_5Scale_6set_anim(struct __pyx_obj_8pynodegl_Scale *__pyx_v_self, struct __pyx_obj_8pynodegl__Node *__pyx_v_anim); /* proto */
static PyObject *__pyx_pf_8pynodegl_5Scale_8__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_Scale *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pynodegl_5Scale_10__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_Scale *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_8pynodegl_4Text___init__(struct __pyx_obj_8pynodegl_Text *__pyx_v_self, char const *__pyx_v_text, PyObject *__pyx_v_fg_color, PyObject *__pyx_v_bg_color, PyObject *__pyx_v_box_corner, PyObject *__pyx_v_box_width, PyObject *__pyx_v_box_height, PyObject *__pyx_v_padding, PyObject *__pyx_v_font_scale, PyObject *__pyx_v_valign, PyObject *__pyx_v_halign, PyObject *__pyx_v_aspect_ratio, PyObject *__pyx_v_min_filter, PyObject *__pyx_v_mag_filter, PyObject *__pyx_v_mipmap_filter, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_8pynodegl_4Text_2set_fg_color(struct __pyx_obj_8pynodegl_Text *__pyx_v_self, PyObject *__pyx_v_fg_color); /* proto */
static PyObject *__pyx_pf_8pynodegl_4Text_4set_bg_color(struct __pyx_obj_8pynodegl_Text *__pyx_v_self, PyObject *__pyx_v_bg_color); /* proto */
static PyObject *__pyx_pf_8pynodegl_4Text_6set_box_corner(struct __pyx_obj_8pynodegl_Text *__pyx_v_self, PyObject *__pyx_v_box_corner); /* proto */
static PyObject *__pyx_pf_8pynodegl_4Text_8set_box_width(struct __pyx_obj_8pynodegl_Text *__pyx_v_self, PyObject *__pyx_v_box_width); /* proto */
static PyObject *__pyx_pf_8pynodegl_4Text_10set_box_height(struct __pyx_obj_8pynodegl_Text *__pyx_v_self, PyObject *__pyx_v_box_height); /* proto */
static PyObject *__pyx_pf_8pynodegl_4Text_12set_padding(struct __pyx_obj_8pynodegl_Text *__pyx_v_self, int __pyx_v_padding); /* proto */
static PyObject *__pyx_pf_8pynodegl_4Text_14set_font_scale(struct __pyx_obj_8pynodegl_Text *__pyx_v_self, double __pyx_v_font_scale); /* proto */
static PyObject *__pyx_pf_8pynodegl_4Text_16set_valign(struct __pyx_obj_8pynodegl_Text *__pyx_v_self, char const *__pyx_v_valign); /* proto */
static PyObject *__pyx_pf_8pynodegl_4Text_18set_halign(struct __pyx_obj_8pynodegl_Text *__pyx_v_self, char const *__pyx_v_halign); /* proto */
static PyObject *__pyx_pf_8pynodegl_4Text_20set_aspect_ratio(struct __pyx_obj_8pynodegl_Text *__pyx_v_self, PyObject *__pyx_v_aspect_ratio); /* proto */
static PyObject *__pyx_pf_8pynodegl_4Text_22set_min_filter(struct __pyx_obj_8pynodegl_Text *__pyx_v_self, char const *__pyx_v_min_filter); /* proto */
static PyObject *__pyx_pf_8pynodegl_4Text_24set_mag_filter(struct __pyx_obj_8pynodegl_Text *__pyx_v_self, char const *__pyx_v_mag_filter); /* proto */
static PyObject *__pyx_pf_8pynodegl_4Text_26set_mipmap_filter(struct __pyx_obj_8pynodegl_Text *__pyx_v_self, char const *__pyx_v_mipmap_filter); /* proto */
static PyObject *__pyx_pf_8pynodegl_4Text_28__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_Text *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pynodegl_4Text_30__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_Text *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_8pynodegl_9Texture2D___init__(struct __pyx_obj_8pynodegl_Texture2D *__pyx_v_self, PyObject *__pyx_v_format, PyObject *__pyx_v_width, PyObject *__pyx_v_height, PyObject *__pyx_v_min_filter, PyObject *__pyx_v_mag_filter, PyObject *__pyx_v_mipmap_filter, PyObject *__pyx_v_wrap_s, PyObject *__pyx_v_wrap_t, PyObject *__pyx_v_access, PyObject *__pyx_v_data_src, PyObject *__pyx_v_direct_rendering, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_8pynodegl_9Texture2D_2set_format(struct __pyx_obj_8pynodegl_Texture2D *__pyx_v_self, char const *__pyx_v_format); /* proto */
static PyObject *__pyx_pf_8pynodegl_9Texture2D_4set_width(struct __pyx_obj_8pynodegl_Texture2D *__pyx_v_self, int __pyx_v_width); /* proto */
static PyObject *__pyx_pf_8pynodegl_9Texture2D_6set_height(struct __pyx_obj_8pynodegl_Texture2D *__pyx_v_self, int __pyx_v_height); /* proto */
static PyObject *__pyx_pf_8pynodegl_9Texture2D_8set_min_filter(struct __pyx_obj_8pynodegl_Texture2D *__pyx_v_self, char const *__pyx_v_min_filter); /* proto */
static PyObject *__pyx_pf_8pynodegl_9Texture2D_10set_mag_filter(struct __pyx_obj_8pynodegl_Texture2D *__pyx_v_self, char const *__pyx_v_mag_filter); /* proto */
static PyObject *__pyx_pf_8pynodegl_9Texture2D_12set_mipmap_filter(struct __pyx_obj_8pynodegl_Texture2D *__pyx_v_self, char const *__pyx_v_mipmap_filter); /* proto */
static PyObject *__pyx_pf_8pynodegl_9Texture2D_14set_wrap_s(struct __pyx_obj_8pynodegl_Texture2D *__pyx_v_self, char const *__pyx_v_wrap_s); /* proto */
static PyObject *__pyx_pf_8pynodegl_9Texture2D_16set_wrap_t(struct __pyx_obj_8pynodegl_Texture2D *__pyx_v_self, char const *__pyx_v_wrap_t); /* proto */
static PyObject *__pyx_pf_8pynodegl_9Texture2D_18set_access(struct __pyx_obj_8pynodegl_Texture2D *__pyx_v_self, char const *__pyx_v_access); /* proto */
static PyObject *__pyx_pf_8pynodegl_9Texture2D_20set_data_src(struct __pyx_obj_8pynodegl_Texture2D *__pyx_v_self, struct __pyx_obj_8pynodegl__Node *__pyx_v_data_src); /* proto */
static PyObject *__pyx_pf_8pynodegl_9Texture2D_22set_direct_rendering(struct __pyx_obj_8pynodegl_Texture2D *__pyx_v_self, int __pyx_v_direct_rendering); /* proto */
static PyObject *__pyx_pf_8pynodegl_9Texture2D_24__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_Texture2D *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pynodegl_9Texture2D_26__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_Texture2D *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_8pynodegl_9Texture3D___init__(struct __pyx_obj_8pynodegl_Texture3D *__pyx_v_self, PyObject *__pyx_v_format, PyObject *__pyx_v_width, PyObject *__pyx_v_height, PyObject *__pyx_v_depth, PyObject *__pyx_v_min_filter, PyObject *__pyx_v_mag_filter, PyObject *__pyx_v_mipmap_filter, PyObject *__pyx_v_wrap_s, PyObject *__pyx_v_wrap_t, PyObject *__pyx_v_wrap_r, PyObject *__pyx_v_access, PyObject *__pyx_v_data_src, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_8pynodegl_9Texture3D_2set_format(struct __pyx_obj_8pynodegl_Texture3D *__pyx_v_self, char const *__pyx_v_format); /* proto */
static PyObject *__pyx_pf_8pynodegl_9Texture3D_4set_width(struct __pyx_obj_8pynodegl_Texture3D *__pyx_v_self, int __pyx_v_width); /* proto */
static PyObject *__pyx_pf_8pynodegl_9Texture3D_6set_height(struct __pyx_obj_8pynodegl_Texture3D *__pyx_v_self, int __pyx_v_height); /* proto */
static PyObject *__pyx_pf_8pynodegl_9Texture3D_8set_depth(struct __pyx_obj_8pynodegl_Texture3D *__pyx_v_self, int __pyx_v_depth); /* proto */
static PyObject *__pyx_pf_8pynodegl_9Texture3D_10set_min_filter(struct __pyx_obj_8pynodegl_Texture3D *__pyx_v_self, char const *__pyx_v_min_filter); /* proto */
static PyObject *__pyx_pf_8pynodegl_9Texture3D_12set_mag_filter(struct __pyx_obj_8pynodegl_Texture3D *__pyx_v_self, char const *__pyx_v_mag_filter); /* proto */
static PyObject *__pyx_pf_8pynodegl_9Texture3D_14set_mipmap_filter(struct __pyx_obj_8pynodegl_Texture3D *__pyx_v_self, char const *__pyx_v_mipmap_filter); /* proto */
static PyObject *__pyx_pf_8pynodegl_9Texture3D_16set_wrap_s(struct __pyx_obj_8pynodegl_Texture3D *__pyx_v_self, char const *__pyx_v_wrap_s); /* proto */
static PyObject *__pyx_pf_8pynodegl_9Texture3D_18set_wrap_t(struct __pyx_obj_8pynodegl_Texture3D *__pyx_v_self, char const *__pyx_v_wrap_t); /* proto */
static PyObject *__pyx_pf_8pynodegl_9Texture3D_20set_wrap_r(struct __pyx_obj_8pynodegl_Texture3D *__pyx_v_self, char const *__pyx_v_wrap_r); /* proto */
static PyObject *__pyx_pf_8pynodegl_9Texture3D_22set_access(struct __pyx_obj_8pynodegl_Texture3D *__pyx_v_self, char const *__pyx_v_access); /* proto */
static PyObject *__pyx_pf_8pynodegl_9Texture3D_24set_data_src(struct __pyx_obj_8pynodegl_Texture3D *__pyx_v_self, struct __pyx_obj_8pynodegl__Node *__pyx_v_data_src); /* proto */
static PyObject *__pyx_pf_8pynodegl_9Texture3D_26__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_Texture3D *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pynodegl_9Texture3D_28__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_Texture3D *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_8pynodegl_11TextureCube___init__(struct __pyx_obj_8pynodegl_TextureCube *__pyx_v_self, PyObject *__pyx_v_format, PyObject *__pyx_v_size, PyObject *__pyx_v_min_filter, PyObject *__pyx_v_mag_filter, PyObject *__pyx_v_mipmap_filter, PyObject *__pyx_v_wrap_s, PyObject *__pyx_v_wrap_t, PyObject *__pyx_v_wrap_r, PyObject *__pyx_v_access, PyObject *__pyx_v_data_src, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_8pynodegl_11TextureCube_2set_format(struct __pyx_obj_8pynodegl_TextureCube *__pyx_v_self, char const *__pyx_v_format); /* proto */
static PyObject *__pyx_pf_8pynodegl_11TextureCube_4set_size(struct __pyx_obj_8pynodegl_TextureCube *__pyx_v_self, int __pyx_v_size); /* proto */
static PyObject *__pyx_pf_8pynodegl_11TextureCube_6set_min_filter(struct __pyx_obj_8pynodegl_TextureCube *__pyx_v_self, char const *__pyx_v_min_filter); /* proto */
static PyObject *__pyx_pf_8pynodegl_11TextureCube_8set_mag_filter(struct __pyx_obj_8pynodegl_TextureCube *__pyx_v_self, char const *__pyx_v_mag_filter); /* proto */
static PyObject *__pyx_pf_8pynodegl_11TextureCube_10set_mipmap_filter(struct __pyx_obj_8pynodegl_TextureCube *__pyx_v_self, char const *__pyx_v_mipmap_filter); /* proto */
static PyObject *__pyx_pf_8pynodegl_11TextureCube_12set_wrap_s(struct __pyx_obj_8pynodegl_TextureCube *__pyx_v_self, char const *__pyx_v_wrap_s); /* proto */
static PyObject *__pyx_pf_8pynodegl_11TextureCube_14set_wrap_t(struct __pyx_obj_8pynodegl_TextureCube *__pyx_v_self, char const *__pyx_v_wrap_t); /* proto */
static PyObject *__pyx_pf_8pynodegl_11TextureCube_16set_wrap_r(struct __pyx_obj_8pynodegl_TextureCube *__pyx_v_self, char const *__pyx_v_wrap_r); /* proto */
static PyObject *__pyx_pf_8pynodegl_11TextureCube_18set_access(struct __pyx_obj_8pynodegl_TextureCube *__pyx_v_self, char const *__pyx_v_access); /* proto */
static PyObject *__pyx_pf_8pynodegl_11TextureCube_20set_data_src(struct __pyx_obj_8pynodegl_TextureCube *__pyx_v_self, struct __pyx_obj_8pynodegl__Node *__pyx_v_data_src); /* proto */
static PyObject *__pyx_pf_8pynodegl_11TextureCube_22__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_TextureCube *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pynodegl_11TextureCube_24__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_TextureCube *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_8pynodegl_15TimeRangeFilter___init__(struct __pyx_obj_8pynodegl_TimeRangeFilter *__pyx_v_self, struct __pyx_obj_8pynodegl__Node *__pyx_v_child, PyObject *__pyx_v_ranges, PyObject *__pyx_v_prefetch_time, PyObject *__pyx_v_max_idle_time, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_8pynodegl_15TimeRangeFilter_2add_ranges(struct __pyx_obj_8pynodegl_TimeRangeFilter *__pyx_v_self, PyObject *__pyx_v_ranges); /* proto */
static PyObject *__pyx_pf_8pynodegl_15TimeRangeFilter_4set_prefetch_time(struct __pyx_obj_8pynodegl_TimeRangeFilter *__pyx_v_self, double __pyx_v_prefetch_time); /* proto */
static PyObject *__pyx_pf_8pynodegl_15TimeRangeFilter_6set_max_idle_time(struct __pyx_obj_8pynodegl_TimeRangeFilter *__pyx_v_self, double __pyx_v_max_idle_time); /* proto */
static PyObject *__pyx_pf_8pynodegl_15TimeRangeFilter_8__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_TimeRangeFilter *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pynodegl_15TimeRangeFilter_10__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_TimeRangeFilter *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_8pynodegl_17TimeRangeModeCont___init__(struct __pyx_obj_8pynodegl_TimeRangeModeCont *__pyx_v_self, double __pyx_v_start_time, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_8pynodegl_17TimeRangeModeCont_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_TimeRangeModeCont *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pynodegl_17TimeRangeModeCont_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_TimeRangeModeCont *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_8pynodegl_17TimeRangeModeNoop___init__(struct __pyx_obj_8pynodegl_TimeRangeModeNoop *__pyx_v_self, double __pyx_v_start_time, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_8pynodegl_17TimeRangeModeNoop_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_TimeRangeModeNoop *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pynodegl_17TimeRangeModeNoop_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_TimeRangeModeNoop *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_8pynodegl_17TimeRangeModeOnce___init__(struct __pyx_obj_8pynodegl_TimeRangeModeOnce *__pyx_v_self, double __pyx_v_start_time, double __pyx_v_render_time, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_8pynodegl_17TimeRangeModeOnce_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_TimeRangeModeOnce *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pynodegl_17TimeRangeModeOnce_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_TimeRangeModeOnce *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_8pynodegl_9Transform___init__(struct __pyx_obj_8pynodegl_Transform *__pyx_v_self, struct __pyx_obj_8pynodegl__Node *__pyx_v_child, PyObject *__pyx_v_matrix, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_8pynodegl_9Transform_2set_matrix(struct __pyx_obj_8pynodegl_Transform *__pyx_v_self, PyObject *__pyx_v_matrix); /* proto */
static PyObject *__pyx_pf_8pynodegl_9Transform_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_Transform *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pynodegl_9Transform_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_Transform *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_8pynodegl_9Translate___init__(struct __pyx_obj_8pynodegl_Translate *__pyx_v_self, struct __pyx_obj_8pynodegl__Node *__pyx_v_child, PyObject *__pyx_v_vector, PyObject *__pyx_v_anim, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_8pynodegl_9Translate_2set_vector(struct __pyx_obj_8pynodegl_Translate *__pyx_v_self, PyObject *__pyx_v_vector); /* proto */
static PyObject *__pyx_pf_8pynodegl_9Translate_4set_anim(struct __pyx_obj_8pynodegl_Translate *__pyx_v_self, struct __pyx_obj_8pynodegl__Node *__pyx_v_anim); /* proto */
static PyObject *__pyx_pf_8pynodegl_9Translate_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_Translate *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pynodegl_9Translate_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_Translate *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_8pynodegl_8Triangle___init__(struct __pyx_obj_8pynodegl_Triangle *__pyx_v_self, PyObject *__pyx_v_edge0, PyObject *__pyx_v_edge1, PyObject *__pyx_v_edge2, PyObject *__pyx_v_uv_edge0, PyObject *__pyx_v_uv_edge1, PyObject *__pyx_v_uv_edge2, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_8pynodegl_8Triangle_2set_uv_edge0(struct __pyx_obj_8pynodegl_Triangle *__pyx_v_self, PyObject *__pyx_v_uv_edge0); /* proto */
static PyObject *__pyx_pf_8pynodegl_8Triangle_4set_uv_edge1(struct __pyx_obj_8pynodegl_Triangle *__pyx_v_self, PyObject *__pyx_v_uv_edge1); /* proto */
static PyObject *__pyx_pf_8pynodegl_8Triangle_6set_uv_edge2(struct __pyx_obj_8pynodegl_Triangle *__pyx_v_self, PyObject *__pyx_v_uv_edge2); /* proto */
static PyObject *__pyx_pf_8pynodegl_8Triangle_8__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_Triangle *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pynodegl_8Triangle_10__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_Triangle *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_8pynodegl_11StreamedInt___init__(struct __pyx_obj_8pynodegl_StreamedInt *__pyx_v_self, struct __pyx_obj_8pynodegl__Node *__pyx_v_timestamps, struct __pyx_obj_8pynodegl__Node *__pyx_v_buffer, PyObject *__pyx_v_timebase, PyObject *__pyx_v_time_anim, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_8pynodegl_11StreamedInt_2set_timebase(struct __pyx_obj_8pynodegl_StreamedInt *__pyx_v_self, PyObject *__pyx_v_timebase); /* proto */
static PyObject *__pyx_pf_8pynodegl_11StreamedInt_4set_time_anim(struct __pyx_obj_8pynodegl_StreamedInt *__pyx_v_self, struct __pyx_obj_8pynodegl__Node *__pyx_v_time_anim); /* proto */
static PyObject *__pyx_pf_8pynodegl_11StreamedInt_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_StreamedInt *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pynodegl_11StreamedInt_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_StreamedInt *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_8pynodegl_13StreamedFloat___init__(struct __pyx_obj_8pynodegl_StreamedFloat *__pyx_v_self, struct __pyx_obj_8pynodegl__Node *__pyx_v_timestamps, struct __pyx_obj_8pynodegl__Node *__pyx_v_buffer, PyObject *__pyx_v_timebase, PyObject *__pyx_v_time_anim, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_8pynodegl_13StreamedFloat_2set_timebase(struct __pyx_obj_8pynodegl_StreamedFloat *__pyx_v_self, PyObject *__pyx_v_timebase); /* proto */
static PyObject *__pyx_pf_8pynodegl_13StreamedFloat_4set_time_anim(struct __pyx_obj_8pynodegl_StreamedFloat *__pyx_v_self, struct __pyx_obj_8pynodegl__Node *__pyx_v_time_anim); /* proto */
static PyObject *__pyx_pf_8pynodegl_13StreamedFloat_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_StreamedFloat *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pynodegl_13StreamedFloat_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_StreamedFloat *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_8pynodegl_12StreamedVec2___init__(struct __pyx_obj_8pynodegl_StreamedVec2 *__pyx_v_self, struct __pyx_obj_8pynodegl__Node *__pyx_v_timestamps, struct __pyx_obj_8pynodegl__Node *__pyx_v_buffer, PyObject *__pyx_v_timebase, PyObject *__pyx_v_time_anim, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_8pynodegl_12StreamedVec2_2set_timebase(struct __pyx_obj_8pynodegl_StreamedVec2 *__pyx_v_self, PyObject *__pyx_v_timebase); /* proto */
static PyObject *__pyx_pf_8pynodegl_12StreamedVec2_4set_time_anim(struct __pyx_obj_8pynodegl_StreamedVec2 *__pyx_v_self, struct __pyx_obj_8pynodegl__Node *__pyx_v_time_anim); /* proto */
static PyObject *__pyx_pf_8pynodegl_12StreamedVec2_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_StreamedVec2 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pynodegl_12StreamedVec2_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_StreamedVec2 *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_8pynodegl_12StreamedVec3___init__(struct __pyx_obj_8pynodegl_StreamedVec3 *__pyx_v_self, struct __pyx_obj_8pynodegl__Node *__pyx_v_timestamps, struct __pyx_obj_8pynodegl__Node *__pyx_v_buffer, PyObject *__pyx_v_timebase, PyObject *__pyx_v_time_anim, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_8pynodegl_12StreamedVec3_2set_timebase(struct __pyx_obj_8pynodegl_StreamedVec3 *__pyx_v_self, PyObject *__pyx_v_timebase); /* proto */
static PyObject *__pyx_pf_8pynodegl_12StreamedVec3_4set_time_anim(struct __pyx_obj_8pynodegl_StreamedVec3 *__pyx_v_self, struct __pyx_obj_8pynodegl__Node *__pyx_v_time_anim); /* proto */
static PyObject *__pyx_pf_8pynodegl_12StreamedVec3_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_StreamedVec3 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pynodegl_12StreamedVec3_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_StreamedVec3 *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_8pynodegl_12StreamedVec4___init__(struct __pyx_obj_8pynodegl_StreamedVec4 *__pyx_v_self, struct __pyx_obj_8pynodegl__Node *__pyx_v_timestamps, struct __pyx_obj_8pynodegl__Node *__pyx_v_buffer, PyObject *__pyx_v_timebase, PyObject *__pyx_v_time_anim, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_8pynodegl_12StreamedVec4_2set_timebase(struct __pyx_obj_8pynodegl_StreamedVec4 *__pyx_v_self, PyObject *__pyx_v_timebase); /* proto */
static PyObject *__pyx_pf_8pynodegl_12StreamedVec4_4set_time_anim(struct __pyx_obj_8pynodegl_StreamedVec4 *__pyx_v_self, struct __pyx_obj_8pynodegl__Node *__pyx_v_time_anim); /* proto */
static PyObject *__pyx_pf_8pynodegl_12StreamedVec4_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_StreamedVec4 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pynodegl_12StreamedVec4_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_StreamedVec4 *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_8pynodegl_12StreamedMat4___init__(struct __pyx_obj_8pynodegl_StreamedMat4 *__pyx_v_self, struct __pyx_obj_8pynodegl__Node *__pyx_v_timestamps, struct __pyx_obj_8pynodegl__Node *__pyx_v_buffer, PyObject *__pyx_v_timebase, PyObject *__pyx_v_time_anim, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_8pynodegl_12StreamedMat4_2set_timebase(struct __pyx_obj_8pynodegl_StreamedMat4 *__pyx_v_self, PyObject *__pyx_v_timebase); /* proto */
static PyObject *__pyx_pf_8pynodegl_12StreamedMat4_4set_time_anim(struct __pyx_obj_8pynodegl_StreamedMat4 *__pyx_v_self, struct __pyx_obj_8pynodegl__Node *__pyx_v_time_anim); /* proto */
static PyObject *__pyx_pf_8pynodegl_12StreamedMat4_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_StreamedMat4 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pynodegl_12StreamedMat4_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_StreamedMat4 *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_8pynodegl_17StreamedBufferInt___init__(struct __pyx_obj_8pynodegl_StreamedBufferInt *__pyx_v_self, int __pyx_v_count, struct __pyx_obj_8pynodegl__Node *__pyx_v_timestamps, struct __pyx_obj_8pynodegl__Node *__pyx_v_buffer, PyObject *__pyx_v_timebase, PyObject *__pyx_v_time_anim, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_8pynodegl_17StreamedBufferInt_2set_timebase(struct __pyx_obj_8pynodegl_StreamedBufferInt *__pyx_v_self, PyObject *__pyx_v_timebase); /* proto */
static PyObject *__pyx_pf_8pynodegl_17StreamedBufferInt_4set_time_anim(struct __pyx_obj_8pynodegl_StreamedBufferInt *__pyx_v_self, struct __pyx_obj_8pynodegl__Node *__pyx_v_time_anim); /* proto */
static PyObject *__pyx_pf_8pynodegl_17StreamedBufferInt_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_StreamedBufferInt *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pynodegl_17StreamedBufferInt_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_StreamedBufferInt *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_8pynodegl_19StreamedBufferFloat___init__(struct __pyx_obj_8pynodegl_StreamedBufferFloat *__pyx_v_self, int __pyx_v_count, struct __pyx_obj_8pynodegl__Node *__pyx_v_timestamps, struct __pyx_obj_8pynodegl__Node *__pyx_v_buffer, PyObject *__pyx_v_timebase, PyObject *__pyx_v_time_anim, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_8pynodegl_19StreamedBufferFloat_2set_timebase(struct __pyx_obj_8pynodegl_StreamedBufferFloat *__pyx_v_self, PyObject *__pyx_v_timebase); /* proto */
static PyObject *__pyx_pf_8pynodegl_19StreamedBufferFloat_4set_time_anim(struct __pyx_obj_8pynodegl_StreamedBufferFloat *__pyx_v_self, struct __pyx_obj_8pynodegl__Node *__pyx_v_time_anim); /* proto */
static PyObject *__pyx_pf_8pynodegl_19StreamedBufferFloat_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_StreamedBufferFloat *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pynodegl_19StreamedBufferFloat_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_StreamedBufferFloat *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_8pynodegl_18StreamedBufferVec2___init__(struct __pyx_obj_8pynodegl_StreamedBufferVec2 *__pyx_v_self, int __pyx_v_count, struct __pyx_obj_8pynodegl__Node *__pyx_v_timestamps, struct __pyx_obj_8pynodegl__Node *__pyx_v_buffer, PyObject *__pyx_v_timebase, PyObject *__pyx_v_time_anim, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_8pynodegl_18StreamedBufferVec2_2set_timebase(struct __pyx_obj_8pynodegl_StreamedBufferVec2 *__pyx_v_self, PyObject *__pyx_v_timebase); /* proto */
static PyObject *__pyx_pf_8pynodegl_18StreamedBufferVec2_4set_time_anim(struct __pyx_obj_8pynodegl_StreamedBufferVec2 *__pyx_v_self, struct __pyx_obj_8pynodegl__Node *__pyx_v_time_anim); /* proto */
static PyObject *__pyx_pf_8pynodegl_18StreamedBufferVec2_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_StreamedBufferVec2 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pynodegl_18StreamedBufferVec2_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_StreamedBufferVec2 *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_8pynodegl_18StreamedBufferVec3___init__(struct __pyx_obj_8pynodegl_StreamedBufferVec3 *__pyx_v_self, int __pyx_v_count, struct __pyx_obj_8pynodegl__Node *__pyx_v_timestamps, struct __pyx_obj_8pynodegl__Node *__pyx_v_buffer, PyObject *__pyx_v_timebase, PyObject *__pyx_v_time_anim, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_8pynodegl_18StreamedBufferVec3_2set_timebase(struct __pyx_obj_8pynodegl_StreamedBufferVec3 *__pyx_v_self, PyObject *__pyx_v_timebase); /* proto */
static PyObject *__pyx_pf_8pynodegl_18StreamedBufferVec3_4set_time_anim(struct __pyx_obj_8pynodegl_StreamedBufferVec3 *__pyx_v_self, struct __pyx_obj_8pynodegl__Node *__pyx_v_time_anim); /* proto */
static PyObject *__pyx_pf_8pynodegl_18StreamedBufferVec3_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_StreamedBufferVec3 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pynodegl_18StreamedBufferVec3_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_StreamedBufferVec3 *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_8pynodegl_18StreamedBufferVec4___init__(struct __pyx_obj_8pynodegl_StreamedBufferVec4 *__pyx_v_self, int __pyx_v_count, struct __pyx_obj_8pynodegl__Node *__pyx_v_timestamps, struct __pyx_obj_8pynodegl__Node *__pyx_v_buffer, PyObject *__pyx_v_timebase, PyObject *__pyx_v_time_anim, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_8pynodegl_18StreamedBufferVec4_2set_timebase(struct __pyx_obj_8pynodegl_StreamedBufferVec4 *__pyx_v_self, PyObject *__pyx_v_timebase); /* proto */
static PyObject *__pyx_pf_8pynodegl_18StreamedBufferVec4_4set_time_anim(struct __pyx_obj_8pynodegl_StreamedBufferVec4 *__pyx_v_self, struct __pyx_obj_8pynodegl__Node *__pyx_v_time_anim); /* proto */
static PyObject *__pyx_pf_8pynodegl_18StreamedBufferVec4_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_StreamedBufferVec4 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pynodegl_18StreamedBufferVec4_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_StreamedBufferVec4 *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_8pynodegl_18StreamedBufferMat4___init__(struct __pyx_obj_8pynodegl_StreamedBufferMat4 *__pyx_v_self, int __pyx_v_count, struct __pyx_obj_8pynodegl__Node *__pyx_v_timestamps, struct __pyx_obj_8pynodegl__Node *__pyx_v_buffer, PyObject *__pyx_v_timebase, PyObject *__pyx_v_time_anim, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_8pynodegl_18StreamedBufferMat4_2set_timebase(struct __pyx_obj_8pynodegl_StreamedBufferMat4 *__pyx_v_self, PyObject *__pyx_v_timebase); /* proto */
static PyObject *__pyx_pf_8pynodegl_18StreamedBufferMat4_4set_time_anim(struct __pyx_obj_8pynodegl_StreamedBufferMat4 *__pyx_v_self, struct __pyx_obj_8pynodegl__Node *__pyx_v_time_anim); /* proto */
static PyObject *__pyx_pf_8pynodegl_18StreamedBufferMat4_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_StreamedBufferMat4 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pynodegl_18StreamedBufferMat4_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_StreamedBufferMat4 *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_8pynodegl_10UniformInt___init__(struct __pyx_obj_8pynodegl_UniformInt *__pyx_v_self, PyObject *__pyx_v_value, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_8pynodegl_10UniformInt_2set_value(struct __pyx_obj_8pynodegl_UniformInt *__pyx_v_self, int __pyx_v_value); /* proto */
static PyObject *__pyx_pf_8pynodegl_10UniformInt_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_UniformInt *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pynodegl_10UniformInt_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_UniformInt *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_8pynodegl_11UniformMat4___init__(struct __pyx_obj_8pynodegl_UniformMat4 *__pyx_v_self, PyObject *__pyx_v_value, PyObject *__pyx_v_transform, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_8pynodegl_11UniformMat4_2set_value(struct __pyx_obj_8pynodegl_UniformMat4 *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_8pynodegl_11UniformMat4_4set_transform(struct __pyx_obj_8pynodegl_UniformMat4 *__pyx_v_self, struct __pyx_obj_8pynodegl__Node *__pyx_v_transform); /* proto */
static PyObject *__pyx_pf_8pynodegl_11UniformMat4_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_UniformMat4 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pynodegl_11UniformMat4_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_UniformMat4 *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_8pynodegl_12UniformFloat___init__(struct __pyx_obj_8pynodegl_UniformFloat *__pyx_v_self, PyObject *__pyx_v_value, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_8pynodegl_12UniformFloat_2set_value(struct __pyx_obj_8pynodegl_UniformFloat *__pyx_v_self, double __pyx_v_value); /* proto */
static PyObject *__pyx_pf_8pynodegl_12UniformFloat_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_UniformFloat *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pynodegl_12UniformFloat_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_UniformFloat *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_8pynodegl_11UniformVec2___init__(struct __pyx_obj_8pynodegl_UniformVec2 *__pyx_v_self, PyObject *__pyx_v_value, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_8pynodegl_11UniformVec2_2set_value(struct __pyx_obj_8pynodegl_UniformVec2 *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_8pynodegl_11UniformVec2_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_UniformVec2 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pynodegl_11UniformVec2_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_UniformVec2 *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_8pynodegl_11UniformVec3___init__(struct __pyx_obj_8pynodegl_UniformVec3 *__pyx_v_self, PyObject *__pyx_v_value, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_8pynodegl_11UniformVec3_2set_value(struct __pyx_obj_8pynodegl_UniformVec3 *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_8pynodegl_11UniformVec3_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_UniformVec3 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pynodegl_11UniformVec3_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_UniformVec3 *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_8pynodegl_11UniformVec4___init__(struct __pyx_obj_8pynodegl_UniformVec4 *__pyx_v_self, PyObject *__pyx_v_value, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_8pynodegl_11UniformVec4_2set_value(struct __pyx_obj_8pynodegl_UniformVec4 *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_8pynodegl_11UniformVec4_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_UniformVec4 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pynodegl_11UniformVec4_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_UniformVec4 *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_8pynodegl_11UniformQuat___init__(struct __pyx_obj_8pynodegl_UniformQuat *__pyx_v_self, PyObject *__pyx_v_value, PyObject *__pyx_v_as_mat4, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_8pynodegl_11UniformQuat_2set_value(struct __pyx_obj_8pynodegl_UniformQuat *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_8pynodegl_11UniformQuat_4set_as_mat4(struct __pyx_obj_8pynodegl_UniformQuat *__pyx_v_self, int __pyx_v_as_mat4); /* proto */
static PyObject *__pyx_pf_8pynodegl_11UniformQuat_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_UniformQuat *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pynodegl_11UniformQuat_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_UniformQuat *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_8pynodegl_10UserSwitch___init__(struct __pyx_obj_8pynodegl_UserSwitch *__pyx_v_self, struct __pyx_obj_8pynodegl__Node *__pyx_v_child, PyObject *__pyx_v_enabled, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_8pynodegl_10UserSwitch_2set_enabled(struct __pyx_obj_8pynodegl_UserSwitch *__pyx_v_self, int __pyx_v_enabled); /* proto */
static PyObject *__pyx_pf_8pynodegl_10UserSwitch_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_UserSwitch *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pynodegl_10UserSwitch_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_UserSwitch *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_8pynodegl_log_set_min_level(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_level); /* proto */
static PyObject *__pyx_pf_8pynodegl_2easing_evaluate(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_name, PyObject *__pyx_v_t, PyObject *__pyx_v_args, PyObject *__pyx_v_offsets); /* proto */
static PyObject *__pyx_pf_8pynodegl_4easing_solve(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_name, PyObject *__pyx_v_v, PyObject *__pyx_v_args, PyObject *__pyx_v_offsets); /* proto */
static int __pyx_pf_8pynodegl_6Viewer___cinit__(struct __pyx_obj_8pynodegl_Viewer *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pynodegl_6Viewer_2configure(struct __pyx_obj_8pynodegl_Viewer *__pyx_v_self, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_8pynodegl_6Viewer_4resize(struct __pyx_obj_8pynodegl_Viewer *__pyx_v_self, PyObject *__pyx_v_width, PyObject *__pyx_v_height, PyObject *__pyx_v_viewport); /* proto */
static PyObject *__pyx_pf_8pynodegl_6Viewer_6set_scene(struct __pyx_obj_8pynodegl_Viewer *__pyx_v_self, struct __pyx_obj_8pynodegl__Node *__pyx_v_scene); /* proto */
static PyObject *__pyx_pf_8pynodegl_6Viewer_8set_scene_from_string(struct __pyx_obj_8pynodegl_Viewer *__pyx_v_self, PyObject *__pyx_v_s); /* proto */
static PyObject *__pyx_pf_8pynodegl_6Viewer_10draw(struct __pyx_obj_8pynodegl_Viewer *__pyx_v_self, double __pyx_v_t); /* proto */
static PyObject *__pyx_pf_8pynodegl_6Viewer_12dot(struct __pyx_obj_8pynodegl_Viewer *__pyx_v_self, double __pyx_v_t); /* proto */
static void __pyx_pf_8pynodegl_6Viewer_14__dealloc__(struct __pyx_obj_8pynodegl_Viewer *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pynodegl_6Viewer_16__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_Viewer *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8pynodegl_6Viewer_18__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_Viewer *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_7cpython_5array_5array___getbuffer__(arrayobject *__pyx_v_self, Py_buffer *__pyx_v_info, CYTHON_UNUSED int __pyx_v_flags); /* proto */
static void __pyx_pf_7cpython_5array_5array_2__releasebuffer__(CYTHON_UNUSED arrayobject *__pyx_v_self, Py_buffer *__pyx_v_info); /* proto */
static PyObject *__pyx_tp_new_8pynodegl__Node(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pynodegl__AnimatedBuffer(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pynodegl_AnimatedBufferFloat(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pynodegl_AnimatedBufferVec2(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pynodegl_AnimatedBufferVec3(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pynodegl_AnimatedBufferVec4(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pynodegl_AnimatedTime(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pynodegl_AnimatedFloat(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pynodegl_AnimatedVec2(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pynodegl_AnimatedVec3(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pynodegl_AnimatedVec4(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pynodegl_AnimatedQuat(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pynodegl_AnimKeyFrameFloat(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pynodegl_AnimKeyFrameVec2(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pynodegl_AnimKeyFrameVec3(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pynodegl_AnimKeyFrameVec4(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pynodegl_AnimKeyFrameQuat(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pynodegl_AnimKeyFrameBuffer(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pynodegl_Block(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pynodegl__Buffer(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pynodegl_BufferByte(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pynodegl_BufferBVec2(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pynodegl_BufferBVec3(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pynodegl_BufferBVec4(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pynodegl_BufferInt(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pynodegl_BufferInt64(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pynodegl_BufferIVec2(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pynodegl_BufferIVec3(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pynodegl_BufferIVec4(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pynodegl_BufferShort(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pynodegl_BufferSVec2(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pynodegl_BufferSVec3(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pynodegl_BufferSVec4(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pynodegl_BufferUByte(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pynodegl_BufferUBVec2(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pynodegl_BufferUBVec3(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pynodegl_BufferUBVec4(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pynodegl_BufferUInt(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pynodegl_BufferUIVec2(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pynodegl_BufferUIVec3(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pynodegl_BufferUIVec4(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pynodegl_BufferUShort(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pynodegl_BufferUSVec2(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pynodegl_BufferUSVec3(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pynodegl_BufferUSVec4(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pynodegl_BufferFloat(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pynodegl_BufferVec2(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pynodegl_BufferVec3(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pynodegl_BufferVec4(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pynodegl_BufferMat4(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pynodegl_Camera(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pynodegl_Circle(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pynodegl_Compute(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pynodegl_ComputeProgram(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pynodegl_Geometry(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pynodegl_GraphicConfig(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pynodegl_Group(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pynodegl_HUD(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pynodegl_Identity(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pynodegl_Media(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pynodegl_Program(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pynodegl_Quad(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pynodegl_Render(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pynodegl_RenderToTexture(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pynodegl_Rotate(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pynodegl_RotateQuat(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pynodegl_Scale(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pynodegl_Text(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pynodegl_Texture2D(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pynodegl_Texture3D(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pynodegl_TextureCube(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pynodegl_TimeRangeFilter(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pynodegl_TimeRangeModeCont(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pynodegl_TimeRangeModeNoop(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pynodegl_TimeRangeModeOnce(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pynodegl_Transform(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pynodegl_Translate(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pynodegl_Triangle(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pynodegl_StreamedInt(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pynodegl_StreamedFloat(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pynodegl_StreamedVec2(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pynodegl_StreamedVec3(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pynodegl_StreamedVec4(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pynodegl_StreamedMat4(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pynodegl_StreamedBufferInt(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pynodegl_StreamedBufferFloat(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pynodegl_StreamedBufferVec2(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pynodegl_StreamedBufferVec3(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pynodegl_StreamedBufferVec4(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pynodegl_StreamedBufferMat4(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pynodegl_UniformInt(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pynodegl_UniformMat4(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pynodegl_UniformFloat(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pynodegl_UniformVec2(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pynodegl_UniformVec3(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pynodegl_UniformVec4(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pynodegl_UniformQuat(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pynodegl_UserSwitch(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8pynodegl_Viewer(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static __Pyx_CachedCFunction __pyx_umethod_PyDict_Type_get = {0, &__pyx_n_s_get, 0, 0, 0};
static __Pyx_CachedCFunction __pyx_umethod_PyDict_Type_update = {0, &__pyx_n_s_update, 0, 0, 0};
static PyObject *__pyx_float_0_0;
static PyObject *__pyx_float_1_0;
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_1;
static PyObject *__pyx_int_neg_1;
static PyObject *__pyx_tuple__2;
static PyObject *__pyx_tuple__3;
static PyObject *__pyx_tuple__4;
static PyObject *__pyx_tuple__5;
static PyObject *__pyx_tuple__6;
static PyObject *__pyx_tuple__7;
static PyObject *__pyx_tuple__8;
static PyObject *__pyx_tuple__9;
static PyObject *__pyx_tuple__10;
static PyObject *__pyx_tuple__11;
static PyObject *__pyx_tuple__12;
static PyObject *__pyx_tuple__13;
static PyObject *__pyx_tuple__14;
static PyObject *__pyx_tuple__15;
static PyObject *__pyx_tuple__16;
static PyObject *__pyx_tuple__17;
static PyObject *__pyx_tuple__18;
static PyObject *__pyx_tuple__19;
static PyObject *__pyx_tuple__20;
static PyObject *__pyx_tuple__21;
static PyObject *__pyx_tuple__22;
static PyObject *__pyx_tuple__23;
static PyObject *__pyx_tuple__24;
static PyObject *__pyx_tuple__25;
static PyObject *__pyx_tuple__26;
static PyObject *__pyx_tuple__27;
static PyObject *__pyx_tuple__28;
static PyObject *__pyx_tuple__29;
static PyObject *__pyx_tuple__30;
static PyObject *__pyx_tuple__31;
static PyObject *__pyx_tuple__32;
static PyObject *__pyx_tuple__33;
static PyObject *__pyx_tuple__34;
static PyObject *__pyx_tuple__35;
static PyObject *__pyx_tuple__36;
static PyObject *__pyx_tuple__37;
static PyObject *__pyx_tuple__38;
static PyObject *__pyx_tuple__39;
static PyObject *__pyx_tuple__40;
static PyObject *__pyx_tuple__41;
static PyObject *__pyx_tuple__42;
static PyObject *__pyx_tuple__43;
static PyObject *__pyx_tuple__44;
static PyObject *__pyx_tuple__45;
static PyObject *__pyx_tuple__46;
static PyObject *__pyx_tuple__47;
static PyObject *__pyx_tuple__48;
static PyObject *__pyx_tuple__49;
static PyObject *__pyx_tuple__50;
static PyObject *__pyx_tuple__51;
static PyObject *__pyx_tuple__52;
static PyObject *__pyx_tuple__53;
static PyObject *__pyx_tuple__54;
static PyObject *__pyx_tuple__55;
static PyObject *__pyx_tuple__56;
static PyObject *__pyx_tuple__57;
static PyObject *__pyx_tuple__58;
static PyObject *__pyx_tuple__59;
static PyObject *__pyx_tuple__60;
static PyObject *__pyx_tuple__61;
static PyObject *__pyx_tuple__62;
static PyObject *__pyx_tuple__63;
static PyObject *__pyx_tuple__64;
static PyObject *__pyx_tuple__65;
static PyObject *__pyx_tuple__66;
static PyObject *__pyx_tuple__67;
static PyObject *__pyx_tuple__68;
static PyObject *__pyx_tuple__69;
static PyObject *__pyx_tuple__70;
static PyObject *__pyx_tuple__71;
static PyObject *__pyx_tuple__72;
static PyObject *__pyx_tuple__73;
static PyObject *__pyx_tuple__74;
static PyObject *__pyx_tuple__75;
static PyObject *__pyx_tuple__76;
static PyObject *__pyx_tuple__77;
static PyObject *__pyx_tuple__78;
static PyObject *__pyx_tuple__79;
static PyObject *__pyx_tuple__80;
static PyObject *__pyx_tuple__81;
static PyObject *__pyx_tuple__82;
static PyObject *__pyx_tuple__83;
static PyObject *__pyx_tuple__84;
static PyObject *__pyx_tuple__85;
static PyObject *__pyx_tuple__86;
static PyObject *__pyx_tuple__87;
static PyObject *__pyx_tuple__88;
static PyObject *__pyx_tuple__89;
static PyObject *__pyx_tuple__90;
static PyObject *__pyx_tuple__91;
static PyObject *__pyx_tuple__92;
static PyObject *__pyx_tuple__93;
static PyObject *__pyx_tuple__94;
static PyObject *__pyx_tuple__95;
static PyObject *__pyx_tuple__96;
static PyObject *__pyx_tuple__97;
static PyObject *__pyx_tuple__98;
static PyObject *__pyx_tuple__99;
static PyObject *__pyx_tuple__100;
static PyObject *__pyx_tuple__101;
static PyObject *__pyx_tuple__102;
static PyObject *__pyx_tuple__103;
static PyObject *__pyx_tuple__104;
static PyObject *__pyx_tuple__105;
static PyObject *__pyx_tuple__106;
static PyObject *__pyx_tuple__107;
static PyObject *__pyx_tuple__108;
static PyObject *__pyx_tuple__109;
static PyObject *__pyx_tuple__110;
static PyObject *__pyx_tuple__111;
static PyObject *__pyx_tuple__112;
static PyObject *__pyx_tuple__113;
static PyObject *__pyx_tuple__114;
static PyObject *__pyx_tuple__115;
static PyObject *__pyx_tuple__116;
static PyObject *__pyx_tuple__117;
static PyObject *__pyx_tuple__118;
static PyObject *__pyx_tuple__119;
static PyObject *__pyx_tuple__120;
static PyObject *__pyx_tuple__121;
static PyObject *__pyx_tuple__122;
static PyObject *__pyx_tuple__123;
static PyObject *__pyx_tuple__124;
static PyObject *__pyx_tuple__125;
static PyObject *__pyx_tuple__126;
static PyObject *__pyx_tuple__127;
static PyObject *__pyx_tuple__128;
static PyObject *__pyx_tuple__129;
static PyObject *__pyx_tuple__130;
static PyObject *__pyx_tuple__131;
static PyObject *__pyx_tuple__132;
static PyObject *__pyx_tuple__133;
static PyObject *__pyx_tuple__134;
static PyObject *__pyx_tuple__135;
static PyObject *__pyx_tuple__136;
static PyObject *__pyx_tuple__137;
static PyObject *__pyx_tuple__138;
static PyObject *__pyx_tuple__139;
static PyObject *__pyx_tuple__140;
static PyObject *__pyx_tuple__141;
static PyObject *__pyx_tuple__142;
static PyObject *__pyx_tuple__143;
static PyObject *__pyx_tuple__144;
static PyObject *__pyx_tuple__145;
static PyObject *__pyx_tuple__146;
static PyObject *__pyx_tuple__147;
static PyObject *__pyx_tuple__148;
static PyObject *__pyx_tuple__149;
static PyObject *__pyx_tuple__150;
static PyObject *__pyx_tuple__151;
static PyObject *__pyx_tuple__152;
static PyObject *__pyx_tuple__153;
static PyObject *__pyx_tuple__154;
static PyObject *__pyx_tuple__155;
static PyObject *__pyx_tuple__156;
static PyObject *__pyx_tuple__157;
static PyObject *__pyx_tuple__158;
static PyObject *__pyx_tuple__159;
static PyObject *__pyx_tuple__160;
static PyObject *__pyx_tuple__161;
static PyObject *__pyx_tuple__162;
static PyObject *__pyx_tuple__163;
static PyObject *__pyx_tuple__164;
static PyObject *__pyx_tuple__165;
static PyObject *__pyx_tuple__166;
static PyObject *__pyx_tuple__167;
static PyObject *__pyx_tuple__168;
static PyObject *__pyx_tuple__169;
static PyObject *__pyx_tuple__170;
static PyObject *__pyx_tuple__171;
static PyObject *__pyx_tuple__172;
static PyObject *__pyx_tuple__173;
static PyObject *__pyx_tuple__174;
static PyObject *__pyx_tuple__175;
static PyObject *__pyx_tuple__176;
static PyObject *__pyx_tuple__177;
static PyObject *__pyx_tuple__178;
static PyObject *__pyx_tuple__179;
static PyObject *__pyx_tuple__180;
static PyObject *__pyx_tuple__181;
static PyObject *__pyx_tuple__182;
static PyObject *__pyx_tuple__183;
static PyObject *__pyx_tuple__184;
static PyObject *__pyx_tuple__185;
static PyObject *__pyx_tuple__186;
static PyObject *__pyx_tuple__187;
static PyObject *__pyx_tuple__188;
static PyObject *__pyx_tuple__189;
static PyObject *__pyx_tuple__190;
static PyObject *__pyx_tuple__191;
static PyObject *__pyx_tuple__192;
static PyObject *__pyx_tuple__193;
static PyObject *__pyx_tuple__194;
static PyObject *__pyx_tuple__195;
static PyObject *__pyx_tuple__196;
static PyObject *__pyx_tuple__197;
static PyObject *__pyx_tuple__198;
static PyObject *__pyx_tuple__199;
static PyObject *__pyx_tuple__200;
static PyObject *__pyx_tuple__201;
static PyObject *__pyx_tuple__202;
static PyObject *__pyx_tuple__203;
static PyObject *__pyx_tuple__204;
static PyObject *__pyx_tuple__205;
static PyObject *__pyx_tuple__206;
static PyObject *__pyx_tuple__207;
static PyObject *__pyx_tuple__208;
static PyObject *__pyx_tuple__210;
static PyObject *__pyx_tuple__212;
static PyObject *__pyx_codeobj__209;
static PyObject *__pyx_codeobj__211;
static PyObject *__pyx_codeobj__213;
/* Late includes */

/* "pynodegl.pyx":115
 * LOG_ERROR   = NGL_LOG_ERROR
 * 
 * cdef _ret_pystr(char *s):             # <<<<<<<<<<<<<<
 *     try:
 *         pystr = <bytes>s
 */

static PyObject *__pyx_f_8pynodegl__ret_pystr(char *__pyx_v_s) {
  PyObject *__pyx_v_pystr = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  char const *__pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  __Pyx_RefNannySetupContext("_ret_pystr", 0);

  /* "pynodegl.pyx":116
 * 
 * cdef _ret_pystr(char *s):
 *     try:             # <<<<<<<<<<<<<<
 *         pystr = <bytes>s
 *     finally:
 */
  /*try:*/ {

    /* "pynodegl.pyx":117
 * cdef _ret_pystr(char *s):
 *     try:
 *         pystr = <bytes>s             # <<<<<<<<<<<<<<
 *     finally:
 *         free(s)
 */
    __pyx_t_1 = __Pyx_PyBytes_FromString(__pyx_v_s); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 117, __pyx_L4_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __pyx_t_1;
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_pystr = ((PyObject*)__pyx_t_2);
    __pyx_t_2 = 0;
  }

  /* "pynodegl.pyx":119
 *         pystr = <bytes>s
 *     finally:
 *         free(s)             # <<<<<<<<<<<<<<
 *     return pystr
 * 
 */
  /*finally:*/ {
    /*normal exit:*/{
      free(__pyx_v_s);
      goto __pyx_L5;
    }
    __pyx_L4_error:;
    /*exception exit:*/{
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __pyx_t_6 = 0; __pyx_t_7 = 0; __pyx_t_8 = 0; __pyx_t_9 = 0; __pyx_t_10 = 0; __pyx_t_11 = 0;
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_9, &__pyx_t_10, &__pyx_t_11);
      if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_6, &__pyx_t_7, &__pyx_t_8) < 0)) __Pyx_ErrFetch(&__pyx_t_6, &__pyx_t_7, &__pyx_t_8);
      __Pyx_XGOTREF(__pyx_t_6);
      __Pyx_XGOTREF(__pyx_t_7);
      __Pyx_XGOTREF(__pyx_t_8);
      __Pyx_XGOTREF(__pyx_t_9);
      __Pyx_XGOTREF(__pyx_t_10);
      __Pyx_XGOTREF(__pyx_t_11);
      __pyx_t_3 = __pyx_lineno; __pyx_t_4 = __pyx_clineno; __pyx_t_5 = __pyx_filename;
      {
        free(__pyx_v_s);
      }
      if (PY_MAJOR_VERSION >= 3) {
        __Pyx_XGIVEREF(__pyx_t_9);
        __Pyx_XGIVEREF(__pyx_t_10);
        __Pyx_XGIVEREF(__pyx_t_11);
        __Pyx_ExceptionReset(__pyx_t_9, __pyx_t_10, __pyx_t_11);
      }
      __Pyx_XGIVEREF(__pyx_t_6);
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_XGIVEREF(__pyx_t_8);
      __Pyx_ErrRestore(__pyx_t_6, __pyx_t_7, __pyx_t_8);
      __pyx_t_6 = 0; __pyx_t_7 = 0; __pyx_t_8 = 0; __pyx_t_9 = 0; __pyx_t_10 = 0; __pyx_t_11 = 0;
      __pyx_lineno = __pyx_t_3; __pyx_clineno = __pyx_t_4; __pyx_filename = __pyx_t_5;
      goto __pyx_L1_error;
    }
    __pyx_L5:;
  }

  /* "pynodegl.pyx":120
 *     finally:
 *         free(s)
 *     return pystr             # <<<<<<<<<<<<<<
 * 
 * include "nodes_def.pyx"
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_pystr);
  __pyx_r = __pyx_v_pystr;
  goto __pyx_L0;

  /* "pynodegl.pyx":115
 * LOG_ERROR   = NGL_LOG_ERROR
 * 
 * cdef _ret_pystr(char *s):             # <<<<<<<<<<<<<<
 *     try:
 *         pystr = <bytes>s
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pynodegl._ret_pystr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_pystr);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":106
 * 
 *     @property
 *     def cptr(self):             # <<<<<<<<<<<<<<
 *         return <uintptr_t>self.ctx
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_5_Node_4cptr_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_8pynodegl_5_Node_4cptr_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_5_Node_4cptr___get__(((struct __pyx_obj_8pynodegl__Node *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_5_Node_4cptr___get__(struct __pyx_obj_8pynodegl__Node *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "nodes_def.pyx":107
 *     @property
 *     def cptr(self):
 *         return <uintptr_t>self.ctx             # <<<<<<<<<<<<<<
 * 
 *     def serialize(self, filename=""):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(((uintptr_t)__pyx_v_self->ctx)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 107, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":106
 * 
 *     @property
 *     def cptr(self):             # <<<<<<<<<<<<<<
 *         return <uintptr_t>self.ctx
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl._Node.cptr.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":109
 *         return <uintptr_t>self.ctx
 * 
 *     def serialize(self, filename=""):             # <<<<<<<<<<<<<<
 *         return _ret_pystr(ngl_node_serialize(self.ctx, <const char *>filename))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_5_Node_1serialize(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_8pynodegl_5_Node_1serialize(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_filename = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("serialize (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_filename,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)__pyx_kp_u_);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_filename);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "serialize") < 0)) __PYX_ERR(0, 109, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_filename = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("serialize", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 109, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pynodegl._Node.serialize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pynodegl_5_Node_serialize(((struct __pyx_obj_8pynodegl__Node *)__pyx_v_self), __pyx_v_filename);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_5_Node_serialize(struct __pyx_obj_8pynodegl__Node *__pyx_v_self, PyObject *__pyx_v_filename) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  char const *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("serialize", 0);

  /* "nodes_def.pyx":110
 * 
 *     def serialize(self, filename=""):
 *         return _ret_pystr(ngl_node_serialize(self.ctx, <const char *>filename))             # <<<<<<<<<<<<<<
 * 
 *     def dot(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_AsString(__pyx_v_filename); if (unlikely((!__pyx_t_1) && PyErr_Occurred())) __PYX_ERR(0, 110, __pyx_L1_error)
  __pyx_t_2 = __pyx_f_8pynodegl__ret_pystr(ngl_node_serialize(__pyx_v_self->ctx, ((char const *)__pyx_t_1))); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 110, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":109
 *         return <uintptr_t>self.ctx
 * 
 *     def serialize(self, filename=""):             # <<<<<<<<<<<<<<
 *         return _ret_pystr(ngl_node_serialize(self.ctx, <const char *>filename))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pynodegl._Node.serialize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":112
 *         return _ret_pystr(ngl_node_serialize(self.ctx, <const char *>filename))
 * 
 *     def dot(self):             # <<<<<<<<<<<<<<
 *         return _ret_pystr(ngl_node_dot(self.ctx))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_5_Node_3dot(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pynodegl_5_Node_3dot(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("dot (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_5_Node_2dot(((struct __pyx_obj_8pynodegl__Node *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_5_Node_2dot(struct __pyx_obj_8pynodegl__Node *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("dot", 0);

  /* "nodes_def.pyx":113
 * 
 *     def dot(self):
 *         return _ret_pystr(ngl_node_dot(self.ctx))             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8pynodegl__ret_pystr(ngl_node_dot(__pyx_v_self->ctx)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 113, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":112
 *         return _ret_pystr(ngl_node_serialize(self.ctx, <const char *>filename))
 * 
 *     def dot(self):             # <<<<<<<<<<<<<<
 *         return _ret_pystr(ngl_node_dot(self.ctx))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl._Node.dot", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":115
 *         return _ret_pystr(ngl_node_dot(self.ctx))
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         ngl_node_unrefp(&self.ctx)
 * 
 */

/* Python wrapper */
static void __pyx_pw_8pynodegl_5_Node_5__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_8pynodegl_5_Node_5__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_8pynodegl_5_Node_4__dealloc__(((struct __pyx_obj_8pynodegl__Node *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_8pynodegl_5_Node_4__dealloc__(struct __pyx_obj_8pynodegl__Node *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "nodes_def.pyx":116
 * 
 *     def __dealloc__(self):
 *         ngl_node_unrefp(&self.ctx)             # <<<<<<<<<<<<<<
 * 
 *     def _update_dict(self, field_name, arg=None, **kwargs):
 */
  ngl_node_unrefp((&__pyx_v_self->ctx));

  /* "nodes_def.pyx":115
 *         return _ret_pystr(ngl_node_dot(self.ctx))
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         ngl_node_unrefp(&self.ctx)
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "nodes_def.pyx":118
 *         ngl_node_unrefp(&self.ctx)
 * 
 *     def _update_dict(self, field_name, arg=None, **kwargs):             # <<<<<<<<<<<<<<
 *         cdef ngl_node *node
 *         data_dict = {}
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_5_Node_7_update_dict(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_8pynodegl_5_Node_7_update_dict(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_field_name = 0;
  PyObject *__pyx_v_arg = 0;
  PyObject *__pyx_v_kwargs = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_update_dict (wrapper)", 0);
  __pyx_v_kwargs = PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return NULL;
  __Pyx_GOTREF(__pyx_v_kwargs);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_field_name,&__pyx_n_s_arg,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_field_name)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_arg);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_kwargs, values, pos_args, "_update_dict") < 0)) __PYX_ERR(0, 118, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_field_name = values[0];
    __pyx_v_arg = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_update_dict", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 118, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
  __Pyx_AddTraceback("pynodegl._Node._update_dict", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pynodegl_5_Node_6_update_dict(((struct __pyx_obj_8pynodegl__Node *)__pyx_v_self), __pyx_v_field_name, __pyx_v_arg, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_5_Node_6_update_dict(struct __pyx_obj_8pynodegl__Node *__pyx_v_self, PyObject *__pyx_v_field_name, PyObject *__pyx_v_arg, PyObject *__pyx_v_kwargs) {
  struct ngl_node *__pyx_v_node;
  PyObject *__pyx_v_data_dict = NULL;
  PyObject *__pyx_v_key = NULL;
  PyObject *__pyx_v_val = NULL;
  int __pyx_v_ret;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  int __pyx_t_10;
  struct ngl_node *__pyx_t_11;
  char const *__pyx_t_12;
  char const *__pyx_t_13;
  __Pyx_RefNannySetupContext("_update_dict", 0);

  /* "nodes_def.pyx":120
 *     def _update_dict(self, field_name, arg=None, **kwargs):
 *         cdef ngl_node *node
 *         data_dict = {}             # <<<<<<<<<<<<<<
 *         if arg is not None:
 *             if not isinstance(arg, dict):
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 120, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_data_dict = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "nodes_def.pyx":121
 *         cdef ngl_node *node
 *         data_dict = {}
 *         if arg is not None:             # <<<<<<<<<<<<<<
 *             if not isinstance(arg, dict):
 *                 raise TypeError("%s must be of type dict" % field_name)
 */
  __pyx_t_2 = (__pyx_v_arg != Py_None);
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "nodes_def.pyx":122
 *         data_dict = {}
 *         if arg is not None:
 *             if not isinstance(arg, dict):             # <<<<<<<<<<<<<<
 *                 raise TypeError("%s must be of type dict" % field_name)
 *             data_dict.update(arg)
 */
    __pyx_t_3 = PyDict_Check(__pyx_v_arg); 
    __pyx_t_2 = ((!(__pyx_t_3 != 0)) != 0);
    if (unlikely(__pyx_t_2)) {

      /* "nodes_def.pyx":123
 *         if arg is not None:
 *             if not isinstance(arg, dict):
 *                 raise TypeError("%s must be of type dict" % field_name)             # <<<<<<<<<<<<<<
 *             data_dict.update(arg)
 *         data_dict.update(**kwargs)
 */
      __pyx_t_1 = __Pyx_PyUnicode_FormatSafe(__pyx_kp_u_s_must_be_of_type_dict, __pyx_v_field_name); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 123, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 123, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_Raise(__pyx_t_4, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __PYX_ERR(0, 123, __pyx_L1_error)

      /* "nodes_def.pyx":122
 *         data_dict = {}
 *         if arg is not None:
 *             if not isinstance(arg, dict):             # <<<<<<<<<<<<<<
 *                 raise TypeError("%s must be of type dict" % field_name)
 *             data_dict.update(arg)
 */
    }

    /* "nodes_def.pyx":124
 *             if not isinstance(arg, dict):
 *                 raise TypeError("%s must be of type dict" % field_name)
 *             data_dict.update(arg)             # <<<<<<<<<<<<<<
 *         data_dict.update(**kwargs)
 *         for key, val in data_dict.items():
 */
    __pyx_t_4 = __Pyx_CallUnboundCMethod1(&__pyx_umethod_PyDict_Type_update, __pyx_v_data_dict, __pyx_v_arg); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 124, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "nodes_def.pyx":121
 *         cdef ngl_node *node
 *         data_dict = {}
 *         if arg is not None:             # <<<<<<<<<<<<<<
 *             if not isinstance(arg, dict):
 *                 raise TypeError("%s must be of type dict" % field_name)
 */
  }

  /* "nodes_def.pyx":125
 *                 raise TypeError("%s must be of type dict" % field_name)
 *             data_dict.update(arg)
 *         data_dict.update(**kwargs)             # <<<<<<<<<<<<<<
 *         for key, val in data_dict.items():
 *             if not isinstance(key, str) or (val is not None and not isinstance(val, _Node)):
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_data_dict, __pyx_n_s_update); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 125, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_empty_tuple, __pyx_v_kwargs); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 125, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "nodes_def.pyx":126
 *             data_dict.update(arg)
 *         data_dict.update(**kwargs)
 *         for key, val in data_dict.items():             # <<<<<<<<<<<<<<
 *             if not isinstance(key, str) or (val is not None and not isinstance(val, _Node)):
 *                 raise TypeError("update_%s() takes a dictionary of <string, Node>" % field_name)
 */
  __pyx_t_5 = 0;
  __pyx_t_4 = __Pyx_dict_iterator(__pyx_v_data_dict, 1, __pyx_n_s_items, (&__pyx_t_6), (&__pyx_t_7)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 126, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_1);
  __pyx_t_1 = __pyx_t_4;
  __pyx_t_4 = 0;
  while (1) {
    __pyx_t_9 = __Pyx_dict_iter_next(__pyx_t_1, __pyx_t_6, &__pyx_t_5, &__pyx_t_4, &__pyx_t_8, NULL, __pyx_t_7);
    if (unlikely(__pyx_t_9 == 0)) break;
    if (unlikely(__pyx_t_9 == -1)) __PYX_ERR(0, 126, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_XDECREF_SET(__pyx_v_key, __pyx_t_4);
    __pyx_t_4 = 0;
    __Pyx_XDECREF_SET(__pyx_v_val, __pyx_t_8);
    __pyx_t_8 = 0;

    /* "nodes_def.pyx":127
 *         data_dict.update(**kwargs)
 *         for key, val in data_dict.items():
 *             if not isinstance(key, str) or (val is not None and not isinstance(val, _Node)):             # <<<<<<<<<<<<<<
 *                 raise TypeError("update_%s() takes a dictionary of <string, Node>" % field_name)
 *             node = (<_Node>val).ctx if val is not None else NULL
 */
    __pyx_t_3 = PyUnicode_Check(__pyx_v_key); 
    __pyx_t_10 = ((!(__pyx_t_3 != 0)) != 0);
    if (!__pyx_t_10) {
    } else {
      __pyx_t_2 = __pyx_t_10;
      goto __pyx_L8_bool_binop_done;
    }
    __pyx_t_10 = (__pyx_v_val != Py_None);
    __pyx_t_3 = (__pyx_t_10 != 0);
    if (__pyx_t_3) {
    } else {
      __pyx_t_2 = __pyx_t_3;
      goto __pyx_L8_bool_binop_done;
    }
    __pyx_t_3 = __Pyx_TypeCheck(__pyx_v_val, __pyx_ptype_8pynodegl__Node); 
    __pyx_t_10 = ((!(__pyx_t_3 != 0)) != 0);
    __pyx_t_2 = __pyx_t_10;
    __pyx_L8_bool_binop_done:;
    if (unlikely(__pyx_t_2)) {

      /* "nodes_def.pyx":128
 *         for key, val in data_dict.items():
 *             if not isinstance(key, str) or (val is not None and not isinstance(val, _Node)):
 *                 raise TypeError("update_%s() takes a dictionary of <string, Node>" % field_name)             # <<<<<<<<<<<<<<
 *             node = (<_Node>val).ctx if val is not None else NULL
 *             ret = ngl_node_param_set(self.ctx, field_name, <const char *>key, node)
 */
      __pyx_t_8 = __Pyx_PyUnicode_FormatSafe(__pyx_kp_u_update__s_takes_a_dictionary_of, __pyx_v_field_name); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 128, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_8); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 128, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_Raise(__pyx_t_4, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __PYX_ERR(0, 128, __pyx_L1_error)

      /* "nodes_def.pyx":127
 *         data_dict.update(**kwargs)
 *         for key, val in data_dict.items():
 *             if not isinstance(key, str) or (val is not None and not isinstance(val, _Node)):             # <<<<<<<<<<<<<<
 *                 raise TypeError("update_%s() takes a dictionary of <string, Node>" % field_name)
 *             node = (<_Node>val).ctx if val is not None else NULL
 */
    }

    /* "nodes_def.pyx":129
 *             if not isinstance(key, str) or (val is not None and not isinstance(val, _Node)):
 *                 raise TypeError("update_%s() takes a dictionary of <string, Node>" % field_name)
 *             node = (<_Node>val).ctx if val is not None else NULL             # <<<<<<<<<<<<<<
 *             ret = ngl_node_param_set(self.ctx, field_name, <const char *>key, node)
 *             if ret < 0:
 */
    __pyx_t_2 = (__pyx_v_val != Py_None);
    if ((__pyx_t_2 != 0)) {
      __pyx_t_11 = ((struct __pyx_obj_8pynodegl__Node *)__pyx_v_val)->ctx;
    } else {
      __pyx_t_11 = NULL;
    }
    __pyx_v_node = __pyx_t_11;

    /* "nodes_def.pyx":130
 *                 raise TypeError("update_%s() takes a dictionary of <string, Node>" % field_name)
 *             node = (<_Node>val).ctx if val is not None else NULL
 *             ret = ngl_node_param_set(self.ctx, field_name, <const char *>key, node)             # <<<<<<<<<<<<<<
 *             if ret < 0:
 *                 return ret
 */
    __pyx_t_12 = __Pyx_PyObject_AsString(__pyx_v_field_name); if (unlikely((!__pyx_t_12) && PyErr_Occurred())) __PYX_ERR(0, 130, __pyx_L1_error)
    __pyx_t_13 = __Pyx_PyObject_AsString(__pyx_v_key); if (unlikely((!__pyx_t_13) && PyErr_Occurred())) __PYX_ERR(0, 130, __pyx_L1_error)
    __pyx_v_ret = ngl_node_param_set(__pyx_v_self->ctx, __pyx_t_12, ((char const *)__pyx_t_13), __pyx_v_node);

    /* "nodes_def.pyx":131
 *             node = (<_Node>val).ctx if val is not None else NULL
 *             ret = ngl_node_param_set(self.ctx, field_name, <const char *>key, node)
 *             if ret < 0:             # <<<<<<<<<<<<<<
 *                 return ret
 *         return 0
 */
    __pyx_t_2 = ((__pyx_v_ret < 0) != 0);
    if (__pyx_t_2) {

      /* "nodes_def.pyx":132
 *             ret = ngl_node_param_set(self.ctx, field_name, <const char *>key, node)
 *             if ret < 0:
 *                 return ret             # <<<<<<<<<<<<<<
 *         return 0
 * 
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_ret); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 132, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_r = __pyx_t_4;
      __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;

      /* "nodes_def.pyx":131
 *             node = (<_Node>val).ctx if val is not None else NULL
 *             ret = ngl_node_param_set(self.ctx, field_name, <const char *>key, node)
 *             if ret < 0:             # <<<<<<<<<<<<<<
 *                 return ret
 *         return 0
 */
    }
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "nodes_def.pyx":133
 *             if ret < 0:
 *                 return ret
 *         return 0             # <<<<<<<<<<<<<<
 * 
 *     def _init_params(self, label=None):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_int_0);
  __pyx_r = __pyx_int_0;
  goto __pyx_L0;

  /* "nodes_def.pyx":118
 *         ngl_node_unrefp(&self.ctx)
 * 
 *     def _update_dict(self, field_name, arg=None, **kwargs):             # <<<<<<<<<<<<<<
 *         cdef ngl_node *node
 *         data_dict = {}
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("pynodegl._Node._update_dict", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_data_dict);
  __Pyx_XDECREF(__pyx_v_key);
  __Pyx_XDECREF(__pyx_v_val);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":135
 *         return 0
 * 
 *     def _init_params(self, label=None):             # <<<<<<<<<<<<<<
 * 
 *         if label is not None:
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_5_Node_9_init_params(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_8pynodegl_5_Node_9_init_params(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_label = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_init_params (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_label,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_label);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_init_params") < 0)) __PYX_ERR(0, 135, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_label = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_init_params", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 135, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pynodegl._Node._init_params", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pynodegl_5_Node_8_init_params(((struct __pyx_obj_8pynodegl__Node *)__pyx_v_self), __pyx_v_label);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_5_Node_8_init_params(struct __pyx_obj_8pynodegl__Node *__pyx_v_self, PyObject *__pyx_v_label) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("_init_params", 0);

  /* "nodes_def.pyx":137
 *     def _init_params(self, label=None):
 * 
 *         if label is not None:             # <<<<<<<<<<<<<<
 *             self.set_label(label)
 * 
 */
  __pyx_t_1 = (__pyx_v_label != Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "nodes_def.pyx":138
 * 
 *         if label is not None:
 *             self.set_label(label)             # <<<<<<<<<<<<<<
 * 
 *     def _add_nodelist(self, field_name, *elems):
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_label); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 138, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_v_label) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_label);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 138, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "nodes_def.pyx":137
 *     def _init_params(self, label=None):
 * 
 *         if label is not None:             # <<<<<<<<<<<<<<
 *             self.set_label(label)
 * 
 */
  }

  /* "nodes_def.pyx":135
 *         return 0
 * 
 *     def _init_params(self, label=None):             # <<<<<<<<<<<<<<
 * 
 *         if label is not None:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pynodegl._Node._init_params", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":140
 *             self.set_label(label)
 * 
 *     def _add_nodelist(self, field_name, *elems):             # <<<<<<<<<<<<<<
 *         if hasattr(elems[0], '__iter__'):
 *             raise Exception("add_%s() takes elements as "
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_5_Node_11_add_nodelist(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_8pynodegl_5_Node_11_add_nodelist(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_field_name = 0;
  PyObject *__pyx_v_elems = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_add_nodelist (wrapper)", 0);
  if (PyTuple_GET_SIZE(__pyx_args) > 1) {
    __pyx_v_elems = PyTuple_GetSlice(__pyx_args, 1, PyTuple_GET_SIZE(__pyx_args));
    if (unlikely(!__pyx_v_elems)) {
      __Pyx_RefNannyFinishContext();
      return NULL;
    }
    __Pyx_GOTREF(__pyx_v_elems);
  } else {
    __pyx_v_elems = __pyx_empty_tuple; __Pyx_INCREF(__pyx_empty_tuple);
  }
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_field_name,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        default:
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_field_name)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t used_pos_args = (pos_args < 1) ? pos_args : 1;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, used_pos_args, "_add_nodelist") < 0)) __PYX_ERR(0, 140, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) < 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_field_name = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_add_nodelist", 0, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 140, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_elems); __pyx_v_elems = 0;
  __Pyx_AddTraceback("pynodegl._Node._add_nodelist", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pynodegl_5_Node_10_add_nodelist(((struct __pyx_obj_8pynodegl__Node *)__pyx_v_self), __pyx_v_field_name, __pyx_v_elems);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_elems);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_5_Node_10_add_nodelist(struct __pyx_obj_8pynodegl__Node *__pyx_v_self, PyObject *__pyx_v_field_name, PyObject *__pyx_v_elems) {
  int __pyx_v_nb_elems;
  struct ngl_node **__pyx_v_elems_c;
  int __pyx_v_i;
  PyObject *__pyx_v_item = NULL;
  int __pyx_v_ret;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  int __pyx_t_6;
  struct ngl_node *__pyx_t_7;
  char const *__pyx_t_8;
  __Pyx_RefNannySetupContext("_add_nodelist", 0);

  /* "nodes_def.pyx":141
 * 
 *     def _add_nodelist(self, field_name, *elems):
 *         if hasattr(elems[0], '__iter__'):             # <<<<<<<<<<<<<<
 *             raise Exception("add_%s() takes elements as "
 *                             "positional arguments, not list" %
 */
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v_elems, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 141, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_HasAttr(__pyx_t_1, __pyx_n_u_iter); if (unlikely(__pyx_t_2 == ((int)-1))) __PYX_ERR(0, 141, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (unlikely(__pyx_t_3)) {

    /* "nodes_def.pyx":143
 *         if hasattr(elems[0], '__iter__'):
 *             raise Exception("add_%s() takes elements as "
 *                             "positional arguments, not list" %             # <<<<<<<<<<<<<<
 *                             field_name)
 *         cdef int nb_elems = len(elems)
 */
    __pyx_t_1 = __Pyx_PyUnicode_FormatSafe(__pyx_kp_u_add__s_takes_elements_as_positio, __pyx_v_field_name); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 143, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);

    /* "nodes_def.pyx":142
 *     def _add_nodelist(self, field_name, *elems):
 *         if hasattr(elems[0], '__iter__'):
 *             raise Exception("add_%s() takes elements as "             # <<<<<<<<<<<<<<
 *                             "positional arguments, not list" %
 *                             field_name)
 */
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 142, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(0, 142, __pyx_L1_error)

    /* "nodes_def.pyx":141
 * 
 *     def _add_nodelist(self, field_name, *elems):
 *         if hasattr(elems[0], '__iter__'):             # <<<<<<<<<<<<<<
 *             raise Exception("add_%s() takes elements as "
 *                             "positional arguments, not list" %
 */
  }

  /* "nodes_def.pyx":145
 *                             "positional arguments, not list" %
 *                             field_name)
 *         cdef int nb_elems = len(elems)             # <<<<<<<<<<<<<<
 *         elems_c = <ngl_node **>calloc(len(elems), sizeof(ngl_node *))
 *         if elems_c is NULL:
 */
  __pyx_t_5 = PyTuple_GET_SIZE(__pyx_v_elems); if (unlikely(__pyx_t_5 == ((Py_ssize_t)-1))) __PYX_ERR(0, 145, __pyx_L1_error)
  __pyx_v_nb_elems = __pyx_t_5;

  /* "nodes_def.pyx":146
 *                             field_name)
 *         cdef int nb_elems = len(elems)
 *         elems_c = <ngl_node **>calloc(len(elems), sizeof(ngl_node *))             # <<<<<<<<<<<<<<
 *         if elems_c is NULL:
 *             raise MemoryError()
 */
  __pyx_t_5 = PyTuple_GET_SIZE(__pyx_v_elems); if (unlikely(__pyx_t_5 == ((Py_ssize_t)-1))) __PYX_ERR(0, 146, __pyx_L1_error)
  __pyx_v_elems_c = ((struct ngl_node **)calloc(__pyx_t_5, (sizeof(struct ngl_node *))));

  /* "nodes_def.pyx":147
 *         cdef int nb_elems = len(elems)
 *         elems_c = <ngl_node **>calloc(len(elems), sizeof(ngl_node *))
 *         if elems_c is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         cdef int i
 */
  __pyx_t_3 = ((__pyx_v_elems_c == NULL) != 0);
  if (unlikely(__pyx_t_3)) {

    /* "nodes_def.pyx":148
 *         elems_c = <ngl_node **>calloc(len(elems), sizeof(ngl_node *))
 *         if elems_c is NULL:
 *             raise MemoryError()             # <<<<<<<<<<<<<<
 *         cdef int i
 *         for i, item in enumerate(elems):
 */
    PyErr_NoMemory(); __PYX_ERR(0, 148, __pyx_L1_error)

    /* "nodes_def.pyx":147
 *         cdef int nb_elems = len(elems)
 *         elems_c = <ngl_node **>calloc(len(elems), sizeof(ngl_node *))
 *         if elems_c is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         cdef int i
 */
  }

  /* "nodes_def.pyx":150
 *             raise MemoryError()
 *         cdef int i
 *         for i, item in enumerate(elems):             # <<<<<<<<<<<<<<
 *             elems_c[i] = (<_Node>item).ctx
 *         ret = ngl_node_param_add(self.ctx, field_name, nb_elems, elems_c)
 */
  __pyx_t_6 = 0;
  __pyx_t_4 = __pyx_v_elems; __Pyx_INCREF(__pyx_t_4); __pyx_t_5 = 0;
  for (;;) {
    if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_1); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 150, __pyx_L1_error)
    #else
    __pyx_t_1 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 150, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    #endif
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_v_i = __pyx_t_6;
    __pyx_t_6 = (__pyx_t_6 + 1);

    /* "nodes_def.pyx":151
 *         cdef int i
 *         for i, item in enumerate(elems):
 *             elems_c[i] = (<_Node>item).ctx             # <<<<<<<<<<<<<<
 *         ret = ngl_node_param_add(self.ctx, field_name, nb_elems, elems_c)
 *         free(elems_c)
 */
    __pyx_t_7 = ((struct __pyx_obj_8pynodegl__Node *)__pyx_v_item)->ctx;
    (__pyx_v_elems_c[__pyx_v_i]) = __pyx_t_7;

    /* "nodes_def.pyx":150
 *             raise MemoryError()
 *         cdef int i
 *         for i, item in enumerate(elems):             # <<<<<<<<<<<<<<
 *             elems_c[i] = (<_Node>item).ctx
 *         ret = ngl_node_param_add(self.ctx, field_name, nb_elems, elems_c)
 */
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "nodes_def.pyx":152
 *         for i, item in enumerate(elems):
 *             elems_c[i] = (<_Node>item).ctx
 *         ret = ngl_node_param_add(self.ctx, field_name, nb_elems, elems_c)             # <<<<<<<<<<<<<<
 *         free(elems_c)
 *         return ret
 */
  __pyx_t_8 = __Pyx_PyObject_AsString(__pyx_v_field_name); if (unlikely((!__pyx_t_8) && PyErr_Occurred())) __PYX_ERR(0, 152, __pyx_L1_error)
  __pyx_v_ret = ngl_node_param_add(__pyx_v_self->ctx, __pyx_t_8, __pyx_v_nb_elems, __pyx_v_elems_c);

  /* "nodes_def.pyx":153
 *             elems_c[i] = (<_Node>item).ctx
 *         ret = ngl_node_param_add(self.ctx, field_name, nb_elems, elems_c)
 *         free(elems_c)             # <<<<<<<<<<<<<<
 *         return ret
 * 
 */
  free(__pyx_v_elems_c);

  /* "nodes_def.pyx":154
 *         ret = ngl_node_param_add(self.ctx, field_name, nb_elems, elems_c)
 *         free(elems_c)
 *         return ret             # <<<<<<<<<<<<<<
 * 
 *     def _add_doublelist(self, field_name, *elems):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_ret); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 154, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":140
 *             self.set_label(label)
 * 
 *     def _add_nodelist(self, field_name, *elems):             # <<<<<<<<<<<<<<
 *         if hasattr(elems[0], '__iter__'):
 *             raise Exception("add_%s() takes elements as "
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pynodegl._Node._add_nodelist", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":156
 *         return ret
 * 
 *     def _add_doublelist(self, field_name, *elems):             # <<<<<<<<<<<<<<
 *         if hasattr(elems[0], '__iter__'):
 *             raise Exception("add_%s() takes elements as "
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_5_Node_13_add_doublelist(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_8pynodegl_5_Node_13_add_doublelist(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_field_name = 0;
  PyObject *__pyx_v_elems = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_add_doublelist (wrapper)", 0);
  if (PyTuple_GET_SIZE(__pyx_args) > 1) {
    __pyx_v_elems = PyTuple_GetSlice(__pyx_args, 1, PyTuple_GET_SIZE(__pyx_args));
    if (unlikely(!__pyx_v_elems)) {
      __Pyx_RefNannyFinishContext();
      return NULL;
    }
    __Pyx_GOTREF(__pyx_v_elems);
  } else {
    __pyx_v_elems = __pyx_empty_tuple; __Pyx_INCREF(__pyx_empty_tuple);
  }
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_field_name,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        default:
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_field_name)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t used_pos_args = (pos_args < 1) ? pos_args : 1;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, used_pos_args, "_add_doublelist") < 0)) __PYX_ERR(0, 156, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) < 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_field_name = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_add_doublelist", 0, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 156, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_elems); __pyx_v_elems = 0;
  __Pyx_AddTraceback("pynodegl._Node._add_doublelist", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pynodegl_5_Node_12_add_doublelist(((struct __pyx_obj_8pynodegl__Node *)__pyx_v_self), __pyx_v_field_name, __pyx_v_elems);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_elems);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_5_Node_12_add_doublelist(struct __pyx_obj_8pynodegl__Node *__pyx_v_self, PyObject *__pyx_v_field_name, PyObject *__pyx_v_elems) {
  int __pyx_v_nb_elems;
  double *__pyx_v_elems_c;
  int __pyx_v_i;
  PyObject *__pyx_v_item = NULL;
  int __pyx_v_ret;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  int __pyx_t_6;
  double __pyx_t_7;
  char const *__pyx_t_8;
  __Pyx_RefNannySetupContext("_add_doublelist", 0);

  /* "nodes_def.pyx":157
 * 
 *     def _add_doublelist(self, field_name, *elems):
 *         if hasattr(elems[0], '__iter__'):             # <<<<<<<<<<<<<<
 *             raise Exception("add_%s() takes elements as "
 *                             "positional arguments, not list" %
 */
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v_elems, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 157, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_HasAttr(__pyx_t_1, __pyx_n_u_iter); if (unlikely(__pyx_t_2 == ((int)-1))) __PYX_ERR(0, 157, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (unlikely(__pyx_t_3)) {

    /* "nodes_def.pyx":159
 *         if hasattr(elems[0], '__iter__'):
 *             raise Exception("add_%s() takes elements as "
 *                             "positional arguments, not list" %             # <<<<<<<<<<<<<<
 *                             field_name)
 *         cdef int nb_elems = len(elems)
 */
    __pyx_t_1 = __Pyx_PyUnicode_FormatSafe(__pyx_kp_u_add__s_takes_elements_as_positio, __pyx_v_field_name); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 159, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);

    /* "nodes_def.pyx":158
 *     def _add_doublelist(self, field_name, *elems):
 *         if hasattr(elems[0], '__iter__'):
 *             raise Exception("add_%s() takes elements as "             # <<<<<<<<<<<<<<
 *                             "positional arguments, not list" %
 *                             field_name)
 */
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 158, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(0, 158, __pyx_L1_error)

    /* "nodes_def.pyx":157
 * 
 *     def _add_doublelist(self, field_name, *elems):
 *         if hasattr(elems[0], '__iter__'):             # <<<<<<<<<<<<<<
 *             raise Exception("add_%s() takes elements as "
 *                             "positional arguments, not list" %
 */
  }

  /* "nodes_def.pyx":161
 *                             "positional arguments, not list" %
 *                             field_name)
 *         cdef int nb_elems = len(elems)             # <<<<<<<<<<<<<<
 *         elems_c = <double*>calloc(len(elems), sizeof(double))
 *         if elems_c is NULL:
 */
  __pyx_t_5 = PyTuple_GET_SIZE(__pyx_v_elems); if (unlikely(__pyx_t_5 == ((Py_ssize_t)-1))) __PYX_ERR(0, 161, __pyx_L1_error)
  __pyx_v_nb_elems = __pyx_t_5;

  /* "nodes_def.pyx":162
 *                             field_name)
 *         cdef int nb_elems = len(elems)
 *         elems_c = <double*>calloc(len(elems), sizeof(double))             # <<<<<<<<<<<<<<
 *         if elems_c is NULL:
 *             raise MemoryError()
 */
  __pyx_t_5 = PyTuple_GET_SIZE(__pyx_v_elems); if (unlikely(__pyx_t_5 == ((Py_ssize_t)-1))) __PYX_ERR(0, 162, __pyx_L1_error)
  __pyx_v_elems_c = ((double *)calloc(__pyx_t_5, (sizeof(double))));

  /* "nodes_def.pyx":163
 *         cdef int nb_elems = len(elems)
 *         elems_c = <double*>calloc(len(elems), sizeof(double))
 *         if elems_c is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         cdef int i
 */
  __pyx_t_3 = ((__pyx_v_elems_c == NULL) != 0);
  if (unlikely(__pyx_t_3)) {

    /* "nodes_def.pyx":164
 *         elems_c = <double*>calloc(len(elems), sizeof(double))
 *         if elems_c is NULL:
 *             raise MemoryError()             # <<<<<<<<<<<<<<
 *         cdef int i
 *         for i, item in enumerate(elems):
 */
    PyErr_NoMemory(); __PYX_ERR(0, 164, __pyx_L1_error)

    /* "nodes_def.pyx":163
 *         cdef int nb_elems = len(elems)
 *         elems_c = <double*>calloc(len(elems), sizeof(double))
 *         if elems_c is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         cdef int i
 */
  }

  /* "nodes_def.pyx":166
 *             raise MemoryError()
 *         cdef int i
 *         for i, item in enumerate(elems):             # <<<<<<<<<<<<<<
 *             elems_c[i] = <double>item
 *         ret = ngl_node_param_add(self.ctx, field_name, nb_elems, elems_c)
 */
  __pyx_t_6 = 0;
  __pyx_t_4 = __pyx_v_elems; __Pyx_INCREF(__pyx_t_4); __pyx_t_5 = 0;
  for (;;) {
    if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_1); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 166, __pyx_L1_error)
    #else
    __pyx_t_1 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 166, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    #endif
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_v_i = __pyx_t_6;
    __pyx_t_6 = (__pyx_t_6 + 1);

    /* "nodes_def.pyx":167
 *         cdef int i
 *         for i, item in enumerate(elems):
 *             elems_c[i] = <double>item             # <<<<<<<<<<<<<<
 *         ret = ngl_node_param_add(self.ctx, field_name, nb_elems, elems_c)
 *         free(elems_c)
 */
    __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_v_item); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 167, __pyx_L1_error)
    (__pyx_v_elems_c[__pyx_v_i]) = ((double)__pyx_t_7);

    /* "nodes_def.pyx":166
 *             raise MemoryError()
 *         cdef int i
 *         for i, item in enumerate(elems):             # <<<<<<<<<<<<<<
 *             elems_c[i] = <double>item
 *         ret = ngl_node_param_add(self.ctx, field_name, nb_elems, elems_c)
 */
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "nodes_def.pyx":168
 *         for i, item in enumerate(elems):
 *             elems_c[i] = <double>item
 *         ret = ngl_node_param_add(self.ctx, field_name, nb_elems, elems_c)             # <<<<<<<<<<<<<<
 *         free(elems_c)
 *         return ret
 */
  __pyx_t_8 = __Pyx_PyObject_AsString(__pyx_v_field_name); if (unlikely((!__pyx_t_8) && PyErr_Occurred())) __PYX_ERR(0, 168, __pyx_L1_error)
  __pyx_v_ret = ngl_node_param_add(__pyx_v_self->ctx, __pyx_t_8, __pyx_v_nb_elems, __pyx_v_elems_c);

  /* "nodes_def.pyx":169
 *             elems_c[i] = <double>item
 *         ret = ngl_node_param_add(self.ctx, field_name, nb_elems, elems_c)
 *         free(elems_c)             # <<<<<<<<<<<<<<
 *         return ret
 * 
 */
  free(__pyx_v_elems_c);

  /* "nodes_def.pyx":170
 *         ret = ngl_node_param_add(self.ctx, field_name, nb_elems, elems_c)
 *         free(elems_c)
 *         return ret             # <<<<<<<<<<<<<<
 * 
 *     def set_label(self, const char * label):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_ret); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 170, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":156
 *         return ret
 * 
 *     def _add_doublelist(self, field_name, *elems):             # <<<<<<<<<<<<<<
 *         if hasattr(elems[0], '__iter__'):
 *             raise Exception("add_%s() takes elements as "
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pynodegl._Node._add_doublelist", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":172
 *         return ret
 * 
 *     def set_label(self, const char * label):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "label", label)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_5_Node_15set_label(PyObject *__pyx_v_self, PyObject *__pyx_arg_label); /*proto*/
static PyObject *__pyx_pw_8pynodegl_5_Node_15set_label(PyObject *__pyx_v_self, PyObject *__pyx_arg_label) {
  char const *__pyx_v_label;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_label (wrapper)", 0);
  assert(__pyx_arg_label); {
    __pyx_v_label = __Pyx_PyObject_AsString(__pyx_arg_label); if (unlikely((!__pyx_v_label) && PyErr_Occurred())) __PYX_ERR(0, 172, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pynodegl._Node.set_label", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pynodegl_5_Node_14set_label(((struct __pyx_obj_8pynodegl__Node *)__pyx_v_self), ((char const *)__pyx_v_label));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_5_Node_14set_label(struct __pyx_obj_8pynodegl__Node *__pyx_v_self, char const *__pyx_v_label) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("set_label", 0);

  /* "nodes_def.pyx":173
 * 
 *     def set_label(self, const char * label):
 *         return ngl_node_param_set(self.ctx, "label", label)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->ctx, ((char const *)"label"), __pyx_v_label)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 173, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":172
 *         return ret
 * 
 *     def set_label(self, const char * label):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "label", label)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl._Node.set_label", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_5_Node_17__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pynodegl_5_Node_17__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_5_Node_16__reduce_cython__(((struct __pyx_obj_8pynodegl__Node *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_5_Node_16__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl__Node *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl._Node.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_5_Node_19__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8pynodegl_5_Node_19__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_5_Node_18__setstate_cython__(((struct __pyx_obj_8pynodegl__Node *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_5_Node_18__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl__Node *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl._Node.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":178
 * cdef class _AnimatedBuffer(_Node):
 * 
 *     def _init_params(self, keyframes=None, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         if keyframes is not None:
 *             self.add_keyframes(*keyframes)
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_15_AnimatedBuffer_1_init_params(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_8pynodegl_15_AnimatedBuffer_1_init_params(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_keyframes = 0;
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_init_params (wrapper)", 0);
  __pyx_v_kwargs = PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return NULL;
  __Pyx_GOTREF(__pyx_v_kwargs);
  if (PyTuple_GET_SIZE(__pyx_args) > 1) {
    __pyx_v_args = PyTuple_GetSlice(__pyx_args, 1, PyTuple_GET_SIZE(__pyx_args));
    if (unlikely(!__pyx_v_args)) {
      __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
      __Pyx_RefNannyFinishContext();
      return NULL;
    }
    __Pyx_GOTREF(__pyx_v_args);
  } else {
    __pyx_v_args = __pyx_empty_tuple; __Pyx_INCREF(__pyx_empty_tuple);
  }
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_keyframes,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        default:
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_keyframes);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t used_pos_args = (pos_args < 1) ? pos_args : 1;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_kwargs, values, used_pos_args, "_init_params") < 0)) __PYX_ERR(0, 178, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        default:
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
      }
    }
    __pyx_v_keyframes = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_args); __pyx_v_args = 0;
  __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
  __Pyx_AddTraceback("pynodegl._AnimatedBuffer._init_params", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pynodegl_15_AnimatedBuffer__init_params(((struct __pyx_obj_8pynodegl__AnimatedBuffer *)__pyx_v_self), __pyx_v_keyframes, __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_15_AnimatedBuffer__init_params(struct __pyx_obj_8pynodegl__AnimatedBuffer *__pyx_v_self, PyObject *__pyx_v_keyframes, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("_init_params", 0);

  /* "nodes_def.pyx":179
 * 
 *     def _init_params(self, keyframes=None, *args, **kwargs):
 *         if keyframes is not None:             # <<<<<<<<<<<<<<
 *             self.add_keyframes(*keyframes)
 *         _Node._init_params(self, *args, **kwargs)
 */
  __pyx_t_1 = (__pyx_v_keyframes != Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "nodes_def.pyx":180
 *     def _init_params(self, keyframes=None, *args, **kwargs):
 *         if keyframes is not None:
 *             self.add_keyframes(*keyframes)             # <<<<<<<<<<<<<<
 *         _Node._init_params(self, *args, **kwargs)
 * 
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_add_keyframes); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 180, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PySequence_Tuple(__pyx_v_keyframes); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 180, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 180, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "nodes_def.pyx":179
 * 
 *     def _init_params(self, keyframes=None, *args, **kwargs):
 *         if keyframes is not None:             # <<<<<<<<<<<<<<
 *             self.add_keyframes(*keyframes)
 *         _Node._init_params(self, *args, **kwargs)
 */
  }

  /* "nodes_def.pyx":181
 *         if keyframes is not None:
 *             self.add_keyframes(*keyframes)
 *         _Node._init_params(self, *args, **kwargs)             # <<<<<<<<<<<<<<
 * 
 *     def add_keyframes(self, *keyframes):
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_8pynodegl__Node), __pyx_n_s_init_params); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 181, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 181, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_4, 0, ((PyObject *)__pyx_v_self));
  __pyx_t_3 = PyNumber_Add(__pyx_t_4, __pyx_v_args); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 181, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_3, __pyx_v_kwargs); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 181, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "nodes_def.pyx":178
 * cdef class _AnimatedBuffer(_Node):
 * 
 *     def _init_params(self, keyframes=None, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         if keyframes is not None:
 *             self.add_keyframes(*keyframes)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pynodegl._AnimatedBuffer._init_params", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":183
 *         _Node._init_params(self, *args, **kwargs)
 * 
 *     def add_keyframes(self, *keyframes):             # <<<<<<<<<<<<<<
 *         return self._add_nodelist("keyframes", *keyframes)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_15_AnimatedBuffer_3add_keyframes(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_8pynodegl_15_AnimatedBuffer_3add_keyframes(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_keyframes = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_keyframes (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "add_keyframes", 0))) return NULL;
  __Pyx_INCREF(__pyx_args);
  __pyx_v_keyframes = __pyx_args;
  __pyx_r = __pyx_pf_8pynodegl_15_AnimatedBuffer_2add_keyframes(((struct __pyx_obj_8pynodegl__AnimatedBuffer *)__pyx_v_self), __pyx_v_keyframes);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_keyframes);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_15_AnimatedBuffer_2add_keyframes(struct __pyx_obj_8pynodegl__AnimatedBuffer *__pyx_v_self, PyObject *__pyx_v_keyframes) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("add_keyframes", 0);

  /* "nodes_def.pyx":184
 * 
 *     def add_keyframes(self, *keyframes):
 *         return self._add_nodelist("keyframes", *keyframes)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_add_nodelist); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 184, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyNumber_Add(__pyx_tuple__4, __pyx_v_keyframes); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 184, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 184, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":183
 *         _Node._init_params(self, *args, **kwargs)
 * 
 *     def add_keyframes(self, *keyframes):             # <<<<<<<<<<<<<<
 *         return self._add_nodelist("keyframes", *keyframes)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pynodegl._AnimatedBuffer.add_keyframes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_15_AnimatedBuffer_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pynodegl_15_AnimatedBuffer_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_15_AnimatedBuffer_4__reduce_cython__(((struct __pyx_obj_8pynodegl__AnimatedBuffer *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_15_AnimatedBuffer_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl__AnimatedBuffer *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl._AnimatedBuffer.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_15_AnimatedBuffer_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8pynodegl_15_AnimatedBuffer_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_15_AnimatedBuffer_6__setstate_cython__(((struct __pyx_obj_8pynodegl__AnimatedBuffer *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_15_AnimatedBuffer_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl__AnimatedBuffer *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl._AnimatedBuffer.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":189
 * cdef class AnimatedBufferFloat(_AnimatedBuffer):
 * 
 *     def __init__(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_ANIMATEDBUFFERFLOAT)
 */

/* Python wrapper */
static int __pyx_pw_8pynodegl_19AnimatedBufferFloat_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pynodegl_19AnimatedBufferFloat_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 1))) return -1;
  if (unlikely(__pyx_kwds)) {
    __pyx_v_kwargs = PyDict_Copy(__pyx_kwds); if (unlikely(!__pyx_v_kwargs)) return -1;
    __Pyx_GOTREF(__pyx_v_kwargs);
  } else {
    __pyx_v_kwargs = NULL;
  }
  __Pyx_INCREF(__pyx_args);
  __pyx_v_args = __pyx_args;
  __pyx_r = __pyx_pf_8pynodegl_19AnimatedBufferFloat___init__(((struct __pyx_obj_8pynodegl_AnimatedBufferFloat *)__pyx_v_self), __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pynodegl_19AnimatedBufferFloat___init__(struct __pyx_obj_8pynodegl_AnimatedBufferFloat *__pyx_v_self, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "nodes_def.pyx":190
 * 
 *     def __init__(self, *args, **kwargs):
 *         assert self.ctx is NULL             # <<<<<<<<<<<<<<
 *         self.ctx = ngl_node_create(NGL_NODE_ANIMATEDBUFFERFLOAT)
 *         if self.ctx is NULL:
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!((__pyx_v_self->__pyx_base.__pyx_base.ctx == NULL) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 190, __pyx_L1_error)
    }
  }
  #endif

  /* "nodes_def.pyx":191
 *     def __init__(self, *args, **kwargs):
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_ANIMATEDBUFFERFLOAT)             # <<<<<<<<<<<<<<
 *         if self.ctx is NULL:
 *             raise MemoryError()
 */
  __pyx_v_self->__pyx_base.__pyx_base.ctx = ngl_node_create(NGL_NODE_ANIMATEDBUFFERFLOAT);

  /* "nodes_def.pyx":192
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_ANIMATEDBUFFERFLOAT)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         self._init_params(*args, **kwargs)
 */
  __pyx_t_1 = ((__pyx_v_self->__pyx_base.__pyx_base.ctx == NULL) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "nodes_def.pyx":193
 *         self.ctx = ngl_node_create(NGL_NODE_ANIMATEDBUFFERFLOAT)
 *         if self.ctx is NULL:
 *             raise MemoryError()             # <<<<<<<<<<<<<<
 *         self._init_params(*args, **kwargs)
 * 
 */
    PyErr_NoMemory(); __PYX_ERR(0, 193, __pyx_L1_error)

    /* "nodes_def.pyx":192
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_ANIMATEDBUFFERFLOAT)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         self._init_params(*args, **kwargs)
 */
  }

  /* "nodes_def.pyx":194
 *         if self.ctx is NULL:
 *             raise MemoryError()
 *         self._init_params(*args, **kwargs)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_init_params); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 194, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_v_args, __pyx_v_kwargs); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 194, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "nodes_def.pyx":189
 * cdef class AnimatedBufferFloat(_AnimatedBuffer):
 * 
 *     def __init__(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_ANIMATEDBUFFERFLOAT)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pynodegl.AnimatedBufferFloat.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_19AnimatedBufferFloat_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pynodegl_19AnimatedBufferFloat_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_19AnimatedBufferFloat_2__reduce_cython__(((struct __pyx_obj_8pynodegl_AnimatedBufferFloat *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_19AnimatedBufferFloat_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_AnimatedBufferFloat *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.AnimatedBufferFloat.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_19AnimatedBufferFloat_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8pynodegl_19AnimatedBufferFloat_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_19AnimatedBufferFloat_4__setstate_cython__(((struct __pyx_obj_8pynodegl_AnimatedBufferFloat *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_19AnimatedBufferFloat_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_AnimatedBufferFloat *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__8, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.AnimatedBufferFloat.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":199
 * cdef class AnimatedBufferVec2(_AnimatedBuffer):
 * 
 *     def __init__(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_ANIMATEDBUFFERVEC2)
 */

/* Python wrapper */
static int __pyx_pw_8pynodegl_18AnimatedBufferVec2_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pynodegl_18AnimatedBufferVec2_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 1))) return -1;
  if (unlikely(__pyx_kwds)) {
    __pyx_v_kwargs = PyDict_Copy(__pyx_kwds); if (unlikely(!__pyx_v_kwargs)) return -1;
    __Pyx_GOTREF(__pyx_v_kwargs);
  } else {
    __pyx_v_kwargs = NULL;
  }
  __Pyx_INCREF(__pyx_args);
  __pyx_v_args = __pyx_args;
  __pyx_r = __pyx_pf_8pynodegl_18AnimatedBufferVec2___init__(((struct __pyx_obj_8pynodegl_AnimatedBufferVec2 *)__pyx_v_self), __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pynodegl_18AnimatedBufferVec2___init__(struct __pyx_obj_8pynodegl_AnimatedBufferVec2 *__pyx_v_self, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "nodes_def.pyx":200
 * 
 *     def __init__(self, *args, **kwargs):
 *         assert self.ctx is NULL             # <<<<<<<<<<<<<<
 *         self.ctx = ngl_node_create(NGL_NODE_ANIMATEDBUFFERVEC2)
 *         if self.ctx is NULL:
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!((__pyx_v_self->__pyx_base.__pyx_base.ctx == NULL) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 200, __pyx_L1_error)
    }
  }
  #endif

  /* "nodes_def.pyx":201
 *     def __init__(self, *args, **kwargs):
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_ANIMATEDBUFFERVEC2)             # <<<<<<<<<<<<<<
 *         if self.ctx is NULL:
 *             raise MemoryError()
 */
  __pyx_v_self->__pyx_base.__pyx_base.ctx = ngl_node_create(NGL_NODE_ANIMATEDBUFFERVEC2);

  /* "nodes_def.pyx":202
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_ANIMATEDBUFFERVEC2)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         self._init_params(*args, **kwargs)
 */
  __pyx_t_1 = ((__pyx_v_self->__pyx_base.__pyx_base.ctx == NULL) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "nodes_def.pyx":203
 *         self.ctx = ngl_node_create(NGL_NODE_ANIMATEDBUFFERVEC2)
 *         if self.ctx is NULL:
 *             raise MemoryError()             # <<<<<<<<<<<<<<
 *         self._init_params(*args, **kwargs)
 * 
 */
    PyErr_NoMemory(); __PYX_ERR(0, 203, __pyx_L1_error)

    /* "nodes_def.pyx":202
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_ANIMATEDBUFFERVEC2)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         self._init_params(*args, **kwargs)
 */
  }

  /* "nodes_def.pyx":204
 *         if self.ctx is NULL:
 *             raise MemoryError()
 *         self._init_params(*args, **kwargs)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_init_params); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 204, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_v_args, __pyx_v_kwargs); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 204, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "nodes_def.pyx":199
 * cdef class AnimatedBufferVec2(_AnimatedBuffer):
 * 
 *     def __init__(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_ANIMATEDBUFFERVEC2)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pynodegl.AnimatedBufferVec2.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_18AnimatedBufferVec2_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pynodegl_18AnimatedBufferVec2_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_18AnimatedBufferVec2_2__reduce_cython__(((struct __pyx_obj_8pynodegl_AnimatedBufferVec2 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_18AnimatedBufferVec2_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_AnimatedBufferVec2 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__9, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.AnimatedBufferVec2.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_18AnimatedBufferVec2_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8pynodegl_18AnimatedBufferVec2_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_18AnimatedBufferVec2_4__setstate_cython__(((struct __pyx_obj_8pynodegl_AnimatedBufferVec2 *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_18AnimatedBufferVec2_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_AnimatedBufferVec2 *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__10, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.AnimatedBufferVec2.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":209
 * cdef class AnimatedBufferVec3(_AnimatedBuffer):
 * 
 *     def __init__(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_ANIMATEDBUFFERVEC3)
 */

/* Python wrapper */
static int __pyx_pw_8pynodegl_18AnimatedBufferVec3_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pynodegl_18AnimatedBufferVec3_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 1))) return -1;
  if (unlikely(__pyx_kwds)) {
    __pyx_v_kwargs = PyDict_Copy(__pyx_kwds); if (unlikely(!__pyx_v_kwargs)) return -1;
    __Pyx_GOTREF(__pyx_v_kwargs);
  } else {
    __pyx_v_kwargs = NULL;
  }
  __Pyx_INCREF(__pyx_args);
  __pyx_v_args = __pyx_args;
  __pyx_r = __pyx_pf_8pynodegl_18AnimatedBufferVec3___init__(((struct __pyx_obj_8pynodegl_AnimatedBufferVec3 *)__pyx_v_self), __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pynodegl_18AnimatedBufferVec3___init__(struct __pyx_obj_8pynodegl_AnimatedBufferVec3 *__pyx_v_self, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "nodes_def.pyx":210
 * 
 *     def __init__(self, *args, **kwargs):
 *         assert self.ctx is NULL             # <<<<<<<<<<<<<<
 *         self.ctx = ngl_node_create(NGL_NODE_ANIMATEDBUFFERVEC3)
 *         if self.ctx is NULL:
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!((__pyx_v_self->__pyx_base.__pyx_base.ctx == NULL) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 210, __pyx_L1_error)
    }
  }
  #endif

  /* "nodes_def.pyx":211
 *     def __init__(self, *args, **kwargs):
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_ANIMATEDBUFFERVEC3)             # <<<<<<<<<<<<<<
 *         if self.ctx is NULL:
 *             raise MemoryError()
 */
  __pyx_v_self->__pyx_base.__pyx_base.ctx = ngl_node_create(NGL_NODE_ANIMATEDBUFFERVEC3);

  /* "nodes_def.pyx":212
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_ANIMATEDBUFFERVEC3)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         self._init_params(*args, **kwargs)
 */
  __pyx_t_1 = ((__pyx_v_self->__pyx_base.__pyx_base.ctx == NULL) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "nodes_def.pyx":213
 *         self.ctx = ngl_node_create(NGL_NODE_ANIMATEDBUFFERVEC3)
 *         if self.ctx is NULL:
 *             raise MemoryError()             # <<<<<<<<<<<<<<
 *         self._init_params(*args, **kwargs)
 * 
 */
    PyErr_NoMemory(); __PYX_ERR(0, 213, __pyx_L1_error)

    /* "nodes_def.pyx":212
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_ANIMATEDBUFFERVEC3)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         self._init_params(*args, **kwargs)
 */
  }

  /* "nodes_def.pyx":214
 *         if self.ctx is NULL:
 *             raise MemoryError()
 *         self._init_params(*args, **kwargs)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_init_params); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 214, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_v_args, __pyx_v_kwargs); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 214, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "nodes_def.pyx":209
 * cdef class AnimatedBufferVec3(_AnimatedBuffer):
 * 
 *     def __init__(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_ANIMATEDBUFFERVEC3)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pynodegl.AnimatedBufferVec3.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_18AnimatedBufferVec3_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pynodegl_18AnimatedBufferVec3_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_18AnimatedBufferVec3_2__reduce_cython__(((struct __pyx_obj_8pynodegl_AnimatedBufferVec3 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_18AnimatedBufferVec3_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_AnimatedBufferVec3 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__11, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.AnimatedBufferVec3.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_18AnimatedBufferVec3_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8pynodegl_18AnimatedBufferVec3_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_18AnimatedBufferVec3_4__setstate_cython__(((struct __pyx_obj_8pynodegl_AnimatedBufferVec3 *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_18AnimatedBufferVec3_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_AnimatedBufferVec3 *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__12, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.AnimatedBufferVec3.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":219
 * cdef class AnimatedBufferVec4(_AnimatedBuffer):
 * 
 *     def __init__(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_ANIMATEDBUFFERVEC4)
 */

/* Python wrapper */
static int __pyx_pw_8pynodegl_18AnimatedBufferVec4_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pynodegl_18AnimatedBufferVec4_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 1))) return -1;
  if (unlikely(__pyx_kwds)) {
    __pyx_v_kwargs = PyDict_Copy(__pyx_kwds); if (unlikely(!__pyx_v_kwargs)) return -1;
    __Pyx_GOTREF(__pyx_v_kwargs);
  } else {
    __pyx_v_kwargs = NULL;
  }
  __Pyx_INCREF(__pyx_args);
  __pyx_v_args = __pyx_args;
  __pyx_r = __pyx_pf_8pynodegl_18AnimatedBufferVec4___init__(((struct __pyx_obj_8pynodegl_AnimatedBufferVec4 *)__pyx_v_self), __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pynodegl_18AnimatedBufferVec4___init__(struct __pyx_obj_8pynodegl_AnimatedBufferVec4 *__pyx_v_self, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "nodes_def.pyx":220
 * 
 *     def __init__(self, *args, **kwargs):
 *         assert self.ctx is NULL             # <<<<<<<<<<<<<<
 *         self.ctx = ngl_node_create(NGL_NODE_ANIMATEDBUFFERVEC4)
 *         if self.ctx is NULL:
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!((__pyx_v_self->__pyx_base.__pyx_base.ctx == NULL) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 220, __pyx_L1_error)
    }
  }
  #endif

  /* "nodes_def.pyx":221
 *     def __init__(self, *args, **kwargs):
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_ANIMATEDBUFFERVEC4)             # <<<<<<<<<<<<<<
 *         if self.ctx is NULL:
 *             raise MemoryError()
 */
  __pyx_v_self->__pyx_base.__pyx_base.ctx = ngl_node_create(NGL_NODE_ANIMATEDBUFFERVEC4);

  /* "nodes_def.pyx":222
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_ANIMATEDBUFFERVEC4)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         self._init_params(*args, **kwargs)
 */
  __pyx_t_1 = ((__pyx_v_self->__pyx_base.__pyx_base.ctx == NULL) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "nodes_def.pyx":223
 *         self.ctx = ngl_node_create(NGL_NODE_ANIMATEDBUFFERVEC4)
 *         if self.ctx is NULL:
 *             raise MemoryError()             # <<<<<<<<<<<<<<
 *         self._init_params(*args, **kwargs)
 * 
 */
    PyErr_NoMemory(); __PYX_ERR(0, 223, __pyx_L1_error)

    /* "nodes_def.pyx":222
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_ANIMATEDBUFFERVEC4)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         self._init_params(*args, **kwargs)
 */
  }

  /* "nodes_def.pyx":224
 *         if self.ctx is NULL:
 *             raise MemoryError()
 *         self._init_params(*args, **kwargs)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_init_params); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 224, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_v_args, __pyx_v_kwargs); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 224, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "nodes_def.pyx":219
 * cdef class AnimatedBufferVec4(_AnimatedBuffer):
 * 
 *     def __init__(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_ANIMATEDBUFFERVEC4)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pynodegl.AnimatedBufferVec4.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_18AnimatedBufferVec4_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pynodegl_18AnimatedBufferVec4_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_18AnimatedBufferVec4_2__reduce_cython__(((struct __pyx_obj_8pynodegl_AnimatedBufferVec4 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_18AnimatedBufferVec4_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_AnimatedBufferVec4 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__13, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.AnimatedBufferVec4.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_18AnimatedBufferVec4_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8pynodegl_18AnimatedBufferVec4_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_18AnimatedBufferVec4_4__setstate_cython__(((struct __pyx_obj_8pynodegl_AnimatedBufferVec4 *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_18AnimatedBufferVec4_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_AnimatedBufferVec4 *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__14, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.AnimatedBufferVec4.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":229
 * cdef class AnimatedTime(_Node):
 * 
 *     def __init__(self, keyframes=None, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_ANIMATEDTIME)
 */

/* Python wrapper */
static int __pyx_pw_8pynodegl_12AnimatedTime_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pynodegl_12AnimatedTime_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_keyframes = 0;
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  __pyx_v_kwargs = PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return -1;
  __Pyx_GOTREF(__pyx_v_kwargs);
  if (PyTuple_GET_SIZE(__pyx_args) > 1) {
    __pyx_v_args = PyTuple_GetSlice(__pyx_args, 1, PyTuple_GET_SIZE(__pyx_args));
    if (unlikely(!__pyx_v_args)) {
      __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
      __Pyx_RefNannyFinishContext();
      return -1;
    }
    __Pyx_GOTREF(__pyx_v_args);
  } else {
    __pyx_v_args = __pyx_empty_tuple; __Pyx_INCREF(__pyx_empty_tuple);
  }
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_keyframes,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        default:
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_keyframes);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t used_pos_args = (pos_args < 1) ? pos_args : 1;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_kwargs, values, used_pos_args, "__init__") < 0)) __PYX_ERR(0, 229, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        default:
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
      }
    }
    __pyx_v_keyframes = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_args); __pyx_v_args = 0;
  __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
  __Pyx_AddTraceback("pynodegl.AnimatedTime.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pynodegl_12AnimatedTime___init__(((struct __pyx_obj_8pynodegl_AnimatedTime *)__pyx_v_self), __pyx_v_keyframes, __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pynodegl_12AnimatedTime___init__(struct __pyx_obj_8pynodegl_AnimatedTime *__pyx_v_self, PyObject *__pyx_v_keyframes, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "nodes_def.pyx":230
 * 
 *     def __init__(self, keyframes=None, *args, **kwargs):
 *         assert self.ctx is NULL             # <<<<<<<<<<<<<<
 *         self.ctx = ngl_node_create(NGL_NODE_ANIMATEDTIME)
 *         if self.ctx is NULL:
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!((__pyx_v_self->__pyx_base.ctx == NULL) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 230, __pyx_L1_error)
    }
  }
  #endif

  /* "nodes_def.pyx":231
 *     def __init__(self, keyframes=None, *args, **kwargs):
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_ANIMATEDTIME)             # <<<<<<<<<<<<<<
 *         if self.ctx is NULL:
 *             raise MemoryError()
 */
  __pyx_v_self->__pyx_base.ctx = ngl_node_create(NGL_NODE_ANIMATEDTIME);

  /* "nodes_def.pyx":232
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_ANIMATEDTIME)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         _Node._init_params(self, *args, **kwargs)
 */
  __pyx_t_1 = ((__pyx_v_self->__pyx_base.ctx == NULL) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "nodes_def.pyx":233
 *         self.ctx = ngl_node_create(NGL_NODE_ANIMATEDTIME)
 *         if self.ctx is NULL:
 *             raise MemoryError()             # <<<<<<<<<<<<<<
 *         _Node._init_params(self, *args, **kwargs)
 * 
 */
    PyErr_NoMemory(); __PYX_ERR(0, 233, __pyx_L1_error)

    /* "nodes_def.pyx":232
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_ANIMATEDTIME)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         _Node._init_params(self, *args, **kwargs)
 */
  }

  /* "nodes_def.pyx":234
 *         if self.ctx is NULL:
 *             raise MemoryError()
 *         _Node._init_params(self, *args, **kwargs)             # <<<<<<<<<<<<<<
 * 
 *         if keyframes is not None:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_8pynodegl__Node), __pyx_n_s_init_params); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 234, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 234, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_v_self));
  __pyx_t_4 = PyNumber_Add(__pyx_t_3, __pyx_v_args); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 234, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, __pyx_v_kwargs); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 234, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "nodes_def.pyx":236
 *         _Node._init_params(self, *args, **kwargs)
 * 
 *         if keyframes is not None:             # <<<<<<<<<<<<<<
 *             self.add_keyframes(*keyframes)
 * 
 */
  __pyx_t_1 = (__pyx_v_keyframes != Py_None);
  __pyx_t_5 = (__pyx_t_1 != 0);
  if (__pyx_t_5) {

    /* "nodes_def.pyx":237
 * 
 *         if keyframes is not None:
 *             self.add_keyframes(*keyframes)             # <<<<<<<<<<<<<<
 * 
 *     def add_keyframes(self, *keyframes):
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_add_keyframes); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 237, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PySequence_Tuple(__pyx_v_keyframes); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 237, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 237, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "nodes_def.pyx":236
 *         _Node._init_params(self, *args, **kwargs)
 * 
 *         if keyframes is not None:             # <<<<<<<<<<<<<<
 *             self.add_keyframes(*keyframes)
 * 
 */
  }

  /* "nodes_def.pyx":229
 * cdef class AnimatedTime(_Node):
 * 
 *     def __init__(self, keyframes=None, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_ANIMATEDTIME)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pynodegl.AnimatedTime.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":239
 *             self.add_keyframes(*keyframes)
 * 
 *     def add_keyframes(self, *keyframes):             # <<<<<<<<<<<<<<
 *         return self._add_nodelist("keyframes", *keyframes)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_12AnimatedTime_3add_keyframes(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_8pynodegl_12AnimatedTime_3add_keyframes(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_keyframes = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_keyframes (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "add_keyframes", 0))) return NULL;
  __Pyx_INCREF(__pyx_args);
  __pyx_v_keyframes = __pyx_args;
  __pyx_r = __pyx_pf_8pynodegl_12AnimatedTime_2add_keyframes(((struct __pyx_obj_8pynodegl_AnimatedTime *)__pyx_v_self), __pyx_v_keyframes);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_keyframes);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_12AnimatedTime_2add_keyframes(struct __pyx_obj_8pynodegl_AnimatedTime *__pyx_v_self, PyObject *__pyx_v_keyframes) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("add_keyframes", 0);

  /* "nodes_def.pyx":240
 * 
 *     def add_keyframes(self, *keyframes):
 *         return self._add_nodelist("keyframes", *keyframes)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_add_nodelist); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 240, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyNumber_Add(__pyx_tuple__4, __pyx_v_keyframes); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 240, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 240, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":239
 *             self.add_keyframes(*keyframes)
 * 
 *     def add_keyframes(self, *keyframes):             # <<<<<<<<<<<<<<
 *         return self._add_nodelist("keyframes", *keyframes)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pynodegl.AnimatedTime.add_keyframes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_12AnimatedTime_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pynodegl_12AnimatedTime_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_12AnimatedTime_4__reduce_cython__(((struct __pyx_obj_8pynodegl_AnimatedTime *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_12AnimatedTime_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_AnimatedTime *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__15, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.AnimatedTime.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_12AnimatedTime_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8pynodegl_12AnimatedTime_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_12AnimatedTime_6__setstate_cython__(((struct __pyx_obj_8pynodegl_AnimatedTime *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_12AnimatedTime_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_AnimatedTime *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__16, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.AnimatedTime.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":245
 * cdef class AnimatedFloat(_Node):
 * 
 *     def __init__(self, keyframes=None, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_ANIMATEDFLOAT)
 */

/* Python wrapper */
static int __pyx_pw_8pynodegl_13AnimatedFloat_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pynodegl_13AnimatedFloat_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_keyframes = 0;
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  __pyx_v_kwargs = PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return -1;
  __Pyx_GOTREF(__pyx_v_kwargs);
  if (PyTuple_GET_SIZE(__pyx_args) > 1) {
    __pyx_v_args = PyTuple_GetSlice(__pyx_args, 1, PyTuple_GET_SIZE(__pyx_args));
    if (unlikely(!__pyx_v_args)) {
      __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
      __Pyx_RefNannyFinishContext();
      return -1;
    }
    __Pyx_GOTREF(__pyx_v_args);
  } else {
    __pyx_v_args = __pyx_empty_tuple; __Pyx_INCREF(__pyx_empty_tuple);
  }
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_keyframes,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        default:
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_keyframes);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t used_pos_args = (pos_args < 1) ? pos_args : 1;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_kwargs, values, used_pos_args, "__init__") < 0)) __PYX_ERR(0, 245, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        default:
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
      }
    }
    __pyx_v_keyframes = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_args); __pyx_v_args = 0;
  __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
  __Pyx_AddTraceback("pynodegl.AnimatedFloat.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pynodegl_13AnimatedFloat___init__(((struct __pyx_obj_8pynodegl_AnimatedFloat *)__pyx_v_self), __pyx_v_keyframes, __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pynodegl_13AnimatedFloat___init__(struct __pyx_obj_8pynodegl_AnimatedFloat *__pyx_v_self, PyObject *__pyx_v_keyframes, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "nodes_def.pyx":246
 * 
 *     def __init__(self, keyframes=None, *args, **kwargs):
 *         assert self.ctx is NULL             # <<<<<<<<<<<<<<
 *         self.ctx = ngl_node_create(NGL_NODE_ANIMATEDFLOAT)
 *         if self.ctx is NULL:
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!((__pyx_v_self->__pyx_base.ctx == NULL) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 246, __pyx_L1_error)
    }
  }
  #endif

  /* "nodes_def.pyx":247
 *     def __init__(self, keyframes=None, *args, **kwargs):
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_ANIMATEDFLOAT)             # <<<<<<<<<<<<<<
 *         if self.ctx is NULL:
 *             raise MemoryError()
 */
  __pyx_v_self->__pyx_base.ctx = ngl_node_create(NGL_NODE_ANIMATEDFLOAT);

  /* "nodes_def.pyx":248
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_ANIMATEDFLOAT)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         _Node._init_params(self, *args, **kwargs)
 */
  __pyx_t_1 = ((__pyx_v_self->__pyx_base.ctx == NULL) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "nodes_def.pyx":249
 *         self.ctx = ngl_node_create(NGL_NODE_ANIMATEDFLOAT)
 *         if self.ctx is NULL:
 *             raise MemoryError()             # <<<<<<<<<<<<<<
 *         _Node._init_params(self, *args, **kwargs)
 * 
 */
    PyErr_NoMemory(); __PYX_ERR(0, 249, __pyx_L1_error)

    /* "nodes_def.pyx":248
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_ANIMATEDFLOAT)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         _Node._init_params(self, *args, **kwargs)
 */
  }

  /* "nodes_def.pyx":250
 *         if self.ctx is NULL:
 *             raise MemoryError()
 *         _Node._init_params(self, *args, **kwargs)             # <<<<<<<<<<<<<<
 * 
 *         if keyframes is not None:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_8pynodegl__Node), __pyx_n_s_init_params); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 250, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 250, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_v_self));
  __pyx_t_4 = PyNumber_Add(__pyx_t_3, __pyx_v_args); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 250, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, __pyx_v_kwargs); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 250, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "nodes_def.pyx":252
 *         _Node._init_params(self, *args, **kwargs)
 * 
 *         if keyframes is not None:             # <<<<<<<<<<<<<<
 *             self.add_keyframes(*keyframes)
 * 
 */
  __pyx_t_1 = (__pyx_v_keyframes != Py_None);
  __pyx_t_5 = (__pyx_t_1 != 0);
  if (__pyx_t_5) {

    /* "nodes_def.pyx":253
 * 
 *         if keyframes is not None:
 *             self.add_keyframes(*keyframes)             # <<<<<<<<<<<<<<
 * 
 *     def evaluate(self, t):
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_add_keyframes); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 253, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PySequence_Tuple(__pyx_v_keyframes); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 253, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 253, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "nodes_def.pyx":252
 *         _Node._init_params(self, *args, **kwargs)
 * 
 *         if keyframes is not None:             # <<<<<<<<<<<<<<
 *             self.add_keyframes(*keyframes)
 * 
 */
  }

  /* "nodes_def.pyx":245
 * cdef class AnimatedFloat(_Node):
 * 
 *     def __init__(self, keyframes=None, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_ANIMATEDFLOAT)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pynodegl.AnimatedFloat.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":255
 *             self.add_keyframes(*keyframes)
 * 
 *     def evaluate(self, t):             # <<<<<<<<<<<<<<
 *         cdef float[1] vec
 *         ngl_anim_evaluate(self.ctx, vec, t)
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_13AnimatedFloat_3evaluate(PyObject *__pyx_v_self, PyObject *__pyx_v_t); /*proto*/
static PyObject *__pyx_pw_8pynodegl_13AnimatedFloat_3evaluate(PyObject *__pyx_v_self, PyObject *__pyx_v_t) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("evaluate (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_13AnimatedFloat_2evaluate(((struct __pyx_obj_8pynodegl_AnimatedFloat *)__pyx_v_self), ((PyObject *)__pyx_v_t));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_13AnimatedFloat_2evaluate(struct __pyx_obj_8pynodegl_AnimatedFloat *__pyx_v_self, PyObject *__pyx_v_t) {
  float __pyx_v_vec[1];
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("evaluate", 0);

  /* "nodes_def.pyx":257
 *     def evaluate(self, t):
 *         cdef float[1] vec
 *         ngl_anim_evaluate(self.ctx, vec, t)             # <<<<<<<<<<<<<<
 *         return vec[0]
 * 
 */
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_t); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 257, __pyx_L1_error)
  (void)(ngl_anim_evaluate(__pyx_v_self->__pyx_base.ctx, __pyx_v_vec, __pyx_t_1));

  /* "nodes_def.pyx":258
 *         cdef float[1] vec
 *         ngl_anim_evaluate(self.ctx, vec, t)
 *         return vec[0]             # <<<<<<<<<<<<<<
 * 
 *     def add_keyframes(self, *keyframes):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyFloat_FromDouble((__pyx_v_vec[0])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 258, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":255
 *             self.add_keyframes(*keyframes)
 * 
 *     def evaluate(self, t):             # <<<<<<<<<<<<<<
 *         cdef float[1] vec
 *         ngl_anim_evaluate(self.ctx, vec, t)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pynodegl.AnimatedFloat.evaluate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":260
 *         return vec[0]
 * 
 *     def add_keyframes(self, *keyframes):             # <<<<<<<<<<<<<<
 *         return self._add_nodelist("keyframes", *keyframes)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_13AnimatedFloat_5add_keyframes(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_8pynodegl_13AnimatedFloat_5add_keyframes(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_keyframes = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_keyframes (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "add_keyframes", 0))) return NULL;
  __Pyx_INCREF(__pyx_args);
  __pyx_v_keyframes = __pyx_args;
  __pyx_r = __pyx_pf_8pynodegl_13AnimatedFloat_4add_keyframes(((struct __pyx_obj_8pynodegl_AnimatedFloat *)__pyx_v_self), __pyx_v_keyframes);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_keyframes);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_13AnimatedFloat_4add_keyframes(struct __pyx_obj_8pynodegl_AnimatedFloat *__pyx_v_self, PyObject *__pyx_v_keyframes) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("add_keyframes", 0);

  /* "nodes_def.pyx":261
 * 
 *     def add_keyframes(self, *keyframes):
 *         return self._add_nodelist("keyframes", *keyframes)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_add_nodelist); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 261, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyNumber_Add(__pyx_tuple__4, __pyx_v_keyframes); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 261, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 261, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":260
 *         return vec[0]
 * 
 *     def add_keyframes(self, *keyframes):             # <<<<<<<<<<<<<<
 *         return self._add_nodelist("keyframes", *keyframes)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pynodegl.AnimatedFloat.add_keyframes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_13AnimatedFloat_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pynodegl_13AnimatedFloat_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_13AnimatedFloat_6__reduce_cython__(((struct __pyx_obj_8pynodegl_AnimatedFloat *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_13AnimatedFloat_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_AnimatedFloat *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__17, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.AnimatedFloat.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_13AnimatedFloat_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8pynodegl_13AnimatedFloat_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_13AnimatedFloat_8__setstate_cython__(((struct __pyx_obj_8pynodegl_AnimatedFloat *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_13AnimatedFloat_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_AnimatedFloat *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__18, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.AnimatedFloat.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":266
 * cdef class AnimatedVec2(_Node):
 * 
 *     def __init__(self, keyframes=None, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_ANIMATEDVEC2)
 */

/* Python wrapper */
static int __pyx_pw_8pynodegl_12AnimatedVec2_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pynodegl_12AnimatedVec2_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_keyframes = 0;
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  __pyx_v_kwargs = PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return -1;
  __Pyx_GOTREF(__pyx_v_kwargs);
  if (PyTuple_GET_SIZE(__pyx_args) > 1) {
    __pyx_v_args = PyTuple_GetSlice(__pyx_args, 1, PyTuple_GET_SIZE(__pyx_args));
    if (unlikely(!__pyx_v_args)) {
      __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
      __Pyx_RefNannyFinishContext();
      return -1;
    }
    __Pyx_GOTREF(__pyx_v_args);
  } else {
    __pyx_v_args = __pyx_empty_tuple; __Pyx_INCREF(__pyx_empty_tuple);
  }
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_keyframes,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        default:
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_keyframes);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t used_pos_args = (pos_args < 1) ? pos_args : 1;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_kwargs, values, used_pos_args, "__init__") < 0)) __PYX_ERR(0, 266, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        default:
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
      }
    }
    __pyx_v_keyframes = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_args); __pyx_v_args = 0;
  __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
  __Pyx_AddTraceback("pynodegl.AnimatedVec2.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pynodegl_12AnimatedVec2___init__(((struct __pyx_obj_8pynodegl_AnimatedVec2 *)__pyx_v_self), __pyx_v_keyframes, __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pynodegl_12AnimatedVec2___init__(struct __pyx_obj_8pynodegl_AnimatedVec2 *__pyx_v_self, PyObject *__pyx_v_keyframes, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "nodes_def.pyx":267
 * 
 *     def __init__(self, keyframes=None, *args, **kwargs):
 *         assert self.ctx is NULL             # <<<<<<<<<<<<<<
 *         self.ctx = ngl_node_create(NGL_NODE_ANIMATEDVEC2)
 *         if self.ctx is NULL:
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!((__pyx_v_self->__pyx_base.ctx == NULL) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 267, __pyx_L1_error)
    }
  }
  #endif

  /* "nodes_def.pyx":268
 *     def __init__(self, keyframes=None, *args, **kwargs):
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_ANIMATEDVEC2)             # <<<<<<<<<<<<<<
 *         if self.ctx is NULL:
 *             raise MemoryError()
 */
  __pyx_v_self->__pyx_base.ctx = ngl_node_create(NGL_NODE_ANIMATEDVEC2);

  /* "nodes_def.pyx":269
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_ANIMATEDVEC2)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         _Node._init_params(self, *args, **kwargs)
 */
  __pyx_t_1 = ((__pyx_v_self->__pyx_base.ctx == NULL) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "nodes_def.pyx":270
 *         self.ctx = ngl_node_create(NGL_NODE_ANIMATEDVEC2)
 *         if self.ctx is NULL:
 *             raise MemoryError()             # <<<<<<<<<<<<<<
 *         _Node._init_params(self, *args, **kwargs)
 * 
 */
    PyErr_NoMemory(); __PYX_ERR(0, 270, __pyx_L1_error)

    /* "nodes_def.pyx":269
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_ANIMATEDVEC2)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         _Node._init_params(self, *args, **kwargs)
 */
  }

  /* "nodes_def.pyx":271
 *         if self.ctx is NULL:
 *             raise MemoryError()
 *         _Node._init_params(self, *args, **kwargs)             # <<<<<<<<<<<<<<
 * 
 *         if keyframes is not None:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_8pynodegl__Node), __pyx_n_s_init_params); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 271, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 271, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_v_self));
  __pyx_t_4 = PyNumber_Add(__pyx_t_3, __pyx_v_args); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 271, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, __pyx_v_kwargs); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 271, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "nodes_def.pyx":273
 *         _Node._init_params(self, *args, **kwargs)
 * 
 *         if keyframes is not None:             # <<<<<<<<<<<<<<
 *             self.add_keyframes(*keyframes)
 * 
 */
  __pyx_t_1 = (__pyx_v_keyframes != Py_None);
  __pyx_t_5 = (__pyx_t_1 != 0);
  if (__pyx_t_5) {

    /* "nodes_def.pyx":274
 * 
 *         if keyframes is not None:
 *             self.add_keyframes(*keyframes)             # <<<<<<<<<<<<<<
 * 
 *     def evaluate(self, t):
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_add_keyframes); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 274, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PySequence_Tuple(__pyx_v_keyframes); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 274, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 274, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "nodes_def.pyx":273
 *         _Node._init_params(self, *args, **kwargs)
 * 
 *         if keyframes is not None:             # <<<<<<<<<<<<<<
 *             self.add_keyframes(*keyframes)
 * 
 */
  }

  /* "nodes_def.pyx":266
 * cdef class AnimatedVec2(_Node):
 * 
 *     def __init__(self, keyframes=None, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_ANIMATEDVEC2)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pynodegl.AnimatedVec2.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":276
 *             self.add_keyframes(*keyframes)
 * 
 *     def evaluate(self, t):             # <<<<<<<<<<<<<<
 *         cdef float[2] vec
 *         ngl_anim_evaluate(self.ctx, vec, t)
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_12AnimatedVec2_3evaluate(PyObject *__pyx_v_self, PyObject *__pyx_v_t); /*proto*/
static PyObject *__pyx_pw_8pynodegl_12AnimatedVec2_3evaluate(PyObject *__pyx_v_self, PyObject *__pyx_v_t) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("evaluate (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_12AnimatedVec2_2evaluate(((struct __pyx_obj_8pynodegl_AnimatedVec2 *)__pyx_v_self), ((PyObject *)__pyx_v_t));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_12AnimatedVec2_2evaluate(struct __pyx_obj_8pynodegl_AnimatedVec2 *__pyx_v_self, PyObject *__pyx_v_t) {
  float __pyx_v_vec[2];
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("evaluate", 0);

  /* "nodes_def.pyx":278
 *     def evaluate(self, t):
 *         cdef float[2] vec
 *         ngl_anim_evaluate(self.ctx, vec, t)             # <<<<<<<<<<<<<<
 *         return (vec[0], vec[1])
 * 
 */
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_t); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 278, __pyx_L1_error)
  (void)(ngl_anim_evaluate(__pyx_v_self->__pyx_base.ctx, __pyx_v_vec, __pyx_t_1));

  /* "nodes_def.pyx":279
 *         cdef float[2] vec
 *         ngl_anim_evaluate(self.ctx, vec, t)
 *         return (vec[0], vec[1])             # <<<<<<<<<<<<<<
 * 
 *     def add_keyframes(self, *keyframes):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyFloat_FromDouble((__pyx_v_vec[0])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 279, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyFloat_FromDouble((__pyx_v_vec[1])); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 279, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 279, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_3);
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":276
 *             self.add_keyframes(*keyframes)
 * 
 *     def evaluate(self, t):             # <<<<<<<<<<<<<<
 *         cdef float[2] vec
 *         ngl_anim_evaluate(self.ctx, vec, t)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pynodegl.AnimatedVec2.evaluate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":281
 *         return (vec[0], vec[1])
 * 
 *     def add_keyframes(self, *keyframes):             # <<<<<<<<<<<<<<
 *         return self._add_nodelist("keyframes", *keyframes)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_12AnimatedVec2_5add_keyframes(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_8pynodegl_12AnimatedVec2_5add_keyframes(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_keyframes = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_keyframes (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "add_keyframes", 0))) return NULL;
  __Pyx_INCREF(__pyx_args);
  __pyx_v_keyframes = __pyx_args;
  __pyx_r = __pyx_pf_8pynodegl_12AnimatedVec2_4add_keyframes(((struct __pyx_obj_8pynodegl_AnimatedVec2 *)__pyx_v_self), __pyx_v_keyframes);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_keyframes);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_12AnimatedVec2_4add_keyframes(struct __pyx_obj_8pynodegl_AnimatedVec2 *__pyx_v_self, PyObject *__pyx_v_keyframes) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("add_keyframes", 0);

  /* "nodes_def.pyx":282
 * 
 *     def add_keyframes(self, *keyframes):
 *         return self._add_nodelist("keyframes", *keyframes)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_add_nodelist); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 282, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyNumber_Add(__pyx_tuple__4, __pyx_v_keyframes); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 282, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 282, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":281
 *         return (vec[0], vec[1])
 * 
 *     def add_keyframes(self, *keyframes):             # <<<<<<<<<<<<<<
 *         return self._add_nodelist("keyframes", *keyframes)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pynodegl.AnimatedVec2.add_keyframes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_12AnimatedVec2_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pynodegl_12AnimatedVec2_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_12AnimatedVec2_6__reduce_cython__(((struct __pyx_obj_8pynodegl_AnimatedVec2 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_12AnimatedVec2_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_AnimatedVec2 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__19, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.AnimatedVec2.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_12AnimatedVec2_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8pynodegl_12AnimatedVec2_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_12AnimatedVec2_8__setstate_cython__(((struct __pyx_obj_8pynodegl_AnimatedVec2 *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_12AnimatedVec2_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_AnimatedVec2 *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__20, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.AnimatedVec2.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":287
 * cdef class AnimatedVec3(_Node):
 * 
 *     def __init__(self, keyframes=None, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_ANIMATEDVEC3)
 */

/* Python wrapper */
static int __pyx_pw_8pynodegl_12AnimatedVec3_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pynodegl_12AnimatedVec3_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_keyframes = 0;
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  __pyx_v_kwargs = PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return -1;
  __Pyx_GOTREF(__pyx_v_kwargs);
  if (PyTuple_GET_SIZE(__pyx_args) > 1) {
    __pyx_v_args = PyTuple_GetSlice(__pyx_args, 1, PyTuple_GET_SIZE(__pyx_args));
    if (unlikely(!__pyx_v_args)) {
      __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
      __Pyx_RefNannyFinishContext();
      return -1;
    }
    __Pyx_GOTREF(__pyx_v_args);
  } else {
    __pyx_v_args = __pyx_empty_tuple; __Pyx_INCREF(__pyx_empty_tuple);
  }
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_keyframes,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        default:
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_keyframes);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t used_pos_args = (pos_args < 1) ? pos_args : 1;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_kwargs, values, used_pos_args, "__init__") < 0)) __PYX_ERR(0, 287, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        default:
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
      }
    }
    __pyx_v_keyframes = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_args); __pyx_v_args = 0;
  __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
  __Pyx_AddTraceback("pynodegl.AnimatedVec3.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pynodegl_12AnimatedVec3___init__(((struct __pyx_obj_8pynodegl_AnimatedVec3 *)__pyx_v_self), __pyx_v_keyframes, __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pynodegl_12AnimatedVec3___init__(struct __pyx_obj_8pynodegl_AnimatedVec3 *__pyx_v_self, PyObject *__pyx_v_keyframes, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "nodes_def.pyx":288
 * 
 *     def __init__(self, keyframes=None, *args, **kwargs):
 *         assert self.ctx is NULL             # <<<<<<<<<<<<<<
 *         self.ctx = ngl_node_create(NGL_NODE_ANIMATEDVEC3)
 *         if self.ctx is NULL:
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!((__pyx_v_self->__pyx_base.ctx == NULL) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 288, __pyx_L1_error)
    }
  }
  #endif

  /* "nodes_def.pyx":289
 *     def __init__(self, keyframes=None, *args, **kwargs):
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_ANIMATEDVEC3)             # <<<<<<<<<<<<<<
 *         if self.ctx is NULL:
 *             raise MemoryError()
 */
  __pyx_v_self->__pyx_base.ctx = ngl_node_create(NGL_NODE_ANIMATEDVEC3);

  /* "nodes_def.pyx":290
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_ANIMATEDVEC3)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         _Node._init_params(self, *args, **kwargs)
 */
  __pyx_t_1 = ((__pyx_v_self->__pyx_base.ctx == NULL) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "nodes_def.pyx":291
 *         self.ctx = ngl_node_create(NGL_NODE_ANIMATEDVEC3)
 *         if self.ctx is NULL:
 *             raise MemoryError()             # <<<<<<<<<<<<<<
 *         _Node._init_params(self, *args, **kwargs)
 * 
 */
    PyErr_NoMemory(); __PYX_ERR(0, 291, __pyx_L1_error)

    /* "nodes_def.pyx":290
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_ANIMATEDVEC3)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         _Node._init_params(self, *args, **kwargs)
 */
  }

  /* "nodes_def.pyx":292
 *         if self.ctx is NULL:
 *             raise MemoryError()
 *         _Node._init_params(self, *args, **kwargs)             # <<<<<<<<<<<<<<
 * 
 *         if keyframes is not None:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_8pynodegl__Node), __pyx_n_s_init_params); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 292, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 292, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_v_self));
  __pyx_t_4 = PyNumber_Add(__pyx_t_3, __pyx_v_args); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 292, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, __pyx_v_kwargs); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 292, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "nodes_def.pyx":294
 *         _Node._init_params(self, *args, **kwargs)
 * 
 *         if keyframes is not None:             # <<<<<<<<<<<<<<
 *             self.add_keyframes(*keyframes)
 * 
 */
  __pyx_t_1 = (__pyx_v_keyframes != Py_None);
  __pyx_t_5 = (__pyx_t_1 != 0);
  if (__pyx_t_5) {

    /* "nodes_def.pyx":295
 * 
 *         if keyframes is not None:
 *             self.add_keyframes(*keyframes)             # <<<<<<<<<<<<<<
 * 
 *     def evaluate(self, t):
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_add_keyframes); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 295, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PySequence_Tuple(__pyx_v_keyframes); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 295, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 295, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "nodes_def.pyx":294
 *         _Node._init_params(self, *args, **kwargs)
 * 
 *         if keyframes is not None:             # <<<<<<<<<<<<<<
 *             self.add_keyframes(*keyframes)
 * 
 */
  }

  /* "nodes_def.pyx":287
 * cdef class AnimatedVec3(_Node):
 * 
 *     def __init__(self, keyframes=None, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_ANIMATEDVEC3)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pynodegl.AnimatedVec3.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":297
 *             self.add_keyframes(*keyframes)
 * 
 *     def evaluate(self, t):             # <<<<<<<<<<<<<<
 *         cdef float[3] vec
 *         ngl_anim_evaluate(self.ctx, vec, t)
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_12AnimatedVec3_3evaluate(PyObject *__pyx_v_self, PyObject *__pyx_v_t); /*proto*/
static PyObject *__pyx_pw_8pynodegl_12AnimatedVec3_3evaluate(PyObject *__pyx_v_self, PyObject *__pyx_v_t) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("evaluate (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_12AnimatedVec3_2evaluate(((struct __pyx_obj_8pynodegl_AnimatedVec3 *)__pyx_v_self), ((PyObject *)__pyx_v_t));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_12AnimatedVec3_2evaluate(struct __pyx_obj_8pynodegl_AnimatedVec3 *__pyx_v_self, PyObject *__pyx_v_t) {
  float __pyx_v_vec[3];
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("evaluate", 0);

  /* "nodes_def.pyx":299
 *     def evaluate(self, t):
 *         cdef float[3] vec
 *         ngl_anim_evaluate(self.ctx, vec, t)             # <<<<<<<<<<<<<<
 *         return (vec[0], vec[1], vec[2])
 * 
 */
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_t); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 299, __pyx_L1_error)
  (void)(ngl_anim_evaluate(__pyx_v_self->__pyx_base.ctx, __pyx_v_vec, __pyx_t_1));

  /* "nodes_def.pyx":300
 *         cdef float[3] vec
 *         ngl_anim_evaluate(self.ctx, vec, t)
 *         return (vec[0], vec[1], vec[2])             # <<<<<<<<<<<<<<
 * 
 *     def add_keyframes(self, *keyframes):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyFloat_FromDouble((__pyx_v_vec[0])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 300, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyFloat_FromDouble((__pyx_v_vec[1])); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 300, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyFloat_FromDouble((__pyx_v_vec[2])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 300, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 300, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_t_4);
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":297
 *             self.add_keyframes(*keyframes)
 * 
 *     def evaluate(self, t):             # <<<<<<<<<<<<<<
 *         cdef float[3] vec
 *         ngl_anim_evaluate(self.ctx, vec, t)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pynodegl.AnimatedVec3.evaluate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":302
 *         return (vec[0], vec[1], vec[2])
 * 
 *     def add_keyframes(self, *keyframes):             # <<<<<<<<<<<<<<
 *         return self._add_nodelist("keyframes", *keyframes)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_12AnimatedVec3_5add_keyframes(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_8pynodegl_12AnimatedVec3_5add_keyframes(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_keyframes = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_keyframes (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "add_keyframes", 0))) return NULL;
  __Pyx_INCREF(__pyx_args);
  __pyx_v_keyframes = __pyx_args;
  __pyx_r = __pyx_pf_8pynodegl_12AnimatedVec3_4add_keyframes(((struct __pyx_obj_8pynodegl_AnimatedVec3 *)__pyx_v_self), __pyx_v_keyframes);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_keyframes);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_12AnimatedVec3_4add_keyframes(struct __pyx_obj_8pynodegl_AnimatedVec3 *__pyx_v_self, PyObject *__pyx_v_keyframes) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("add_keyframes", 0);

  /* "nodes_def.pyx":303
 * 
 *     def add_keyframes(self, *keyframes):
 *         return self._add_nodelist("keyframes", *keyframes)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_add_nodelist); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 303, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyNumber_Add(__pyx_tuple__4, __pyx_v_keyframes); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 303, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 303, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":302
 *         return (vec[0], vec[1], vec[2])
 * 
 *     def add_keyframes(self, *keyframes):             # <<<<<<<<<<<<<<
 *         return self._add_nodelist("keyframes", *keyframes)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pynodegl.AnimatedVec3.add_keyframes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_12AnimatedVec3_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pynodegl_12AnimatedVec3_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_12AnimatedVec3_6__reduce_cython__(((struct __pyx_obj_8pynodegl_AnimatedVec3 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_12AnimatedVec3_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_AnimatedVec3 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__21, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.AnimatedVec3.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_12AnimatedVec3_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8pynodegl_12AnimatedVec3_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_12AnimatedVec3_8__setstate_cython__(((struct __pyx_obj_8pynodegl_AnimatedVec3 *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_12AnimatedVec3_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_AnimatedVec3 *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__22, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.AnimatedVec3.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":308
 * cdef class AnimatedVec4(_Node):
 * 
 *     def __init__(self, keyframes=None, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_ANIMATEDVEC4)
 */

/* Python wrapper */
static int __pyx_pw_8pynodegl_12AnimatedVec4_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pynodegl_12AnimatedVec4_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_keyframes = 0;
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  __pyx_v_kwargs = PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return -1;
  __Pyx_GOTREF(__pyx_v_kwargs);
  if (PyTuple_GET_SIZE(__pyx_args) > 1) {
    __pyx_v_args = PyTuple_GetSlice(__pyx_args, 1, PyTuple_GET_SIZE(__pyx_args));
    if (unlikely(!__pyx_v_args)) {
      __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
      __Pyx_RefNannyFinishContext();
      return -1;
    }
    __Pyx_GOTREF(__pyx_v_args);
  } else {
    __pyx_v_args = __pyx_empty_tuple; __Pyx_INCREF(__pyx_empty_tuple);
  }
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_keyframes,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        default:
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_keyframes);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t used_pos_args = (pos_args < 1) ? pos_args : 1;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_kwargs, values, used_pos_args, "__init__") < 0)) __PYX_ERR(0, 308, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        default:
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
      }
    }
    __pyx_v_keyframes = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_args); __pyx_v_args = 0;
  __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
  __Pyx_AddTraceback("pynodegl.AnimatedVec4.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pynodegl_12AnimatedVec4___init__(((struct __pyx_obj_8pynodegl_AnimatedVec4 *)__pyx_v_self), __pyx_v_keyframes, __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pynodegl_12AnimatedVec4___init__(struct __pyx_obj_8pynodegl_AnimatedVec4 *__pyx_v_self, PyObject *__pyx_v_keyframes, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "nodes_def.pyx":309
 * 
 *     def __init__(self, keyframes=None, *args, **kwargs):
 *         assert self.ctx is NULL             # <<<<<<<<<<<<<<
 *         self.ctx = ngl_node_create(NGL_NODE_ANIMATEDVEC4)
 *         if self.ctx is NULL:
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!((__pyx_v_self->__pyx_base.ctx == NULL) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 309, __pyx_L1_error)
    }
  }
  #endif

  /* "nodes_def.pyx":310
 *     def __init__(self, keyframes=None, *args, **kwargs):
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_ANIMATEDVEC4)             # <<<<<<<<<<<<<<
 *         if self.ctx is NULL:
 *             raise MemoryError()
 */
  __pyx_v_self->__pyx_base.ctx = ngl_node_create(NGL_NODE_ANIMATEDVEC4);

  /* "nodes_def.pyx":311
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_ANIMATEDVEC4)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         _Node._init_params(self, *args, **kwargs)
 */
  __pyx_t_1 = ((__pyx_v_self->__pyx_base.ctx == NULL) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "nodes_def.pyx":312
 *         self.ctx = ngl_node_create(NGL_NODE_ANIMATEDVEC4)
 *         if self.ctx is NULL:
 *             raise MemoryError()             # <<<<<<<<<<<<<<
 *         _Node._init_params(self, *args, **kwargs)
 * 
 */
    PyErr_NoMemory(); __PYX_ERR(0, 312, __pyx_L1_error)

    /* "nodes_def.pyx":311
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_ANIMATEDVEC4)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         _Node._init_params(self, *args, **kwargs)
 */
  }

  /* "nodes_def.pyx":313
 *         if self.ctx is NULL:
 *             raise MemoryError()
 *         _Node._init_params(self, *args, **kwargs)             # <<<<<<<<<<<<<<
 * 
 *         if keyframes is not None:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_8pynodegl__Node), __pyx_n_s_init_params); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 313, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 313, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_v_self));
  __pyx_t_4 = PyNumber_Add(__pyx_t_3, __pyx_v_args); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 313, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, __pyx_v_kwargs); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 313, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "nodes_def.pyx":315
 *         _Node._init_params(self, *args, **kwargs)
 * 
 *         if keyframes is not None:             # <<<<<<<<<<<<<<
 *             self.add_keyframes(*keyframes)
 * 
 */
  __pyx_t_1 = (__pyx_v_keyframes != Py_None);
  __pyx_t_5 = (__pyx_t_1 != 0);
  if (__pyx_t_5) {

    /* "nodes_def.pyx":316
 * 
 *         if keyframes is not None:
 *             self.add_keyframes(*keyframes)             # <<<<<<<<<<<<<<
 * 
 *     def evaluate(self, t):
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_add_keyframes); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 316, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PySequence_Tuple(__pyx_v_keyframes); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 316, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 316, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "nodes_def.pyx":315
 *         _Node._init_params(self, *args, **kwargs)
 * 
 *         if keyframes is not None:             # <<<<<<<<<<<<<<
 *             self.add_keyframes(*keyframes)
 * 
 */
  }

  /* "nodes_def.pyx":308
 * cdef class AnimatedVec4(_Node):
 * 
 *     def __init__(self, keyframes=None, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_ANIMATEDVEC4)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pynodegl.AnimatedVec4.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":318
 *             self.add_keyframes(*keyframes)
 * 
 *     def evaluate(self, t):             # <<<<<<<<<<<<<<
 *         cdef float[4] vec
 *         ngl_anim_evaluate(self.ctx, vec, t)
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_12AnimatedVec4_3evaluate(PyObject *__pyx_v_self, PyObject *__pyx_v_t); /*proto*/
static PyObject *__pyx_pw_8pynodegl_12AnimatedVec4_3evaluate(PyObject *__pyx_v_self, PyObject *__pyx_v_t) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("evaluate (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_12AnimatedVec4_2evaluate(((struct __pyx_obj_8pynodegl_AnimatedVec4 *)__pyx_v_self), ((PyObject *)__pyx_v_t));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_12AnimatedVec4_2evaluate(struct __pyx_obj_8pynodegl_AnimatedVec4 *__pyx_v_self, PyObject *__pyx_v_t) {
  float __pyx_v_vec[4];
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannySetupContext("evaluate", 0);

  /* "nodes_def.pyx":320
 *     def evaluate(self, t):
 *         cdef float[4] vec
 *         ngl_anim_evaluate(self.ctx, vec, t)             # <<<<<<<<<<<<<<
 *         return (vec[0], vec[1], vec[2], vec[3])
 * 
 */
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_t); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 320, __pyx_L1_error)
  (void)(ngl_anim_evaluate(__pyx_v_self->__pyx_base.ctx, __pyx_v_vec, __pyx_t_1));

  /* "nodes_def.pyx":321
 *         cdef float[4] vec
 *         ngl_anim_evaluate(self.ctx, vec, t)
 *         return (vec[0], vec[1], vec[2], vec[3])             # <<<<<<<<<<<<<<
 * 
 *     def add_keyframes(self, *keyframes):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyFloat_FromDouble((__pyx_v_vec[0])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 321, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyFloat_FromDouble((__pyx_v_vec[1])); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 321, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyFloat_FromDouble((__pyx_v_vec[2])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 321, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyFloat_FromDouble((__pyx_v_vec[3])); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 321, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyTuple_New(4); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 321, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_6, 2, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_6, 3, __pyx_t_5);
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_t_5 = 0;
  __pyx_r = __pyx_t_6;
  __pyx_t_6 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":318
 *             self.add_keyframes(*keyframes)
 * 
 *     def evaluate(self, t):             # <<<<<<<<<<<<<<
 *         cdef float[4] vec
 *         ngl_anim_evaluate(self.ctx, vec, t)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("pynodegl.AnimatedVec4.evaluate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":323
 *         return (vec[0], vec[1], vec[2], vec[3])
 * 
 *     def add_keyframes(self, *keyframes):             # <<<<<<<<<<<<<<
 *         return self._add_nodelist("keyframes", *keyframes)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_12AnimatedVec4_5add_keyframes(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_8pynodegl_12AnimatedVec4_5add_keyframes(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_keyframes = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_keyframes (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "add_keyframes", 0))) return NULL;
  __Pyx_INCREF(__pyx_args);
  __pyx_v_keyframes = __pyx_args;
  __pyx_r = __pyx_pf_8pynodegl_12AnimatedVec4_4add_keyframes(((struct __pyx_obj_8pynodegl_AnimatedVec4 *)__pyx_v_self), __pyx_v_keyframes);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_keyframes);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_12AnimatedVec4_4add_keyframes(struct __pyx_obj_8pynodegl_AnimatedVec4 *__pyx_v_self, PyObject *__pyx_v_keyframes) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("add_keyframes", 0);

  /* "nodes_def.pyx":324
 * 
 *     def add_keyframes(self, *keyframes):
 *         return self._add_nodelist("keyframes", *keyframes)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_add_nodelist); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 324, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyNumber_Add(__pyx_tuple__4, __pyx_v_keyframes); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 324, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 324, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":323
 *         return (vec[0], vec[1], vec[2], vec[3])
 * 
 *     def add_keyframes(self, *keyframes):             # <<<<<<<<<<<<<<
 *         return self._add_nodelist("keyframes", *keyframes)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pynodegl.AnimatedVec4.add_keyframes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_12AnimatedVec4_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pynodegl_12AnimatedVec4_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_12AnimatedVec4_6__reduce_cython__(((struct __pyx_obj_8pynodegl_AnimatedVec4 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_12AnimatedVec4_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_AnimatedVec4 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__23, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.AnimatedVec4.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_12AnimatedVec4_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8pynodegl_12AnimatedVec4_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_12AnimatedVec4_8__setstate_cython__(((struct __pyx_obj_8pynodegl_AnimatedVec4 *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_12AnimatedVec4_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_AnimatedVec4 *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__24, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.AnimatedVec4.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":329
 * cdef class AnimatedQuat(_Node):
 * 
 *     def __init__(self, keyframes=None, as_mat4=None, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_ANIMATEDQUAT)
 */

/* Python wrapper */
static int __pyx_pw_8pynodegl_12AnimatedQuat_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pynodegl_12AnimatedQuat_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_keyframes = 0;
  PyObject *__pyx_v_as_mat4 = 0;
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  __pyx_v_kwargs = PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return -1;
  __Pyx_GOTREF(__pyx_v_kwargs);
  if (PyTuple_GET_SIZE(__pyx_args) > 2) {
    __pyx_v_args = PyTuple_GetSlice(__pyx_args, 2, PyTuple_GET_SIZE(__pyx_args));
    if (unlikely(!__pyx_v_args)) {
      __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
      __Pyx_RefNannyFinishContext();
      return -1;
    }
    __Pyx_GOTREF(__pyx_v_args);
  } else {
    __pyx_v_args = __pyx_empty_tuple; __Pyx_INCREF(__pyx_empty_tuple);
  }
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_keyframes,&__pyx_n_s_as_mat4,0};
    PyObject* values[2] = {0,0};
    values[0] = ((PyObject *)Py_None);
    values[1] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        default:
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_keyframes);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_as_mat4);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t used_pos_args = (pos_args < 2) ? pos_args : 2;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_kwargs, values, used_pos_args, "__init__") < 0)) __PYX_ERR(0, 329, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        default:
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
      }
    }
    __pyx_v_keyframes = values[0];
    __pyx_v_as_mat4 = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_args); __pyx_v_args = 0;
  __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
  __Pyx_AddTraceback("pynodegl.AnimatedQuat.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pynodegl_12AnimatedQuat___init__(((struct __pyx_obj_8pynodegl_AnimatedQuat *)__pyx_v_self), __pyx_v_keyframes, __pyx_v_as_mat4, __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pynodegl_12AnimatedQuat___init__(struct __pyx_obj_8pynodegl_AnimatedQuat *__pyx_v_self, PyObject *__pyx_v_keyframes, PyObject *__pyx_v_as_mat4, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "nodes_def.pyx":330
 * 
 *     def __init__(self, keyframes=None, as_mat4=None, *args, **kwargs):
 *         assert self.ctx is NULL             # <<<<<<<<<<<<<<
 *         self.ctx = ngl_node_create(NGL_NODE_ANIMATEDQUAT)
 *         if self.ctx is NULL:
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!((__pyx_v_self->__pyx_base.ctx == NULL) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 330, __pyx_L1_error)
    }
  }
  #endif

  /* "nodes_def.pyx":331
 *     def __init__(self, keyframes=None, as_mat4=None, *args, **kwargs):
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_ANIMATEDQUAT)             # <<<<<<<<<<<<<<
 *         if self.ctx is NULL:
 *             raise MemoryError()
 */
  __pyx_v_self->__pyx_base.ctx = ngl_node_create(NGL_NODE_ANIMATEDQUAT);

  /* "nodes_def.pyx":332
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_ANIMATEDQUAT)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         _Node._init_params(self, *args, **kwargs)
 */
  __pyx_t_1 = ((__pyx_v_self->__pyx_base.ctx == NULL) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "nodes_def.pyx":333
 *         self.ctx = ngl_node_create(NGL_NODE_ANIMATEDQUAT)
 *         if self.ctx is NULL:
 *             raise MemoryError()             # <<<<<<<<<<<<<<
 *         _Node._init_params(self, *args, **kwargs)
 * 
 */
    PyErr_NoMemory(); __PYX_ERR(0, 333, __pyx_L1_error)

    /* "nodes_def.pyx":332
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_ANIMATEDQUAT)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         _Node._init_params(self, *args, **kwargs)
 */
  }

  /* "nodes_def.pyx":334
 *         if self.ctx is NULL:
 *             raise MemoryError()
 *         _Node._init_params(self, *args, **kwargs)             # <<<<<<<<<<<<<<
 * 
 *         if keyframes is not None:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_8pynodegl__Node), __pyx_n_s_init_params); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 334, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 334, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_v_self));
  __pyx_t_4 = PyNumber_Add(__pyx_t_3, __pyx_v_args); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 334, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, __pyx_v_kwargs); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 334, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "nodes_def.pyx":336
 *         _Node._init_params(self, *args, **kwargs)
 * 
 *         if keyframes is not None:             # <<<<<<<<<<<<<<
 *             self.add_keyframes(*keyframes)
 *         if as_mat4 is not None:
 */
  __pyx_t_1 = (__pyx_v_keyframes != Py_None);
  __pyx_t_5 = (__pyx_t_1 != 0);
  if (__pyx_t_5) {

    /* "nodes_def.pyx":337
 * 
 *         if keyframes is not None:
 *             self.add_keyframes(*keyframes)             # <<<<<<<<<<<<<<
 *         if as_mat4 is not None:
 *             self.set_as_mat4(as_mat4)
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_add_keyframes); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 337, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PySequence_Tuple(__pyx_v_keyframes); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 337, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 337, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "nodes_def.pyx":336
 *         _Node._init_params(self, *args, **kwargs)
 * 
 *         if keyframes is not None:             # <<<<<<<<<<<<<<
 *             self.add_keyframes(*keyframes)
 *         if as_mat4 is not None:
 */
  }

  /* "nodes_def.pyx":338
 *         if keyframes is not None:
 *             self.add_keyframes(*keyframes)
 *         if as_mat4 is not None:             # <<<<<<<<<<<<<<
 *             self.set_as_mat4(as_mat4)
 * 
 */
  __pyx_t_5 = (__pyx_v_as_mat4 != Py_None);
  __pyx_t_1 = (__pyx_t_5 != 0);
  if (__pyx_t_1) {

    /* "nodes_def.pyx":339
 *             self.add_keyframes(*keyframes)
 *         if as_mat4 is not None:
 *             self.set_as_mat4(as_mat4)             # <<<<<<<<<<<<<<
 * 
 *     def evaluate(self, t):
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_as_mat4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 339, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_2 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_3, __pyx_v_as_mat4) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_as_mat4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 339, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "nodes_def.pyx":338
 *         if keyframes is not None:
 *             self.add_keyframes(*keyframes)
 *         if as_mat4 is not None:             # <<<<<<<<<<<<<<
 *             self.set_as_mat4(as_mat4)
 * 
 */
  }

  /* "nodes_def.pyx":329
 * cdef class AnimatedQuat(_Node):
 * 
 *     def __init__(self, keyframes=None, as_mat4=None, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_ANIMATEDQUAT)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pynodegl.AnimatedQuat.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":341
 *             self.set_as_mat4(as_mat4)
 * 
 *     def evaluate(self, t):             # <<<<<<<<<<<<<<
 *         cdef float[4] vec
 *         ngl_anim_evaluate(self.ctx, vec, t)
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_12AnimatedQuat_3evaluate(PyObject *__pyx_v_self, PyObject *__pyx_v_t); /*proto*/
static PyObject *__pyx_pw_8pynodegl_12AnimatedQuat_3evaluate(PyObject *__pyx_v_self, PyObject *__pyx_v_t) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("evaluate (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_12AnimatedQuat_2evaluate(((struct __pyx_obj_8pynodegl_AnimatedQuat *)__pyx_v_self), ((PyObject *)__pyx_v_t));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_12AnimatedQuat_2evaluate(struct __pyx_obj_8pynodegl_AnimatedQuat *__pyx_v_self, PyObject *__pyx_v_t) {
  float __pyx_v_vec[4];
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannySetupContext("evaluate", 0);

  /* "nodes_def.pyx":343
 *     def evaluate(self, t):
 *         cdef float[4] vec
 *         ngl_anim_evaluate(self.ctx, vec, t)             # <<<<<<<<<<<<<<
 *         return (vec[0], vec[1], vec[2], vec[3])
 * 
 */
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_t); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 343, __pyx_L1_error)
  (void)(ngl_anim_evaluate(__pyx_v_self->__pyx_base.ctx, __pyx_v_vec, __pyx_t_1));

  /* "nodes_def.pyx":344
 *         cdef float[4] vec
 *         ngl_anim_evaluate(self.ctx, vec, t)
 *         return (vec[0], vec[1], vec[2], vec[3])             # <<<<<<<<<<<<<<
 * 
 *     def add_keyframes(self, *keyframes):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyFloat_FromDouble((__pyx_v_vec[0])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 344, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyFloat_FromDouble((__pyx_v_vec[1])); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 344, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyFloat_FromDouble((__pyx_v_vec[2])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 344, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyFloat_FromDouble((__pyx_v_vec[3])); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 344, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyTuple_New(4); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 344, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_6, 2, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_6, 3, __pyx_t_5);
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_t_5 = 0;
  __pyx_r = __pyx_t_6;
  __pyx_t_6 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":341
 *             self.set_as_mat4(as_mat4)
 * 
 *     def evaluate(self, t):             # <<<<<<<<<<<<<<
 *         cdef float[4] vec
 *         ngl_anim_evaluate(self.ctx, vec, t)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("pynodegl.AnimatedQuat.evaluate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":346
 *         return (vec[0], vec[1], vec[2], vec[3])
 * 
 *     def add_keyframes(self, *keyframes):             # <<<<<<<<<<<<<<
 *         return self._add_nodelist("keyframes", *keyframes)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_12AnimatedQuat_5add_keyframes(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_8pynodegl_12AnimatedQuat_5add_keyframes(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_keyframes = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_keyframes (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "add_keyframes", 0))) return NULL;
  __Pyx_INCREF(__pyx_args);
  __pyx_v_keyframes = __pyx_args;
  __pyx_r = __pyx_pf_8pynodegl_12AnimatedQuat_4add_keyframes(((struct __pyx_obj_8pynodegl_AnimatedQuat *)__pyx_v_self), __pyx_v_keyframes);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_keyframes);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_12AnimatedQuat_4add_keyframes(struct __pyx_obj_8pynodegl_AnimatedQuat *__pyx_v_self, PyObject *__pyx_v_keyframes) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("add_keyframes", 0);

  /* "nodes_def.pyx":347
 * 
 *     def add_keyframes(self, *keyframes):
 *         return self._add_nodelist("keyframes", *keyframes)             # <<<<<<<<<<<<<<
 * 
 *     def set_as_mat4(self, bint as_mat4):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_add_nodelist); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 347, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyNumber_Add(__pyx_tuple__4, __pyx_v_keyframes); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 347, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 347, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":346
 *         return (vec[0], vec[1], vec[2], vec[3])
 * 
 *     def add_keyframes(self, *keyframes):             # <<<<<<<<<<<<<<
 *         return self._add_nodelist("keyframes", *keyframes)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pynodegl.AnimatedQuat.add_keyframes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":349
 *         return self._add_nodelist("keyframes", *keyframes)
 * 
 *     def set_as_mat4(self, bint as_mat4):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "as_mat4", as_mat4)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_12AnimatedQuat_7set_as_mat4(PyObject *__pyx_v_self, PyObject *__pyx_arg_as_mat4); /*proto*/
static PyObject *__pyx_pw_8pynodegl_12AnimatedQuat_7set_as_mat4(PyObject *__pyx_v_self, PyObject *__pyx_arg_as_mat4) {
  int __pyx_v_as_mat4;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_as_mat4 (wrapper)", 0);
  assert(__pyx_arg_as_mat4); {
    __pyx_v_as_mat4 = __Pyx_PyObject_IsTrue(__pyx_arg_as_mat4); if (unlikely((__pyx_v_as_mat4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 349, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pynodegl.AnimatedQuat.set_as_mat4", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pynodegl_12AnimatedQuat_6set_as_mat4(((struct __pyx_obj_8pynodegl_AnimatedQuat *)__pyx_v_self), ((int)__pyx_v_as_mat4));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_12AnimatedQuat_6set_as_mat4(struct __pyx_obj_8pynodegl_AnimatedQuat *__pyx_v_self, int __pyx_v_as_mat4) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("set_as_mat4", 0);

  /* "nodes_def.pyx":350
 * 
 *     def set_as_mat4(self, bint as_mat4):
 *         return ngl_node_param_set(self.ctx, "as_mat4", as_mat4)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"as_mat4"), __pyx_v_as_mat4)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 350, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":349
 *         return self._add_nodelist("keyframes", *keyframes)
 * 
 *     def set_as_mat4(self, bint as_mat4):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "as_mat4", as_mat4)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.AnimatedQuat.set_as_mat4", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_12AnimatedQuat_9__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pynodegl_12AnimatedQuat_9__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_12AnimatedQuat_8__reduce_cython__(((struct __pyx_obj_8pynodegl_AnimatedQuat *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_12AnimatedQuat_8__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_AnimatedQuat *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__25, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.AnimatedQuat.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_12AnimatedQuat_11__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8pynodegl_12AnimatedQuat_11__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_12AnimatedQuat_10__setstate_cython__(((struct __pyx_obj_8pynodegl_AnimatedQuat *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_12AnimatedQuat_10__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_AnimatedQuat *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__26, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.AnimatedQuat.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":355
 * cdef class AnimKeyFrameFloat(_Node):
 * 
 *     def __init__(self, double time, double value, easing=None, easing_args=None, easing_start_offset=None, easing_end_offset=None, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_ANIMKEYFRAMEFLOAT, time, value)
 */

/* Python wrapper */
static int __pyx_pw_8pynodegl_17AnimKeyFrameFloat_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pynodegl_17AnimKeyFrameFloat_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_time;
  double __pyx_v_value;
  PyObject *__pyx_v_easing = 0;
  PyObject *__pyx_v_easing_args = 0;
  PyObject *__pyx_v_easing_start_offset = 0;
  PyObject *__pyx_v_easing_end_offset = 0;
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  __pyx_v_kwargs = PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return -1;
  __Pyx_GOTREF(__pyx_v_kwargs);
  if (PyTuple_GET_SIZE(__pyx_args) > 6) {
    __pyx_v_args = PyTuple_GetSlice(__pyx_args, 6, PyTuple_GET_SIZE(__pyx_args));
    if (unlikely(!__pyx_v_args)) {
      __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
      __Pyx_RefNannyFinishContext();
      return -1;
    }
    __Pyx_GOTREF(__pyx_v_args);
  } else {
    __pyx_v_args = __pyx_empty_tuple; __Pyx_INCREF(__pyx_empty_tuple);
  }
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_time,&__pyx_n_s_value,&__pyx_n_s_easing,&__pyx_n_s_easing_args,&__pyx_n_s_easing_start_offset,&__pyx_n_s_easing_end_offset,0};
    PyObject* values[6] = {0,0,0,0,0,0};
    values[2] = ((PyObject *)Py_None);
    values[3] = ((PyObject *)Py_None);
    values[4] = ((PyObject *)Py_None);
    values[5] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        default:
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_time)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 2, 6, 1); __PYX_ERR(0, 355, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_easing);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_easing_args);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_easing_start_offset);
          if (value) { values[4] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_easing_end_offset);
          if (value) { values[5] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t used_pos_args = (pos_args < 6) ? pos_args : 6;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_kwargs, values, used_pos_args, "__init__") < 0)) __PYX_ERR(0, 355, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        default:
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        case  1:
        case  0:
        goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_time = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_time == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 355, __pyx_L3_error)
    __pyx_v_value = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_value == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 355, __pyx_L3_error)
    __pyx_v_easing = values[2];
    __pyx_v_easing_args = values[3];
    __pyx_v_easing_start_offset = values[4];
    __pyx_v_easing_end_offset = values[5];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 2, 6, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 355, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_args); __pyx_v_args = 0;
  __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
  __Pyx_AddTraceback("pynodegl.AnimKeyFrameFloat.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pynodegl_17AnimKeyFrameFloat___init__(((struct __pyx_obj_8pynodegl_AnimKeyFrameFloat *)__pyx_v_self), __pyx_v_time, __pyx_v_value, __pyx_v_easing, __pyx_v_easing_args, __pyx_v_easing_start_offset, __pyx_v_easing_end_offset, __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pynodegl_17AnimKeyFrameFloat___init__(struct __pyx_obj_8pynodegl_AnimKeyFrameFloat *__pyx_v_self, double __pyx_v_time, double __pyx_v_value, PyObject *__pyx_v_easing, PyObject *__pyx_v_easing_args, PyObject *__pyx_v_easing_start_offset, PyObject *__pyx_v_easing_end_offset, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "nodes_def.pyx":356
 * 
 *     def __init__(self, double time, double value, easing=None, easing_args=None, easing_start_offset=None, easing_end_offset=None, *args, **kwargs):
 *         assert self.ctx is NULL             # <<<<<<<<<<<<<<
 *         self.ctx = ngl_node_create(NGL_NODE_ANIMKEYFRAMEFLOAT, time, value)
 *         if self.ctx is NULL:
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!((__pyx_v_self->__pyx_base.ctx == NULL) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 356, __pyx_L1_error)
    }
  }
  #endif

  /* "nodes_def.pyx":357
 *     def __init__(self, double time, double value, easing=None, easing_args=None, easing_start_offset=None, easing_end_offset=None, *args, **kwargs):
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_ANIMKEYFRAMEFLOAT, time, value)             # <<<<<<<<<<<<<<
 *         if self.ctx is NULL:
 *             raise MemoryError()
 */
  __pyx_v_self->__pyx_base.ctx = ngl_node_create(NGL_NODE_ANIMKEYFRAMEFLOAT, __pyx_v_time, __pyx_v_value);

  /* "nodes_def.pyx":358
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_ANIMKEYFRAMEFLOAT, time, value)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         _Node._init_params(self, *args, **kwargs)
 */
  __pyx_t_1 = ((__pyx_v_self->__pyx_base.ctx == NULL) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "nodes_def.pyx":359
 *         self.ctx = ngl_node_create(NGL_NODE_ANIMKEYFRAMEFLOAT, time, value)
 *         if self.ctx is NULL:
 *             raise MemoryError()             # <<<<<<<<<<<<<<
 *         _Node._init_params(self, *args, **kwargs)
 * 
 */
    PyErr_NoMemory(); __PYX_ERR(0, 359, __pyx_L1_error)

    /* "nodes_def.pyx":358
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_ANIMKEYFRAMEFLOAT, time, value)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         _Node._init_params(self, *args, **kwargs)
 */
  }

  /* "nodes_def.pyx":360
 *         if self.ctx is NULL:
 *             raise MemoryError()
 *         _Node._init_params(self, *args, **kwargs)             # <<<<<<<<<<<<<<
 * 
 *         if easing is not None:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_8pynodegl__Node), __pyx_n_s_init_params); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 360, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 360, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_v_self));
  __pyx_t_4 = PyNumber_Add(__pyx_t_3, __pyx_v_args); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 360, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, __pyx_v_kwargs); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 360, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "nodes_def.pyx":362
 *         _Node._init_params(self, *args, **kwargs)
 * 
 *         if easing is not None:             # <<<<<<<<<<<<<<
 *             self.set_easing(easing)
 *         if easing_args is not None:
 */
  __pyx_t_1 = (__pyx_v_easing != Py_None);
  __pyx_t_5 = (__pyx_t_1 != 0);
  if (__pyx_t_5) {

    /* "nodes_def.pyx":363
 * 
 *         if easing is not None:
 *             self.set_easing(easing)             # <<<<<<<<<<<<<<
 *         if easing_args is not None:
 *             self.add_easing_args(*easing_args)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_easing); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 363, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_2, __pyx_v_easing) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_easing);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 363, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "nodes_def.pyx":362
 *         _Node._init_params(self, *args, **kwargs)
 * 
 *         if easing is not None:             # <<<<<<<<<<<<<<
 *             self.set_easing(easing)
 *         if easing_args is not None:
 */
  }

  /* "nodes_def.pyx":364
 *         if easing is not None:
 *             self.set_easing(easing)
 *         if easing_args is not None:             # <<<<<<<<<<<<<<
 *             self.add_easing_args(*easing_args)
 *         if easing_start_offset is not None:
 */
  __pyx_t_5 = (__pyx_v_easing_args != Py_None);
  __pyx_t_1 = (__pyx_t_5 != 0);
  if (__pyx_t_1) {

    /* "nodes_def.pyx":365
 *             self.set_easing(easing)
 *         if easing_args is not None:
 *             self.add_easing_args(*easing_args)             # <<<<<<<<<<<<<<
 *         if easing_start_offset is not None:
 *             self.set_easing_start_offset(easing_start_offset)
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_add_easing_args); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 365, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PySequence_Tuple(__pyx_v_easing_args); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 365, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 365, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "nodes_def.pyx":364
 *         if easing is not None:
 *             self.set_easing(easing)
 *         if easing_args is not None:             # <<<<<<<<<<<<<<
 *             self.add_easing_args(*easing_args)
 *         if easing_start_offset is not None:
 */
  }

  /* "nodes_def.pyx":366
 *         if easing_args is not None:
 *             self.add_easing_args(*easing_args)
 *         if easing_start_offset is not None:             # <<<<<<<<<<<<<<
 *             self.set_easing_start_offset(easing_start_offset)
 *         if easing_end_offset is not None:
 */
  __pyx_t_1 = (__pyx_v_easing_start_offset != Py_None);
  __pyx_t_5 = (__pyx_t_1 != 0);
  if (__pyx_t_5) {

    /* "nodes_def.pyx":367
 *             self.add_easing_args(*easing_args)
 *         if easing_start_offset is not None:
 *             self.set_easing_start_offset(easing_start_offset)             # <<<<<<<<<<<<<<
 *         if easing_end_offset is not None:
 *             self.set_easing_end_offset(easing_end_offset)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_easing_start_offset); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 367, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_2 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_3, __pyx_v_easing_start_offset) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_easing_start_offset);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 367, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "nodes_def.pyx":366
 *         if easing_args is not None:
 *             self.add_easing_args(*easing_args)
 *         if easing_start_offset is not None:             # <<<<<<<<<<<<<<
 *             self.set_easing_start_offset(easing_start_offset)
 *         if easing_end_offset is not None:
 */
  }

  /* "nodes_def.pyx":368
 *         if easing_start_offset is not None:
 *             self.set_easing_start_offset(easing_start_offset)
 *         if easing_end_offset is not None:             # <<<<<<<<<<<<<<
 *             self.set_easing_end_offset(easing_end_offset)
 * 
 */
  __pyx_t_5 = (__pyx_v_easing_end_offset != Py_None);
  __pyx_t_1 = (__pyx_t_5 != 0);
  if (__pyx_t_1) {

    /* "nodes_def.pyx":369
 *             self.set_easing_start_offset(easing_start_offset)
 *         if easing_end_offset is not None:
 *             self.set_easing_end_offset(easing_end_offset)             # <<<<<<<<<<<<<<
 * 
 *     def set_easing(self, const char * easing):
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_easing_end_offset); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 369, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_2 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_3, __pyx_v_easing_end_offset) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_easing_end_offset);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 369, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "nodes_def.pyx":368
 *         if easing_start_offset is not None:
 *             self.set_easing_start_offset(easing_start_offset)
 *         if easing_end_offset is not None:             # <<<<<<<<<<<<<<
 *             self.set_easing_end_offset(easing_end_offset)
 * 
 */
  }

  /* "nodes_def.pyx":355
 * cdef class AnimKeyFrameFloat(_Node):
 * 
 *     def __init__(self, double time, double value, easing=None, easing_args=None, easing_start_offset=None, easing_end_offset=None, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_ANIMKEYFRAMEFLOAT, time, value)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pynodegl.AnimKeyFrameFloat.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":371
 *             self.set_easing_end_offset(easing_end_offset)
 * 
 *     def set_easing(self, const char * easing):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "easing", easing)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_17AnimKeyFrameFloat_3set_easing(PyObject *__pyx_v_self, PyObject *__pyx_arg_easing); /*proto*/
static PyObject *__pyx_pw_8pynodegl_17AnimKeyFrameFloat_3set_easing(PyObject *__pyx_v_self, PyObject *__pyx_arg_easing) {
  char const *__pyx_v_easing;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_easing (wrapper)", 0);
  assert(__pyx_arg_easing); {
    __pyx_v_easing = __Pyx_PyObject_AsString(__pyx_arg_easing); if (unlikely((!__pyx_v_easing) && PyErr_Occurred())) __PYX_ERR(0, 371, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pynodegl.AnimKeyFrameFloat.set_easing", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pynodegl_17AnimKeyFrameFloat_2set_easing(((struct __pyx_obj_8pynodegl_AnimKeyFrameFloat *)__pyx_v_self), ((char const *)__pyx_v_easing));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_17AnimKeyFrameFloat_2set_easing(struct __pyx_obj_8pynodegl_AnimKeyFrameFloat *__pyx_v_self, char const *__pyx_v_easing) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("set_easing", 0);

  /* "nodes_def.pyx":372
 * 
 *     def set_easing(self, const char * easing):
 *         return ngl_node_param_set(self.ctx, "easing", easing)             # <<<<<<<<<<<<<<
 * 
 *     def add_easing_args(self, *easing_args):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"easing"), __pyx_v_easing)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 372, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":371
 *             self.set_easing_end_offset(easing_end_offset)
 * 
 *     def set_easing(self, const char * easing):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "easing", easing)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.AnimKeyFrameFloat.set_easing", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":374
 *         return ngl_node_param_set(self.ctx, "easing", easing)
 * 
 *     def add_easing_args(self, *easing_args):             # <<<<<<<<<<<<<<
 *         return self._add_doublelist("easing_args", *easing_args)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_17AnimKeyFrameFloat_5add_easing_args(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_8pynodegl_17AnimKeyFrameFloat_5add_easing_args(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_easing_args = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_easing_args (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "add_easing_args", 0))) return NULL;
  __Pyx_INCREF(__pyx_args);
  __pyx_v_easing_args = __pyx_args;
  __pyx_r = __pyx_pf_8pynodegl_17AnimKeyFrameFloat_4add_easing_args(((struct __pyx_obj_8pynodegl_AnimKeyFrameFloat *)__pyx_v_self), __pyx_v_easing_args);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_easing_args);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_17AnimKeyFrameFloat_4add_easing_args(struct __pyx_obj_8pynodegl_AnimKeyFrameFloat *__pyx_v_self, PyObject *__pyx_v_easing_args) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("add_easing_args", 0);

  /* "nodes_def.pyx":375
 * 
 *     def add_easing_args(self, *easing_args):
 *         return self._add_doublelist("easing_args", *easing_args)             # <<<<<<<<<<<<<<
 * 
 *     def set_easing_start_offset(self, double easing_start_offset):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_add_doublelist); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 375, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyNumber_Add(__pyx_tuple__27, __pyx_v_easing_args); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 375, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 375, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":374
 *         return ngl_node_param_set(self.ctx, "easing", easing)
 * 
 *     def add_easing_args(self, *easing_args):             # <<<<<<<<<<<<<<
 *         return self._add_doublelist("easing_args", *easing_args)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pynodegl.AnimKeyFrameFloat.add_easing_args", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":377
 *         return self._add_doublelist("easing_args", *easing_args)
 * 
 *     def set_easing_start_offset(self, double easing_start_offset):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "easing_start_offset", easing_start_offset)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_17AnimKeyFrameFloat_7set_easing_start_offset(PyObject *__pyx_v_self, PyObject *__pyx_arg_easing_start_offset); /*proto*/
static PyObject *__pyx_pw_8pynodegl_17AnimKeyFrameFloat_7set_easing_start_offset(PyObject *__pyx_v_self, PyObject *__pyx_arg_easing_start_offset) {
  double __pyx_v_easing_start_offset;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_easing_start_offset (wrapper)", 0);
  assert(__pyx_arg_easing_start_offset); {
    __pyx_v_easing_start_offset = __pyx_PyFloat_AsDouble(__pyx_arg_easing_start_offset); if (unlikely((__pyx_v_easing_start_offset == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 377, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pynodegl.AnimKeyFrameFloat.set_easing_start_offset", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pynodegl_17AnimKeyFrameFloat_6set_easing_start_offset(((struct __pyx_obj_8pynodegl_AnimKeyFrameFloat *)__pyx_v_self), ((double)__pyx_v_easing_start_offset));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_17AnimKeyFrameFloat_6set_easing_start_offset(struct __pyx_obj_8pynodegl_AnimKeyFrameFloat *__pyx_v_self, double __pyx_v_easing_start_offset) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("set_easing_start_offset", 0);

  /* "nodes_def.pyx":378
 * 
 *     def set_easing_start_offset(self, double easing_start_offset):
 *         return ngl_node_param_set(self.ctx, "easing_start_offset", easing_start_offset)             # <<<<<<<<<<<<<<
 * 
 *     def set_easing_end_offset(self, double easing_end_offset):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"easing_start_offset"), __pyx_v_easing_start_offset)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 378, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":377
 *         return self._add_doublelist("easing_args", *easing_args)
 * 
 *     def set_easing_start_offset(self, double easing_start_offset):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "easing_start_offset", easing_start_offset)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.AnimKeyFrameFloat.set_easing_start_offset", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":380
 *         return ngl_node_param_set(self.ctx, "easing_start_offset", easing_start_offset)
 * 
 *     def set_easing_end_offset(self, double easing_end_offset):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "easing_end_offset", easing_end_offset)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_17AnimKeyFrameFloat_9set_easing_end_offset(PyObject *__pyx_v_self, PyObject *__pyx_arg_easing_end_offset); /*proto*/
static PyObject *__pyx_pw_8pynodegl_17AnimKeyFrameFloat_9set_easing_end_offset(PyObject *__pyx_v_self, PyObject *__pyx_arg_easing_end_offset) {
  double __pyx_v_easing_end_offset;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_easing_end_offset (wrapper)", 0);
  assert(__pyx_arg_easing_end_offset); {
    __pyx_v_easing_end_offset = __pyx_PyFloat_AsDouble(__pyx_arg_easing_end_offset); if (unlikely((__pyx_v_easing_end_offset == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 380, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pynodegl.AnimKeyFrameFloat.set_easing_end_offset", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pynodegl_17AnimKeyFrameFloat_8set_easing_end_offset(((struct __pyx_obj_8pynodegl_AnimKeyFrameFloat *)__pyx_v_self), ((double)__pyx_v_easing_end_offset));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_17AnimKeyFrameFloat_8set_easing_end_offset(struct __pyx_obj_8pynodegl_AnimKeyFrameFloat *__pyx_v_self, double __pyx_v_easing_end_offset) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("set_easing_end_offset", 0);

  /* "nodes_def.pyx":381
 * 
 *     def set_easing_end_offset(self, double easing_end_offset):
 *         return ngl_node_param_set(self.ctx, "easing_end_offset", easing_end_offset)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"easing_end_offset"), __pyx_v_easing_end_offset)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 381, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":380
 *         return ngl_node_param_set(self.ctx, "easing_start_offset", easing_start_offset)
 * 
 *     def set_easing_end_offset(self, double easing_end_offset):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "easing_end_offset", easing_end_offset)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.AnimKeyFrameFloat.set_easing_end_offset", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_17AnimKeyFrameFloat_11__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pynodegl_17AnimKeyFrameFloat_11__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_17AnimKeyFrameFloat_10__reduce_cython__(((struct __pyx_obj_8pynodegl_AnimKeyFrameFloat *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_17AnimKeyFrameFloat_10__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_AnimKeyFrameFloat *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__28, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.AnimKeyFrameFloat.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_17AnimKeyFrameFloat_13__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8pynodegl_17AnimKeyFrameFloat_13__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_17AnimKeyFrameFloat_12__setstate_cython__(((struct __pyx_obj_8pynodegl_AnimKeyFrameFloat *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_17AnimKeyFrameFloat_12__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_AnimKeyFrameFloat *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__29, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.AnimKeyFrameFloat.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":386
 * cdef class AnimKeyFrameVec2(_Node):
 * 
 *     def __init__(self, double time, value, easing=None, easing_args=None, easing_start_offset=None, easing_end_offset=None, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         cdef float[2] value_c
 *         cdef int value_i
 */

/* Python wrapper */
static int __pyx_pw_8pynodegl_16AnimKeyFrameVec2_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pynodegl_16AnimKeyFrameVec2_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_time;
  PyObject *__pyx_v_value = 0;
  PyObject *__pyx_v_easing = 0;
  PyObject *__pyx_v_easing_args = 0;
  PyObject *__pyx_v_easing_start_offset = 0;
  PyObject *__pyx_v_easing_end_offset = 0;
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  __pyx_v_kwargs = PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return -1;
  __Pyx_GOTREF(__pyx_v_kwargs);
  if (PyTuple_GET_SIZE(__pyx_args) > 6) {
    __pyx_v_args = PyTuple_GetSlice(__pyx_args, 6, PyTuple_GET_SIZE(__pyx_args));
    if (unlikely(!__pyx_v_args)) {
      __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
      __Pyx_RefNannyFinishContext();
      return -1;
    }
    __Pyx_GOTREF(__pyx_v_args);
  } else {
    __pyx_v_args = __pyx_empty_tuple; __Pyx_INCREF(__pyx_empty_tuple);
  }
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_time,&__pyx_n_s_value,&__pyx_n_s_easing,&__pyx_n_s_easing_args,&__pyx_n_s_easing_start_offset,&__pyx_n_s_easing_end_offset,0};
    PyObject* values[6] = {0,0,0,0,0,0};
    values[2] = ((PyObject *)Py_None);
    values[3] = ((PyObject *)Py_None);
    values[4] = ((PyObject *)Py_None);
    values[5] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        default:
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_time)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 2, 6, 1); __PYX_ERR(0, 386, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_easing);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_easing_args);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_easing_start_offset);
          if (value) { values[4] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_easing_end_offset);
          if (value) { values[5] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t used_pos_args = (pos_args < 6) ? pos_args : 6;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_kwargs, values, used_pos_args, "__init__") < 0)) __PYX_ERR(0, 386, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        default:
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        case  1:
        case  0:
        goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_time = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_time == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 386, __pyx_L3_error)
    __pyx_v_value = values[1];
    __pyx_v_easing = values[2];
    __pyx_v_easing_args = values[3];
    __pyx_v_easing_start_offset = values[4];
    __pyx_v_easing_end_offset = values[5];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 2, 6, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 386, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_args); __pyx_v_args = 0;
  __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
  __Pyx_AddTraceback("pynodegl.AnimKeyFrameVec2.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pynodegl_16AnimKeyFrameVec2___init__(((struct __pyx_obj_8pynodegl_AnimKeyFrameVec2 *)__pyx_v_self), __pyx_v_time, __pyx_v_value, __pyx_v_easing, __pyx_v_easing_args, __pyx_v_easing_start_offset, __pyx_v_easing_end_offset, __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pynodegl_16AnimKeyFrameVec2___init__(struct __pyx_obj_8pynodegl_AnimKeyFrameVec2 *__pyx_v_self, double __pyx_v_time, PyObject *__pyx_v_value, PyObject *__pyx_v_easing, PyObject *__pyx_v_easing_args, PyObject *__pyx_v_easing_start_offset, PyObject *__pyx_v_easing_end_offset, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs) {
  float __pyx_v_value_c[2];
  int __pyx_v_value_i;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  Py_UCS4 __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  int __pyx_t_7;
  float __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_t_10;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "nodes_def.pyx":389
 *         cdef float[2] value_c
 *         cdef int value_i
 *         if len(value) != 2:             # <<<<<<<<<<<<<<
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (
 *                             "value", 2, len(value)))
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_value); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 389, __pyx_L1_error)
  __pyx_t_2 = ((__pyx_t_1 != 2) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "nodes_def.pyx":390
 *         cdef int value_i
 *         if len(value) != 2:
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (             # <<<<<<<<<<<<<<
 *                             "value", 2, len(value)))
 *         for value_i in range(2):
 */
    __pyx_t_3 = PyTuple_New(5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 390, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = 0;
    __pyx_t_4 = 127;
    __Pyx_INCREF(__pyx_kp_u_value_parameter_is_expected_to_b);
    __pyx_t_1 += 37;
    __Pyx_GIVEREF(__pyx_kp_u_value_parameter_is_expected_to_b);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_kp_u_value_parameter_is_expected_to_b);

    /* "nodes_def.pyx":391
 *         if len(value) != 2:
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (
 *                             "value", 2, len(value)))             # <<<<<<<<<<<<<<
 *         for value_i in range(2):
 *             value_c[value_i] = value[value_i]
 */
    __pyx_t_5 = __Pyx_PyUnicode_From_long(2, 0, ' ', 'd'); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 391, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_INCREF(__pyx_kp_u_but_got);
    __pyx_t_1 += 9;
    __Pyx_GIVEREF(__pyx_kp_u_but_got);
    PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_kp_u_but_got);
    __pyx_t_6 = PyObject_Length(__pyx_v_value); if (unlikely(__pyx_t_6 == ((Py_ssize_t)-1))) __PYX_ERR(0, 391, __pyx_L1_error)
    __pyx_t_5 = __Pyx_PyUnicode_From_Py_ssize_t(__pyx_t_6, 0, ' ', 'd'); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 391, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_3, 3, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_INCREF(__pyx_kp_u_values);
    __pyx_t_1 += 7;
    __Pyx_GIVEREF(__pyx_kp_u_values);
    PyTuple_SET_ITEM(__pyx_t_3, 4, __pyx_kp_u_values);

    /* "nodes_def.pyx":390
 *         cdef int value_i
 *         if len(value) != 2:
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (             # <<<<<<<<<<<<<<
 *                             "value", 2, len(value)))
 *         for value_i in range(2):
 */
    __pyx_t_5 = __Pyx_PyUnicode_Join(__pyx_t_3, 5, __pyx_t_1, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 390, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 390, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 390, __pyx_L1_error)

    /* "nodes_def.pyx":389
 *         cdef float[2] value_c
 *         cdef int value_i
 *         if len(value) != 2:             # <<<<<<<<<<<<<<
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (
 *                             "value", 2, len(value)))
 */
  }

  /* "nodes_def.pyx":392
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (
 *                             "value", 2, len(value)))
 *         for value_i in range(2):             # <<<<<<<<<<<<<<
 *             value_c[value_i] = value[value_i]
 * 
 */
  for (__pyx_t_7 = 0; __pyx_t_7 < 2; __pyx_t_7+=1) {
    __pyx_v_value_i = __pyx_t_7;

    /* "nodes_def.pyx":393
 *                             "value", 2, len(value)))
 *         for value_i in range(2):
 *             value_c[value_i] = value[value_i]             # <<<<<<<<<<<<<<
 * 
 *         assert self.ctx is NULL
 */
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_value, __pyx_v_value_i, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 393, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_8 = __pyx_PyFloat_AsFloat(__pyx_t_3); if (unlikely((__pyx_t_8 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 393, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    (__pyx_v_value_c[__pyx_v_value_i]) = __pyx_t_8;
  }

  /* "nodes_def.pyx":395
 *             value_c[value_i] = value[value_i]
 * 
 *         assert self.ctx is NULL             # <<<<<<<<<<<<<<
 *         self.ctx = ngl_node_create(NGL_NODE_ANIMKEYFRAMEVEC2, time, value_c)
 *         if self.ctx is NULL:
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!((__pyx_v_self->__pyx_base.ctx == NULL) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 395, __pyx_L1_error)
    }
  }
  #endif

  /* "nodes_def.pyx":396
 * 
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_ANIMKEYFRAMEVEC2, time, value_c)             # <<<<<<<<<<<<<<
 *         if self.ctx is NULL:
 *             raise MemoryError()
 */
  __pyx_v_self->__pyx_base.ctx = ngl_node_create(NGL_NODE_ANIMKEYFRAMEVEC2, __pyx_v_time, __pyx_v_value_c);

  /* "nodes_def.pyx":397
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_ANIMKEYFRAMEVEC2, time, value_c)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         _Node._init_params(self, *args, **kwargs)
 */
  __pyx_t_2 = ((__pyx_v_self->__pyx_base.ctx == NULL) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "nodes_def.pyx":398
 *         self.ctx = ngl_node_create(NGL_NODE_ANIMKEYFRAMEVEC2, time, value_c)
 *         if self.ctx is NULL:
 *             raise MemoryError()             # <<<<<<<<<<<<<<
 *         _Node._init_params(self, *args, **kwargs)
 * 
 */
    PyErr_NoMemory(); __PYX_ERR(0, 398, __pyx_L1_error)

    /* "nodes_def.pyx":397
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_ANIMKEYFRAMEVEC2, time, value_c)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         _Node._init_params(self, *args, **kwargs)
 */
  }

  /* "nodes_def.pyx":399
 *         if self.ctx is NULL:
 *             raise MemoryError()
 *         _Node._init_params(self, *args, **kwargs)             # <<<<<<<<<<<<<<
 * 
 *         if easing is not None:
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_8pynodegl__Node), __pyx_n_s_init_params); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 399, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 399, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_5, 0, ((PyObject *)__pyx_v_self));
  __pyx_t_9 = PyNumber_Add(__pyx_t_5, __pyx_v_args); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 399, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_9, __pyx_v_kwargs); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 399, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "nodes_def.pyx":401
 *         _Node._init_params(self, *args, **kwargs)
 * 
 *         if easing is not None:             # <<<<<<<<<<<<<<
 *             self.set_easing(easing)
 *         if easing_args is not None:
 */
  __pyx_t_2 = (__pyx_v_easing != Py_None);
  __pyx_t_10 = (__pyx_t_2 != 0);
  if (__pyx_t_10) {

    /* "nodes_def.pyx":402
 * 
 *         if easing is not None:
 *             self.set_easing(easing)             # <<<<<<<<<<<<<<
 *         if easing_args is not None:
 *             self.add_easing_args(*easing_args)
 */
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_easing); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 402, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_3 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_9))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_9);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_9, function);
      }
    }
    __pyx_t_5 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_9, __pyx_t_3, __pyx_v_easing) : __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_v_easing);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 402, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "nodes_def.pyx":401
 *         _Node._init_params(self, *args, **kwargs)
 * 
 *         if easing is not None:             # <<<<<<<<<<<<<<
 *             self.set_easing(easing)
 *         if easing_args is not None:
 */
  }

  /* "nodes_def.pyx":403
 *         if easing is not None:
 *             self.set_easing(easing)
 *         if easing_args is not None:             # <<<<<<<<<<<<<<
 *             self.add_easing_args(*easing_args)
 *         if easing_start_offset is not None:
 */
  __pyx_t_10 = (__pyx_v_easing_args != Py_None);
  __pyx_t_2 = (__pyx_t_10 != 0);
  if (__pyx_t_2) {

    /* "nodes_def.pyx":404
 *             self.set_easing(easing)
 *         if easing_args is not None:
 *             self.add_easing_args(*easing_args)             # <<<<<<<<<<<<<<
 *         if easing_start_offset is not None:
 *             self.set_easing_start_offset(easing_start_offset)
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_add_easing_args); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 404, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_9 = __Pyx_PySequence_Tuple(__pyx_v_easing_args); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 404, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_9, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 404, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "nodes_def.pyx":403
 *         if easing is not None:
 *             self.set_easing(easing)
 *         if easing_args is not None:             # <<<<<<<<<<<<<<
 *             self.add_easing_args(*easing_args)
 *         if easing_start_offset is not None:
 */
  }

  /* "nodes_def.pyx":405
 *         if easing_args is not None:
 *             self.add_easing_args(*easing_args)
 *         if easing_start_offset is not None:             # <<<<<<<<<<<<<<
 *             self.set_easing_start_offset(easing_start_offset)
 *         if easing_end_offset is not None:
 */
  __pyx_t_2 = (__pyx_v_easing_start_offset != Py_None);
  __pyx_t_10 = (__pyx_t_2 != 0);
  if (__pyx_t_10) {

    /* "nodes_def.pyx":406
 *             self.add_easing_args(*easing_args)
 *         if easing_start_offset is not None:
 *             self.set_easing_start_offset(easing_start_offset)             # <<<<<<<<<<<<<<
 *         if easing_end_offset is not None:
 *             self.set_easing_end_offset(easing_end_offset)
 */
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_easing_start_offset); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 406, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_9))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_9);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_9, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_9, __pyx_t_5, __pyx_v_easing_start_offset) : __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_v_easing_start_offset);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 406, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "nodes_def.pyx":405
 *         if easing_args is not None:
 *             self.add_easing_args(*easing_args)
 *         if easing_start_offset is not None:             # <<<<<<<<<<<<<<
 *             self.set_easing_start_offset(easing_start_offset)
 *         if easing_end_offset is not None:
 */
  }

  /* "nodes_def.pyx":407
 *         if easing_start_offset is not None:
 *             self.set_easing_start_offset(easing_start_offset)
 *         if easing_end_offset is not None:             # <<<<<<<<<<<<<<
 *             self.set_easing_end_offset(easing_end_offset)
 * 
 */
  __pyx_t_10 = (__pyx_v_easing_end_offset != Py_None);
  __pyx_t_2 = (__pyx_t_10 != 0);
  if (__pyx_t_2) {

    /* "nodes_def.pyx":408
 *             self.set_easing_start_offset(easing_start_offset)
 *         if easing_end_offset is not None:
 *             self.set_easing_end_offset(easing_end_offset)             # <<<<<<<<<<<<<<
 * 
 *     def set_easing(self, const char * easing):
 */
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_easing_end_offset); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 408, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_9))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_9);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_9, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_9, __pyx_t_5, __pyx_v_easing_end_offset) : __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_v_easing_end_offset);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 408, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "nodes_def.pyx":407
 *         if easing_start_offset is not None:
 *             self.set_easing_start_offset(easing_start_offset)
 *         if easing_end_offset is not None:             # <<<<<<<<<<<<<<
 *             self.set_easing_end_offset(easing_end_offset)
 * 
 */
  }

  /* "nodes_def.pyx":386
 * cdef class AnimKeyFrameVec2(_Node):
 * 
 *     def __init__(self, double time, value, easing=None, easing_args=None, easing_start_offset=None, easing_end_offset=None, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         cdef float[2] value_c
 *         cdef int value_i
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("pynodegl.AnimKeyFrameVec2.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":410
 *             self.set_easing_end_offset(easing_end_offset)
 * 
 *     def set_easing(self, const char * easing):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "easing", easing)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_16AnimKeyFrameVec2_3set_easing(PyObject *__pyx_v_self, PyObject *__pyx_arg_easing); /*proto*/
static PyObject *__pyx_pw_8pynodegl_16AnimKeyFrameVec2_3set_easing(PyObject *__pyx_v_self, PyObject *__pyx_arg_easing) {
  char const *__pyx_v_easing;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_easing (wrapper)", 0);
  assert(__pyx_arg_easing); {
    __pyx_v_easing = __Pyx_PyObject_AsString(__pyx_arg_easing); if (unlikely((!__pyx_v_easing) && PyErr_Occurred())) __PYX_ERR(0, 410, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pynodegl.AnimKeyFrameVec2.set_easing", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pynodegl_16AnimKeyFrameVec2_2set_easing(((struct __pyx_obj_8pynodegl_AnimKeyFrameVec2 *)__pyx_v_self), ((char const *)__pyx_v_easing));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_16AnimKeyFrameVec2_2set_easing(struct __pyx_obj_8pynodegl_AnimKeyFrameVec2 *__pyx_v_self, char const *__pyx_v_easing) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("set_easing", 0);

  /* "nodes_def.pyx":411
 * 
 *     def set_easing(self, const char * easing):
 *         return ngl_node_param_set(self.ctx, "easing", easing)             # <<<<<<<<<<<<<<
 * 
 *     def add_easing_args(self, *easing_args):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"easing"), __pyx_v_easing)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 411, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":410
 *             self.set_easing_end_offset(easing_end_offset)
 * 
 *     def set_easing(self, const char * easing):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "easing", easing)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.AnimKeyFrameVec2.set_easing", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":413
 *         return ngl_node_param_set(self.ctx, "easing", easing)
 * 
 *     def add_easing_args(self, *easing_args):             # <<<<<<<<<<<<<<
 *         return self._add_doublelist("easing_args", *easing_args)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_16AnimKeyFrameVec2_5add_easing_args(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_8pynodegl_16AnimKeyFrameVec2_5add_easing_args(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_easing_args = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_easing_args (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "add_easing_args", 0))) return NULL;
  __Pyx_INCREF(__pyx_args);
  __pyx_v_easing_args = __pyx_args;
  __pyx_r = __pyx_pf_8pynodegl_16AnimKeyFrameVec2_4add_easing_args(((struct __pyx_obj_8pynodegl_AnimKeyFrameVec2 *)__pyx_v_self), __pyx_v_easing_args);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_easing_args);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_16AnimKeyFrameVec2_4add_easing_args(struct __pyx_obj_8pynodegl_AnimKeyFrameVec2 *__pyx_v_self, PyObject *__pyx_v_easing_args) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("add_easing_args", 0);

  /* "nodes_def.pyx":414
 * 
 *     def add_easing_args(self, *easing_args):
 *         return self._add_doublelist("easing_args", *easing_args)             # <<<<<<<<<<<<<<
 * 
 *     def set_easing_start_offset(self, double easing_start_offset):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_add_doublelist); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 414, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyNumber_Add(__pyx_tuple__27, __pyx_v_easing_args); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 414, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 414, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":413
 *         return ngl_node_param_set(self.ctx, "easing", easing)
 * 
 *     def add_easing_args(self, *easing_args):             # <<<<<<<<<<<<<<
 *         return self._add_doublelist("easing_args", *easing_args)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pynodegl.AnimKeyFrameVec2.add_easing_args", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":416
 *         return self._add_doublelist("easing_args", *easing_args)
 * 
 *     def set_easing_start_offset(self, double easing_start_offset):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "easing_start_offset", easing_start_offset)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_16AnimKeyFrameVec2_7set_easing_start_offset(PyObject *__pyx_v_self, PyObject *__pyx_arg_easing_start_offset); /*proto*/
static PyObject *__pyx_pw_8pynodegl_16AnimKeyFrameVec2_7set_easing_start_offset(PyObject *__pyx_v_self, PyObject *__pyx_arg_easing_start_offset) {
  double __pyx_v_easing_start_offset;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_easing_start_offset (wrapper)", 0);
  assert(__pyx_arg_easing_start_offset); {
    __pyx_v_easing_start_offset = __pyx_PyFloat_AsDouble(__pyx_arg_easing_start_offset); if (unlikely((__pyx_v_easing_start_offset == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 416, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pynodegl.AnimKeyFrameVec2.set_easing_start_offset", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pynodegl_16AnimKeyFrameVec2_6set_easing_start_offset(((struct __pyx_obj_8pynodegl_AnimKeyFrameVec2 *)__pyx_v_self), ((double)__pyx_v_easing_start_offset));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_16AnimKeyFrameVec2_6set_easing_start_offset(struct __pyx_obj_8pynodegl_AnimKeyFrameVec2 *__pyx_v_self, double __pyx_v_easing_start_offset) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("set_easing_start_offset", 0);

  /* "nodes_def.pyx":417
 * 
 *     def set_easing_start_offset(self, double easing_start_offset):
 *         return ngl_node_param_set(self.ctx, "easing_start_offset", easing_start_offset)             # <<<<<<<<<<<<<<
 * 
 *     def set_easing_end_offset(self, double easing_end_offset):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"easing_start_offset"), __pyx_v_easing_start_offset)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 417, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":416
 *         return self._add_doublelist("easing_args", *easing_args)
 * 
 *     def set_easing_start_offset(self, double easing_start_offset):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "easing_start_offset", easing_start_offset)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.AnimKeyFrameVec2.set_easing_start_offset", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":419
 *         return ngl_node_param_set(self.ctx, "easing_start_offset", easing_start_offset)
 * 
 *     def set_easing_end_offset(self, double easing_end_offset):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "easing_end_offset", easing_end_offset)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_16AnimKeyFrameVec2_9set_easing_end_offset(PyObject *__pyx_v_self, PyObject *__pyx_arg_easing_end_offset); /*proto*/
static PyObject *__pyx_pw_8pynodegl_16AnimKeyFrameVec2_9set_easing_end_offset(PyObject *__pyx_v_self, PyObject *__pyx_arg_easing_end_offset) {
  double __pyx_v_easing_end_offset;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_easing_end_offset (wrapper)", 0);
  assert(__pyx_arg_easing_end_offset); {
    __pyx_v_easing_end_offset = __pyx_PyFloat_AsDouble(__pyx_arg_easing_end_offset); if (unlikely((__pyx_v_easing_end_offset == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 419, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pynodegl.AnimKeyFrameVec2.set_easing_end_offset", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pynodegl_16AnimKeyFrameVec2_8set_easing_end_offset(((struct __pyx_obj_8pynodegl_AnimKeyFrameVec2 *)__pyx_v_self), ((double)__pyx_v_easing_end_offset));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_16AnimKeyFrameVec2_8set_easing_end_offset(struct __pyx_obj_8pynodegl_AnimKeyFrameVec2 *__pyx_v_self, double __pyx_v_easing_end_offset) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("set_easing_end_offset", 0);

  /* "nodes_def.pyx":420
 * 
 *     def set_easing_end_offset(self, double easing_end_offset):
 *         return ngl_node_param_set(self.ctx, "easing_end_offset", easing_end_offset)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"easing_end_offset"), __pyx_v_easing_end_offset)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 420, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":419
 *         return ngl_node_param_set(self.ctx, "easing_start_offset", easing_start_offset)
 * 
 *     def set_easing_end_offset(self, double easing_end_offset):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "easing_end_offset", easing_end_offset)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.AnimKeyFrameVec2.set_easing_end_offset", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_16AnimKeyFrameVec2_11__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pynodegl_16AnimKeyFrameVec2_11__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_16AnimKeyFrameVec2_10__reduce_cython__(((struct __pyx_obj_8pynodegl_AnimKeyFrameVec2 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_16AnimKeyFrameVec2_10__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_AnimKeyFrameVec2 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__30, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.AnimKeyFrameVec2.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_16AnimKeyFrameVec2_13__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8pynodegl_16AnimKeyFrameVec2_13__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_16AnimKeyFrameVec2_12__setstate_cython__(((struct __pyx_obj_8pynodegl_AnimKeyFrameVec2 *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_16AnimKeyFrameVec2_12__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_AnimKeyFrameVec2 *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__31, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.AnimKeyFrameVec2.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":425
 * cdef class AnimKeyFrameVec3(_Node):
 * 
 *     def __init__(self, double time, value, easing=None, easing_args=None, easing_start_offset=None, easing_end_offset=None, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         cdef float[3] value_c
 *         cdef int value_i
 */

/* Python wrapper */
static int __pyx_pw_8pynodegl_16AnimKeyFrameVec3_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pynodegl_16AnimKeyFrameVec3_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_time;
  PyObject *__pyx_v_value = 0;
  PyObject *__pyx_v_easing = 0;
  PyObject *__pyx_v_easing_args = 0;
  PyObject *__pyx_v_easing_start_offset = 0;
  PyObject *__pyx_v_easing_end_offset = 0;
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  __pyx_v_kwargs = PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return -1;
  __Pyx_GOTREF(__pyx_v_kwargs);
  if (PyTuple_GET_SIZE(__pyx_args) > 6) {
    __pyx_v_args = PyTuple_GetSlice(__pyx_args, 6, PyTuple_GET_SIZE(__pyx_args));
    if (unlikely(!__pyx_v_args)) {
      __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
      __Pyx_RefNannyFinishContext();
      return -1;
    }
    __Pyx_GOTREF(__pyx_v_args);
  } else {
    __pyx_v_args = __pyx_empty_tuple; __Pyx_INCREF(__pyx_empty_tuple);
  }
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_time,&__pyx_n_s_value,&__pyx_n_s_easing,&__pyx_n_s_easing_args,&__pyx_n_s_easing_start_offset,&__pyx_n_s_easing_end_offset,0};
    PyObject* values[6] = {0,0,0,0,0,0};
    values[2] = ((PyObject *)Py_None);
    values[3] = ((PyObject *)Py_None);
    values[4] = ((PyObject *)Py_None);
    values[5] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        default:
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_time)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 2, 6, 1); __PYX_ERR(0, 425, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_easing);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_easing_args);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_easing_start_offset);
          if (value) { values[4] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_easing_end_offset);
          if (value) { values[5] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t used_pos_args = (pos_args < 6) ? pos_args : 6;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_kwargs, values, used_pos_args, "__init__") < 0)) __PYX_ERR(0, 425, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        default:
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        case  1:
        case  0:
        goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_time = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_time == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 425, __pyx_L3_error)
    __pyx_v_value = values[1];
    __pyx_v_easing = values[2];
    __pyx_v_easing_args = values[3];
    __pyx_v_easing_start_offset = values[4];
    __pyx_v_easing_end_offset = values[5];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 2, 6, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 425, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_args); __pyx_v_args = 0;
  __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
  __Pyx_AddTraceback("pynodegl.AnimKeyFrameVec3.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pynodegl_16AnimKeyFrameVec3___init__(((struct __pyx_obj_8pynodegl_AnimKeyFrameVec3 *)__pyx_v_self), __pyx_v_time, __pyx_v_value, __pyx_v_easing, __pyx_v_easing_args, __pyx_v_easing_start_offset, __pyx_v_easing_end_offset, __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pynodegl_16AnimKeyFrameVec3___init__(struct __pyx_obj_8pynodegl_AnimKeyFrameVec3 *__pyx_v_self, double __pyx_v_time, PyObject *__pyx_v_value, PyObject *__pyx_v_easing, PyObject *__pyx_v_easing_args, PyObject *__pyx_v_easing_start_offset, PyObject *__pyx_v_easing_end_offset, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs) {
  float __pyx_v_value_c[3];
  int __pyx_v_value_i;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  Py_UCS4 __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  int __pyx_t_7;
  float __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_t_10;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "nodes_def.pyx":428
 *         cdef float[3] value_c
 *         cdef int value_i
 *         if len(value) != 3:             # <<<<<<<<<<<<<<
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (
 *                             "value", 3, len(value)))
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_value); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 428, __pyx_L1_error)
  __pyx_t_2 = ((__pyx_t_1 != 3) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "nodes_def.pyx":429
 *         cdef int value_i
 *         if len(value) != 3:
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (             # <<<<<<<<<<<<<<
 *                             "value", 3, len(value)))
 *         for value_i in range(3):
 */
    __pyx_t_3 = PyTuple_New(5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 429, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = 0;
    __pyx_t_4 = 127;
    __Pyx_INCREF(__pyx_kp_u_value_parameter_is_expected_to_b);
    __pyx_t_1 += 37;
    __Pyx_GIVEREF(__pyx_kp_u_value_parameter_is_expected_to_b);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_kp_u_value_parameter_is_expected_to_b);

    /* "nodes_def.pyx":430
 *         if len(value) != 3:
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (
 *                             "value", 3, len(value)))             # <<<<<<<<<<<<<<
 *         for value_i in range(3):
 *             value_c[value_i] = value[value_i]
 */
    __pyx_t_5 = __Pyx_PyUnicode_From_long(3, 0, ' ', 'd'); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 430, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_INCREF(__pyx_kp_u_but_got);
    __pyx_t_1 += 9;
    __Pyx_GIVEREF(__pyx_kp_u_but_got);
    PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_kp_u_but_got);
    __pyx_t_6 = PyObject_Length(__pyx_v_value); if (unlikely(__pyx_t_6 == ((Py_ssize_t)-1))) __PYX_ERR(0, 430, __pyx_L1_error)
    __pyx_t_5 = __Pyx_PyUnicode_From_Py_ssize_t(__pyx_t_6, 0, ' ', 'd'); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 430, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_3, 3, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_INCREF(__pyx_kp_u_values);
    __pyx_t_1 += 7;
    __Pyx_GIVEREF(__pyx_kp_u_values);
    PyTuple_SET_ITEM(__pyx_t_3, 4, __pyx_kp_u_values);

    /* "nodes_def.pyx":429
 *         cdef int value_i
 *         if len(value) != 3:
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (             # <<<<<<<<<<<<<<
 *                             "value", 3, len(value)))
 *         for value_i in range(3):
 */
    __pyx_t_5 = __Pyx_PyUnicode_Join(__pyx_t_3, 5, __pyx_t_1, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 429, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 429, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 429, __pyx_L1_error)

    /* "nodes_def.pyx":428
 *         cdef float[3] value_c
 *         cdef int value_i
 *         if len(value) != 3:             # <<<<<<<<<<<<<<
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (
 *                             "value", 3, len(value)))
 */
  }

  /* "nodes_def.pyx":431
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (
 *                             "value", 3, len(value)))
 *         for value_i in range(3):             # <<<<<<<<<<<<<<
 *             value_c[value_i] = value[value_i]
 * 
 */
  for (__pyx_t_7 = 0; __pyx_t_7 < 3; __pyx_t_7+=1) {
    __pyx_v_value_i = __pyx_t_7;

    /* "nodes_def.pyx":432
 *                             "value", 3, len(value)))
 *         for value_i in range(3):
 *             value_c[value_i] = value[value_i]             # <<<<<<<<<<<<<<
 * 
 *         assert self.ctx is NULL
 */
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_value, __pyx_v_value_i, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 432, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_8 = __pyx_PyFloat_AsFloat(__pyx_t_3); if (unlikely((__pyx_t_8 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 432, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    (__pyx_v_value_c[__pyx_v_value_i]) = __pyx_t_8;
  }

  /* "nodes_def.pyx":434
 *             value_c[value_i] = value[value_i]
 * 
 *         assert self.ctx is NULL             # <<<<<<<<<<<<<<
 *         self.ctx = ngl_node_create(NGL_NODE_ANIMKEYFRAMEVEC3, time, value_c)
 *         if self.ctx is NULL:
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!((__pyx_v_self->__pyx_base.ctx == NULL) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 434, __pyx_L1_error)
    }
  }
  #endif

  /* "nodes_def.pyx":435
 * 
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_ANIMKEYFRAMEVEC3, time, value_c)             # <<<<<<<<<<<<<<
 *         if self.ctx is NULL:
 *             raise MemoryError()
 */
  __pyx_v_self->__pyx_base.ctx = ngl_node_create(NGL_NODE_ANIMKEYFRAMEVEC3, __pyx_v_time, __pyx_v_value_c);

  /* "nodes_def.pyx":436
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_ANIMKEYFRAMEVEC3, time, value_c)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         _Node._init_params(self, *args, **kwargs)
 */
  __pyx_t_2 = ((__pyx_v_self->__pyx_base.ctx == NULL) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "nodes_def.pyx":437
 *         self.ctx = ngl_node_create(NGL_NODE_ANIMKEYFRAMEVEC3, time, value_c)
 *         if self.ctx is NULL:
 *             raise MemoryError()             # <<<<<<<<<<<<<<
 *         _Node._init_params(self, *args, **kwargs)
 * 
 */
    PyErr_NoMemory(); __PYX_ERR(0, 437, __pyx_L1_error)

    /* "nodes_def.pyx":436
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_ANIMKEYFRAMEVEC3, time, value_c)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         _Node._init_params(self, *args, **kwargs)
 */
  }

  /* "nodes_def.pyx":438
 *         if self.ctx is NULL:
 *             raise MemoryError()
 *         _Node._init_params(self, *args, **kwargs)             # <<<<<<<<<<<<<<
 * 
 *         if easing is not None:
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_8pynodegl__Node), __pyx_n_s_init_params); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 438, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 438, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_5, 0, ((PyObject *)__pyx_v_self));
  __pyx_t_9 = PyNumber_Add(__pyx_t_5, __pyx_v_args); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 438, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_9, __pyx_v_kwargs); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 438, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "nodes_def.pyx":440
 *         _Node._init_params(self, *args, **kwargs)
 * 
 *         if easing is not None:             # <<<<<<<<<<<<<<
 *             self.set_easing(easing)
 *         if easing_args is not None:
 */
  __pyx_t_2 = (__pyx_v_easing != Py_None);
  __pyx_t_10 = (__pyx_t_2 != 0);
  if (__pyx_t_10) {

    /* "nodes_def.pyx":441
 * 
 *         if easing is not None:
 *             self.set_easing(easing)             # <<<<<<<<<<<<<<
 *         if easing_args is not None:
 *             self.add_easing_args(*easing_args)
 */
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_easing); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 441, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_3 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_9))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_9);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_9, function);
      }
    }
    __pyx_t_5 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_9, __pyx_t_3, __pyx_v_easing) : __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_v_easing);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 441, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "nodes_def.pyx":440
 *         _Node._init_params(self, *args, **kwargs)
 * 
 *         if easing is not None:             # <<<<<<<<<<<<<<
 *             self.set_easing(easing)
 *         if easing_args is not None:
 */
  }

  /* "nodes_def.pyx":442
 *         if easing is not None:
 *             self.set_easing(easing)
 *         if easing_args is not None:             # <<<<<<<<<<<<<<
 *             self.add_easing_args(*easing_args)
 *         if easing_start_offset is not None:
 */
  __pyx_t_10 = (__pyx_v_easing_args != Py_None);
  __pyx_t_2 = (__pyx_t_10 != 0);
  if (__pyx_t_2) {

    /* "nodes_def.pyx":443
 *             self.set_easing(easing)
 *         if easing_args is not None:
 *             self.add_easing_args(*easing_args)             # <<<<<<<<<<<<<<
 *         if easing_start_offset is not None:
 *             self.set_easing_start_offset(easing_start_offset)
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_add_easing_args); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 443, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_9 = __Pyx_PySequence_Tuple(__pyx_v_easing_args); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 443, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_9, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 443, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "nodes_def.pyx":442
 *         if easing is not None:
 *             self.set_easing(easing)
 *         if easing_args is not None:             # <<<<<<<<<<<<<<
 *             self.add_easing_args(*easing_args)
 *         if easing_start_offset is not None:
 */
  }

  /* "nodes_def.pyx":444
 *         if easing_args is not None:
 *             self.add_easing_args(*easing_args)
 *         if easing_start_offset is not None:             # <<<<<<<<<<<<<<
 *             self.set_easing_start_offset(easing_start_offset)
 *         if easing_end_offset is not None:
 */
  __pyx_t_2 = (__pyx_v_easing_start_offset != Py_None);
  __pyx_t_10 = (__pyx_t_2 != 0);
  if (__pyx_t_10) {

    /* "nodes_def.pyx":445
 *             self.add_easing_args(*easing_args)
 *         if easing_start_offset is not None:
 *             self.set_easing_start_offset(easing_start_offset)             # <<<<<<<<<<<<<<
 *         if easing_end_offset is not None:
 *             self.set_easing_end_offset(easing_end_offset)
 */
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_easing_start_offset); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 445, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_9))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_9);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_9, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_9, __pyx_t_5, __pyx_v_easing_start_offset) : __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_v_easing_start_offset);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 445, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "nodes_def.pyx":444
 *         if easing_args is not None:
 *             self.add_easing_args(*easing_args)
 *         if easing_start_offset is not None:             # <<<<<<<<<<<<<<
 *             self.set_easing_start_offset(easing_start_offset)
 *         if easing_end_offset is not None:
 */
  }

  /* "nodes_def.pyx":446
 *         if easing_start_offset is not None:
 *             self.set_easing_start_offset(easing_start_offset)
 *         if easing_end_offset is not None:             # <<<<<<<<<<<<<<
 *             self.set_easing_end_offset(easing_end_offset)
 * 
 */
  __pyx_t_10 = (__pyx_v_easing_end_offset != Py_None);
  __pyx_t_2 = (__pyx_t_10 != 0);
  if (__pyx_t_2) {

    /* "nodes_def.pyx":447
 *             self.set_easing_start_offset(easing_start_offset)
 *         if easing_end_offset is not None:
 *             self.set_easing_end_offset(easing_end_offset)             # <<<<<<<<<<<<<<
 * 
 *     def set_easing(self, const char * easing):
 */
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_easing_end_offset); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 447, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_9))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_9);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_9, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_9, __pyx_t_5, __pyx_v_easing_end_offset) : __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_v_easing_end_offset);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 447, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "nodes_def.pyx":446
 *         if easing_start_offset is not None:
 *             self.set_easing_start_offset(easing_start_offset)
 *         if easing_end_offset is not None:             # <<<<<<<<<<<<<<
 *             self.set_easing_end_offset(easing_end_offset)
 * 
 */
  }

  /* "nodes_def.pyx":425
 * cdef class AnimKeyFrameVec3(_Node):
 * 
 *     def __init__(self, double time, value, easing=None, easing_args=None, easing_start_offset=None, easing_end_offset=None, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         cdef float[3] value_c
 *         cdef int value_i
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("pynodegl.AnimKeyFrameVec3.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":449
 *             self.set_easing_end_offset(easing_end_offset)
 * 
 *     def set_easing(self, const char * easing):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "easing", easing)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_16AnimKeyFrameVec3_3set_easing(PyObject *__pyx_v_self, PyObject *__pyx_arg_easing); /*proto*/
static PyObject *__pyx_pw_8pynodegl_16AnimKeyFrameVec3_3set_easing(PyObject *__pyx_v_self, PyObject *__pyx_arg_easing) {
  char const *__pyx_v_easing;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_easing (wrapper)", 0);
  assert(__pyx_arg_easing); {
    __pyx_v_easing = __Pyx_PyObject_AsString(__pyx_arg_easing); if (unlikely((!__pyx_v_easing) && PyErr_Occurred())) __PYX_ERR(0, 449, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pynodegl.AnimKeyFrameVec3.set_easing", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pynodegl_16AnimKeyFrameVec3_2set_easing(((struct __pyx_obj_8pynodegl_AnimKeyFrameVec3 *)__pyx_v_self), ((char const *)__pyx_v_easing));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_16AnimKeyFrameVec3_2set_easing(struct __pyx_obj_8pynodegl_AnimKeyFrameVec3 *__pyx_v_self, char const *__pyx_v_easing) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("set_easing", 0);

  /* "nodes_def.pyx":450
 * 
 *     def set_easing(self, const char * easing):
 *         return ngl_node_param_set(self.ctx, "easing", easing)             # <<<<<<<<<<<<<<
 * 
 *     def add_easing_args(self, *easing_args):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"easing"), __pyx_v_easing)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 450, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":449
 *             self.set_easing_end_offset(easing_end_offset)
 * 
 *     def set_easing(self, const char * easing):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "easing", easing)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.AnimKeyFrameVec3.set_easing", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":452
 *         return ngl_node_param_set(self.ctx, "easing", easing)
 * 
 *     def add_easing_args(self, *easing_args):             # <<<<<<<<<<<<<<
 *         return self._add_doublelist("easing_args", *easing_args)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_16AnimKeyFrameVec3_5add_easing_args(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_8pynodegl_16AnimKeyFrameVec3_5add_easing_args(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_easing_args = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_easing_args (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "add_easing_args", 0))) return NULL;
  __Pyx_INCREF(__pyx_args);
  __pyx_v_easing_args = __pyx_args;
  __pyx_r = __pyx_pf_8pynodegl_16AnimKeyFrameVec3_4add_easing_args(((struct __pyx_obj_8pynodegl_AnimKeyFrameVec3 *)__pyx_v_self), __pyx_v_easing_args);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_easing_args);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_16AnimKeyFrameVec3_4add_easing_args(struct __pyx_obj_8pynodegl_AnimKeyFrameVec3 *__pyx_v_self, PyObject *__pyx_v_easing_args) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("add_easing_args", 0);

  /* "nodes_def.pyx":453
 * 
 *     def add_easing_args(self, *easing_args):
 *         return self._add_doublelist("easing_args", *easing_args)             # <<<<<<<<<<<<<<
 * 
 *     def set_easing_start_offset(self, double easing_start_offset):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_add_doublelist); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 453, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyNumber_Add(__pyx_tuple__27, __pyx_v_easing_args); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 453, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 453, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":452
 *         return ngl_node_param_set(self.ctx, "easing", easing)
 * 
 *     def add_easing_args(self, *easing_args):             # <<<<<<<<<<<<<<
 *         return self._add_doublelist("easing_args", *easing_args)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pynodegl.AnimKeyFrameVec3.add_easing_args", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":455
 *         return self._add_doublelist("easing_args", *easing_args)
 * 
 *     def set_easing_start_offset(self, double easing_start_offset):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "easing_start_offset", easing_start_offset)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_16AnimKeyFrameVec3_7set_easing_start_offset(PyObject *__pyx_v_self, PyObject *__pyx_arg_easing_start_offset); /*proto*/
static PyObject *__pyx_pw_8pynodegl_16AnimKeyFrameVec3_7set_easing_start_offset(PyObject *__pyx_v_self, PyObject *__pyx_arg_easing_start_offset) {
  double __pyx_v_easing_start_offset;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_easing_start_offset (wrapper)", 0);
  assert(__pyx_arg_easing_start_offset); {
    __pyx_v_easing_start_offset = __pyx_PyFloat_AsDouble(__pyx_arg_easing_start_offset); if (unlikely((__pyx_v_easing_start_offset == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 455, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pynodegl.AnimKeyFrameVec3.set_easing_start_offset", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pynodegl_16AnimKeyFrameVec3_6set_easing_start_offset(((struct __pyx_obj_8pynodegl_AnimKeyFrameVec3 *)__pyx_v_self), ((double)__pyx_v_easing_start_offset));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_16AnimKeyFrameVec3_6set_easing_start_offset(struct __pyx_obj_8pynodegl_AnimKeyFrameVec3 *__pyx_v_self, double __pyx_v_easing_start_offset) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("set_easing_start_offset", 0);

  /* "nodes_def.pyx":456
 * 
 *     def set_easing_start_offset(self, double easing_start_offset):
 *         return ngl_node_param_set(self.ctx, "easing_start_offset", easing_start_offset)             # <<<<<<<<<<<<<<
 * 
 *     def set_easing_end_offset(self, double easing_end_offset):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"easing_start_offset"), __pyx_v_easing_start_offset)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 456, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":455
 *         return self._add_doublelist("easing_args", *easing_args)
 * 
 *     def set_easing_start_offset(self, double easing_start_offset):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "easing_start_offset", easing_start_offset)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.AnimKeyFrameVec3.set_easing_start_offset", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":458
 *         return ngl_node_param_set(self.ctx, "easing_start_offset", easing_start_offset)
 * 
 *     def set_easing_end_offset(self, double easing_end_offset):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "easing_end_offset", easing_end_offset)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_16AnimKeyFrameVec3_9set_easing_end_offset(PyObject *__pyx_v_self, PyObject *__pyx_arg_easing_end_offset); /*proto*/
static PyObject *__pyx_pw_8pynodegl_16AnimKeyFrameVec3_9set_easing_end_offset(PyObject *__pyx_v_self, PyObject *__pyx_arg_easing_end_offset) {
  double __pyx_v_easing_end_offset;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_easing_end_offset (wrapper)", 0);
  assert(__pyx_arg_easing_end_offset); {
    __pyx_v_easing_end_offset = __pyx_PyFloat_AsDouble(__pyx_arg_easing_end_offset); if (unlikely((__pyx_v_easing_end_offset == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 458, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pynodegl.AnimKeyFrameVec3.set_easing_end_offset", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pynodegl_16AnimKeyFrameVec3_8set_easing_end_offset(((struct __pyx_obj_8pynodegl_AnimKeyFrameVec3 *)__pyx_v_self), ((double)__pyx_v_easing_end_offset));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_16AnimKeyFrameVec3_8set_easing_end_offset(struct __pyx_obj_8pynodegl_AnimKeyFrameVec3 *__pyx_v_self, double __pyx_v_easing_end_offset) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("set_easing_end_offset", 0);

  /* "nodes_def.pyx":459
 * 
 *     def set_easing_end_offset(self, double easing_end_offset):
 *         return ngl_node_param_set(self.ctx, "easing_end_offset", easing_end_offset)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"easing_end_offset"), __pyx_v_easing_end_offset)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 459, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":458
 *         return ngl_node_param_set(self.ctx, "easing_start_offset", easing_start_offset)
 * 
 *     def set_easing_end_offset(self, double easing_end_offset):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "easing_end_offset", easing_end_offset)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.AnimKeyFrameVec3.set_easing_end_offset", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_16AnimKeyFrameVec3_11__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pynodegl_16AnimKeyFrameVec3_11__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_16AnimKeyFrameVec3_10__reduce_cython__(((struct __pyx_obj_8pynodegl_AnimKeyFrameVec3 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_16AnimKeyFrameVec3_10__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_AnimKeyFrameVec3 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__32, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.AnimKeyFrameVec3.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_16AnimKeyFrameVec3_13__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8pynodegl_16AnimKeyFrameVec3_13__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_16AnimKeyFrameVec3_12__setstate_cython__(((struct __pyx_obj_8pynodegl_AnimKeyFrameVec3 *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_16AnimKeyFrameVec3_12__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_AnimKeyFrameVec3 *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__33, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.AnimKeyFrameVec3.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":464
 * cdef class AnimKeyFrameVec4(_Node):
 * 
 *     def __init__(self, double time, value, easing=None, easing_args=None, easing_start_offset=None, easing_end_offset=None, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         cdef float[4] value_c
 *         cdef int value_i
 */

/* Python wrapper */
static int __pyx_pw_8pynodegl_16AnimKeyFrameVec4_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pynodegl_16AnimKeyFrameVec4_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_time;
  PyObject *__pyx_v_value = 0;
  PyObject *__pyx_v_easing = 0;
  PyObject *__pyx_v_easing_args = 0;
  PyObject *__pyx_v_easing_start_offset = 0;
  PyObject *__pyx_v_easing_end_offset = 0;
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  __pyx_v_kwargs = PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return -1;
  __Pyx_GOTREF(__pyx_v_kwargs);
  if (PyTuple_GET_SIZE(__pyx_args) > 6) {
    __pyx_v_args = PyTuple_GetSlice(__pyx_args, 6, PyTuple_GET_SIZE(__pyx_args));
    if (unlikely(!__pyx_v_args)) {
      __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
      __Pyx_RefNannyFinishContext();
      return -1;
    }
    __Pyx_GOTREF(__pyx_v_args);
  } else {
    __pyx_v_args = __pyx_empty_tuple; __Pyx_INCREF(__pyx_empty_tuple);
  }
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_time,&__pyx_n_s_value,&__pyx_n_s_easing,&__pyx_n_s_easing_args,&__pyx_n_s_easing_start_offset,&__pyx_n_s_easing_end_offset,0};
    PyObject* values[6] = {0,0,0,0,0,0};
    values[2] = ((PyObject *)Py_None);
    values[3] = ((PyObject *)Py_None);
    values[4] = ((PyObject *)Py_None);
    values[5] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        default:
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_time)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 2, 6, 1); __PYX_ERR(0, 464, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_easing);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_easing_args);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_easing_start_offset);
          if (value) { values[4] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_easing_end_offset);
          if (value) { values[5] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t used_pos_args = (pos_args < 6) ? pos_args : 6;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_kwargs, values, used_pos_args, "__init__") < 0)) __PYX_ERR(0, 464, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        default:
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        case  1:
        case  0:
        goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_time = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_time == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 464, __pyx_L3_error)
    __pyx_v_value = values[1];
    __pyx_v_easing = values[2];
    __pyx_v_easing_args = values[3];
    __pyx_v_easing_start_offset = values[4];
    __pyx_v_easing_end_offset = values[5];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 2, 6, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 464, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_args); __pyx_v_args = 0;
  __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
  __Pyx_AddTraceback("pynodegl.AnimKeyFrameVec4.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pynodegl_16AnimKeyFrameVec4___init__(((struct __pyx_obj_8pynodegl_AnimKeyFrameVec4 *)__pyx_v_self), __pyx_v_time, __pyx_v_value, __pyx_v_easing, __pyx_v_easing_args, __pyx_v_easing_start_offset, __pyx_v_easing_end_offset, __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pynodegl_16AnimKeyFrameVec4___init__(struct __pyx_obj_8pynodegl_AnimKeyFrameVec4 *__pyx_v_self, double __pyx_v_time, PyObject *__pyx_v_value, PyObject *__pyx_v_easing, PyObject *__pyx_v_easing_args, PyObject *__pyx_v_easing_start_offset, PyObject *__pyx_v_easing_end_offset, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs) {
  float __pyx_v_value_c[4];
  int __pyx_v_value_i;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  Py_UCS4 __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  int __pyx_t_7;
  float __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_t_10;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "nodes_def.pyx":467
 *         cdef float[4] value_c
 *         cdef int value_i
 *         if len(value) != 4:             # <<<<<<<<<<<<<<
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (
 *                             "value", 4, len(value)))
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_value); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 467, __pyx_L1_error)
  __pyx_t_2 = ((__pyx_t_1 != 4) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "nodes_def.pyx":468
 *         cdef int value_i
 *         if len(value) != 4:
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (             # <<<<<<<<<<<<<<
 *                             "value", 4, len(value)))
 *         for value_i in range(4):
 */
    __pyx_t_3 = PyTuple_New(5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 468, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = 0;
    __pyx_t_4 = 127;
    __Pyx_INCREF(__pyx_kp_u_value_parameter_is_expected_to_b);
    __pyx_t_1 += 37;
    __Pyx_GIVEREF(__pyx_kp_u_value_parameter_is_expected_to_b);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_kp_u_value_parameter_is_expected_to_b);

    /* "nodes_def.pyx":469
 *         if len(value) != 4:
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (
 *                             "value", 4, len(value)))             # <<<<<<<<<<<<<<
 *         for value_i in range(4):
 *             value_c[value_i] = value[value_i]
 */
    __pyx_t_5 = __Pyx_PyUnicode_From_long(4, 0, ' ', 'd'); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 469, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_INCREF(__pyx_kp_u_but_got);
    __pyx_t_1 += 9;
    __Pyx_GIVEREF(__pyx_kp_u_but_got);
    PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_kp_u_but_got);
    __pyx_t_6 = PyObject_Length(__pyx_v_value); if (unlikely(__pyx_t_6 == ((Py_ssize_t)-1))) __PYX_ERR(0, 469, __pyx_L1_error)
    __pyx_t_5 = __Pyx_PyUnicode_From_Py_ssize_t(__pyx_t_6, 0, ' ', 'd'); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 469, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_3, 3, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_INCREF(__pyx_kp_u_values);
    __pyx_t_1 += 7;
    __Pyx_GIVEREF(__pyx_kp_u_values);
    PyTuple_SET_ITEM(__pyx_t_3, 4, __pyx_kp_u_values);

    /* "nodes_def.pyx":468
 *         cdef int value_i
 *         if len(value) != 4:
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (             # <<<<<<<<<<<<<<
 *                             "value", 4, len(value)))
 *         for value_i in range(4):
 */
    __pyx_t_5 = __Pyx_PyUnicode_Join(__pyx_t_3, 5, __pyx_t_1, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 468, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 468, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 468, __pyx_L1_error)

    /* "nodes_def.pyx":467
 *         cdef float[4] value_c
 *         cdef int value_i
 *         if len(value) != 4:             # <<<<<<<<<<<<<<
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (
 *                             "value", 4, len(value)))
 */
  }

  /* "nodes_def.pyx":470
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (
 *                             "value", 4, len(value)))
 *         for value_i in range(4):             # <<<<<<<<<<<<<<
 *             value_c[value_i] = value[value_i]
 * 
 */
  for (__pyx_t_7 = 0; __pyx_t_7 < 4; __pyx_t_7+=1) {
    __pyx_v_value_i = __pyx_t_7;

    /* "nodes_def.pyx":471
 *                             "value", 4, len(value)))
 *         for value_i in range(4):
 *             value_c[value_i] = value[value_i]             # <<<<<<<<<<<<<<
 * 
 *         assert self.ctx is NULL
 */
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_value, __pyx_v_value_i, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 471, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_8 = __pyx_PyFloat_AsFloat(__pyx_t_3); if (unlikely((__pyx_t_8 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 471, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    (__pyx_v_value_c[__pyx_v_value_i]) = __pyx_t_8;
  }

  /* "nodes_def.pyx":473
 *             value_c[value_i] = value[value_i]
 * 
 *         assert self.ctx is NULL             # <<<<<<<<<<<<<<
 *         self.ctx = ngl_node_create(NGL_NODE_ANIMKEYFRAMEVEC4, time, value_c)
 *         if self.ctx is NULL:
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!((__pyx_v_self->__pyx_base.ctx == NULL) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 473, __pyx_L1_error)
    }
  }
  #endif

  /* "nodes_def.pyx":474
 * 
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_ANIMKEYFRAMEVEC4, time, value_c)             # <<<<<<<<<<<<<<
 *         if self.ctx is NULL:
 *             raise MemoryError()
 */
  __pyx_v_self->__pyx_base.ctx = ngl_node_create(NGL_NODE_ANIMKEYFRAMEVEC4, __pyx_v_time, __pyx_v_value_c);

  /* "nodes_def.pyx":475
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_ANIMKEYFRAMEVEC4, time, value_c)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         _Node._init_params(self, *args, **kwargs)
 */
  __pyx_t_2 = ((__pyx_v_self->__pyx_base.ctx == NULL) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "nodes_def.pyx":476
 *         self.ctx = ngl_node_create(NGL_NODE_ANIMKEYFRAMEVEC4, time, value_c)
 *         if self.ctx is NULL:
 *             raise MemoryError()             # <<<<<<<<<<<<<<
 *         _Node._init_params(self, *args, **kwargs)
 * 
 */
    PyErr_NoMemory(); __PYX_ERR(0, 476, __pyx_L1_error)

    /* "nodes_def.pyx":475
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_ANIMKEYFRAMEVEC4, time, value_c)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         _Node._init_params(self, *args, **kwargs)
 */
  }

  /* "nodes_def.pyx":477
 *         if self.ctx is NULL:
 *             raise MemoryError()
 *         _Node._init_params(self, *args, **kwargs)             # <<<<<<<<<<<<<<
 * 
 *         if easing is not None:
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_8pynodegl__Node), __pyx_n_s_init_params); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 477, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 477, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_5, 0, ((PyObject *)__pyx_v_self));
  __pyx_t_9 = PyNumber_Add(__pyx_t_5, __pyx_v_args); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 477, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_9, __pyx_v_kwargs); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 477, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "nodes_def.pyx":479
 *         _Node._init_params(self, *args, **kwargs)
 * 
 *         if easing is not None:             # <<<<<<<<<<<<<<
 *             self.set_easing(easing)
 *         if easing_args is not None:
 */
  __pyx_t_2 = (__pyx_v_easing != Py_None);
  __pyx_t_10 = (__pyx_t_2 != 0);
  if (__pyx_t_10) {

    /* "nodes_def.pyx":480
 * 
 *         if easing is not None:
 *             self.set_easing(easing)             # <<<<<<<<<<<<<<
 *         if easing_args is not None:
 *             self.add_easing_args(*easing_args)
 */
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_easing); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 480, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_3 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_9))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_9);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_9, function);
      }
    }
    __pyx_t_5 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_9, __pyx_t_3, __pyx_v_easing) : __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_v_easing);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 480, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "nodes_def.pyx":479
 *         _Node._init_params(self, *args, **kwargs)
 * 
 *         if easing is not None:             # <<<<<<<<<<<<<<
 *             self.set_easing(easing)
 *         if easing_args is not None:
 */
  }

  /* "nodes_def.pyx":481
 *         if easing is not None:
 *             self.set_easing(easing)
 *         if easing_args is not None:             # <<<<<<<<<<<<<<
 *             self.add_easing_args(*easing_args)
 *         if easing_start_offset is not None:
 */
  __pyx_t_10 = (__pyx_v_easing_args != Py_None);
  __pyx_t_2 = (__pyx_t_10 != 0);
  if (__pyx_t_2) {

    /* "nodes_def.pyx":482
 *             self.set_easing(easing)
 *         if easing_args is not None:
 *             self.add_easing_args(*easing_args)             # <<<<<<<<<<<<<<
 *         if easing_start_offset is not None:
 *             self.set_easing_start_offset(easing_start_offset)
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_add_easing_args); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 482, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_9 = __Pyx_PySequence_Tuple(__pyx_v_easing_args); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 482, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_9, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 482, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "nodes_def.pyx":481
 *         if easing is not None:
 *             self.set_easing(easing)
 *         if easing_args is not None:             # <<<<<<<<<<<<<<
 *             self.add_easing_args(*easing_args)
 *         if easing_start_offset is not None:
 */
  }

  /* "nodes_def.pyx":483
 *         if easing_args is not None:
 *             self.add_easing_args(*easing_args)
 *         if easing_start_offset is not None:             # <<<<<<<<<<<<<<
 *             self.set_easing_start_offset(easing_start_offset)
 *         if easing_end_offset is not None:
 */
  __pyx_t_2 = (__pyx_v_easing_start_offset != Py_None);
  __pyx_t_10 = (__pyx_t_2 != 0);
  if (__pyx_t_10) {

    /* "nodes_def.pyx":484
 *             self.add_easing_args(*easing_args)
 *         if easing_start_offset is not None:
 *             self.set_easing_start_offset(easing_start_offset)             # <<<<<<<<<<<<<<
 *         if easing_end_offset is not None:
 *             self.set_easing_end_offset(easing_end_offset)
 */
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_easing_start_offset); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 484, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_9))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_9);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_9, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_9, __pyx_t_5, __pyx_v_easing_start_offset) : __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_v_easing_start_offset);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 484, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "nodes_def.pyx":483
 *         if easing_args is not None:
 *             self.add_easing_args(*easing_args)
 *         if easing_start_offset is not None:             # <<<<<<<<<<<<<<
 *             self.set_easing_start_offset(easing_start_offset)
 *         if easing_end_offset is not None:
 */
  }

  /* "nodes_def.pyx":485
 *         if easing_start_offset is not None:
 *             self.set_easing_start_offset(easing_start_offset)
 *         if easing_end_offset is not None:             # <<<<<<<<<<<<<<
 *             self.set_easing_end_offset(easing_end_offset)
 * 
 */
  __pyx_t_10 = (__pyx_v_easing_end_offset != Py_None);
  __pyx_t_2 = (__pyx_t_10 != 0);
  if (__pyx_t_2) {

    /* "nodes_def.pyx":486
 *             self.set_easing_start_offset(easing_start_offset)
 *         if easing_end_offset is not None:
 *             self.set_easing_end_offset(easing_end_offset)             # <<<<<<<<<<<<<<
 * 
 *     def set_easing(self, const char * easing):
 */
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_easing_end_offset); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 486, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_9))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_9);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_9, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_9, __pyx_t_5, __pyx_v_easing_end_offset) : __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_v_easing_end_offset);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 486, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "nodes_def.pyx":485
 *         if easing_start_offset is not None:
 *             self.set_easing_start_offset(easing_start_offset)
 *         if easing_end_offset is not None:             # <<<<<<<<<<<<<<
 *             self.set_easing_end_offset(easing_end_offset)
 * 
 */
  }

  /* "nodes_def.pyx":464
 * cdef class AnimKeyFrameVec4(_Node):
 * 
 *     def __init__(self, double time, value, easing=None, easing_args=None, easing_start_offset=None, easing_end_offset=None, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         cdef float[4] value_c
 *         cdef int value_i
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("pynodegl.AnimKeyFrameVec4.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":488
 *             self.set_easing_end_offset(easing_end_offset)
 * 
 *     def set_easing(self, const char * easing):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "easing", easing)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_16AnimKeyFrameVec4_3set_easing(PyObject *__pyx_v_self, PyObject *__pyx_arg_easing); /*proto*/
static PyObject *__pyx_pw_8pynodegl_16AnimKeyFrameVec4_3set_easing(PyObject *__pyx_v_self, PyObject *__pyx_arg_easing) {
  char const *__pyx_v_easing;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_easing (wrapper)", 0);
  assert(__pyx_arg_easing); {
    __pyx_v_easing = __Pyx_PyObject_AsString(__pyx_arg_easing); if (unlikely((!__pyx_v_easing) && PyErr_Occurred())) __PYX_ERR(0, 488, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pynodegl.AnimKeyFrameVec4.set_easing", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pynodegl_16AnimKeyFrameVec4_2set_easing(((struct __pyx_obj_8pynodegl_AnimKeyFrameVec4 *)__pyx_v_self), ((char const *)__pyx_v_easing));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_16AnimKeyFrameVec4_2set_easing(struct __pyx_obj_8pynodegl_AnimKeyFrameVec4 *__pyx_v_self, char const *__pyx_v_easing) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("set_easing", 0);

  /* "nodes_def.pyx":489
 * 
 *     def set_easing(self, const char * easing):
 *         return ngl_node_param_set(self.ctx, "easing", easing)             # <<<<<<<<<<<<<<
 * 
 *     def add_easing_args(self, *easing_args):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"easing"), __pyx_v_easing)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 489, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":488
 *             self.set_easing_end_offset(easing_end_offset)
 * 
 *     def set_easing(self, const char * easing):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "easing", easing)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.AnimKeyFrameVec4.set_easing", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":491
 *         return ngl_node_param_set(self.ctx, "easing", easing)
 * 
 *     def add_easing_args(self, *easing_args):             # <<<<<<<<<<<<<<
 *         return self._add_doublelist("easing_args", *easing_args)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_16AnimKeyFrameVec4_5add_easing_args(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_8pynodegl_16AnimKeyFrameVec4_5add_easing_args(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_easing_args = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_easing_args (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "add_easing_args", 0))) return NULL;
  __Pyx_INCREF(__pyx_args);
  __pyx_v_easing_args = __pyx_args;
  __pyx_r = __pyx_pf_8pynodegl_16AnimKeyFrameVec4_4add_easing_args(((struct __pyx_obj_8pynodegl_AnimKeyFrameVec4 *)__pyx_v_self), __pyx_v_easing_args);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_easing_args);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_16AnimKeyFrameVec4_4add_easing_args(struct __pyx_obj_8pynodegl_AnimKeyFrameVec4 *__pyx_v_self, PyObject *__pyx_v_easing_args) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("add_easing_args", 0);

  /* "nodes_def.pyx":492
 * 
 *     def add_easing_args(self, *easing_args):
 *         return self._add_doublelist("easing_args", *easing_args)             # <<<<<<<<<<<<<<
 * 
 *     def set_easing_start_offset(self, double easing_start_offset):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_add_doublelist); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 492, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyNumber_Add(__pyx_tuple__27, __pyx_v_easing_args); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 492, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 492, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":491
 *         return ngl_node_param_set(self.ctx, "easing", easing)
 * 
 *     def add_easing_args(self, *easing_args):             # <<<<<<<<<<<<<<
 *         return self._add_doublelist("easing_args", *easing_args)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pynodegl.AnimKeyFrameVec4.add_easing_args", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":494
 *         return self._add_doublelist("easing_args", *easing_args)
 * 
 *     def set_easing_start_offset(self, double easing_start_offset):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "easing_start_offset", easing_start_offset)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_16AnimKeyFrameVec4_7set_easing_start_offset(PyObject *__pyx_v_self, PyObject *__pyx_arg_easing_start_offset); /*proto*/
static PyObject *__pyx_pw_8pynodegl_16AnimKeyFrameVec4_7set_easing_start_offset(PyObject *__pyx_v_self, PyObject *__pyx_arg_easing_start_offset) {
  double __pyx_v_easing_start_offset;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_easing_start_offset (wrapper)", 0);
  assert(__pyx_arg_easing_start_offset); {
    __pyx_v_easing_start_offset = __pyx_PyFloat_AsDouble(__pyx_arg_easing_start_offset); if (unlikely((__pyx_v_easing_start_offset == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 494, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pynodegl.AnimKeyFrameVec4.set_easing_start_offset", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pynodegl_16AnimKeyFrameVec4_6set_easing_start_offset(((struct __pyx_obj_8pynodegl_AnimKeyFrameVec4 *)__pyx_v_self), ((double)__pyx_v_easing_start_offset));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_16AnimKeyFrameVec4_6set_easing_start_offset(struct __pyx_obj_8pynodegl_AnimKeyFrameVec4 *__pyx_v_self, double __pyx_v_easing_start_offset) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("set_easing_start_offset", 0);

  /* "nodes_def.pyx":495
 * 
 *     def set_easing_start_offset(self, double easing_start_offset):
 *         return ngl_node_param_set(self.ctx, "easing_start_offset", easing_start_offset)             # <<<<<<<<<<<<<<
 * 
 *     def set_easing_end_offset(self, double easing_end_offset):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"easing_start_offset"), __pyx_v_easing_start_offset)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 495, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":494
 *         return self._add_doublelist("easing_args", *easing_args)
 * 
 *     def set_easing_start_offset(self, double easing_start_offset):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "easing_start_offset", easing_start_offset)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.AnimKeyFrameVec4.set_easing_start_offset", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":497
 *         return ngl_node_param_set(self.ctx, "easing_start_offset", easing_start_offset)
 * 
 *     def set_easing_end_offset(self, double easing_end_offset):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "easing_end_offset", easing_end_offset)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_16AnimKeyFrameVec4_9set_easing_end_offset(PyObject *__pyx_v_self, PyObject *__pyx_arg_easing_end_offset); /*proto*/
static PyObject *__pyx_pw_8pynodegl_16AnimKeyFrameVec4_9set_easing_end_offset(PyObject *__pyx_v_self, PyObject *__pyx_arg_easing_end_offset) {
  double __pyx_v_easing_end_offset;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_easing_end_offset (wrapper)", 0);
  assert(__pyx_arg_easing_end_offset); {
    __pyx_v_easing_end_offset = __pyx_PyFloat_AsDouble(__pyx_arg_easing_end_offset); if (unlikely((__pyx_v_easing_end_offset == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 497, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pynodegl.AnimKeyFrameVec4.set_easing_end_offset", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pynodegl_16AnimKeyFrameVec4_8set_easing_end_offset(((struct __pyx_obj_8pynodegl_AnimKeyFrameVec4 *)__pyx_v_self), ((double)__pyx_v_easing_end_offset));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_16AnimKeyFrameVec4_8set_easing_end_offset(struct __pyx_obj_8pynodegl_AnimKeyFrameVec4 *__pyx_v_self, double __pyx_v_easing_end_offset) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("set_easing_end_offset", 0);

  /* "nodes_def.pyx":498
 * 
 *     def set_easing_end_offset(self, double easing_end_offset):
 *         return ngl_node_param_set(self.ctx, "easing_end_offset", easing_end_offset)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"easing_end_offset"), __pyx_v_easing_end_offset)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 498, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":497
 *         return ngl_node_param_set(self.ctx, "easing_start_offset", easing_start_offset)
 * 
 *     def set_easing_end_offset(self, double easing_end_offset):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "easing_end_offset", easing_end_offset)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.AnimKeyFrameVec4.set_easing_end_offset", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_16AnimKeyFrameVec4_11__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pynodegl_16AnimKeyFrameVec4_11__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_16AnimKeyFrameVec4_10__reduce_cython__(((struct __pyx_obj_8pynodegl_AnimKeyFrameVec4 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_16AnimKeyFrameVec4_10__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_AnimKeyFrameVec4 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__34, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.AnimKeyFrameVec4.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_16AnimKeyFrameVec4_13__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8pynodegl_16AnimKeyFrameVec4_13__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_16AnimKeyFrameVec4_12__setstate_cython__(((struct __pyx_obj_8pynodegl_AnimKeyFrameVec4 *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_16AnimKeyFrameVec4_12__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_AnimKeyFrameVec4 *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__35, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.AnimKeyFrameVec4.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":503
 * cdef class AnimKeyFrameQuat(_Node):
 * 
 *     def __init__(self, double time, quat, easing=None, easing_args=None, easing_start_offset=None, easing_end_offset=None, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         cdef float[4] quat_c
 *         cdef int quat_i
 */

/* Python wrapper */
static int __pyx_pw_8pynodegl_16AnimKeyFrameQuat_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pynodegl_16AnimKeyFrameQuat_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_time;
  PyObject *__pyx_v_quat = 0;
  PyObject *__pyx_v_easing = 0;
  PyObject *__pyx_v_easing_args = 0;
  PyObject *__pyx_v_easing_start_offset = 0;
  PyObject *__pyx_v_easing_end_offset = 0;
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  __pyx_v_kwargs = PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return -1;
  __Pyx_GOTREF(__pyx_v_kwargs);
  if (PyTuple_GET_SIZE(__pyx_args) > 6) {
    __pyx_v_args = PyTuple_GetSlice(__pyx_args, 6, PyTuple_GET_SIZE(__pyx_args));
    if (unlikely(!__pyx_v_args)) {
      __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
      __Pyx_RefNannyFinishContext();
      return -1;
    }
    __Pyx_GOTREF(__pyx_v_args);
  } else {
    __pyx_v_args = __pyx_empty_tuple; __Pyx_INCREF(__pyx_empty_tuple);
  }
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_time,&__pyx_n_s_quat,&__pyx_n_s_easing,&__pyx_n_s_easing_args,&__pyx_n_s_easing_start_offset,&__pyx_n_s_easing_end_offset,0};
    PyObject* values[6] = {0,0,0,0,0,0};
    values[2] = ((PyObject *)Py_None);
    values[3] = ((PyObject *)Py_None);
    values[4] = ((PyObject *)Py_None);
    values[5] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        default:
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_time)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_quat)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 2, 6, 1); __PYX_ERR(0, 503, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_easing);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_easing_args);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_easing_start_offset);
          if (value) { values[4] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_easing_end_offset);
          if (value) { values[5] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t used_pos_args = (pos_args < 6) ? pos_args : 6;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_kwargs, values, used_pos_args, "__init__") < 0)) __PYX_ERR(0, 503, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        default:
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        case  1:
        case  0:
        goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_time = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_time == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 503, __pyx_L3_error)
    __pyx_v_quat = values[1];
    __pyx_v_easing = values[2];
    __pyx_v_easing_args = values[3];
    __pyx_v_easing_start_offset = values[4];
    __pyx_v_easing_end_offset = values[5];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 2, 6, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 503, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_args); __pyx_v_args = 0;
  __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
  __Pyx_AddTraceback("pynodegl.AnimKeyFrameQuat.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pynodegl_16AnimKeyFrameQuat___init__(((struct __pyx_obj_8pynodegl_AnimKeyFrameQuat *)__pyx_v_self), __pyx_v_time, __pyx_v_quat, __pyx_v_easing, __pyx_v_easing_args, __pyx_v_easing_start_offset, __pyx_v_easing_end_offset, __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pynodegl_16AnimKeyFrameQuat___init__(struct __pyx_obj_8pynodegl_AnimKeyFrameQuat *__pyx_v_self, double __pyx_v_time, PyObject *__pyx_v_quat, PyObject *__pyx_v_easing, PyObject *__pyx_v_easing_args, PyObject *__pyx_v_easing_start_offset, PyObject *__pyx_v_easing_end_offset, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs) {
  float __pyx_v_quat_c[4];
  int __pyx_v_quat_i;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  Py_UCS4 __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  int __pyx_t_7;
  float __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_t_10;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "nodes_def.pyx":506
 *         cdef float[4] quat_c
 *         cdef int quat_i
 *         if len(quat) != 4:             # <<<<<<<<<<<<<<
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (
 *                             "quat", 4, len(quat)))
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_quat); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 506, __pyx_L1_error)
  __pyx_t_2 = ((__pyx_t_1 != 4) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "nodes_def.pyx":507
 *         cdef int quat_i
 *         if len(quat) != 4:
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (             # <<<<<<<<<<<<<<
 *                             "quat", 4, len(quat)))
 *         for quat_i in range(4):
 */
    __pyx_t_3 = PyTuple_New(5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 507, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = 0;
    __pyx_t_4 = 127;
    __Pyx_INCREF(__pyx_kp_u_quat_parameter_is_expected_to_be);
    __pyx_t_1 += 36;
    __Pyx_GIVEREF(__pyx_kp_u_quat_parameter_is_expected_to_be);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_kp_u_quat_parameter_is_expected_to_be);

    /* "nodes_def.pyx":508
 *         if len(quat) != 4:
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (
 *                             "quat", 4, len(quat)))             # <<<<<<<<<<<<<<
 *         for quat_i in range(4):
 *             quat_c[quat_i] = quat[quat_i]
 */
    __pyx_t_5 = __Pyx_PyUnicode_From_long(4, 0, ' ', 'd'); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 508, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_INCREF(__pyx_kp_u_but_got);
    __pyx_t_1 += 9;
    __Pyx_GIVEREF(__pyx_kp_u_but_got);
    PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_kp_u_but_got);
    __pyx_t_6 = PyObject_Length(__pyx_v_quat); if (unlikely(__pyx_t_6 == ((Py_ssize_t)-1))) __PYX_ERR(0, 508, __pyx_L1_error)
    __pyx_t_5 = __Pyx_PyUnicode_From_Py_ssize_t(__pyx_t_6, 0, ' ', 'd'); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 508, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_3, 3, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_INCREF(__pyx_kp_u_values);
    __pyx_t_1 += 7;
    __Pyx_GIVEREF(__pyx_kp_u_values);
    PyTuple_SET_ITEM(__pyx_t_3, 4, __pyx_kp_u_values);

    /* "nodes_def.pyx":507
 *         cdef int quat_i
 *         if len(quat) != 4:
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (             # <<<<<<<<<<<<<<
 *                             "quat", 4, len(quat)))
 *         for quat_i in range(4):
 */
    __pyx_t_5 = __Pyx_PyUnicode_Join(__pyx_t_3, 5, __pyx_t_1, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 507, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 507, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 507, __pyx_L1_error)

    /* "nodes_def.pyx":506
 *         cdef float[4] quat_c
 *         cdef int quat_i
 *         if len(quat) != 4:             # <<<<<<<<<<<<<<
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (
 *                             "quat", 4, len(quat)))
 */
  }

  /* "nodes_def.pyx":509
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (
 *                             "quat", 4, len(quat)))
 *         for quat_i in range(4):             # <<<<<<<<<<<<<<
 *             quat_c[quat_i] = quat[quat_i]
 * 
 */
  for (__pyx_t_7 = 0; __pyx_t_7 < 4; __pyx_t_7+=1) {
    __pyx_v_quat_i = __pyx_t_7;

    /* "nodes_def.pyx":510
 *                             "quat", 4, len(quat)))
 *         for quat_i in range(4):
 *             quat_c[quat_i] = quat[quat_i]             # <<<<<<<<<<<<<<
 * 
 *         assert self.ctx is NULL
 */
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_quat, __pyx_v_quat_i, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 510, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_8 = __pyx_PyFloat_AsFloat(__pyx_t_3); if (unlikely((__pyx_t_8 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 510, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    (__pyx_v_quat_c[__pyx_v_quat_i]) = __pyx_t_8;
  }

  /* "nodes_def.pyx":512
 *             quat_c[quat_i] = quat[quat_i]
 * 
 *         assert self.ctx is NULL             # <<<<<<<<<<<<<<
 *         self.ctx = ngl_node_create(NGL_NODE_ANIMKEYFRAMEQUAT, time, quat_c)
 *         if self.ctx is NULL:
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!((__pyx_v_self->__pyx_base.ctx == NULL) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 512, __pyx_L1_error)
    }
  }
  #endif

  /* "nodes_def.pyx":513
 * 
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_ANIMKEYFRAMEQUAT, time, quat_c)             # <<<<<<<<<<<<<<
 *         if self.ctx is NULL:
 *             raise MemoryError()
 */
  __pyx_v_self->__pyx_base.ctx = ngl_node_create(NGL_NODE_ANIMKEYFRAMEQUAT, __pyx_v_time, __pyx_v_quat_c);

  /* "nodes_def.pyx":514
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_ANIMKEYFRAMEQUAT, time, quat_c)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         _Node._init_params(self, *args, **kwargs)
 */
  __pyx_t_2 = ((__pyx_v_self->__pyx_base.ctx == NULL) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "nodes_def.pyx":515
 *         self.ctx = ngl_node_create(NGL_NODE_ANIMKEYFRAMEQUAT, time, quat_c)
 *         if self.ctx is NULL:
 *             raise MemoryError()             # <<<<<<<<<<<<<<
 *         _Node._init_params(self, *args, **kwargs)
 * 
 */
    PyErr_NoMemory(); __PYX_ERR(0, 515, __pyx_L1_error)

    /* "nodes_def.pyx":514
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_ANIMKEYFRAMEQUAT, time, quat_c)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         _Node._init_params(self, *args, **kwargs)
 */
  }

  /* "nodes_def.pyx":516
 *         if self.ctx is NULL:
 *             raise MemoryError()
 *         _Node._init_params(self, *args, **kwargs)             # <<<<<<<<<<<<<<
 * 
 *         if easing is not None:
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_8pynodegl__Node), __pyx_n_s_init_params); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 516, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 516, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_5, 0, ((PyObject *)__pyx_v_self));
  __pyx_t_9 = PyNumber_Add(__pyx_t_5, __pyx_v_args); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 516, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_9, __pyx_v_kwargs); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 516, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "nodes_def.pyx":518
 *         _Node._init_params(self, *args, **kwargs)
 * 
 *         if easing is not None:             # <<<<<<<<<<<<<<
 *             self.set_easing(easing)
 *         if easing_args is not None:
 */
  __pyx_t_2 = (__pyx_v_easing != Py_None);
  __pyx_t_10 = (__pyx_t_2 != 0);
  if (__pyx_t_10) {

    /* "nodes_def.pyx":519
 * 
 *         if easing is not None:
 *             self.set_easing(easing)             # <<<<<<<<<<<<<<
 *         if easing_args is not None:
 *             self.add_easing_args(*easing_args)
 */
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_easing); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 519, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_3 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_9))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_9);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_9, function);
      }
    }
    __pyx_t_5 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_9, __pyx_t_3, __pyx_v_easing) : __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_v_easing);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 519, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "nodes_def.pyx":518
 *         _Node._init_params(self, *args, **kwargs)
 * 
 *         if easing is not None:             # <<<<<<<<<<<<<<
 *             self.set_easing(easing)
 *         if easing_args is not None:
 */
  }

  /* "nodes_def.pyx":520
 *         if easing is not None:
 *             self.set_easing(easing)
 *         if easing_args is not None:             # <<<<<<<<<<<<<<
 *             self.add_easing_args(*easing_args)
 *         if easing_start_offset is not None:
 */
  __pyx_t_10 = (__pyx_v_easing_args != Py_None);
  __pyx_t_2 = (__pyx_t_10 != 0);
  if (__pyx_t_2) {

    /* "nodes_def.pyx":521
 *             self.set_easing(easing)
 *         if easing_args is not None:
 *             self.add_easing_args(*easing_args)             # <<<<<<<<<<<<<<
 *         if easing_start_offset is not None:
 *             self.set_easing_start_offset(easing_start_offset)
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_add_easing_args); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 521, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_9 = __Pyx_PySequence_Tuple(__pyx_v_easing_args); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 521, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_9, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 521, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "nodes_def.pyx":520
 *         if easing is not None:
 *             self.set_easing(easing)
 *         if easing_args is not None:             # <<<<<<<<<<<<<<
 *             self.add_easing_args(*easing_args)
 *         if easing_start_offset is not None:
 */
  }

  /* "nodes_def.pyx":522
 *         if easing_args is not None:
 *             self.add_easing_args(*easing_args)
 *         if easing_start_offset is not None:             # <<<<<<<<<<<<<<
 *             self.set_easing_start_offset(easing_start_offset)
 *         if easing_end_offset is not None:
 */
  __pyx_t_2 = (__pyx_v_easing_start_offset != Py_None);
  __pyx_t_10 = (__pyx_t_2 != 0);
  if (__pyx_t_10) {

    /* "nodes_def.pyx":523
 *             self.add_easing_args(*easing_args)
 *         if easing_start_offset is not None:
 *             self.set_easing_start_offset(easing_start_offset)             # <<<<<<<<<<<<<<
 *         if easing_end_offset is not None:
 *             self.set_easing_end_offset(easing_end_offset)
 */
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_easing_start_offset); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 523, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_9))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_9);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_9, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_9, __pyx_t_5, __pyx_v_easing_start_offset) : __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_v_easing_start_offset);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 523, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "nodes_def.pyx":522
 *         if easing_args is not None:
 *             self.add_easing_args(*easing_args)
 *         if easing_start_offset is not None:             # <<<<<<<<<<<<<<
 *             self.set_easing_start_offset(easing_start_offset)
 *         if easing_end_offset is not None:
 */
  }

  /* "nodes_def.pyx":524
 *         if easing_start_offset is not None:
 *             self.set_easing_start_offset(easing_start_offset)
 *         if easing_end_offset is not None:             # <<<<<<<<<<<<<<
 *             self.set_easing_end_offset(easing_end_offset)
 * 
 */
  __pyx_t_10 = (__pyx_v_easing_end_offset != Py_None);
  __pyx_t_2 = (__pyx_t_10 != 0);
  if (__pyx_t_2) {

    /* "nodes_def.pyx":525
 *             self.set_easing_start_offset(easing_start_offset)
 *         if easing_end_offset is not None:
 *             self.set_easing_end_offset(easing_end_offset)             # <<<<<<<<<<<<<<
 * 
 *     def set_easing(self, const char * easing):
 */
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_easing_end_offset); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 525, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_9))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_9);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_9, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_9, __pyx_t_5, __pyx_v_easing_end_offset) : __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_v_easing_end_offset);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 525, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "nodes_def.pyx":524
 *         if easing_start_offset is not None:
 *             self.set_easing_start_offset(easing_start_offset)
 *         if easing_end_offset is not None:             # <<<<<<<<<<<<<<
 *             self.set_easing_end_offset(easing_end_offset)
 * 
 */
  }

  /* "nodes_def.pyx":503
 * cdef class AnimKeyFrameQuat(_Node):
 * 
 *     def __init__(self, double time, quat, easing=None, easing_args=None, easing_start_offset=None, easing_end_offset=None, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         cdef float[4] quat_c
 *         cdef int quat_i
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("pynodegl.AnimKeyFrameQuat.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":527
 *             self.set_easing_end_offset(easing_end_offset)
 * 
 *     def set_easing(self, const char * easing):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "easing", easing)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_16AnimKeyFrameQuat_3set_easing(PyObject *__pyx_v_self, PyObject *__pyx_arg_easing); /*proto*/
static PyObject *__pyx_pw_8pynodegl_16AnimKeyFrameQuat_3set_easing(PyObject *__pyx_v_self, PyObject *__pyx_arg_easing) {
  char const *__pyx_v_easing;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_easing (wrapper)", 0);
  assert(__pyx_arg_easing); {
    __pyx_v_easing = __Pyx_PyObject_AsString(__pyx_arg_easing); if (unlikely((!__pyx_v_easing) && PyErr_Occurred())) __PYX_ERR(0, 527, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pynodegl.AnimKeyFrameQuat.set_easing", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pynodegl_16AnimKeyFrameQuat_2set_easing(((struct __pyx_obj_8pynodegl_AnimKeyFrameQuat *)__pyx_v_self), ((char const *)__pyx_v_easing));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_16AnimKeyFrameQuat_2set_easing(struct __pyx_obj_8pynodegl_AnimKeyFrameQuat *__pyx_v_self, char const *__pyx_v_easing) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("set_easing", 0);

  /* "nodes_def.pyx":528
 * 
 *     def set_easing(self, const char * easing):
 *         return ngl_node_param_set(self.ctx, "easing", easing)             # <<<<<<<<<<<<<<
 * 
 *     def add_easing_args(self, *easing_args):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"easing"), __pyx_v_easing)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 528, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":527
 *             self.set_easing_end_offset(easing_end_offset)
 * 
 *     def set_easing(self, const char * easing):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "easing", easing)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.AnimKeyFrameQuat.set_easing", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":530
 *         return ngl_node_param_set(self.ctx, "easing", easing)
 * 
 *     def add_easing_args(self, *easing_args):             # <<<<<<<<<<<<<<
 *         return self._add_doublelist("easing_args", *easing_args)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_16AnimKeyFrameQuat_5add_easing_args(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_8pynodegl_16AnimKeyFrameQuat_5add_easing_args(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_easing_args = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_easing_args (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "add_easing_args", 0))) return NULL;
  __Pyx_INCREF(__pyx_args);
  __pyx_v_easing_args = __pyx_args;
  __pyx_r = __pyx_pf_8pynodegl_16AnimKeyFrameQuat_4add_easing_args(((struct __pyx_obj_8pynodegl_AnimKeyFrameQuat *)__pyx_v_self), __pyx_v_easing_args);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_easing_args);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_16AnimKeyFrameQuat_4add_easing_args(struct __pyx_obj_8pynodegl_AnimKeyFrameQuat *__pyx_v_self, PyObject *__pyx_v_easing_args) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("add_easing_args", 0);

  /* "nodes_def.pyx":531
 * 
 *     def add_easing_args(self, *easing_args):
 *         return self._add_doublelist("easing_args", *easing_args)             # <<<<<<<<<<<<<<
 * 
 *     def set_easing_start_offset(self, double easing_start_offset):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_add_doublelist); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 531, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyNumber_Add(__pyx_tuple__27, __pyx_v_easing_args); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 531, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 531, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":530
 *         return ngl_node_param_set(self.ctx, "easing", easing)
 * 
 *     def add_easing_args(self, *easing_args):             # <<<<<<<<<<<<<<
 *         return self._add_doublelist("easing_args", *easing_args)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pynodegl.AnimKeyFrameQuat.add_easing_args", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":533
 *         return self._add_doublelist("easing_args", *easing_args)
 * 
 *     def set_easing_start_offset(self, double easing_start_offset):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "easing_start_offset", easing_start_offset)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_16AnimKeyFrameQuat_7set_easing_start_offset(PyObject *__pyx_v_self, PyObject *__pyx_arg_easing_start_offset); /*proto*/
static PyObject *__pyx_pw_8pynodegl_16AnimKeyFrameQuat_7set_easing_start_offset(PyObject *__pyx_v_self, PyObject *__pyx_arg_easing_start_offset) {
  double __pyx_v_easing_start_offset;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_easing_start_offset (wrapper)", 0);
  assert(__pyx_arg_easing_start_offset); {
    __pyx_v_easing_start_offset = __pyx_PyFloat_AsDouble(__pyx_arg_easing_start_offset); if (unlikely((__pyx_v_easing_start_offset == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 533, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pynodegl.AnimKeyFrameQuat.set_easing_start_offset", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pynodegl_16AnimKeyFrameQuat_6set_easing_start_offset(((struct __pyx_obj_8pynodegl_AnimKeyFrameQuat *)__pyx_v_self), ((double)__pyx_v_easing_start_offset));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_16AnimKeyFrameQuat_6set_easing_start_offset(struct __pyx_obj_8pynodegl_AnimKeyFrameQuat *__pyx_v_self, double __pyx_v_easing_start_offset) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("set_easing_start_offset", 0);

  /* "nodes_def.pyx":534
 * 
 *     def set_easing_start_offset(self, double easing_start_offset):
 *         return ngl_node_param_set(self.ctx, "easing_start_offset", easing_start_offset)             # <<<<<<<<<<<<<<
 * 
 *     def set_easing_end_offset(self, double easing_end_offset):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"easing_start_offset"), __pyx_v_easing_start_offset)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 534, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":533
 *         return self._add_doublelist("easing_args", *easing_args)
 * 
 *     def set_easing_start_offset(self, double easing_start_offset):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "easing_start_offset", easing_start_offset)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.AnimKeyFrameQuat.set_easing_start_offset", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":536
 *         return ngl_node_param_set(self.ctx, "easing_start_offset", easing_start_offset)
 * 
 *     def set_easing_end_offset(self, double easing_end_offset):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "easing_end_offset", easing_end_offset)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_16AnimKeyFrameQuat_9set_easing_end_offset(PyObject *__pyx_v_self, PyObject *__pyx_arg_easing_end_offset); /*proto*/
static PyObject *__pyx_pw_8pynodegl_16AnimKeyFrameQuat_9set_easing_end_offset(PyObject *__pyx_v_self, PyObject *__pyx_arg_easing_end_offset) {
  double __pyx_v_easing_end_offset;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_easing_end_offset (wrapper)", 0);
  assert(__pyx_arg_easing_end_offset); {
    __pyx_v_easing_end_offset = __pyx_PyFloat_AsDouble(__pyx_arg_easing_end_offset); if (unlikely((__pyx_v_easing_end_offset == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 536, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pynodegl.AnimKeyFrameQuat.set_easing_end_offset", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pynodegl_16AnimKeyFrameQuat_8set_easing_end_offset(((struct __pyx_obj_8pynodegl_AnimKeyFrameQuat *)__pyx_v_self), ((double)__pyx_v_easing_end_offset));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_16AnimKeyFrameQuat_8set_easing_end_offset(struct __pyx_obj_8pynodegl_AnimKeyFrameQuat *__pyx_v_self, double __pyx_v_easing_end_offset) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("set_easing_end_offset", 0);

  /* "nodes_def.pyx":537
 * 
 *     def set_easing_end_offset(self, double easing_end_offset):
 *         return ngl_node_param_set(self.ctx, "easing_end_offset", easing_end_offset)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"easing_end_offset"), __pyx_v_easing_end_offset)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 537, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":536
 *         return ngl_node_param_set(self.ctx, "easing_start_offset", easing_start_offset)
 * 
 *     def set_easing_end_offset(self, double easing_end_offset):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "easing_end_offset", easing_end_offset)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.AnimKeyFrameQuat.set_easing_end_offset", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_16AnimKeyFrameQuat_11__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pynodegl_16AnimKeyFrameQuat_11__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_16AnimKeyFrameQuat_10__reduce_cython__(((struct __pyx_obj_8pynodegl_AnimKeyFrameQuat *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_16AnimKeyFrameQuat_10__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_AnimKeyFrameQuat *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__36, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.AnimKeyFrameQuat.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_16AnimKeyFrameQuat_13__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8pynodegl_16AnimKeyFrameQuat_13__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_16AnimKeyFrameQuat_12__setstate_cython__(((struct __pyx_obj_8pynodegl_AnimKeyFrameQuat *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_16AnimKeyFrameQuat_12__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_AnimKeyFrameQuat *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__37, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.AnimKeyFrameQuat.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":542
 * cdef class AnimKeyFrameBuffer(_Node):
 * 
 *     def __init__(self, double time, data=None, easing=None, easing_args=None, easing_start_offset=None, easing_end_offset=None, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_ANIMKEYFRAMEBUFFER, time)
 */

/* Python wrapper */
static int __pyx_pw_8pynodegl_18AnimKeyFrameBuffer_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pynodegl_18AnimKeyFrameBuffer_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_time;
  PyObject *__pyx_v_data = 0;
  PyObject *__pyx_v_easing = 0;
  PyObject *__pyx_v_easing_args = 0;
  PyObject *__pyx_v_easing_start_offset = 0;
  PyObject *__pyx_v_easing_end_offset = 0;
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  __pyx_v_kwargs = PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return -1;
  __Pyx_GOTREF(__pyx_v_kwargs);
  if (PyTuple_GET_SIZE(__pyx_args) > 6) {
    __pyx_v_args = PyTuple_GetSlice(__pyx_args, 6, PyTuple_GET_SIZE(__pyx_args));
    if (unlikely(!__pyx_v_args)) {
      __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
      __Pyx_RefNannyFinishContext();
      return -1;
    }
    __Pyx_GOTREF(__pyx_v_args);
  } else {
    __pyx_v_args = __pyx_empty_tuple; __Pyx_INCREF(__pyx_empty_tuple);
  }
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_time,&__pyx_n_s_data,&__pyx_n_s_easing,&__pyx_n_s_easing_args,&__pyx_n_s_easing_start_offset,&__pyx_n_s_easing_end_offset,0};
    PyObject* values[6] = {0,0,0,0,0,0};
    values[1] = ((PyObject *)Py_None);
    values[2] = ((PyObject *)Py_None);
    values[3] = ((PyObject *)Py_None);
    values[4] = ((PyObject *)Py_None);
    values[5] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        default:
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_time)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_data);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_easing);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_easing_args);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_easing_start_offset);
          if (value) { values[4] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_easing_end_offset);
          if (value) { values[5] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t used_pos_args = (pos_args < 6) ? pos_args : 6;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_kwargs, values, used_pos_args, "__init__") < 0)) __PYX_ERR(0, 542, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        default:
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        case  0:
        goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_time = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_time == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 542, __pyx_L3_error)
    __pyx_v_data = values[1];
    __pyx_v_easing = values[2];
    __pyx_v_easing_args = values[3];
    __pyx_v_easing_start_offset = values[4];
    __pyx_v_easing_end_offset = values[5];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 1, 6, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 542, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_args); __pyx_v_args = 0;
  __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
  __Pyx_AddTraceback("pynodegl.AnimKeyFrameBuffer.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pynodegl_18AnimKeyFrameBuffer___init__(((struct __pyx_obj_8pynodegl_AnimKeyFrameBuffer *)__pyx_v_self), __pyx_v_time, __pyx_v_data, __pyx_v_easing, __pyx_v_easing_args, __pyx_v_easing_start_offset, __pyx_v_easing_end_offset, __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pynodegl_18AnimKeyFrameBuffer___init__(struct __pyx_obj_8pynodegl_AnimKeyFrameBuffer *__pyx_v_self, double __pyx_v_time, PyObject *__pyx_v_data, PyObject *__pyx_v_easing, PyObject *__pyx_v_easing_args, PyObject *__pyx_v_easing_start_offset, PyObject *__pyx_v_easing_end_offset, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "nodes_def.pyx":543
 * 
 *     def __init__(self, double time, data=None, easing=None, easing_args=None, easing_start_offset=None, easing_end_offset=None, *args, **kwargs):
 *         assert self.ctx is NULL             # <<<<<<<<<<<<<<
 *         self.ctx = ngl_node_create(NGL_NODE_ANIMKEYFRAMEBUFFER, time)
 *         if self.ctx is NULL:
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!((__pyx_v_self->__pyx_base.ctx == NULL) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 543, __pyx_L1_error)
    }
  }
  #endif

  /* "nodes_def.pyx":544
 *     def __init__(self, double time, data=None, easing=None, easing_args=None, easing_start_offset=None, easing_end_offset=None, *args, **kwargs):
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_ANIMKEYFRAMEBUFFER, time)             # <<<<<<<<<<<<<<
 *         if self.ctx is NULL:
 *             raise MemoryError()
 */
  __pyx_v_self->__pyx_base.ctx = ngl_node_create(NGL_NODE_ANIMKEYFRAMEBUFFER, __pyx_v_time);

  /* "nodes_def.pyx":545
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_ANIMKEYFRAMEBUFFER, time)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         _Node._init_params(self, *args, **kwargs)
 */
  __pyx_t_1 = ((__pyx_v_self->__pyx_base.ctx == NULL) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "nodes_def.pyx":546
 *         self.ctx = ngl_node_create(NGL_NODE_ANIMKEYFRAMEBUFFER, time)
 *         if self.ctx is NULL:
 *             raise MemoryError()             # <<<<<<<<<<<<<<
 *         _Node._init_params(self, *args, **kwargs)
 * 
 */
    PyErr_NoMemory(); __PYX_ERR(0, 546, __pyx_L1_error)

    /* "nodes_def.pyx":545
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_ANIMKEYFRAMEBUFFER, time)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         _Node._init_params(self, *args, **kwargs)
 */
  }

  /* "nodes_def.pyx":547
 *         if self.ctx is NULL:
 *             raise MemoryError()
 *         _Node._init_params(self, *args, **kwargs)             # <<<<<<<<<<<<<<
 * 
 *         if data is not None:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_8pynodegl__Node), __pyx_n_s_init_params); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 547, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 547, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_v_self));
  __pyx_t_4 = PyNumber_Add(__pyx_t_3, __pyx_v_args); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 547, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, __pyx_v_kwargs); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 547, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "nodes_def.pyx":549
 *         _Node._init_params(self, *args, **kwargs)
 * 
 *         if data is not None:             # <<<<<<<<<<<<<<
 *             self.set_data(data)
 *         if easing is not None:
 */
  __pyx_t_1 = (__pyx_v_data != Py_None);
  __pyx_t_5 = (__pyx_t_1 != 0);
  if (__pyx_t_5) {

    /* "nodes_def.pyx":550
 * 
 *         if data is not None:
 *             self.set_data(data)             # <<<<<<<<<<<<<<
 *         if easing is not None:
 *             self.set_easing(easing)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_data); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 550, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_2, __pyx_v_data) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_data);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 550, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "nodes_def.pyx":549
 *         _Node._init_params(self, *args, **kwargs)
 * 
 *         if data is not None:             # <<<<<<<<<<<<<<
 *             self.set_data(data)
 *         if easing is not None:
 */
  }

  /* "nodes_def.pyx":551
 *         if data is not None:
 *             self.set_data(data)
 *         if easing is not None:             # <<<<<<<<<<<<<<
 *             self.set_easing(easing)
 *         if easing_args is not None:
 */
  __pyx_t_5 = (__pyx_v_easing != Py_None);
  __pyx_t_1 = (__pyx_t_5 != 0);
  if (__pyx_t_1) {

    /* "nodes_def.pyx":552
 *             self.set_data(data)
 *         if easing is not None:
 *             self.set_easing(easing)             # <<<<<<<<<<<<<<
 *         if easing_args is not None:
 *             self.add_easing_args(*easing_args)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_easing); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 552, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_2, __pyx_v_easing) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_easing);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 552, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "nodes_def.pyx":551
 *         if data is not None:
 *             self.set_data(data)
 *         if easing is not None:             # <<<<<<<<<<<<<<
 *             self.set_easing(easing)
 *         if easing_args is not None:
 */
  }

  /* "nodes_def.pyx":553
 *         if easing is not None:
 *             self.set_easing(easing)
 *         if easing_args is not None:             # <<<<<<<<<<<<<<
 *             self.add_easing_args(*easing_args)
 *         if easing_start_offset is not None:
 */
  __pyx_t_1 = (__pyx_v_easing_args != Py_None);
  __pyx_t_5 = (__pyx_t_1 != 0);
  if (__pyx_t_5) {

    /* "nodes_def.pyx":554
 *             self.set_easing(easing)
 *         if easing_args is not None:
 *             self.add_easing_args(*easing_args)             # <<<<<<<<<<<<<<
 *         if easing_start_offset is not None:
 *             self.set_easing_start_offset(easing_start_offset)
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_add_easing_args); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 554, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PySequence_Tuple(__pyx_v_easing_args); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 554, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 554, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "nodes_def.pyx":553
 *         if easing is not None:
 *             self.set_easing(easing)
 *         if easing_args is not None:             # <<<<<<<<<<<<<<
 *             self.add_easing_args(*easing_args)
 *         if easing_start_offset is not None:
 */
  }

  /* "nodes_def.pyx":555
 *         if easing_args is not None:
 *             self.add_easing_args(*easing_args)
 *         if easing_start_offset is not None:             # <<<<<<<<<<<<<<
 *             self.set_easing_start_offset(easing_start_offset)
 *         if easing_end_offset is not None:
 */
  __pyx_t_5 = (__pyx_v_easing_start_offset != Py_None);
  __pyx_t_1 = (__pyx_t_5 != 0);
  if (__pyx_t_1) {

    /* "nodes_def.pyx":556
 *             self.add_easing_args(*easing_args)
 *         if easing_start_offset is not None:
 *             self.set_easing_start_offset(easing_start_offset)             # <<<<<<<<<<<<<<
 *         if easing_end_offset is not None:
 *             self.set_easing_end_offset(easing_end_offset)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_easing_start_offset); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 556, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_2 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_3, __pyx_v_easing_start_offset) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_easing_start_offset);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 556, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "nodes_def.pyx":555
 *         if easing_args is not None:
 *             self.add_easing_args(*easing_args)
 *         if easing_start_offset is not None:             # <<<<<<<<<<<<<<
 *             self.set_easing_start_offset(easing_start_offset)
 *         if easing_end_offset is not None:
 */
  }

  /* "nodes_def.pyx":557
 *         if easing_start_offset is not None:
 *             self.set_easing_start_offset(easing_start_offset)
 *         if easing_end_offset is not None:             # <<<<<<<<<<<<<<
 *             self.set_easing_end_offset(easing_end_offset)
 * 
 */
  __pyx_t_1 = (__pyx_v_easing_end_offset != Py_None);
  __pyx_t_5 = (__pyx_t_1 != 0);
  if (__pyx_t_5) {

    /* "nodes_def.pyx":558
 *             self.set_easing_start_offset(easing_start_offset)
 *         if easing_end_offset is not None:
 *             self.set_easing_end_offset(easing_end_offset)             # <<<<<<<<<<<<<<
 * 
 *     def set_data(self, array.array data):
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_easing_end_offset); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 558, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_2 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_3, __pyx_v_easing_end_offset) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_easing_end_offset);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 558, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "nodes_def.pyx":557
 *         if easing_start_offset is not None:
 *             self.set_easing_start_offset(easing_start_offset)
 *         if easing_end_offset is not None:             # <<<<<<<<<<<<<<
 *             self.set_easing_end_offset(easing_end_offset)
 * 
 */
  }

  /* "nodes_def.pyx":542
 * cdef class AnimKeyFrameBuffer(_Node):
 * 
 *     def __init__(self, double time, data=None, easing=None, easing_args=None, easing_start_offset=None, easing_end_offset=None, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_ANIMKEYFRAMEBUFFER, time)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pynodegl.AnimKeyFrameBuffer.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":560
 *             self.set_easing_end_offset(easing_end_offset)
 * 
 *     def set_data(self, array.array data):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx,
 *                                   "data",
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_18AnimKeyFrameBuffer_3set_data(PyObject *__pyx_v_self, PyObject *__pyx_v_data); /*proto*/
static PyObject *__pyx_pw_8pynodegl_18AnimKeyFrameBuffer_3set_data(PyObject *__pyx_v_self, PyObject *__pyx_v_data) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_data (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_data), __pyx_ptype_7cpython_5array_array, 1, "data", 0))) __PYX_ERR(0, 560, __pyx_L1_error)
  __pyx_r = __pyx_pf_8pynodegl_18AnimKeyFrameBuffer_2set_data(((struct __pyx_obj_8pynodegl_AnimKeyFrameBuffer *)__pyx_v_self), ((arrayobject *)__pyx_v_data));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_18AnimKeyFrameBuffer_2set_data(struct __pyx_obj_8pynodegl_AnimKeyFrameBuffer *__pyx_v_self, arrayobject *__pyx_v_data) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  __Pyx_RefNannySetupContext("set_data", 0);

  /* "nodes_def.pyx":561
 * 
 *     def set_data(self, array.array data):
 *         return ngl_node_param_set(self.ctx,             # <<<<<<<<<<<<<<
 *                                   "data",
 *                                   <int>(data.buffer_info()[1] * data.itemsize),
 */
  __Pyx_XDECREF(__pyx_r);

  /* "nodes_def.pyx":563
 *         return ngl_node_param_set(self.ctx,
 *                                   "data",
 *                                   <int>(data.buffer_info()[1] * data.itemsize),             # <<<<<<<<<<<<<<
 *                                   <void *>(data.data.as_voidptr))
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_data), __pyx_n_s_buffer_info); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 563, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 563, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_1, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 563, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_data), __pyx_n_s_itemsize); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 563, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyNumber_Multiply(__pyx_t_2, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 563, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 563, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "nodes_def.pyx":561
 * 
 *     def set_data(self, array.array data):
 *         return ngl_node_param_set(self.ctx,             # <<<<<<<<<<<<<<
 *                                   "data",
 *                                   <int>(data.buffer_info()[1] * data.itemsize),
 */
  __pyx_t_3 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"data"), ((int)__pyx_t_4), ((void *)__pyx_v_data->data.as_voidptr))); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 561, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":560
 *             self.set_easing_end_offset(easing_end_offset)
 * 
 *     def set_data(self, array.array data):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx,
 *                                   "data",
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pynodegl.AnimKeyFrameBuffer.set_data", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":567
 * 
 * 
 *     def set_easing(self, const char * easing):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "easing", easing)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_18AnimKeyFrameBuffer_5set_easing(PyObject *__pyx_v_self, PyObject *__pyx_arg_easing); /*proto*/
static PyObject *__pyx_pw_8pynodegl_18AnimKeyFrameBuffer_5set_easing(PyObject *__pyx_v_self, PyObject *__pyx_arg_easing) {
  char const *__pyx_v_easing;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_easing (wrapper)", 0);
  assert(__pyx_arg_easing); {
    __pyx_v_easing = __Pyx_PyObject_AsString(__pyx_arg_easing); if (unlikely((!__pyx_v_easing) && PyErr_Occurred())) __PYX_ERR(0, 567, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pynodegl.AnimKeyFrameBuffer.set_easing", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pynodegl_18AnimKeyFrameBuffer_4set_easing(((struct __pyx_obj_8pynodegl_AnimKeyFrameBuffer *)__pyx_v_self), ((char const *)__pyx_v_easing));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_18AnimKeyFrameBuffer_4set_easing(struct __pyx_obj_8pynodegl_AnimKeyFrameBuffer *__pyx_v_self, char const *__pyx_v_easing) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("set_easing", 0);

  /* "nodes_def.pyx":568
 * 
 *     def set_easing(self, const char * easing):
 *         return ngl_node_param_set(self.ctx, "easing", easing)             # <<<<<<<<<<<<<<
 * 
 *     def add_easing_args(self, *easing_args):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"easing"), __pyx_v_easing)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 568, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":567
 * 
 * 
 *     def set_easing(self, const char * easing):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "easing", easing)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.AnimKeyFrameBuffer.set_easing", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":570
 *         return ngl_node_param_set(self.ctx, "easing", easing)
 * 
 *     def add_easing_args(self, *easing_args):             # <<<<<<<<<<<<<<
 *         return self._add_doublelist("easing_args", *easing_args)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_18AnimKeyFrameBuffer_7add_easing_args(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_8pynodegl_18AnimKeyFrameBuffer_7add_easing_args(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_easing_args = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_easing_args (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "add_easing_args", 0))) return NULL;
  __Pyx_INCREF(__pyx_args);
  __pyx_v_easing_args = __pyx_args;
  __pyx_r = __pyx_pf_8pynodegl_18AnimKeyFrameBuffer_6add_easing_args(((struct __pyx_obj_8pynodegl_AnimKeyFrameBuffer *)__pyx_v_self), __pyx_v_easing_args);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_easing_args);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_18AnimKeyFrameBuffer_6add_easing_args(struct __pyx_obj_8pynodegl_AnimKeyFrameBuffer *__pyx_v_self, PyObject *__pyx_v_easing_args) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("add_easing_args", 0);

  /* "nodes_def.pyx":571
 * 
 *     def add_easing_args(self, *easing_args):
 *         return self._add_doublelist("easing_args", *easing_args)             # <<<<<<<<<<<<<<
 * 
 *     def set_easing_start_offset(self, double easing_start_offset):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_add_doublelist); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 571, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyNumber_Add(__pyx_tuple__27, __pyx_v_easing_args); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 571, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 571, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":570
 *         return ngl_node_param_set(self.ctx, "easing", easing)
 * 
 *     def add_easing_args(self, *easing_args):             # <<<<<<<<<<<<<<
 *         return self._add_doublelist("easing_args", *easing_args)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pynodegl.AnimKeyFrameBuffer.add_easing_args", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":573
 *         return self._add_doublelist("easing_args", *easing_args)
 * 
 *     def set_easing_start_offset(self, double easing_start_offset):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "easing_start_offset", easing_start_offset)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_18AnimKeyFrameBuffer_9set_easing_start_offset(PyObject *__pyx_v_self, PyObject *__pyx_arg_easing_start_offset); /*proto*/
static PyObject *__pyx_pw_8pynodegl_18AnimKeyFrameBuffer_9set_easing_start_offset(PyObject *__pyx_v_self, PyObject *__pyx_arg_easing_start_offset) {
  double __pyx_v_easing_start_offset;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_easing_start_offset (wrapper)", 0);
  assert(__pyx_arg_easing_start_offset); {
    __pyx_v_easing_start_offset = __pyx_PyFloat_AsDouble(__pyx_arg_easing_start_offset); if (unlikely((__pyx_v_easing_start_offset == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 573, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pynodegl.AnimKeyFrameBuffer.set_easing_start_offset", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pynodegl_18AnimKeyFrameBuffer_8set_easing_start_offset(((struct __pyx_obj_8pynodegl_AnimKeyFrameBuffer *)__pyx_v_self), ((double)__pyx_v_easing_start_offset));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_18AnimKeyFrameBuffer_8set_easing_start_offset(struct __pyx_obj_8pynodegl_AnimKeyFrameBuffer *__pyx_v_self, double __pyx_v_easing_start_offset) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("set_easing_start_offset", 0);

  /* "nodes_def.pyx":574
 * 
 *     def set_easing_start_offset(self, double easing_start_offset):
 *         return ngl_node_param_set(self.ctx, "easing_start_offset", easing_start_offset)             # <<<<<<<<<<<<<<
 * 
 *     def set_easing_end_offset(self, double easing_end_offset):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"easing_start_offset"), __pyx_v_easing_start_offset)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 574, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":573
 *         return self._add_doublelist("easing_args", *easing_args)
 * 
 *     def set_easing_start_offset(self, double easing_start_offset):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "easing_start_offset", easing_start_offset)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.AnimKeyFrameBuffer.set_easing_start_offset", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":576
 *         return ngl_node_param_set(self.ctx, "easing_start_offset", easing_start_offset)
 * 
 *     def set_easing_end_offset(self, double easing_end_offset):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "easing_end_offset", easing_end_offset)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_18AnimKeyFrameBuffer_11set_easing_end_offset(PyObject *__pyx_v_self, PyObject *__pyx_arg_easing_end_offset); /*proto*/
static PyObject *__pyx_pw_8pynodegl_18AnimKeyFrameBuffer_11set_easing_end_offset(PyObject *__pyx_v_self, PyObject *__pyx_arg_easing_end_offset) {
  double __pyx_v_easing_end_offset;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_easing_end_offset (wrapper)", 0);
  assert(__pyx_arg_easing_end_offset); {
    __pyx_v_easing_end_offset = __pyx_PyFloat_AsDouble(__pyx_arg_easing_end_offset); if (unlikely((__pyx_v_easing_end_offset == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 576, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pynodegl.AnimKeyFrameBuffer.set_easing_end_offset", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pynodegl_18AnimKeyFrameBuffer_10set_easing_end_offset(((struct __pyx_obj_8pynodegl_AnimKeyFrameBuffer *)__pyx_v_self), ((double)__pyx_v_easing_end_offset));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_18AnimKeyFrameBuffer_10set_easing_end_offset(struct __pyx_obj_8pynodegl_AnimKeyFrameBuffer *__pyx_v_self, double __pyx_v_easing_end_offset) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("set_easing_end_offset", 0);

  /* "nodes_def.pyx":577
 * 
 *     def set_easing_end_offset(self, double easing_end_offset):
 *         return ngl_node_param_set(self.ctx, "easing_end_offset", easing_end_offset)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"easing_end_offset"), __pyx_v_easing_end_offset)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 577, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":576
 *         return ngl_node_param_set(self.ctx, "easing_start_offset", easing_start_offset)
 * 
 *     def set_easing_end_offset(self, double easing_end_offset):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "easing_end_offset", easing_end_offset)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.AnimKeyFrameBuffer.set_easing_end_offset", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_18AnimKeyFrameBuffer_13__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pynodegl_18AnimKeyFrameBuffer_13__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_18AnimKeyFrameBuffer_12__reduce_cython__(((struct __pyx_obj_8pynodegl_AnimKeyFrameBuffer *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_18AnimKeyFrameBuffer_12__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_AnimKeyFrameBuffer *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__38, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.AnimKeyFrameBuffer.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_18AnimKeyFrameBuffer_15__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8pynodegl_18AnimKeyFrameBuffer_15__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_18AnimKeyFrameBuffer_14__setstate_cython__(((struct __pyx_obj_8pynodegl_AnimKeyFrameBuffer *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_18AnimKeyFrameBuffer_14__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_AnimKeyFrameBuffer *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__39, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.AnimKeyFrameBuffer.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":582
 * cdef class Block(_Node):
 * 
 *     def __init__(self, fields=None, layout=None, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_BLOCK)
 */

/* Python wrapper */
static int __pyx_pw_8pynodegl_5Block_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pynodegl_5Block_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_fields = 0;
  PyObject *__pyx_v_layout = 0;
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  __pyx_v_kwargs = PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return -1;
  __Pyx_GOTREF(__pyx_v_kwargs);
  if (PyTuple_GET_SIZE(__pyx_args) > 2) {
    __pyx_v_args = PyTuple_GetSlice(__pyx_args, 2, PyTuple_GET_SIZE(__pyx_args));
    if (unlikely(!__pyx_v_args)) {
      __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
      __Pyx_RefNannyFinishContext();
      return -1;
    }
    __Pyx_GOTREF(__pyx_v_args);
  } else {
    __pyx_v_args = __pyx_empty_tuple; __Pyx_INCREF(__pyx_empty_tuple);
  }
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_fields,&__pyx_n_s_layout,0};
    PyObject* values[2] = {0,0};
    values[0] = ((PyObject *)Py_None);
    values[1] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        default:
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_fields);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_layout);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t used_pos_args = (pos_args < 2) ? pos_args : 2;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_kwargs, values, used_pos_args, "__init__") < 0)) __PYX_ERR(0, 582, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        default:
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
      }
    }
    __pyx_v_fields = values[0];
    __pyx_v_layout = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_args); __pyx_v_args = 0;
  __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
  __Pyx_AddTraceback("pynodegl.Block.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pynodegl_5Block___init__(((struct __pyx_obj_8pynodegl_Block *)__pyx_v_self), __pyx_v_fields, __pyx_v_layout, __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pynodegl_5Block___init__(struct __pyx_obj_8pynodegl_Block *__pyx_v_self, PyObject *__pyx_v_fields, PyObject *__pyx_v_layout, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "nodes_def.pyx":583
 * 
 *     def __init__(self, fields=None, layout=None, *args, **kwargs):
 *         assert self.ctx is NULL             # <<<<<<<<<<<<<<
 *         self.ctx = ngl_node_create(NGL_NODE_BLOCK)
 *         if self.ctx is NULL:
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!((__pyx_v_self->__pyx_base.ctx == NULL) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 583, __pyx_L1_error)
    }
  }
  #endif

  /* "nodes_def.pyx":584
 *     def __init__(self, fields=None, layout=None, *args, **kwargs):
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_BLOCK)             # <<<<<<<<<<<<<<
 *         if self.ctx is NULL:
 *             raise MemoryError()
 */
  __pyx_v_self->__pyx_base.ctx = ngl_node_create(NGL_NODE_BLOCK);

  /* "nodes_def.pyx":585
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_BLOCK)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         _Node._init_params(self, *args, **kwargs)
 */
  __pyx_t_1 = ((__pyx_v_self->__pyx_base.ctx == NULL) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "nodes_def.pyx":586
 *         self.ctx = ngl_node_create(NGL_NODE_BLOCK)
 *         if self.ctx is NULL:
 *             raise MemoryError()             # <<<<<<<<<<<<<<
 *         _Node._init_params(self, *args, **kwargs)
 * 
 */
    PyErr_NoMemory(); __PYX_ERR(0, 586, __pyx_L1_error)

    /* "nodes_def.pyx":585
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_BLOCK)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         _Node._init_params(self, *args, **kwargs)
 */
  }

  /* "nodes_def.pyx":587
 *         if self.ctx is NULL:
 *             raise MemoryError()
 *         _Node._init_params(self, *args, **kwargs)             # <<<<<<<<<<<<<<
 * 
 *         if fields is not None:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_8pynodegl__Node), __pyx_n_s_init_params); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 587, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 587, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_v_self));
  __pyx_t_4 = PyNumber_Add(__pyx_t_3, __pyx_v_args); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 587, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, __pyx_v_kwargs); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 587, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "nodes_def.pyx":589
 *         _Node._init_params(self, *args, **kwargs)
 * 
 *         if fields is not None:             # <<<<<<<<<<<<<<
 *             self.update_fields(fields)
 *         if layout is not None:
 */
  __pyx_t_1 = (__pyx_v_fields != Py_None);
  __pyx_t_5 = (__pyx_t_1 != 0);
  if (__pyx_t_5) {

    /* "nodes_def.pyx":590
 * 
 *         if fields is not None:
 *             self.update_fields(fields)             # <<<<<<<<<<<<<<
 *         if layout is not None:
 *             self.set_layout(layout)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_update_fields); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 590, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_2, __pyx_v_fields) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_fields);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 590, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "nodes_def.pyx":589
 *         _Node._init_params(self, *args, **kwargs)
 * 
 *         if fields is not None:             # <<<<<<<<<<<<<<
 *             self.update_fields(fields)
 *         if layout is not None:
 */
  }

  /* "nodes_def.pyx":591
 *         if fields is not None:
 *             self.update_fields(fields)
 *         if layout is not None:             # <<<<<<<<<<<<<<
 *             self.set_layout(layout)
 * 
 */
  __pyx_t_5 = (__pyx_v_layout != Py_None);
  __pyx_t_1 = (__pyx_t_5 != 0);
  if (__pyx_t_1) {

    /* "nodes_def.pyx":592
 *             self.update_fields(fields)
 *         if layout is not None:
 *             self.set_layout(layout)             # <<<<<<<<<<<<<<
 * 
 *     def update_fields(self, arg=None, **kwargs):
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_layout); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 592, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_2, __pyx_v_layout) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_layout);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 592, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "nodes_def.pyx":591
 *         if fields is not None:
 *             self.update_fields(fields)
 *         if layout is not None:             # <<<<<<<<<<<<<<
 *             self.set_layout(layout)
 * 
 */
  }

  /* "nodes_def.pyx":582
 * cdef class Block(_Node):
 * 
 *     def __init__(self, fields=None, layout=None, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_BLOCK)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pynodegl.Block.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":594
 *             self.set_layout(layout)
 * 
 *     def update_fields(self, arg=None, **kwargs):             # <<<<<<<<<<<<<<
 *         return self._update_dict("fields", arg, **kwargs)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_5Block_3update_fields(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_8pynodegl_5Block_3update_fields(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_arg = 0;
  PyObject *__pyx_v_kwargs = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("update_fields (wrapper)", 0);
  __pyx_v_kwargs = PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return NULL;
  __Pyx_GOTREF(__pyx_v_kwargs);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_arg,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_arg);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_kwargs, values, pos_args, "update_fields") < 0)) __PYX_ERR(0, 594, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_arg = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("update_fields", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 594, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
  __Pyx_AddTraceback("pynodegl.Block.update_fields", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pynodegl_5Block_2update_fields(((struct __pyx_obj_8pynodegl_Block *)__pyx_v_self), __pyx_v_arg, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_5Block_2update_fields(struct __pyx_obj_8pynodegl_Block *__pyx_v_self, PyObject *__pyx_v_arg, PyObject *__pyx_v_kwargs) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("update_fields", 0);

  /* "nodes_def.pyx":595
 * 
 *     def update_fields(self, arg=None, **kwargs):
 *         return self._update_dict("fields", arg, **kwargs)             # <<<<<<<<<<<<<<
 * 
 *     def set_layout(self, const char * layout):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_update_dict); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 595, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 595, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_u_fields);
  __Pyx_GIVEREF(__pyx_n_u_fields);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_n_u_fields);
  __Pyx_INCREF(__pyx_v_arg);
  __Pyx_GIVEREF(__pyx_v_arg);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_arg);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, __pyx_v_kwargs); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 595, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":594
 *             self.set_layout(layout)
 * 
 *     def update_fields(self, arg=None, **kwargs):             # <<<<<<<<<<<<<<
 *         return self._update_dict("fields", arg, **kwargs)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pynodegl.Block.update_fields", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":597
 *         return self._update_dict("fields", arg, **kwargs)
 * 
 *     def set_layout(self, const char * layout):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "layout", layout)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_5Block_5set_layout(PyObject *__pyx_v_self, PyObject *__pyx_arg_layout); /*proto*/
static PyObject *__pyx_pw_8pynodegl_5Block_5set_layout(PyObject *__pyx_v_self, PyObject *__pyx_arg_layout) {
  char const *__pyx_v_layout;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_layout (wrapper)", 0);
  assert(__pyx_arg_layout); {
    __pyx_v_layout = __Pyx_PyObject_AsString(__pyx_arg_layout); if (unlikely((!__pyx_v_layout) && PyErr_Occurred())) __PYX_ERR(0, 597, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pynodegl.Block.set_layout", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pynodegl_5Block_4set_layout(((struct __pyx_obj_8pynodegl_Block *)__pyx_v_self), ((char const *)__pyx_v_layout));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_5Block_4set_layout(struct __pyx_obj_8pynodegl_Block *__pyx_v_self, char const *__pyx_v_layout) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("set_layout", 0);

  /* "nodes_def.pyx":598
 * 
 *     def set_layout(self, const char * layout):
 *         return ngl_node_param_set(self.ctx, "layout", layout)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"layout"), __pyx_v_layout)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 598, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":597
 *         return self._update_dict("fields", arg, **kwargs)
 * 
 *     def set_layout(self, const char * layout):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "layout", layout)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.Block.set_layout", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_5Block_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pynodegl_5Block_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_5Block_6__reduce_cython__(((struct __pyx_obj_8pynodegl_Block *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_5Block_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_Block *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__40, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.Block.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_5Block_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8pynodegl_5Block_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_5Block_8__setstate_cython__(((struct __pyx_obj_8pynodegl_Block *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_5Block_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_Block *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__41, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.Block.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":603
 * cdef class _Buffer(_Node):
 * 
 *     def _init_params(self, count=None, data=None, filename=None, block=None, block_field=None, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         if count is not None:
 *             self.set_count(count)
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_7_Buffer_1_init_params(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_8pynodegl_7_Buffer_1_init_params(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_count = 0;
  PyObject *__pyx_v_data = 0;
  PyObject *__pyx_v_filename = 0;
  PyObject *__pyx_v_block = 0;
  PyObject *__pyx_v_block_field = 0;
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_init_params (wrapper)", 0);
  __pyx_v_kwargs = PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return NULL;
  __Pyx_GOTREF(__pyx_v_kwargs);
  if (PyTuple_GET_SIZE(__pyx_args) > 5) {
    __pyx_v_args = PyTuple_GetSlice(__pyx_args, 5, PyTuple_GET_SIZE(__pyx_args));
    if (unlikely(!__pyx_v_args)) {
      __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
      __Pyx_RefNannyFinishContext();
      return NULL;
    }
    __Pyx_GOTREF(__pyx_v_args);
  } else {
    __pyx_v_args = __pyx_empty_tuple; __Pyx_INCREF(__pyx_empty_tuple);
  }
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_count,&__pyx_n_s_data,&__pyx_n_s_filename,&__pyx_n_s_block,&__pyx_n_s_block_field,0};
    PyObject* values[5] = {0,0,0,0,0};
    values[0] = ((PyObject *)Py_None);
    values[1] = ((PyObject *)Py_None);
    values[2] = ((PyObject *)Py_None);
    values[3] = ((PyObject *)Py_None);
    values[4] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        default:
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_count);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_data);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_filename);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_block);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_block_field);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t used_pos_args = (pos_args < 5) ? pos_args : 5;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_kwargs, values, used_pos_args, "_init_params") < 0)) __PYX_ERR(0, 603, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        default:
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
      }
    }
    __pyx_v_count = values[0];
    __pyx_v_data = values[1];
    __pyx_v_filename = values[2];
    __pyx_v_block = values[3];
    __pyx_v_block_field = values[4];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_args); __pyx_v_args = 0;
  __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
  __Pyx_AddTraceback("pynodegl._Buffer._init_params", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pynodegl_7_Buffer__init_params(((struct __pyx_obj_8pynodegl__Buffer *)__pyx_v_self), __pyx_v_count, __pyx_v_data, __pyx_v_filename, __pyx_v_block, __pyx_v_block_field, __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_7_Buffer__init_params(struct __pyx_obj_8pynodegl__Buffer *__pyx_v_self, PyObject *__pyx_v_count, PyObject *__pyx_v_data, PyObject *__pyx_v_filename, PyObject *__pyx_v_block, PyObject *__pyx_v_block_field, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("_init_params", 0);

  /* "nodes_def.pyx":604
 * 
 *     def _init_params(self, count=None, data=None, filename=None, block=None, block_field=None, *args, **kwargs):
 *         if count is not None:             # <<<<<<<<<<<<<<
 *             self.set_count(count)
 *         if data is not None:
 */
  __pyx_t_1 = (__pyx_v_count != Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "nodes_def.pyx":605
 *     def _init_params(self, count=None, data=None, filename=None, block=None, block_field=None, *args, **kwargs):
 *         if count is not None:
 *             self.set_count(count)             # <<<<<<<<<<<<<<
 *         if data is not None:
 *             self.set_data(data)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_count); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 605, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_v_count) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_count);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 605, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "nodes_def.pyx":604
 * 
 *     def _init_params(self, count=None, data=None, filename=None, block=None, block_field=None, *args, **kwargs):
 *         if count is not None:             # <<<<<<<<<<<<<<
 *             self.set_count(count)
 *         if data is not None:
 */
  }

  /* "nodes_def.pyx":606
 *         if count is not None:
 *             self.set_count(count)
 *         if data is not None:             # <<<<<<<<<<<<<<
 *             self.set_data(data)
 *         if filename is not None:
 */
  __pyx_t_2 = (__pyx_v_data != Py_None);
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "nodes_def.pyx":607
 *             self.set_count(count)
 *         if data is not None:
 *             self.set_data(data)             # <<<<<<<<<<<<<<
 *         if filename is not None:
 *             self.set_filename(filename)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_data); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 607, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_v_data) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_data);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 607, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "nodes_def.pyx":606
 *         if count is not None:
 *             self.set_count(count)
 *         if data is not None:             # <<<<<<<<<<<<<<
 *             self.set_data(data)
 *         if filename is not None:
 */
  }

  /* "nodes_def.pyx":608
 *         if data is not None:
 *             self.set_data(data)
 *         if filename is not None:             # <<<<<<<<<<<<<<
 *             self.set_filename(filename)
 *         if block is not None:
 */
  __pyx_t_1 = (__pyx_v_filename != Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "nodes_def.pyx":609
 *             self.set_data(data)
 *         if filename is not None:
 *             self.set_filename(filename)             # <<<<<<<<<<<<<<
 *         if block is not None:
 *             self.set_block(block)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_filename); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 609, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_v_filename) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_filename);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 609, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "nodes_def.pyx":608
 *         if data is not None:
 *             self.set_data(data)
 *         if filename is not None:             # <<<<<<<<<<<<<<
 *             self.set_filename(filename)
 *         if block is not None:
 */
  }

  /* "nodes_def.pyx":610
 *         if filename is not None:
 *             self.set_filename(filename)
 *         if block is not None:             # <<<<<<<<<<<<<<
 *             self.set_block(block)
 *         if block_field is not None:
 */
  __pyx_t_2 = (__pyx_v_block != Py_None);
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "nodes_def.pyx":611
 *             self.set_filename(filename)
 *         if block is not None:
 *             self.set_block(block)             # <<<<<<<<<<<<<<
 *         if block_field is not None:
 *             self.set_block_field(block_field)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_block); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 611, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_v_block) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_block);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 611, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "nodes_def.pyx":610
 *         if filename is not None:
 *             self.set_filename(filename)
 *         if block is not None:             # <<<<<<<<<<<<<<
 *             self.set_block(block)
 *         if block_field is not None:
 */
  }

  /* "nodes_def.pyx":612
 *         if block is not None:
 *             self.set_block(block)
 *         if block_field is not None:             # <<<<<<<<<<<<<<
 *             self.set_block_field(block_field)
 *         _Node._init_params(self, *args, **kwargs)
 */
  __pyx_t_1 = (__pyx_v_block_field != Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "nodes_def.pyx":613
 *             self.set_block(block)
 *         if block_field is not None:
 *             self.set_block_field(block_field)             # <<<<<<<<<<<<<<
 *         _Node._init_params(self, *args, **kwargs)
 * 
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_block_field); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 613, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_v_block_field) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_block_field);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 613, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "nodes_def.pyx":612
 *         if block is not None:
 *             self.set_block(block)
 *         if block_field is not None:             # <<<<<<<<<<<<<<
 *             self.set_block_field(block_field)
 *         _Node._init_params(self, *args, **kwargs)
 */
  }

  /* "nodes_def.pyx":614
 *         if block_field is not None:
 *             self.set_block_field(block_field)
 *         _Node._init_params(self, *args, **kwargs)             # <<<<<<<<<<<<<<
 * 
 *     def set_count(self, int count):
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_8pynodegl__Node), __pyx_n_s_init_params); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 614, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 614, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_4, 0, ((PyObject *)__pyx_v_self));
  __pyx_t_5 = PyNumber_Add(__pyx_t_4, __pyx_v_args); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 614, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, __pyx_v_kwargs); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 614, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "nodes_def.pyx":603
 * cdef class _Buffer(_Node):
 * 
 *     def _init_params(self, count=None, data=None, filename=None, block=None, block_field=None, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         if count is not None:
 *             self.set_count(count)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pynodegl._Buffer._init_params", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":616
 *         _Node._init_params(self, *args, **kwargs)
 * 
 *     def set_count(self, int count):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "count", count)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_7_Buffer_3set_count(PyObject *__pyx_v_self, PyObject *__pyx_arg_count); /*proto*/
static PyObject *__pyx_pw_8pynodegl_7_Buffer_3set_count(PyObject *__pyx_v_self, PyObject *__pyx_arg_count) {
  int __pyx_v_count;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_count (wrapper)", 0);
  assert(__pyx_arg_count); {
    __pyx_v_count = __Pyx_PyInt_As_int(__pyx_arg_count); if (unlikely((__pyx_v_count == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 616, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pynodegl._Buffer.set_count", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pynodegl_7_Buffer_2set_count(((struct __pyx_obj_8pynodegl__Buffer *)__pyx_v_self), ((int)__pyx_v_count));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_7_Buffer_2set_count(struct __pyx_obj_8pynodegl__Buffer *__pyx_v_self, int __pyx_v_count) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("set_count", 0);

  /* "nodes_def.pyx":617
 * 
 *     def set_count(self, int count):
 *         return ngl_node_param_set(self.ctx, "count", count)             # <<<<<<<<<<<<<<
 * 
 *     def set_data(self, array.array data):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"count"), __pyx_v_count)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 617, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":616
 *         _Node._init_params(self, *args, **kwargs)
 * 
 *     def set_count(self, int count):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "count", count)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl._Buffer.set_count", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":619
 *         return ngl_node_param_set(self.ctx, "count", count)
 * 
 *     def set_data(self, array.array data):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx,
 *                                   "data",
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_7_Buffer_5set_data(PyObject *__pyx_v_self, PyObject *__pyx_v_data); /*proto*/
static PyObject *__pyx_pw_8pynodegl_7_Buffer_5set_data(PyObject *__pyx_v_self, PyObject *__pyx_v_data) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_data (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_data), __pyx_ptype_7cpython_5array_array, 1, "data", 0))) __PYX_ERR(0, 619, __pyx_L1_error)
  __pyx_r = __pyx_pf_8pynodegl_7_Buffer_4set_data(((struct __pyx_obj_8pynodegl__Buffer *)__pyx_v_self), ((arrayobject *)__pyx_v_data));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_7_Buffer_4set_data(struct __pyx_obj_8pynodegl__Buffer *__pyx_v_self, arrayobject *__pyx_v_data) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  __Pyx_RefNannySetupContext("set_data", 0);

  /* "nodes_def.pyx":620
 * 
 *     def set_data(self, array.array data):
 *         return ngl_node_param_set(self.ctx,             # <<<<<<<<<<<<<<
 *                                   "data",
 *                                   <int>(data.buffer_info()[1] * data.itemsize),
 */
  __Pyx_XDECREF(__pyx_r);

  /* "nodes_def.pyx":622
 *         return ngl_node_param_set(self.ctx,
 *                                   "data",
 *                                   <int>(data.buffer_info()[1] * data.itemsize),             # <<<<<<<<<<<<<<
 *                                   <void *>(data.data.as_voidptr))
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_data), __pyx_n_s_buffer_info); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 622, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 622, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_1, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 622, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_data), __pyx_n_s_itemsize); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 622, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyNumber_Multiply(__pyx_t_2, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 622, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 622, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "nodes_def.pyx":620
 * 
 *     def set_data(self, array.array data):
 *         return ngl_node_param_set(self.ctx,             # <<<<<<<<<<<<<<
 *                                   "data",
 *                                   <int>(data.buffer_info()[1] * data.itemsize),
 */
  __pyx_t_3 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"data"), ((int)__pyx_t_4), ((void *)__pyx_v_data->data.as_voidptr))); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 620, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":619
 *         return ngl_node_param_set(self.ctx, "count", count)
 * 
 *     def set_data(self, array.array data):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx,
 *                                   "data",
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pynodegl._Buffer.set_data", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":626
 * 
 * 
 *     def set_filename(self, const char * filename):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "filename", filename)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_7_Buffer_7set_filename(PyObject *__pyx_v_self, PyObject *__pyx_arg_filename); /*proto*/
static PyObject *__pyx_pw_8pynodegl_7_Buffer_7set_filename(PyObject *__pyx_v_self, PyObject *__pyx_arg_filename) {
  char const *__pyx_v_filename;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_filename (wrapper)", 0);
  assert(__pyx_arg_filename); {
    __pyx_v_filename = __Pyx_PyObject_AsString(__pyx_arg_filename); if (unlikely((!__pyx_v_filename) && PyErr_Occurred())) __PYX_ERR(0, 626, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pynodegl._Buffer.set_filename", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pynodegl_7_Buffer_6set_filename(((struct __pyx_obj_8pynodegl__Buffer *)__pyx_v_self), ((char const *)__pyx_v_filename));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_7_Buffer_6set_filename(struct __pyx_obj_8pynodegl__Buffer *__pyx_v_self, char const *__pyx_v_filename) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("set_filename", 0);

  /* "nodes_def.pyx":627
 * 
 *     def set_filename(self, const char * filename):
 *         return ngl_node_param_set(self.ctx, "filename", filename)             # <<<<<<<<<<<<<<
 * 
 *     def set_block(self, _Node block):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"filename"), __pyx_v_filename)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 627, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":626
 * 
 * 
 *     def set_filename(self, const char * filename):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "filename", filename)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl._Buffer.set_filename", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":629
 *         return ngl_node_param_set(self.ctx, "filename", filename)
 * 
 *     def set_block(self, _Node block):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "block", block.ctx)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_7_Buffer_9set_block(PyObject *__pyx_v_self, PyObject *__pyx_v_block); /*proto*/
static PyObject *__pyx_pw_8pynodegl_7_Buffer_9set_block(PyObject *__pyx_v_self, PyObject *__pyx_v_block) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_block (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_block), __pyx_ptype_8pynodegl__Node, 1, "block", 0))) __PYX_ERR(0, 629, __pyx_L1_error)
  __pyx_r = __pyx_pf_8pynodegl_7_Buffer_8set_block(((struct __pyx_obj_8pynodegl__Buffer *)__pyx_v_self), ((struct __pyx_obj_8pynodegl__Node *)__pyx_v_block));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_7_Buffer_8set_block(struct __pyx_obj_8pynodegl__Buffer *__pyx_v_self, struct __pyx_obj_8pynodegl__Node *__pyx_v_block) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("set_block", 0);

  /* "nodes_def.pyx":630
 * 
 *     def set_block(self, _Node block):
 *         return ngl_node_param_set(self.ctx, "block", block.ctx)             # <<<<<<<<<<<<<<
 * 
 *     def set_block_field(self, const char* block_field):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"block"), __pyx_v_block->ctx)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 630, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":629
 *         return ngl_node_param_set(self.ctx, "filename", filename)
 * 
 *     def set_block(self, _Node block):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "block", block.ctx)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl._Buffer.set_block", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":632
 *         return ngl_node_param_set(self.ctx, "block", block.ctx)
 * 
 *     def set_block_field(self, const char* block_field):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "block_field", block_field)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_7_Buffer_11set_block_field(PyObject *__pyx_v_self, PyObject *__pyx_arg_block_field); /*proto*/
static PyObject *__pyx_pw_8pynodegl_7_Buffer_11set_block_field(PyObject *__pyx_v_self, PyObject *__pyx_arg_block_field) {
  char const *__pyx_v_block_field;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_block_field (wrapper)", 0);
  assert(__pyx_arg_block_field); {
    __pyx_v_block_field = __Pyx_PyObject_AsString(__pyx_arg_block_field); if (unlikely((!__pyx_v_block_field) && PyErr_Occurred())) __PYX_ERR(0, 632, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pynodegl._Buffer.set_block_field", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pynodegl_7_Buffer_10set_block_field(((struct __pyx_obj_8pynodegl__Buffer *)__pyx_v_self), ((char const *)__pyx_v_block_field));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_7_Buffer_10set_block_field(struct __pyx_obj_8pynodegl__Buffer *__pyx_v_self, char const *__pyx_v_block_field) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("set_block_field", 0);

  /* "nodes_def.pyx":633
 * 
 *     def set_block_field(self, const char* block_field):
 *         return ngl_node_param_set(self.ctx, "block_field", block_field)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"block_field"), __pyx_v_block_field)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 633, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":632
 *         return ngl_node_param_set(self.ctx, "block", block.ctx)
 * 
 *     def set_block_field(self, const char* block_field):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "block_field", block_field)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl._Buffer.set_block_field", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_7_Buffer_13__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pynodegl_7_Buffer_13__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_7_Buffer_12__reduce_cython__(((struct __pyx_obj_8pynodegl__Buffer *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_7_Buffer_12__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl__Buffer *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__42, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl._Buffer.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_7_Buffer_15__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8pynodegl_7_Buffer_15__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_7_Buffer_14__setstate_cython__(((struct __pyx_obj_8pynodegl__Buffer *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_7_Buffer_14__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl__Buffer *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__43, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl._Buffer.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":638
 * cdef class BufferByte(_Buffer):
 * 
 *     def __init__(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERBYTE)
 */

/* Python wrapper */
static int __pyx_pw_8pynodegl_10BufferByte_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pynodegl_10BufferByte_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 1))) return -1;
  if (unlikely(__pyx_kwds)) {
    __pyx_v_kwargs = PyDict_Copy(__pyx_kwds); if (unlikely(!__pyx_v_kwargs)) return -1;
    __Pyx_GOTREF(__pyx_v_kwargs);
  } else {
    __pyx_v_kwargs = NULL;
  }
  __Pyx_INCREF(__pyx_args);
  __pyx_v_args = __pyx_args;
  __pyx_r = __pyx_pf_8pynodegl_10BufferByte___init__(((struct __pyx_obj_8pynodegl_BufferByte *)__pyx_v_self), __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pynodegl_10BufferByte___init__(struct __pyx_obj_8pynodegl_BufferByte *__pyx_v_self, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "nodes_def.pyx":639
 * 
 *     def __init__(self, *args, **kwargs):
 *         assert self.ctx is NULL             # <<<<<<<<<<<<<<
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERBYTE)
 *         if self.ctx is NULL:
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!((__pyx_v_self->__pyx_base.__pyx_base.ctx == NULL) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 639, __pyx_L1_error)
    }
  }
  #endif

  /* "nodes_def.pyx":640
 *     def __init__(self, *args, **kwargs):
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERBYTE)             # <<<<<<<<<<<<<<
 *         if self.ctx is NULL:
 *             raise MemoryError()
 */
  __pyx_v_self->__pyx_base.__pyx_base.ctx = ngl_node_create(NGL_NODE_BUFFERBYTE);

  /* "nodes_def.pyx":641
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERBYTE)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         self._init_params(*args, **kwargs)
 */
  __pyx_t_1 = ((__pyx_v_self->__pyx_base.__pyx_base.ctx == NULL) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "nodes_def.pyx":642
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERBYTE)
 *         if self.ctx is NULL:
 *             raise MemoryError()             # <<<<<<<<<<<<<<
 *         self._init_params(*args, **kwargs)
 * 
 */
    PyErr_NoMemory(); __PYX_ERR(0, 642, __pyx_L1_error)

    /* "nodes_def.pyx":641
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERBYTE)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         self._init_params(*args, **kwargs)
 */
  }

  /* "nodes_def.pyx":643
 *         if self.ctx is NULL:
 *             raise MemoryError()
 *         self._init_params(*args, **kwargs)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_init_params); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 643, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_v_args, __pyx_v_kwargs); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 643, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "nodes_def.pyx":638
 * cdef class BufferByte(_Buffer):
 * 
 *     def __init__(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERBYTE)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pynodegl.BufferByte.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_10BufferByte_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pynodegl_10BufferByte_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_10BufferByte_2__reduce_cython__(((struct __pyx_obj_8pynodegl_BufferByte *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_10BufferByte_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_BufferByte *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__44, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.BufferByte.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_10BufferByte_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8pynodegl_10BufferByte_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_10BufferByte_4__setstate_cython__(((struct __pyx_obj_8pynodegl_BufferByte *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_10BufferByte_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_BufferByte *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__45, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.BufferByte.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":648
 * cdef class BufferBVec2(_Buffer):
 * 
 *     def __init__(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERBVEC2)
 */

/* Python wrapper */
static int __pyx_pw_8pynodegl_11BufferBVec2_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pynodegl_11BufferBVec2_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 1))) return -1;
  if (unlikely(__pyx_kwds)) {
    __pyx_v_kwargs = PyDict_Copy(__pyx_kwds); if (unlikely(!__pyx_v_kwargs)) return -1;
    __Pyx_GOTREF(__pyx_v_kwargs);
  } else {
    __pyx_v_kwargs = NULL;
  }
  __Pyx_INCREF(__pyx_args);
  __pyx_v_args = __pyx_args;
  __pyx_r = __pyx_pf_8pynodegl_11BufferBVec2___init__(((struct __pyx_obj_8pynodegl_BufferBVec2 *)__pyx_v_self), __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pynodegl_11BufferBVec2___init__(struct __pyx_obj_8pynodegl_BufferBVec2 *__pyx_v_self, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "nodes_def.pyx":649
 * 
 *     def __init__(self, *args, **kwargs):
 *         assert self.ctx is NULL             # <<<<<<<<<<<<<<
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERBVEC2)
 *         if self.ctx is NULL:
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!((__pyx_v_self->__pyx_base.__pyx_base.ctx == NULL) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 649, __pyx_L1_error)
    }
  }
  #endif

  /* "nodes_def.pyx":650
 *     def __init__(self, *args, **kwargs):
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERBVEC2)             # <<<<<<<<<<<<<<
 *         if self.ctx is NULL:
 *             raise MemoryError()
 */
  __pyx_v_self->__pyx_base.__pyx_base.ctx = ngl_node_create(NGL_NODE_BUFFERBVEC2);

  /* "nodes_def.pyx":651
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERBVEC2)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         self._init_params(*args, **kwargs)
 */
  __pyx_t_1 = ((__pyx_v_self->__pyx_base.__pyx_base.ctx == NULL) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "nodes_def.pyx":652
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERBVEC2)
 *         if self.ctx is NULL:
 *             raise MemoryError()             # <<<<<<<<<<<<<<
 *         self._init_params(*args, **kwargs)
 * 
 */
    PyErr_NoMemory(); __PYX_ERR(0, 652, __pyx_L1_error)

    /* "nodes_def.pyx":651
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERBVEC2)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         self._init_params(*args, **kwargs)
 */
  }

  /* "nodes_def.pyx":653
 *         if self.ctx is NULL:
 *             raise MemoryError()
 *         self._init_params(*args, **kwargs)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_init_params); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 653, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_v_args, __pyx_v_kwargs); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 653, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "nodes_def.pyx":648
 * cdef class BufferBVec2(_Buffer):
 * 
 *     def __init__(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERBVEC2)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pynodegl.BufferBVec2.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_11BufferBVec2_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pynodegl_11BufferBVec2_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_11BufferBVec2_2__reduce_cython__(((struct __pyx_obj_8pynodegl_BufferBVec2 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_11BufferBVec2_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_BufferBVec2 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__46, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.BufferBVec2.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_11BufferBVec2_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8pynodegl_11BufferBVec2_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_11BufferBVec2_4__setstate_cython__(((struct __pyx_obj_8pynodegl_BufferBVec2 *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_11BufferBVec2_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_BufferBVec2 *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__47, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.BufferBVec2.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":658
 * cdef class BufferBVec3(_Buffer):
 * 
 *     def __init__(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERBVEC3)
 */

/* Python wrapper */
static int __pyx_pw_8pynodegl_11BufferBVec3_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pynodegl_11BufferBVec3_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 1))) return -1;
  if (unlikely(__pyx_kwds)) {
    __pyx_v_kwargs = PyDict_Copy(__pyx_kwds); if (unlikely(!__pyx_v_kwargs)) return -1;
    __Pyx_GOTREF(__pyx_v_kwargs);
  } else {
    __pyx_v_kwargs = NULL;
  }
  __Pyx_INCREF(__pyx_args);
  __pyx_v_args = __pyx_args;
  __pyx_r = __pyx_pf_8pynodegl_11BufferBVec3___init__(((struct __pyx_obj_8pynodegl_BufferBVec3 *)__pyx_v_self), __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pynodegl_11BufferBVec3___init__(struct __pyx_obj_8pynodegl_BufferBVec3 *__pyx_v_self, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "nodes_def.pyx":659
 * 
 *     def __init__(self, *args, **kwargs):
 *         assert self.ctx is NULL             # <<<<<<<<<<<<<<
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERBVEC3)
 *         if self.ctx is NULL:
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!((__pyx_v_self->__pyx_base.__pyx_base.ctx == NULL) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 659, __pyx_L1_error)
    }
  }
  #endif

  /* "nodes_def.pyx":660
 *     def __init__(self, *args, **kwargs):
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERBVEC3)             # <<<<<<<<<<<<<<
 *         if self.ctx is NULL:
 *             raise MemoryError()
 */
  __pyx_v_self->__pyx_base.__pyx_base.ctx = ngl_node_create(NGL_NODE_BUFFERBVEC3);

  /* "nodes_def.pyx":661
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERBVEC3)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         self._init_params(*args, **kwargs)
 */
  __pyx_t_1 = ((__pyx_v_self->__pyx_base.__pyx_base.ctx == NULL) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "nodes_def.pyx":662
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERBVEC3)
 *         if self.ctx is NULL:
 *             raise MemoryError()             # <<<<<<<<<<<<<<
 *         self._init_params(*args, **kwargs)
 * 
 */
    PyErr_NoMemory(); __PYX_ERR(0, 662, __pyx_L1_error)

    /* "nodes_def.pyx":661
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERBVEC3)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         self._init_params(*args, **kwargs)
 */
  }

  /* "nodes_def.pyx":663
 *         if self.ctx is NULL:
 *             raise MemoryError()
 *         self._init_params(*args, **kwargs)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_init_params); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 663, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_v_args, __pyx_v_kwargs); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 663, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "nodes_def.pyx":658
 * cdef class BufferBVec3(_Buffer):
 * 
 *     def __init__(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERBVEC3)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pynodegl.BufferBVec3.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_11BufferBVec3_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pynodegl_11BufferBVec3_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_11BufferBVec3_2__reduce_cython__(((struct __pyx_obj_8pynodegl_BufferBVec3 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_11BufferBVec3_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_BufferBVec3 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__48, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.BufferBVec3.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_11BufferBVec3_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8pynodegl_11BufferBVec3_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_11BufferBVec3_4__setstate_cython__(((struct __pyx_obj_8pynodegl_BufferBVec3 *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_11BufferBVec3_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_BufferBVec3 *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__49, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.BufferBVec3.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":668
 * cdef class BufferBVec4(_Buffer):
 * 
 *     def __init__(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERBVEC4)
 */

/* Python wrapper */
static int __pyx_pw_8pynodegl_11BufferBVec4_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pynodegl_11BufferBVec4_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 1))) return -1;
  if (unlikely(__pyx_kwds)) {
    __pyx_v_kwargs = PyDict_Copy(__pyx_kwds); if (unlikely(!__pyx_v_kwargs)) return -1;
    __Pyx_GOTREF(__pyx_v_kwargs);
  } else {
    __pyx_v_kwargs = NULL;
  }
  __Pyx_INCREF(__pyx_args);
  __pyx_v_args = __pyx_args;
  __pyx_r = __pyx_pf_8pynodegl_11BufferBVec4___init__(((struct __pyx_obj_8pynodegl_BufferBVec4 *)__pyx_v_self), __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pynodegl_11BufferBVec4___init__(struct __pyx_obj_8pynodegl_BufferBVec4 *__pyx_v_self, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "nodes_def.pyx":669
 * 
 *     def __init__(self, *args, **kwargs):
 *         assert self.ctx is NULL             # <<<<<<<<<<<<<<
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERBVEC4)
 *         if self.ctx is NULL:
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!((__pyx_v_self->__pyx_base.__pyx_base.ctx == NULL) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 669, __pyx_L1_error)
    }
  }
  #endif

  /* "nodes_def.pyx":670
 *     def __init__(self, *args, **kwargs):
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERBVEC4)             # <<<<<<<<<<<<<<
 *         if self.ctx is NULL:
 *             raise MemoryError()
 */
  __pyx_v_self->__pyx_base.__pyx_base.ctx = ngl_node_create(NGL_NODE_BUFFERBVEC4);

  /* "nodes_def.pyx":671
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERBVEC4)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         self._init_params(*args, **kwargs)
 */
  __pyx_t_1 = ((__pyx_v_self->__pyx_base.__pyx_base.ctx == NULL) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "nodes_def.pyx":672
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERBVEC4)
 *         if self.ctx is NULL:
 *             raise MemoryError()             # <<<<<<<<<<<<<<
 *         self._init_params(*args, **kwargs)
 * 
 */
    PyErr_NoMemory(); __PYX_ERR(0, 672, __pyx_L1_error)

    /* "nodes_def.pyx":671
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERBVEC4)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         self._init_params(*args, **kwargs)
 */
  }

  /* "nodes_def.pyx":673
 *         if self.ctx is NULL:
 *             raise MemoryError()
 *         self._init_params(*args, **kwargs)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_init_params); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 673, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_v_args, __pyx_v_kwargs); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 673, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "nodes_def.pyx":668
 * cdef class BufferBVec4(_Buffer):
 * 
 *     def __init__(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERBVEC4)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pynodegl.BufferBVec4.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_11BufferBVec4_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pynodegl_11BufferBVec4_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_11BufferBVec4_2__reduce_cython__(((struct __pyx_obj_8pynodegl_BufferBVec4 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_11BufferBVec4_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_BufferBVec4 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__50, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.BufferBVec4.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_11BufferBVec4_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8pynodegl_11BufferBVec4_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_11BufferBVec4_4__setstate_cython__(((struct __pyx_obj_8pynodegl_BufferBVec4 *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_11BufferBVec4_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_BufferBVec4 *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__51, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.BufferBVec4.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":678
 * cdef class BufferInt(_Buffer):
 * 
 *     def __init__(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERINT)
 */

/* Python wrapper */
static int __pyx_pw_8pynodegl_9BufferInt_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pynodegl_9BufferInt_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 1))) return -1;
  if (unlikely(__pyx_kwds)) {
    __pyx_v_kwargs = PyDict_Copy(__pyx_kwds); if (unlikely(!__pyx_v_kwargs)) return -1;
    __Pyx_GOTREF(__pyx_v_kwargs);
  } else {
    __pyx_v_kwargs = NULL;
  }
  __Pyx_INCREF(__pyx_args);
  __pyx_v_args = __pyx_args;
  __pyx_r = __pyx_pf_8pynodegl_9BufferInt___init__(((struct __pyx_obj_8pynodegl_BufferInt *)__pyx_v_self), __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pynodegl_9BufferInt___init__(struct __pyx_obj_8pynodegl_BufferInt *__pyx_v_self, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "nodes_def.pyx":679
 * 
 *     def __init__(self, *args, **kwargs):
 *         assert self.ctx is NULL             # <<<<<<<<<<<<<<
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERINT)
 *         if self.ctx is NULL:
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!((__pyx_v_self->__pyx_base.__pyx_base.ctx == NULL) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 679, __pyx_L1_error)
    }
  }
  #endif

  /* "nodes_def.pyx":680
 *     def __init__(self, *args, **kwargs):
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERINT)             # <<<<<<<<<<<<<<
 *         if self.ctx is NULL:
 *             raise MemoryError()
 */
  __pyx_v_self->__pyx_base.__pyx_base.ctx = ngl_node_create(NGL_NODE_BUFFERINT);

  /* "nodes_def.pyx":681
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERINT)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         self._init_params(*args, **kwargs)
 */
  __pyx_t_1 = ((__pyx_v_self->__pyx_base.__pyx_base.ctx == NULL) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "nodes_def.pyx":682
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERINT)
 *         if self.ctx is NULL:
 *             raise MemoryError()             # <<<<<<<<<<<<<<
 *         self._init_params(*args, **kwargs)
 * 
 */
    PyErr_NoMemory(); __PYX_ERR(0, 682, __pyx_L1_error)

    /* "nodes_def.pyx":681
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERINT)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         self._init_params(*args, **kwargs)
 */
  }

  /* "nodes_def.pyx":683
 *         if self.ctx is NULL:
 *             raise MemoryError()
 *         self._init_params(*args, **kwargs)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_init_params); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 683, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_v_args, __pyx_v_kwargs); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 683, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "nodes_def.pyx":678
 * cdef class BufferInt(_Buffer):
 * 
 *     def __init__(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERINT)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pynodegl.BufferInt.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_9BufferInt_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pynodegl_9BufferInt_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_9BufferInt_2__reduce_cython__(((struct __pyx_obj_8pynodegl_BufferInt *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_9BufferInt_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_BufferInt *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__52, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.BufferInt.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_9BufferInt_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8pynodegl_9BufferInt_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_9BufferInt_4__setstate_cython__(((struct __pyx_obj_8pynodegl_BufferInt *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_9BufferInt_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_BufferInt *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__53, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.BufferInt.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":688
 * cdef class BufferInt64(_Buffer):
 * 
 *     def __init__(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERINT64)
 */

/* Python wrapper */
static int __pyx_pw_8pynodegl_11BufferInt64_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pynodegl_11BufferInt64_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 1))) return -1;
  if (unlikely(__pyx_kwds)) {
    __pyx_v_kwargs = PyDict_Copy(__pyx_kwds); if (unlikely(!__pyx_v_kwargs)) return -1;
    __Pyx_GOTREF(__pyx_v_kwargs);
  } else {
    __pyx_v_kwargs = NULL;
  }
  __Pyx_INCREF(__pyx_args);
  __pyx_v_args = __pyx_args;
  __pyx_r = __pyx_pf_8pynodegl_11BufferInt64___init__(((struct __pyx_obj_8pynodegl_BufferInt64 *)__pyx_v_self), __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pynodegl_11BufferInt64___init__(struct __pyx_obj_8pynodegl_BufferInt64 *__pyx_v_self, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "nodes_def.pyx":689
 * 
 *     def __init__(self, *args, **kwargs):
 *         assert self.ctx is NULL             # <<<<<<<<<<<<<<
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERINT64)
 *         if self.ctx is NULL:
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!((__pyx_v_self->__pyx_base.__pyx_base.ctx == NULL) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 689, __pyx_L1_error)
    }
  }
  #endif

  /* "nodes_def.pyx":690
 *     def __init__(self, *args, **kwargs):
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERINT64)             # <<<<<<<<<<<<<<
 *         if self.ctx is NULL:
 *             raise MemoryError()
 */
  __pyx_v_self->__pyx_base.__pyx_base.ctx = ngl_node_create(NGL_NODE_BUFFERINT64);

  /* "nodes_def.pyx":691
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERINT64)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         self._init_params(*args, **kwargs)
 */
  __pyx_t_1 = ((__pyx_v_self->__pyx_base.__pyx_base.ctx == NULL) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "nodes_def.pyx":692
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERINT64)
 *         if self.ctx is NULL:
 *             raise MemoryError()             # <<<<<<<<<<<<<<
 *         self._init_params(*args, **kwargs)
 * 
 */
    PyErr_NoMemory(); __PYX_ERR(0, 692, __pyx_L1_error)

    /* "nodes_def.pyx":691
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERINT64)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         self._init_params(*args, **kwargs)
 */
  }

  /* "nodes_def.pyx":693
 *         if self.ctx is NULL:
 *             raise MemoryError()
 *         self._init_params(*args, **kwargs)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_init_params); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 693, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_v_args, __pyx_v_kwargs); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 693, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "nodes_def.pyx":688
 * cdef class BufferInt64(_Buffer):
 * 
 *     def __init__(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERINT64)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pynodegl.BufferInt64.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_11BufferInt64_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pynodegl_11BufferInt64_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_11BufferInt64_2__reduce_cython__(((struct __pyx_obj_8pynodegl_BufferInt64 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_11BufferInt64_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_BufferInt64 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__54, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.BufferInt64.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_11BufferInt64_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8pynodegl_11BufferInt64_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_11BufferInt64_4__setstate_cython__(((struct __pyx_obj_8pynodegl_BufferInt64 *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_11BufferInt64_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_BufferInt64 *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__55, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.BufferInt64.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":698
 * cdef class BufferIVec2(_Buffer):
 * 
 *     def __init__(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERIVEC2)
 */

/* Python wrapper */
static int __pyx_pw_8pynodegl_11BufferIVec2_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pynodegl_11BufferIVec2_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 1))) return -1;
  if (unlikely(__pyx_kwds)) {
    __pyx_v_kwargs = PyDict_Copy(__pyx_kwds); if (unlikely(!__pyx_v_kwargs)) return -1;
    __Pyx_GOTREF(__pyx_v_kwargs);
  } else {
    __pyx_v_kwargs = NULL;
  }
  __Pyx_INCREF(__pyx_args);
  __pyx_v_args = __pyx_args;
  __pyx_r = __pyx_pf_8pynodegl_11BufferIVec2___init__(((struct __pyx_obj_8pynodegl_BufferIVec2 *)__pyx_v_self), __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pynodegl_11BufferIVec2___init__(struct __pyx_obj_8pynodegl_BufferIVec2 *__pyx_v_self, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "nodes_def.pyx":699
 * 
 *     def __init__(self, *args, **kwargs):
 *         assert self.ctx is NULL             # <<<<<<<<<<<<<<
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERIVEC2)
 *         if self.ctx is NULL:
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!((__pyx_v_self->__pyx_base.__pyx_base.ctx == NULL) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 699, __pyx_L1_error)
    }
  }
  #endif

  /* "nodes_def.pyx":700
 *     def __init__(self, *args, **kwargs):
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERIVEC2)             # <<<<<<<<<<<<<<
 *         if self.ctx is NULL:
 *             raise MemoryError()
 */
  __pyx_v_self->__pyx_base.__pyx_base.ctx = ngl_node_create(NGL_NODE_BUFFERIVEC2);

  /* "nodes_def.pyx":701
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERIVEC2)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         self._init_params(*args, **kwargs)
 */
  __pyx_t_1 = ((__pyx_v_self->__pyx_base.__pyx_base.ctx == NULL) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "nodes_def.pyx":702
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERIVEC2)
 *         if self.ctx is NULL:
 *             raise MemoryError()             # <<<<<<<<<<<<<<
 *         self._init_params(*args, **kwargs)
 * 
 */
    PyErr_NoMemory(); __PYX_ERR(0, 702, __pyx_L1_error)

    /* "nodes_def.pyx":701
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERIVEC2)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         self._init_params(*args, **kwargs)
 */
  }

  /* "nodes_def.pyx":703
 *         if self.ctx is NULL:
 *             raise MemoryError()
 *         self._init_params(*args, **kwargs)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_init_params); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 703, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_v_args, __pyx_v_kwargs); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 703, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "nodes_def.pyx":698
 * cdef class BufferIVec2(_Buffer):
 * 
 *     def __init__(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERIVEC2)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pynodegl.BufferIVec2.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_11BufferIVec2_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pynodegl_11BufferIVec2_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_11BufferIVec2_2__reduce_cython__(((struct __pyx_obj_8pynodegl_BufferIVec2 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_11BufferIVec2_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_BufferIVec2 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__56, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.BufferIVec2.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_11BufferIVec2_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8pynodegl_11BufferIVec2_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_11BufferIVec2_4__setstate_cython__(((struct __pyx_obj_8pynodegl_BufferIVec2 *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_11BufferIVec2_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_BufferIVec2 *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__57, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.BufferIVec2.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":708
 * cdef class BufferIVec3(_Buffer):
 * 
 *     def __init__(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERIVEC3)
 */

/* Python wrapper */
static int __pyx_pw_8pynodegl_11BufferIVec3_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pynodegl_11BufferIVec3_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 1))) return -1;
  if (unlikely(__pyx_kwds)) {
    __pyx_v_kwargs = PyDict_Copy(__pyx_kwds); if (unlikely(!__pyx_v_kwargs)) return -1;
    __Pyx_GOTREF(__pyx_v_kwargs);
  } else {
    __pyx_v_kwargs = NULL;
  }
  __Pyx_INCREF(__pyx_args);
  __pyx_v_args = __pyx_args;
  __pyx_r = __pyx_pf_8pynodegl_11BufferIVec3___init__(((struct __pyx_obj_8pynodegl_BufferIVec3 *)__pyx_v_self), __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pynodegl_11BufferIVec3___init__(struct __pyx_obj_8pynodegl_BufferIVec3 *__pyx_v_self, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "nodes_def.pyx":709
 * 
 *     def __init__(self, *args, **kwargs):
 *         assert self.ctx is NULL             # <<<<<<<<<<<<<<
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERIVEC3)
 *         if self.ctx is NULL:
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!((__pyx_v_self->__pyx_base.__pyx_base.ctx == NULL) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 709, __pyx_L1_error)
    }
  }
  #endif

  /* "nodes_def.pyx":710
 *     def __init__(self, *args, **kwargs):
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERIVEC3)             # <<<<<<<<<<<<<<
 *         if self.ctx is NULL:
 *             raise MemoryError()
 */
  __pyx_v_self->__pyx_base.__pyx_base.ctx = ngl_node_create(NGL_NODE_BUFFERIVEC3);

  /* "nodes_def.pyx":711
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERIVEC3)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         self._init_params(*args, **kwargs)
 */
  __pyx_t_1 = ((__pyx_v_self->__pyx_base.__pyx_base.ctx == NULL) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "nodes_def.pyx":712
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERIVEC3)
 *         if self.ctx is NULL:
 *             raise MemoryError()             # <<<<<<<<<<<<<<
 *         self._init_params(*args, **kwargs)
 * 
 */
    PyErr_NoMemory(); __PYX_ERR(0, 712, __pyx_L1_error)

    /* "nodes_def.pyx":711
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERIVEC3)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         self._init_params(*args, **kwargs)
 */
  }

  /* "nodes_def.pyx":713
 *         if self.ctx is NULL:
 *             raise MemoryError()
 *         self._init_params(*args, **kwargs)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_init_params); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 713, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_v_args, __pyx_v_kwargs); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 713, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "nodes_def.pyx":708
 * cdef class BufferIVec3(_Buffer):
 * 
 *     def __init__(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERIVEC3)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pynodegl.BufferIVec3.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_11BufferIVec3_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pynodegl_11BufferIVec3_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_11BufferIVec3_2__reduce_cython__(((struct __pyx_obj_8pynodegl_BufferIVec3 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_11BufferIVec3_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_BufferIVec3 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__58, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.BufferIVec3.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_11BufferIVec3_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8pynodegl_11BufferIVec3_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_11BufferIVec3_4__setstate_cython__(((struct __pyx_obj_8pynodegl_BufferIVec3 *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_11BufferIVec3_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_BufferIVec3 *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__59, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.BufferIVec3.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":718
 * cdef class BufferIVec4(_Buffer):
 * 
 *     def __init__(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERIVEC4)
 */

/* Python wrapper */
static int __pyx_pw_8pynodegl_11BufferIVec4_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pynodegl_11BufferIVec4_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 1))) return -1;
  if (unlikely(__pyx_kwds)) {
    __pyx_v_kwargs = PyDict_Copy(__pyx_kwds); if (unlikely(!__pyx_v_kwargs)) return -1;
    __Pyx_GOTREF(__pyx_v_kwargs);
  } else {
    __pyx_v_kwargs = NULL;
  }
  __Pyx_INCREF(__pyx_args);
  __pyx_v_args = __pyx_args;
  __pyx_r = __pyx_pf_8pynodegl_11BufferIVec4___init__(((struct __pyx_obj_8pynodegl_BufferIVec4 *)__pyx_v_self), __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pynodegl_11BufferIVec4___init__(struct __pyx_obj_8pynodegl_BufferIVec4 *__pyx_v_self, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "nodes_def.pyx":719
 * 
 *     def __init__(self, *args, **kwargs):
 *         assert self.ctx is NULL             # <<<<<<<<<<<<<<
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERIVEC4)
 *         if self.ctx is NULL:
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!((__pyx_v_self->__pyx_base.__pyx_base.ctx == NULL) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 719, __pyx_L1_error)
    }
  }
  #endif

  /* "nodes_def.pyx":720
 *     def __init__(self, *args, **kwargs):
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERIVEC4)             # <<<<<<<<<<<<<<
 *         if self.ctx is NULL:
 *             raise MemoryError()
 */
  __pyx_v_self->__pyx_base.__pyx_base.ctx = ngl_node_create(NGL_NODE_BUFFERIVEC4);

  /* "nodes_def.pyx":721
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERIVEC4)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         self._init_params(*args, **kwargs)
 */
  __pyx_t_1 = ((__pyx_v_self->__pyx_base.__pyx_base.ctx == NULL) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "nodes_def.pyx":722
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERIVEC4)
 *         if self.ctx is NULL:
 *             raise MemoryError()             # <<<<<<<<<<<<<<
 *         self._init_params(*args, **kwargs)
 * 
 */
    PyErr_NoMemory(); __PYX_ERR(0, 722, __pyx_L1_error)

    /* "nodes_def.pyx":721
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERIVEC4)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         self._init_params(*args, **kwargs)
 */
  }

  /* "nodes_def.pyx":723
 *         if self.ctx is NULL:
 *             raise MemoryError()
 *         self._init_params(*args, **kwargs)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_init_params); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 723, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_v_args, __pyx_v_kwargs); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 723, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "nodes_def.pyx":718
 * cdef class BufferIVec4(_Buffer):
 * 
 *     def __init__(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERIVEC4)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pynodegl.BufferIVec4.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_11BufferIVec4_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pynodegl_11BufferIVec4_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_11BufferIVec4_2__reduce_cython__(((struct __pyx_obj_8pynodegl_BufferIVec4 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_11BufferIVec4_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_BufferIVec4 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__60, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.BufferIVec4.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_11BufferIVec4_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8pynodegl_11BufferIVec4_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_11BufferIVec4_4__setstate_cython__(((struct __pyx_obj_8pynodegl_BufferIVec4 *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_11BufferIVec4_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_BufferIVec4 *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__61, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.BufferIVec4.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":728
 * cdef class BufferShort(_Buffer):
 * 
 *     def __init__(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERSHORT)
 */

/* Python wrapper */
static int __pyx_pw_8pynodegl_11BufferShort_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pynodegl_11BufferShort_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 1))) return -1;
  if (unlikely(__pyx_kwds)) {
    __pyx_v_kwargs = PyDict_Copy(__pyx_kwds); if (unlikely(!__pyx_v_kwargs)) return -1;
    __Pyx_GOTREF(__pyx_v_kwargs);
  } else {
    __pyx_v_kwargs = NULL;
  }
  __Pyx_INCREF(__pyx_args);
  __pyx_v_args = __pyx_args;
  __pyx_r = __pyx_pf_8pynodegl_11BufferShort___init__(((struct __pyx_obj_8pynodegl_BufferShort *)__pyx_v_self), __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pynodegl_11BufferShort___init__(struct __pyx_obj_8pynodegl_BufferShort *__pyx_v_self, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "nodes_def.pyx":729
 * 
 *     def __init__(self, *args, **kwargs):
 *         assert self.ctx is NULL             # <<<<<<<<<<<<<<
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERSHORT)
 *         if self.ctx is NULL:
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!((__pyx_v_self->__pyx_base.__pyx_base.ctx == NULL) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 729, __pyx_L1_error)
    }
  }
  #endif

  /* "nodes_def.pyx":730
 *     def __init__(self, *args, **kwargs):
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERSHORT)             # <<<<<<<<<<<<<<
 *         if self.ctx is NULL:
 *             raise MemoryError()
 */
  __pyx_v_self->__pyx_base.__pyx_base.ctx = ngl_node_create(NGL_NODE_BUFFERSHORT);

  /* "nodes_def.pyx":731
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERSHORT)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         self._init_params(*args, **kwargs)
 */
  __pyx_t_1 = ((__pyx_v_self->__pyx_base.__pyx_base.ctx == NULL) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "nodes_def.pyx":732
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERSHORT)
 *         if self.ctx is NULL:
 *             raise MemoryError()             # <<<<<<<<<<<<<<
 *         self._init_params(*args, **kwargs)
 * 
 */
    PyErr_NoMemory(); __PYX_ERR(0, 732, __pyx_L1_error)

    /* "nodes_def.pyx":731
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERSHORT)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         self._init_params(*args, **kwargs)
 */
  }

  /* "nodes_def.pyx":733
 *         if self.ctx is NULL:
 *             raise MemoryError()
 *         self._init_params(*args, **kwargs)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_init_params); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 733, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_v_args, __pyx_v_kwargs); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 733, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "nodes_def.pyx":728
 * cdef class BufferShort(_Buffer):
 * 
 *     def __init__(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERSHORT)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pynodegl.BufferShort.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_11BufferShort_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pynodegl_11BufferShort_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_11BufferShort_2__reduce_cython__(((struct __pyx_obj_8pynodegl_BufferShort *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_11BufferShort_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_BufferShort *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__62, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.BufferShort.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_11BufferShort_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8pynodegl_11BufferShort_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_11BufferShort_4__setstate_cython__(((struct __pyx_obj_8pynodegl_BufferShort *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_11BufferShort_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_BufferShort *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__63, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.BufferShort.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":738
 * cdef class BufferSVec2(_Buffer):
 * 
 *     def __init__(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERSVEC2)
 */

/* Python wrapper */
static int __pyx_pw_8pynodegl_11BufferSVec2_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pynodegl_11BufferSVec2_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 1))) return -1;
  if (unlikely(__pyx_kwds)) {
    __pyx_v_kwargs = PyDict_Copy(__pyx_kwds); if (unlikely(!__pyx_v_kwargs)) return -1;
    __Pyx_GOTREF(__pyx_v_kwargs);
  } else {
    __pyx_v_kwargs = NULL;
  }
  __Pyx_INCREF(__pyx_args);
  __pyx_v_args = __pyx_args;
  __pyx_r = __pyx_pf_8pynodegl_11BufferSVec2___init__(((struct __pyx_obj_8pynodegl_BufferSVec2 *)__pyx_v_self), __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pynodegl_11BufferSVec2___init__(struct __pyx_obj_8pynodegl_BufferSVec2 *__pyx_v_self, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "nodes_def.pyx":739
 * 
 *     def __init__(self, *args, **kwargs):
 *         assert self.ctx is NULL             # <<<<<<<<<<<<<<
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERSVEC2)
 *         if self.ctx is NULL:
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!((__pyx_v_self->__pyx_base.__pyx_base.ctx == NULL) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 739, __pyx_L1_error)
    }
  }
  #endif

  /* "nodes_def.pyx":740
 *     def __init__(self, *args, **kwargs):
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERSVEC2)             # <<<<<<<<<<<<<<
 *         if self.ctx is NULL:
 *             raise MemoryError()
 */
  __pyx_v_self->__pyx_base.__pyx_base.ctx = ngl_node_create(NGL_NODE_BUFFERSVEC2);

  /* "nodes_def.pyx":741
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERSVEC2)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         self._init_params(*args, **kwargs)
 */
  __pyx_t_1 = ((__pyx_v_self->__pyx_base.__pyx_base.ctx == NULL) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "nodes_def.pyx":742
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERSVEC2)
 *         if self.ctx is NULL:
 *             raise MemoryError()             # <<<<<<<<<<<<<<
 *         self._init_params(*args, **kwargs)
 * 
 */
    PyErr_NoMemory(); __PYX_ERR(0, 742, __pyx_L1_error)

    /* "nodes_def.pyx":741
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERSVEC2)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         self._init_params(*args, **kwargs)
 */
  }

  /* "nodes_def.pyx":743
 *         if self.ctx is NULL:
 *             raise MemoryError()
 *         self._init_params(*args, **kwargs)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_init_params); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 743, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_v_args, __pyx_v_kwargs); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 743, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "nodes_def.pyx":738
 * cdef class BufferSVec2(_Buffer):
 * 
 *     def __init__(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERSVEC2)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pynodegl.BufferSVec2.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_11BufferSVec2_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pynodegl_11BufferSVec2_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_11BufferSVec2_2__reduce_cython__(((struct __pyx_obj_8pynodegl_BufferSVec2 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_11BufferSVec2_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_BufferSVec2 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__64, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.BufferSVec2.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_11BufferSVec2_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8pynodegl_11BufferSVec2_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_11BufferSVec2_4__setstate_cython__(((struct __pyx_obj_8pynodegl_BufferSVec2 *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_11BufferSVec2_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_BufferSVec2 *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__65, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.BufferSVec2.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":748
 * cdef class BufferSVec3(_Buffer):
 * 
 *     def __init__(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERSVEC3)
 */

/* Python wrapper */
static int __pyx_pw_8pynodegl_11BufferSVec3_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pynodegl_11BufferSVec3_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 1))) return -1;
  if (unlikely(__pyx_kwds)) {
    __pyx_v_kwargs = PyDict_Copy(__pyx_kwds); if (unlikely(!__pyx_v_kwargs)) return -1;
    __Pyx_GOTREF(__pyx_v_kwargs);
  } else {
    __pyx_v_kwargs = NULL;
  }
  __Pyx_INCREF(__pyx_args);
  __pyx_v_args = __pyx_args;
  __pyx_r = __pyx_pf_8pynodegl_11BufferSVec3___init__(((struct __pyx_obj_8pynodegl_BufferSVec3 *)__pyx_v_self), __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pynodegl_11BufferSVec3___init__(struct __pyx_obj_8pynodegl_BufferSVec3 *__pyx_v_self, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "nodes_def.pyx":749
 * 
 *     def __init__(self, *args, **kwargs):
 *         assert self.ctx is NULL             # <<<<<<<<<<<<<<
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERSVEC3)
 *         if self.ctx is NULL:
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!((__pyx_v_self->__pyx_base.__pyx_base.ctx == NULL) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 749, __pyx_L1_error)
    }
  }
  #endif

  /* "nodes_def.pyx":750
 *     def __init__(self, *args, **kwargs):
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERSVEC3)             # <<<<<<<<<<<<<<
 *         if self.ctx is NULL:
 *             raise MemoryError()
 */
  __pyx_v_self->__pyx_base.__pyx_base.ctx = ngl_node_create(NGL_NODE_BUFFERSVEC3);

  /* "nodes_def.pyx":751
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERSVEC3)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         self._init_params(*args, **kwargs)
 */
  __pyx_t_1 = ((__pyx_v_self->__pyx_base.__pyx_base.ctx == NULL) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "nodes_def.pyx":752
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERSVEC3)
 *         if self.ctx is NULL:
 *             raise MemoryError()             # <<<<<<<<<<<<<<
 *         self._init_params(*args, **kwargs)
 * 
 */
    PyErr_NoMemory(); __PYX_ERR(0, 752, __pyx_L1_error)

    /* "nodes_def.pyx":751
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERSVEC3)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         self._init_params(*args, **kwargs)
 */
  }

  /* "nodes_def.pyx":753
 *         if self.ctx is NULL:
 *             raise MemoryError()
 *         self._init_params(*args, **kwargs)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_init_params); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 753, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_v_args, __pyx_v_kwargs); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 753, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "nodes_def.pyx":748
 * cdef class BufferSVec3(_Buffer):
 * 
 *     def __init__(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERSVEC3)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pynodegl.BufferSVec3.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_11BufferSVec3_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pynodegl_11BufferSVec3_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_11BufferSVec3_2__reduce_cython__(((struct __pyx_obj_8pynodegl_BufferSVec3 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_11BufferSVec3_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_BufferSVec3 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__66, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.BufferSVec3.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_11BufferSVec3_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8pynodegl_11BufferSVec3_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_11BufferSVec3_4__setstate_cython__(((struct __pyx_obj_8pynodegl_BufferSVec3 *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_11BufferSVec3_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_BufferSVec3 *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__67, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.BufferSVec3.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":758
 * cdef class BufferSVec4(_Buffer):
 * 
 *     def __init__(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERSVEC4)
 */

/* Python wrapper */
static int __pyx_pw_8pynodegl_11BufferSVec4_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pynodegl_11BufferSVec4_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 1))) return -1;
  if (unlikely(__pyx_kwds)) {
    __pyx_v_kwargs = PyDict_Copy(__pyx_kwds); if (unlikely(!__pyx_v_kwargs)) return -1;
    __Pyx_GOTREF(__pyx_v_kwargs);
  } else {
    __pyx_v_kwargs = NULL;
  }
  __Pyx_INCREF(__pyx_args);
  __pyx_v_args = __pyx_args;
  __pyx_r = __pyx_pf_8pynodegl_11BufferSVec4___init__(((struct __pyx_obj_8pynodegl_BufferSVec4 *)__pyx_v_self), __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pynodegl_11BufferSVec4___init__(struct __pyx_obj_8pynodegl_BufferSVec4 *__pyx_v_self, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "nodes_def.pyx":759
 * 
 *     def __init__(self, *args, **kwargs):
 *         assert self.ctx is NULL             # <<<<<<<<<<<<<<
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERSVEC4)
 *         if self.ctx is NULL:
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!((__pyx_v_self->__pyx_base.__pyx_base.ctx == NULL) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 759, __pyx_L1_error)
    }
  }
  #endif

  /* "nodes_def.pyx":760
 *     def __init__(self, *args, **kwargs):
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERSVEC4)             # <<<<<<<<<<<<<<
 *         if self.ctx is NULL:
 *             raise MemoryError()
 */
  __pyx_v_self->__pyx_base.__pyx_base.ctx = ngl_node_create(NGL_NODE_BUFFERSVEC4);

  /* "nodes_def.pyx":761
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERSVEC4)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         self._init_params(*args, **kwargs)
 */
  __pyx_t_1 = ((__pyx_v_self->__pyx_base.__pyx_base.ctx == NULL) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "nodes_def.pyx":762
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERSVEC4)
 *         if self.ctx is NULL:
 *             raise MemoryError()             # <<<<<<<<<<<<<<
 *         self._init_params(*args, **kwargs)
 * 
 */
    PyErr_NoMemory(); __PYX_ERR(0, 762, __pyx_L1_error)

    /* "nodes_def.pyx":761
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERSVEC4)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         self._init_params(*args, **kwargs)
 */
  }

  /* "nodes_def.pyx":763
 *         if self.ctx is NULL:
 *             raise MemoryError()
 *         self._init_params(*args, **kwargs)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_init_params); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 763, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_v_args, __pyx_v_kwargs); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 763, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "nodes_def.pyx":758
 * cdef class BufferSVec4(_Buffer):
 * 
 *     def __init__(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERSVEC4)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pynodegl.BufferSVec4.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_11BufferSVec4_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pynodegl_11BufferSVec4_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_11BufferSVec4_2__reduce_cython__(((struct __pyx_obj_8pynodegl_BufferSVec4 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_11BufferSVec4_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_BufferSVec4 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__68, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.BufferSVec4.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_11BufferSVec4_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8pynodegl_11BufferSVec4_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_11BufferSVec4_4__setstate_cython__(((struct __pyx_obj_8pynodegl_BufferSVec4 *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_11BufferSVec4_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_BufferSVec4 *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__69, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.BufferSVec4.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":768
 * cdef class BufferUByte(_Buffer):
 * 
 *     def __init__(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERUBYTE)
 */

/* Python wrapper */
static int __pyx_pw_8pynodegl_11BufferUByte_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pynodegl_11BufferUByte_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 1))) return -1;
  if (unlikely(__pyx_kwds)) {
    __pyx_v_kwargs = PyDict_Copy(__pyx_kwds); if (unlikely(!__pyx_v_kwargs)) return -1;
    __Pyx_GOTREF(__pyx_v_kwargs);
  } else {
    __pyx_v_kwargs = NULL;
  }
  __Pyx_INCREF(__pyx_args);
  __pyx_v_args = __pyx_args;
  __pyx_r = __pyx_pf_8pynodegl_11BufferUByte___init__(((struct __pyx_obj_8pynodegl_BufferUByte *)__pyx_v_self), __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pynodegl_11BufferUByte___init__(struct __pyx_obj_8pynodegl_BufferUByte *__pyx_v_self, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "nodes_def.pyx":769
 * 
 *     def __init__(self, *args, **kwargs):
 *         assert self.ctx is NULL             # <<<<<<<<<<<<<<
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERUBYTE)
 *         if self.ctx is NULL:
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!((__pyx_v_self->__pyx_base.__pyx_base.ctx == NULL) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 769, __pyx_L1_error)
    }
  }
  #endif

  /* "nodes_def.pyx":770
 *     def __init__(self, *args, **kwargs):
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERUBYTE)             # <<<<<<<<<<<<<<
 *         if self.ctx is NULL:
 *             raise MemoryError()
 */
  __pyx_v_self->__pyx_base.__pyx_base.ctx = ngl_node_create(NGL_NODE_BUFFERUBYTE);

  /* "nodes_def.pyx":771
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERUBYTE)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         self._init_params(*args, **kwargs)
 */
  __pyx_t_1 = ((__pyx_v_self->__pyx_base.__pyx_base.ctx == NULL) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "nodes_def.pyx":772
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERUBYTE)
 *         if self.ctx is NULL:
 *             raise MemoryError()             # <<<<<<<<<<<<<<
 *         self._init_params(*args, **kwargs)
 * 
 */
    PyErr_NoMemory(); __PYX_ERR(0, 772, __pyx_L1_error)

    /* "nodes_def.pyx":771
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERUBYTE)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         self._init_params(*args, **kwargs)
 */
  }

  /* "nodes_def.pyx":773
 *         if self.ctx is NULL:
 *             raise MemoryError()
 *         self._init_params(*args, **kwargs)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_init_params); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 773, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_v_args, __pyx_v_kwargs); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 773, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "nodes_def.pyx":768
 * cdef class BufferUByte(_Buffer):
 * 
 *     def __init__(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERUBYTE)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pynodegl.BufferUByte.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_11BufferUByte_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pynodegl_11BufferUByte_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_11BufferUByte_2__reduce_cython__(((struct __pyx_obj_8pynodegl_BufferUByte *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_11BufferUByte_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_BufferUByte *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__70, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.BufferUByte.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_11BufferUByte_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8pynodegl_11BufferUByte_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_11BufferUByte_4__setstate_cython__(((struct __pyx_obj_8pynodegl_BufferUByte *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_11BufferUByte_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_BufferUByte *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__71, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.BufferUByte.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":778
 * cdef class BufferUBVec2(_Buffer):
 * 
 *     def __init__(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERUBVEC2)
 */

/* Python wrapper */
static int __pyx_pw_8pynodegl_12BufferUBVec2_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pynodegl_12BufferUBVec2_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 1))) return -1;
  if (unlikely(__pyx_kwds)) {
    __pyx_v_kwargs = PyDict_Copy(__pyx_kwds); if (unlikely(!__pyx_v_kwargs)) return -1;
    __Pyx_GOTREF(__pyx_v_kwargs);
  } else {
    __pyx_v_kwargs = NULL;
  }
  __Pyx_INCREF(__pyx_args);
  __pyx_v_args = __pyx_args;
  __pyx_r = __pyx_pf_8pynodegl_12BufferUBVec2___init__(((struct __pyx_obj_8pynodegl_BufferUBVec2 *)__pyx_v_self), __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pynodegl_12BufferUBVec2___init__(struct __pyx_obj_8pynodegl_BufferUBVec2 *__pyx_v_self, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "nodes_def.pyx":779
 * 
 *     def __init__(self, *args, **kwargs):
 *         assert self.ctx is NULL             # <<<<<<<<<<<<<<
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERUBVEC2)
 *         if self.ctx is NULL:
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!((__pyx_v_self->__pyx_base.__pyx_base.ctx == NULL) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 779, __pyx_L1_error)
    }
  }
  #endif

  /* "nodes_def.pyx":780
 *     def __init__(self, *args, **kwargs):
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERUBVEC2)             # <<<<<<<<<<<<<<
 *         if self.ctx is NULL:
 *             raise MemoryError()
 */
  __pyx_v_self->__pyx_base.__pyx_base.ctx = ngl_node_create(NGL_NODE_BUFFERUBVEC2);

  /* "nodes_def.pyx":781
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERUBVEC2)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         self._init_params(*args, **kwargs)
 */
  __pyx_t_1 = ((__pyx_v_self->__pyx_base.__pyx_base.ctx == NULL) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "nodes_def.pyx":782
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERUBVEC2)
 *         if self.ctx is NULL:
 *             raise MemoryError()             # <<<<<<<<<<<<<<
 *         self._init_params(*args, **kwargs)
 * 
 */
    PyErr_NoMemory(); __PYX_ERR(0, 782, __pyx_L1_error)

    /* "nodes_def.pyx":781
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERUBVEC2)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         self._init_params(*args, **kwargs)
 */
  }

  /* "nodes_def.pyx":783
 *         if self.ctx is NULL:
 *             raise MemoryError()
 *         self._init_params(*args, **kwargs)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_init_params); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 783, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_v_args, __pyx_v_kwargs); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 783, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "nodes_def.pyx":778
 * cdef class BufferUBVec2(_Buffer):
 * 
 *     def __init__(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERUBVEC2)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pynodegl.BufferUBVec2.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_12BufferUBVec2_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pynodegl_12BufferUBVec2_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_12BufferUBVec2_2__reduce_cython__(((struct __pyx_obj_8pynodegl_BufferUBVec2 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_12BufferUBVec2_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_BufferUBVec2 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__72, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.BufferUBVec2.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_12BufferUBVec2_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8pynodegl_12BufferUBVec2_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_12BufferUBVec2_4__setstate_cython__(((struct __pyx_obj_8pynodegl_BufferUBVec2 *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_12BufferUBVec2_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_BufferUBVec2 *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__73, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.BufferUBVec2.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":788
 * cdef class BufferUBVec3(_Buffer):
 * 
 *     def __init__(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERUBVEC3)
 */

/* Python wrapper */
static int __pyx_pw_8pynodegl_12BufferUBVec3_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pynodegl_12BufferUBVec3_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 1))) return -1;
  if (unlikely(__pyx_kwds)) {
    __pyx_v_kwargs = PyDict_Copy(__pyx_kwds); if (unlikely(!__pyx_v_kwargs)) return -1;
    __Pyx_GOTREF(__pyx_v_kwargs);
  } else {
    __pyx_v_kwargs = NULL;
  }
  __Pyx_INCREF(__pyx_args);
  __pyx_v_args = __pyx_args;
  __pyx_r = __pyx_pf_8pynodegl_12BufferUBVec3___init__(((struct __pyx_obj_8pynodegl_BufferUBVec3 *)__pyx_v_self), __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pynodegl_12BufferUBVec3___init__(struct __pyx_obj_8pynodegl_BufferUBVec3 *__pyx_v_self, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "nodes_def.pyx":789
 * 
 *     def __init__(self, *args, **kwargs):
 *         assert self.ctx is NULL             # <<<<<<<<<<<<<<
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERUBVEC3)
 *         if self.ctx is NULL:
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!((__pyx_v_self->__pyx_base.__pyx_base.ctx == NULL) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 789, __pyx_L1_error)
    }
  }
  #endif

  /* "nodes_def.pyx":790
 *     def __init__(self, *args, **kwargs):
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERUBVEC3)             # <<<<<<<<<<<<<<
 *         if self.ctx is NULL:
 *             raise MemoryError()
 */
  __pyx_v_self->__pyx_base.__pyx_base.ctx = ngl_node_create(NGL_NODE_BUFFERUBVEC3);

  /* "nodes_def.pyx":791
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERUBVEC3)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         self._init_params(*args, **kwargs)
 */
  __pyx_t_1 = ((__pyx_v_self->__pyx_base.__pyx_base.ctx == NULL) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "nodes_def.pyx":792
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERUBVEC3)
 *         if self.ctx is NULL:
 *             raise MemoryError()             # <<<<<<<<<<<<<<
 *         self._init_params(*args, **kwargs)
 * 
 */
    PyErr_NoMemory(); __PYX_ERR(0, 792, __pyx_L1_error)

    /* "nodes_def.pyx":791
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERUBVEC3)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         self._init_params(*args, **kwargs)
 */
  }

  /* "nodes_def.pyx":793
 *         if self.ctx is NULL:
 *             raise MemoryError()
 *         self._init_params(*args, **kwargs)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_init_params); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 793, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_v_args, __pyx_v_kwargs); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 793, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "nodes_def.pyx":788
 * cdef class BufferUBVec3(_Buffer):
 * 
 *     def __init__(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERUBVEC3)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pynodegl.BufferUBVec3.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_12BufferUBVec3_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pynodegl_12BufferUBVec3_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_12BufferUBVec3_2__reduce_cython__(((struct __pyx_obj_8pynodegl_BufferUBVec3 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_12BufferUBVec3_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_BufferUBVec3 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__74, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.BufferUBVec3.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_12BufferUBVec3_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8pynodegl_12BufferUBVec3_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_12BufferUBVec3_4__setstate_cython__(((struct __pyx_obj_8pynodegl_BufferUBVec3 *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_12BufferUBVec3_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_BufferUBVec3 *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__75, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.BufferUBVec3.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":798
 * cdef class BufferUBVec4(_Buffer):
 * 
 *     def __init__(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERUBVEC4)
 */

/* Python wrapper */
static int __pyx_pw_8pynodegl_12BufferUBVec4_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pynodegl_12BufferUBVec4_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 1))) return -1;
  if (unlikely(__pyx_kwds)) {
    __pyx_v_kwargs = PyDict_Copy(__pyx_kwds); if (unlikely(!__pyx_v_kwargs)) return -1;
    __Pyx_GOTREF(__pyx_v_kwargs);
  } else {
    __pyx_v_kwargs = NULL;
  }
  __Pyx_INCREF(__pyx_args);
  __pyx_v_args = __pyx_args;
  __pyx_r = __pyx_pf_8pynodegl_12BufferUBVec4___init__(((struct __pyx_obj_8pynodegl_BufferUBVec4 *)__pyx_v_self), __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pynodegl_12BufferUBVec4___init__(struct __pyx_obj_8pynodegl_BufferUBVec4 *__pyx_v_self, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "nodes_def.pyx":799
 * 
 *     def __init__(self, *args, **kwargs):
 *         assert self.ctx is NULL             # <<<<<<<<<<<<<<
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERUBVEC4)
 *         if self.ctx is NULL:
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!((__pyx_v_self->__pyx_base.__pyx_base.ctx == NULL) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 799, __pyx_L1_error)
    }
  }
  #endif

  /* "nodes_def.pyx":800
 *     def __init__(self, *args, **kwargs):
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERUBVEC4)             # <<<<<<<<<<<<<<
 *         if self.ctx is NULL:
 *             raise MemoryError()
 */
  __pyx_v_self->__pyx_base.__pyx_base.ctx = ngl_node_create(NGL_NODE_BUFFERUBVEC4);

  /* "nodes_def.pyx":801
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERUBVEC4)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         self._init_params(*args, **kwargs)
 */
  __pyx_t_1 = ((__pyx_v_self->__pyx_base.__pyx_base.ctx == NULL) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "nodes_def.pyx":802
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERUBVEC4)
 *         if self.ctx is NULL:
 *             raise MemoryError()             # <<<<<<<<<<<<<<
 *         self._init_params(*args, **kwargs)
 * 
 */
    PyErr_NoMemory(); __PYX_ERR(0, 802, __pyx_L1_error)

    /* "nodes_def.pyx":801
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERUBVEC4)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         self._init_params(*args, **kwargs)
 */
  }

  /* "nodes_def.pyx":803
 *         if self.ctx is NULL:
 *             raise MemoryError()
 *         self._init_params(*args, **kwargs)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_init_params); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 803, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_v_args, __pyx_v_kwargs); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 803, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "nodes_def.pyx":798
 * cdef class BufferUBVec4(_Buffer):
 * 
 *     def __init__(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERUBVEC4)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pynodegl.BufferUBVec4.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_12BufferUBVec4_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pynodegl_12BufferUBVec4_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_12BufferUBVec4_2__reduce_cython__(((struct __pyx_obj_8pynodegl_BufferUBVec4 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_12BufferUBVec4_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_BufferUBVec4 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__76, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.BufferUBVec4.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_12BufferUBVec4_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8pynodegl_12BufferUBVec4_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_12BufferUBVec4_4__setstate_cython__(((struct __pyx_obj_8pynodegl_BufferUBVec4 *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_12BufferUBVec4_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_BufferUBVec4 *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__77, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.BufferUBVec4.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":808
 * cdef class BufferUInt(_Buffer):
 * 
 *     def __init__(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERUINT)
 */

/* Python wrapper */
static int __pyx_pw_8pynodegl_10BufferUInt_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pynodegl_10BufferUInt_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 1))) return -1;
  if (unlikely(__pyx_kwds)) {
    __pyx_v_kwargs = PyDict_Copy(__pyx_kwds); if (unlikely(!__pyx_v_kwargs)) return -1;
    __Pyx_GOTREF(__pyx_v_kwargs);
  } else {
    __pyx_v_kwargs = NULL;
  }
  __Pyx_INCREF(__pyx_args);
  __pyx_v_args = __pyx_args;
  __pyx_r = __pyx_pf_8pynodegl_10BufferUInt___init__(((struct __pyx_obj_8pynodegl_BufferUInt *)__pyx_v_self), __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pynodegl_10BufferUInt___init__(struct __pyx_obj_8pynodegl_BufferUInt *__pyx_v_self, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "nodes_def.pyx":809
 * 
 *     def __init__(self, *args, **kwargs):
 *         assert self.ctx is NULL             # <<<<<<<<<<<<<<
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERUINT)
 *         if self.ctx is NULL:
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!((__pyx_v_self->__pyx_base.__pyx_base.ctx == NULL) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 809, __pyx_L1_error)
    }
  }
  #endif

  /* "nodes_def.pyx":810
 *     def __init__(self, *args, **kwargs):
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERUINT)             # <<<<<<<<<<<<<<
 *         if self.ctx is NULL:
 *             raise MemoryError()
 */
  __pyx_v_self->__pyx_base.__pyx_base.ctx = ngl_node_create(NGL_NODE_BUFFERUINT);

  /* "nodes_def.pyx":811
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERUINT)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         self._init_params(*args, **kwargs)
 */
  __pyx_t_1 = ((__pyx_v_self->__pyx_base.__pyx_base.ctx == NULL) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "nodes_def.pyx":812
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERUINT)
 *         if self.ctx is NULL:
 *             raise MemoryError()             # <<<<<<<<<<<<<<
 *         self._init_params(*args, **kwargs)
 * 
 */
    PyErr_NoMemory(); __PYX_ERR(0, 812, __pyx_L1_error)

    /* "nodes_def.pyx":811
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERUINT)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         self._init_params(*args, **kwargs)
 */
  }

  /* "nodes_def.pyx":813
 *         if self.ctx is NULL:
 *             raise MemoryError()
 *         self._init_params(*args, **kwargs)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_init_params); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 813, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_v_args, __pyx_v_kwargs); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 813, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "nodes_def.pyx":808
 * cdef class BufferUInt(_Buffer):
 * 
 *     def __init__(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERUINT)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pynodegl.BufferUInt.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_10BufferUInt_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pynodegl_10BufferUInt_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_10BufferUInt_2__reduce_cython__(((struct __pyx_obj_8pynodegl_BufferUInt *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_10BufferUInt_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_BufferUInt *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__78, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.BufferUInt.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_10BufferUInt_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8pynodegl_10BufferUInt_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_10BufferUInt_4__setstate_cython__(((struct __pyx_obj_8pynodegl_BufferUInt *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_10BufferUInt_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_BufferUInt *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__79, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.BufferUInt.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":818
 * cdef class BufferUIVec2(_Buffer):
 * 
 *     def __init__(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERUIVEC2)
 */

/* Python wrapper */
static int __pyx_pw_8pynodegl_12BufferUIVec2_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pynodegl_12BufferUIVec2_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 1))) return -1;
  if (unlikely(__pyx_kwds)) {
    __pyx_v_kwargs = PyDict_Copy(__pyx_kwds); if (unlikely(!__pyx_v_kwargs)) return -1;
    __Pyx_GOTREF(__pyx_v_kwargs);
  } else {
    __pyx_v_kwargs = NULL;
  }
  __Pyx_INCREF(__pyx_args);
  __pyx_v_args = __pyx_args;
  __pyx_r = __pyx_pf_8pynodegl_12BufferUIVec2___init__(((struct __pyx_obj_8pynodegl_BufferUIVec2 *)__pyx_v_self), __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pynodegl_12BufferUIVec2___init__(struct __pyx_obj_8pynodegl_BufferUIVec2 *__pyx_v_self, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "nodes_def.pyx":819
 * 
 *     def __init__(self, *args, **kwargs):
 *         assert self.ctx is NULL             # <<<<<<<<<<<<<<
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERUIVEC2)
 *         if self.ctx is NULL:
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!((__pyx_v_self->__pyx_base.__pyx_base.ctx == NULL) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 819, __pyx_L1_error)
    }
  }
  #endif

  /* "nodes_def.pyx":820
 *     def __init__(self, *args, **kwargs):
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERUIVEC2)             # <<<<<<<<<<<<<<
 *         if self.ctx is NULL:
 *             raise MemoryError()
 */
  __pyx_v_self->__pyx_base.__pyx_base.ctx = ngl_node_create(NGL_NODE_BUFFERUIVEC2);

  /* "nodes_def.pyx":821
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERUIVEC2)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         self._init_params(*args, **kwargs)
 */
  __pyx_t_1 = ((__pyx_v_self->__pyx_base.__pyx_base.ctx == NULL) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "nodes_def.pyx":822
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERUIVEC2)
 *         if self.ctx is NULL:
 *             raise MemoryError()             # <<<<<<<<<<<<<<
 *         self._init_params(*args, **kwargs)
 * 
 */
    PyErr_NoMemory(); __PYX_ERR(0, 822, __pyx_L1_error)

    /* "nodes_def.pyx":821
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERUIVEC2)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         self._init_params(*args, **kwargs)
 */
  }

  /* "nodes_def.pyx":823
 *         if self.ctx is NULL:
 *             raise MemoryError()
 *         self._init_params(*args, **kwargs)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_init_params); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 823, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_v_args, __pyx_v_kwargs); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 823, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "nodes_def.pyx":818
 * cdef class BufferUIVec2(_Buffer):
 * 
 *     def __init__(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERUIVEC2)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pynodegl.BufferUIVec2.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_12BufferUIVec2_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pynodegl_12BufferUIVec2_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_12BufferUIVec2_2__reduce_cython__(((struct __pyx_obj_8pynodegl_BufferUIVec2 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_12BufferUIVec2_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_BufferUIVec2 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__80, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.BufferUIVec2.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_12BufferUIVec2_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8pynodegl_12BufferUIVec2_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_12BufferUIVec2_4__setstate_cython__(((struct __pyx_obj_8pynodegl_BufferUIVec2 *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_12BufferUIVec2_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_BufferUIVec2 *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__81, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.BufferUIVec2.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":828
 * cdef class BufferUIVec3(_Buffer):
 * 
 *     def __init__(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERUIVEC3)
 */

/* Python wrapper */
static int __pyx_pw_8pynodegl_12BufferUIVec3_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pynodegl_12BufferUIVec3_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 1))) return -1;
  if (unlikely(__pyx_kwds)) {
    __pyx_v_kwargs = PyDict_Copy(__pyx_kwds); if (unlikely(!__pyx_v_kwargs)) return -1;
    __Pyx_GOTREF(__pyx_v_kwargs);
  } else {
    __pyx_v_kwargs = NULL;
  }
  __Pyx_INCREF(__pyx_args);
  __pyx_v_args = __pyx_args;
  __pyx_r = __pyx_pf_8pynodegl_12BufferUIVec3___init__(((struct __pyx_obj_8pynodegl_BufferUIVec3 *)__pyx_v_self), __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pynodegl_12BufferUIVec3___init__(struct __pyx_obj_8pynodegl_BufferUIVec3 *__pyx_v_self, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "nodes_def.pyx":829
 * 
 *     def __init__(self, *args, **kwargs):
 *         assert self.ctx is NULL             # <<<<<<<<<<<<<<
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERUIVEC3)
 *         if self.ctx is NULL:
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!((__pyx_v_self->__pyx_base.__pyx_base.ctx == NULL) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 829, __pyx_L1_error)
    }
  }
  #endif

  /* "nodes_def.pyx":830
 *     def __init__(self, *args, **kwargs):
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERUIVEC3)             # <<<<<<<<<<<<<<
 *         if self.ctx is NULL:
 *             raise MemoryError()
 */
  __pyx_v_self->__pyx_base.__pyx_base.ctx = ngl_node_create(NGL_NODE_BUFFERUIVEC3);

  /* "nodes_def.pyx":831
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERUIVEC3)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         self._init_params(*args, **kwargs)
 */
  __pyx_t_1 = ((__pyx_v_self->__pyx_base.__pyx_base.ctx == NULL) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "nodes_def.pyx":832
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERUIVEC3)
 *         if self.ctx is NULL:
 *             raise MemoryError()             # <<<<<<<<<<<<<<
 *         self._init_params(*args, **kwargs)
 * 
 */
    PyErr_NoMemory(); __PYX_ERR(0, 832, __pyx_L1_error)

    /* "nodes_def.pyx":831
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERUIVEC3)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         self._init_params(*args, **kwargs)
 */
  }

  /* "nodes_def.pyx":833
 *         if self.ctx is NULL:
 *             raise MemoryError()
 *         self._init_params(*args, **kwargs)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_init_params); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 833, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_v_args, __pyx_v_kwargs); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 833, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "nodes_def.pyx":828
 * cdef class BufferUIVec3(_Buffer):
 * 
 *     def __init__(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERUIVEC3)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pynodegl.BufferUIVec3.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_12BufferUIVec3_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pynodegl_12BufferUIVec3_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_12BufferUIVec3_2__reduce_cython__(((struct __pyx_obj_8pynodegl_BufferUIVec3 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_12BufferUIVec3_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_BufferUIVec3 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__82, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.BufferUIVec3.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_12BufferUIVec3_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8pynodegl_12BufferUIVec3_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_12BufferUIVec3_4__setstate_cython__(((struct __pyx_obj_8pynodegl_BufferUIVec3 *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_12BufferUIVec3_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_BufferUIVec3 *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__83, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.BufferUIVec3.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":838
 * cdef class BufferUIVec4(_Buffer):
 * 
 *     def __init__(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERUIVEC4)
 */

/* Python wrapper */
static int __pyx_pw_8pynodegl_12BufferUIVec4_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pynodegl_12BufferUIVec4_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 1))) return -1;
  if (unlikely(__pyx_kwds)) {
    __pyx_v_kwargs = PyDict_Copy(__pyx_kwds); if (unlikely(!__pyx_v_kwargs)) return -1;
    __Pyx_GOTREF(__pyx_v_kwargs);
  } else {
    __pyx_v_kwargs = NULL;
  }
  __Pyx_INCREF(__pyx_args);
  __pyx_v_args = __pyx_args;
  __pyx_r = __pyx_pf_8pynodegl_12BufferUIVec4___init__(((struct __pyx_obj_8pynodegl_BufferUIVec4 *)__pyx_v_self), __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pynodegl_12BufferUIVec4___init__(struct __pyx_obj_8pynodegl_BufferUIVec4 *__pyx_v_self, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "nodes_def.pyx":839
 * 
 *     def __init__(self, *args, **kwargs):
 *         assert self.ctx is NULL             # <<<<<<<<<<<<<<
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERUIVEC4)
 *         if self.ctx is NULL:
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!((__pyx_v_self->__pyx_base.__pyx_base.ctx == NULL) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 839, __pyx_L1_error)
    }
  }
  #endif

  /* "nodes_def.pyx":840
 *     def __init__(self, *args, **kwargs):
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERUIVEC4)             # <<<<<<<<<<<<<<
 *         if self.ctx is NULL:
 *             raise MemoryError()
 */
  __pyx_v_self->__pyx_base.__pyx_base.ctx = ngl_node_create(NGL_NODE_BUFFERUIVEC4);

  /* "nodes_def.pyx":841
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERUIVEC4)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         self._init_params(*args, **kwargs)
 */
  __pyx_t_1 = ((__pyx_v_self->__pyx_base.__pyx_base.ctx == NULL) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "nodes_def.pyx":842
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERUIVEC4)
 *         if self.ctx is NULL:
 *             raise MemoryError()             # <<<<<<<<<<<<<<
 *         self._init_params(*args, **kwargs)
 * 
 */
    PyErr_NoMemory(); __PYX_ERR(0, 842, __pyx_L1_error)

    /* "nodes_def.pyx":841
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERUIVEC4)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         self._init_params(*args, **kwargs)
 */
  }

  /* "nodes_def.pyx":843
 *         if self.ctx is NULL:
 *             raise MemoryError()
 *         self._init_params(*args, **kwargs)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_init_params); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 843, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_v_args, __pyx_v_kwargs); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 843, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "nodes_def.pyx":838
 * cdef class BufferUIVec4(_Buffer):
 * 
 *     def __init__(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERUIVEC4)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pynodegl.BufferUIVec4.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_12BufferUIVec4_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pynodegl_12BufferUIVec4_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_12BufferUIVec4_2__reduce_cython__(((struct __pyx_obj_8pynodegl_BufferUIVec4 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_12BufferUIVec4_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_BufferUIVec4 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__84, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.BufferUIVec4.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_12BufferUIVec4_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8pynodegl_12BufferUIVec4_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_12BufferUIVec4_4__setstate_cython__(((struct __pyx_obj_8pynodegl_BufferUIVec4 *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_12BufferUIVec4_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_BufferUIVec4 *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__85, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.BufferUIVec4.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":848
 * cdef class BufferUShort(_Buffer):
 * 
 *     def __init__(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERUSHORT)
 */

/* Python wrapper */
static int __pyx_pw_8pynodegl_12BufferUShort_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pynodegl_12BufferUShort_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 1))) return -1;
  if (unlikely(__pyx_kwds)) {
    __pyx_v_kwargs = PyDict_Copy(__pyx_kwds); if (unlikely(!__pyx_v_kwargs)) return -1;
    __Pyx_GOTREF(__pyx_v_kwargs);
  } else {
    __pyx_v_kwargs = NULL;
  }
  __Pyx_INCREF(__pyx_args);
  __pyx_v_args = __pyx_args;
  __pyx_r = __pyx_pf_8pynodegl_12BufferUShort___init__(((struct __pyx_obj_8pynodegl_BufferUShort *)__pyx_v_self), __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pynodegl_12BufferUShort___init__(struct __pyx_obj_8pynodegl_BufferUShort *__pyx_v_self, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "nodes_def.pyx":849
 * 
 *     def __init__(self, *args, **kwargs):
 *         assert self.ctx is NULL             # <<<<<<<<<<<<<<
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERUSHORT)
 *         if self.ctx is NULL:
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!((__pyx_v_self->__pyx_base.__pyx_base.ctx == NULL) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 849, __pyx_L1_error)
    }
  }
  #endif

  /* "nodes_def.pyx":850
 *     def __init__(self, *args, **kwargs):
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERUSHORT)             # <<<<<<<<<<<<<<
 *         if self.ctx is NULL:
 *             raise MemoryError()
 */
  __pyx_v_self->__pyx_base.__pyx_base.ctx = ngl_node_create(NGL_NODE_BUFFERUSHORT);

  /* "nodes_def.pyx":851
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERUSHORT)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         self._init_params(*args, **kwargs)
 */
  __pyx_t_1 = ((__pyx_v_self->__pyx_base.__pyx_base.ctx == NULL) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "nodes_def.pyx":852
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERUSHORT)
 *         if self.ctx is NULL:
 *             raise MemoryError()             # <<<<<<<<<<<<<<
 *         self._init_params(*args, **kwargs)
 * 
 */
    PyErr_NoMemory(); __PYX_ERR(0, 852, __pyx_L1_error)

    /* "nodes_def.pyx":851
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERUSHORT)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         self._init_params(*args, **kwargs)
 */
  }

  /* "nodes_def.pyx":853
 *         if self.ctx is NULL:
 *             raise MemoryError()
 *         self._init_params(*args, **kwargs)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_init_params); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 853, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_v_args, __pyx_v_kwargs); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 853, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "nodes_def.pyx":848
 * cdef class BufferUShort(_Buffer):
 * 
 *     def __init__(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERUSHORT)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pynodegl.BufferUShort.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_12BufferUShort_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pynodegl_12BufferUShort_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_12BufferUShort_2__reduce_cython__(((struct __pyx_obj_8pynodegl_BufferUShort *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_12BufferUShort_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_BufferUShort *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__86, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.BufferUShort.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_12BufferUShort_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8pynodegl_12BufferUShort_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_12BufferUShort_4__setstate_cython__(((struct __pyx_obj_8pynodegl_BufferUShort *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_12BufferUShort_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_BufferUShort *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__87, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.BufferUShort.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":858
 * cdef class BufferUSVec2(_Buffer):
 * 
 *     def __init__(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERUSVEC2)
 */

/* Python wrapper */
static int __pyx_pw_8pynodegl_12BufferUSVec2_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pynodegl_12BufferUSVec2_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 1))) return -1;
  if (unlikely(__pyx_kwds)) {
    __pyx_v_kwargs = PyDict_Copy(__pyx_kwds); if (unlikely(!__pyx_v_kwargs)) return -1;
    __Pyx_GOTREF(__pyx_v_kwargs);
  } else {
    __pyx_v_kwargs = NULL;
  }
  __Pyx_INCREF(__pyx_args);
  __pyx_v_args = __pyx_args;
  __pyx_r = __pyx_pf_8pynodegl_12BufferUSVec2___init__(((struct __pyx_obj_8pynodegl_BufferUSVec2 *)__pyx_v_self), __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pynodegl_12BufferUSVec2___init__(struct __pyx_obj_8pynodegl_BufferUSVec2 *__pyx_v_self, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "nodes_def.pyx":859
 * 
 *     def __init__(self, *args, **kwargs):
 *         assert self.ctx is NULL             # <<<<<<<<<<<<<<
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERUSVEC2)
 *         if self.ctx is NULL:
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!((__pyx_v_self->__pyx_base.__pyx_base.ctx == NULL) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 859, __pyx_L1_error)
    }
  }
  #endif

  /* "nodes_def.pyx":860
 *     def __init__(self, *args, **kwargs):
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERUSVEC2)             # <<<<<<<<<<<<<<
 *         if self.ctx is NULL:
 *             raise MemoryError()
 */
  __pyx_v_self->__pyx_base.__pyx_base.ctx = ngl_node_create(NGL_NODE_BUFFERUSVEC2);

  /* "nodes_def.pyx":861
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERUSVEC2)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         self._init_params(*args, **kwargs)
 */
  __pyx_t_1 = ((__pyx_v_self->__pyx_base.__pyx_base.ctx == NULL) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "nodes_def.pyx":862
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERUSVEC2)
 *         if self.ctx is NULL:
 *             raise MemoryError()             # <<<<<<<<<<<<<<
 *         self._init_params(*args, **kwargs)
 * 
 */
    PyErr_NoMemory(); __PYX_ERR(0, 862, __pyx_L1_error)

    /* "nodes_def.pyx":861
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERUSVEC2)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         self._init_params(*args, **kwargs)
 */
  }

  /* "nodes_def.pyx":863
 *         if self.ctx is NULL:
 *             raise MemoryError()
 *         self._init_params(*args, **kwargs)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_init_params); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 863, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_v_args, __pyx_v_kwargs); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 863, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "nodes_def.pyx":858
 * cdef class BufferUSVec2(_Buffer):
 * 
 *     def __init__(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERUSVEC2)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pynodegl.BufferUSVec2.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_12BufferUSVec2_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pynodegl_12BufferUSVec2_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_12BufferUSVec2_2__reduce_cython__(((struct __pyx_obj_8pynodegl_BufferUSVec2 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_12BufferUSVec2_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_BufferUSVec2 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__88, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.BufferUSVec2.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_12BufferUSVec2_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8pynodegl_12BufferUSVec2_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_12BufferUSVec2_4__setstate_cython__(((struct __pyx_obj_8pynodegl_BufferUSVec2 *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_12BufferUSVec2_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_BufferUSVec2 *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__89, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.BufferUSVec2.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":868
 * cdef class BufferUSVec3(_Buffer):
 * 
 *     def __init__(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERUSVEC3)
 */

/* Python wrapper */
static int __pyx_pw_8pynodegl_12BufferUSVec3_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pynodegl_12BufferUSVec3_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 1))) return -1;
  if (unlikely(__pyx_kwds)) {
    __pyx_v_kwargs = PyDict_Copy(__pyx_kwds); if (unlikely(!__pyx_v_kwargs)) return -1;
    __Pyx_GOTREF(__pyx_v_kwargs);
  } else {
    __pyx_v_kwargs = NULL;
  }
  __Pyx_INCREF(__pyx_args);
  __pyx_v_args = __pyx_args;
  __pyx_r = __pyx_pf_8pynodegl_12BufferUSVec3___init__(((struct __pyx_obj_8pynodegl_BufferUSVec3 *)__pyx_v_self), __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pynodegl_12BufferUSVec3___init__(struct __pyx_obj_8pynodegl_BufferUSVec3 *__pyx_v_self, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "nodes_def.pyx":869
 * 
 *     def __init__(self, *args, **kwargs):
 *         assert self.ctx is NULL             # <<<<<<<<<<<<<<
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERUSVEC3)
 *         if self.ctx is NULL:
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!((__pyx_v_self->__pyx_base.__pyx_base.ctx == NULL) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 869, __pyx_L1_error)
    }
  }
  #endif

  /* "nodes_def.pyx":870
 *     def __init__(self, *args, **kwargs):
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERUSVEC3)             # <<<<<<<<<<<<<<
 *         if self.ctx is NULL:
 *             raise MemoryError()
 */
  __pyx_v_self->__pyx_base.__pyx_base.ctx = ngl_node_create(NGL_NODE_BUFFERUSVEC3);

  /* "nodes_def.pyx":871
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERUSVEC3)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         self._init_params(*args, **kwargs)
 */
  __pyx_t_1 = ((__pyx_v_self->__pyx_base.__pyx_base.ctx == NULL) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "nodes_def.pyx":872
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERUSVEC3)
 *         if self.ctx is NULL:
 *             raise MemoryError()             # <<<<<<<<<<<<<<
 *         self._init_params(*args, **kwargs)
 * 
 */
    PyErr_NoMemory(); __PYX_ERR(0, 872, __pyx_L1_error)

    /* "nodes_def.pyx":871
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERUSVEC3)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         self._init_params(*args, **kwargs)
 */
  }

  /* "nodes_def.pyx":873
 *         if self.ctx is NULL:
 *             raise MemoryError()
 *         self._init_params(*args, **kwargs)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_init_params); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 873, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_v_args, __pyx_v_kwargs); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 873, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "nodes_def.pyx":868
 * cdef class BufferUSVec3(_Buffer):
 * 
 *     def __init__(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERUSVEC3)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pynodegl.BufferUSVec3.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_12BufferUSVec3_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pynodegl_12BufferUSVec3_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_12BufferUSVec3_2__reduce_cython__(((struct __pyx_obj_8pynodegl_BufferUSVec3 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_12BufferUSVec3_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_BufferUSVec3 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__90, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.BufferUSVec3.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_12BufferUSVec3_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8pynodegl_12BufferUSVec3_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_12BufferUSVec3_4__setstate_cython__(((struct __pyx_obj_8pynodegl_BufferUSVec3 *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_12BufferUSVec3_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_BufferUSVec3 *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__91, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.BufferUSVec3.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":878
 * cdef class BufferUSVec4(_Buffer):
 * 
 *     def __init__(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERUSVEC4)
 */

/* Python wrapper */
static int __pyx_pw_8pynodegl_12BufferUSVec4_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pynodegl_12BufferUSVec4_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 1))) return -1;
  if (unlikely(__pyx_kwds)) {
    __pyx_v_kwargs = PyDict_Copy(__pyx_kwds); if (unlikely(!__pyx_v_kwargs)) return -1;
    __Pyx_GOTREF(__pyx_v_kwargs);
  } else {
    __pyx_v_kwargs = NULL;
  }
  __Pyx_INCREF(__pyx_args);
  __pyx_v_args = __pyx_args;
  __pyx_r = __pyx_pf_8pynodegl_12BufferUSVec4___init__(((struct __pyx_obj_8pynodegl_BufferUSVec4 *)__pyx_v_self), __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pynodegl_12BufferUSVec4___init__(struct __pyx_obj_8pynodegl_BufferUSVec4 *__pyx_v_self, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "nodes_def.pyx":879
 * 
 *     def __init__(self, *args, **kwargs):
 *         assert self.ctx is NULL             # <<<<<<<<<<<<<<
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERUSVEC4)
 *         if self.ctx is NULL:
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!((__pyx_v_self->__pyx_base.__pyx_base.ctx == NULL) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 879, __pyx_L1_error)
    }
  }
  #endif

  /* "nodes_def.pyx":880
 *     def __init__(self, *args, **kwargs):
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERUSVEC4)             # <<<<<<<<<<<<<<
 *         if self.ctx is NULL:
 *             raise MemoryError()
 */
  __pyx_v_self->__pyx_base.__pyx_base.ctx = ngl_node_create(NGL_NODE_BUFFERUSVEC4);

  /* "nodes_def.pyx":881
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERUSVEC4)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         self._init_params(*args, **kwargs)
 */
  __pyx_t_1 = ((__pyx_v_self->__pyx_base.__pyx_base.ctx == NULL) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "nodes_def.pyx":882
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERUSVEC4)
 *         if self.ctx is NULL:
 *             raise MemoryError()             # <<<<<<<<<<<<<<
 *         self._init_params(*args, **kwargs)
 * 
 */
    PyErr_NoMemory(); __PYX_ERR(0, 882, __pyx_L1_error)

    /* "nodes_def.pyx":881
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERUSVEC4)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         self._init_params(*args, **kwargs)
 */
  }

  /* "nodes_def.pyx":883
 *         if self.ctx is NULL:
 *             raise MemoryError()
 *         self._init_params(*args, **kwargs)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_init_params); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 883, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_v_args, __pyx_v_kwargs); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 883, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "nodes_def.pyx":878
 * cdef class BufferUSVec4(_Buffer):
 * 
 *     def __init__(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERUSVEC4)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pynodegl.BufferUSVec4.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_12BufferUSVec4_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pynodegl_12BufferUSVec4_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_12BufferUSVec4_2__reduce_cython__(((struct __pyx_obj_8pynodegl_BufferUSVec4 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_12BufferUSVec4_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_BufferUSVec4 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__92, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.BufferUSVec4.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_12BufferUSVec4_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8pynodegl_12BufferUSVec4_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_12BufferUSVec4_4__setstate_cython__(((struct __pyx_obj_8pynodegl_BufferUSVec4 *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_12BufferUSVec4_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_BufferUSVec4 *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__93, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.BufferUSVec4.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":888
 * cdef class BufferFloat(_Buffer):
 * 
 *     def __init__(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERFLOAT)
 */

/* Python wrapper */
static int __pyx_pw_8pynodegl_11BufferFloat_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pynodegl_11BufferFloat_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 1))) return -1;
  if (unlikely(__pyx_kwds)) {
    __pyx_v_kwargs = PyDict_Copy(__pyx_kwds); if (unlikely(!__pyx_v_kwargs)) return -1;
    __Pyx_GOTREF(__pyx_v_kwargs);
  } else {
    __pyx_v_kwargs = NULL;
  }
  __Pyx_INCREF(__pyx_args);
  __pyx_v_args = __pyx_args;
  __pyx_r = __pyx_pf_8pynodegl_11BufferFloat___init__(((struct __pyx_obj_8pynodegl_BufferFloat *)__pyx_v_self), __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pynodegl_11BufferFloat___init__(struct __pyx_obj_8pynodegl_BufferFloat *__pyx_v_self, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "nodes_def.pyx":889
 * 
 *     def __init__(self, *args, **kwargs):
 *         assert self.ctx is NULL             # <<<<<<<<<<<<<<
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERFLOAT)
 *         if self.ctx is NULL:
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!((__pyx_v_self->__pyx_base.__pyx_base.ctx == NULL) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 889, __pyx_L1_error)
    }
  }
  #endif

  /* "nodes_def.pyx":890
 *     def __init__(self, *args, **kwargs):
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERFLOAT)             # <<<<<<<<<<<<<<
 *         if self.ctx is NULL:
 *             raise MemoryError()
 */
  __pyx_v_self->__pyx_base.__pyx_base.ctx = ngl_node_create(NGL_NODE_BUFFERFLOAT);

  /* "nodes_def.pyx":891
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERFLOAT)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         self._init_params(*args, **kwargs)
 */
  __pyx_t_1 = ((__pyx_v_self->__pyx_base.__pyx_base.ctx == NULL) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "nodes_def.pyx":892
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERFLOAT)
 *         if self.ctx is NULL:
 *             raise MemoryError()             # <<<<<<<<<<<<<<
 *         self._init_params(*args, **kwargs)
 * 
 */
    PyErr_NoMemory(); __PYX_ERR(0, 892, __pyx_L1_error)

    /* "nodes_def.pyx":891
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERFLOAT)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         self._init_params(*args, **kwargs)
 */
  }

  /* "nodes_def.pyx":893
 *         if self.ctx is NULL:
 *             raise MemoryError()
 *         self._init_params(*args, **kwargs)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_init_params); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 893, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_v_args, __pyx_v_kwargs); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 893, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "nodes_def.pyx":888
 * cdef class BufferFloat(_Buffer):
 * 
 *     def __init__(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERFLOAT)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pynodegl.BufferFloat.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_11BufferFloat_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pynodegl_11BufferFloat_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_11BufferFloat_2__reduce_cython__(((struct __pyx_obj_8pynodegl_BufferFloat *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_11BufferFloat_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_BufferFloat *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__94, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.BufferFloat.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_11BufferFloat_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8pynodegl_11BufferFloat_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_11BufferFloat_4__setstate_cython__(((struct __pyx_obj_8pynodegl_BufferFloat *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_11BufferFloat_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_BufferFloat *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__95, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.BufferFloat.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":898
 * cdef class BufferVec2(_Buffer):
 * 
 *     def __init__(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERVEC2)
 */

/* Python wrapper */
static int __pyx_pw_8pynodegl_10BufferVec2_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pynodegl_10BufferVec2_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 1))) return -1;
  if (unlikely(__pyx_kwds)) {
    __pyx_v_kwargs = PyDict_Copy(__pyx_kwds); if (unlikely(!__pyx_v_kwargs)) return -1;
    __Pyx_GOTREF(__pyx_v_kwargs);
  } else {
    __pyx_v_kwargs = NULL;
  }
  __Pyx_INCREF(__pyx_args);
  __pyx_v_args = __pyx_args;
  __pyx_r = __pyx_pf_8pynodegl_10BufferVec2___init__(((struct __pyx_obj_8pynodegl_BufferVec2 *)__pyx_v_self), __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pynodegl_10BufferVec2___init__(struct __pyx_obj_8pynodegl_BufferVec2 *__pyx_v_self, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "nodes_def.pyx":899
 * 
 *     def __init__(self, *args, **kwargs):
 *         assert self.ctx is NULL             # <<<<<<<<<<<<<<
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERVEC2)
 *         if self.ctx is NULL:
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!((__pyx_v_self->__pyx_base.__pyx_base.ctx == NULL) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 899, __pyx_L1_error)
    }
  }
  #endif

  /* "nodes_def.pyx":900
 *     def __init__(self, *args, **kwargs):
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERVEC2)             # <<<<<<<<<<<<<<
 *         if self.ctx is NULL:
 *             raise MemoryError()
 */
  __pyx_v_self->__pyx_base.__pyx_base.ctx = ngl_node_create(NGL_NODE_BUFFERVEC2);

  /* "nodes_def.pyx":901
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERVEC2)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         self._init_params(*args, **kwargs)
 */
  __pyx_t_1 = ((__pyx_v_self->__pyx_base.__pyx_base.ctx == NULL) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "nodes_def.pyx":902
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERVEC2)
 *         if self.ctx is NULL:
 *             raise MemoryError()             # <<<<<<<<<<<<<<
 *         self._init_params(*args, **kwargs)
 * 
 */
    PyErr_NoMemory(); __PYX_ERR(0, 902, __pyx_L1_error)

    /* "nodes_def.pyx":901
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERVEC2)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         self._init_params(*args, **kwargs)
 */
  }

  /* "nodes_def.pyx":903
 *         if self.ctx is NULL:
 *             raise MemoryError()
 *         self._init_params(*args, **kwargs)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_init_params); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 903, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_v_args, __pyx_v_kwargs); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 903, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "nodes_def.pyx":898
 * cdef class BufferVec2(_Buffer):
 * 
 *     def __init__(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERVEC2)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pynodegl.BufferVec2.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_10BufferVec2_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pynodegl_10BufferVec2_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_10BufferVec2_2__reduce_cython__(((struct __pyx_obj_8pynodegl_BufferVec2 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_10BufferVec2_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_BufferVec2 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__96, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.BufferVec2.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_10BufferVec2_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8pynodegl_10BufferVec2_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_10BufferVec2_4__setstate_cython__(((struct __pyx_obj_8pynodegl_BufferVec2 *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_10BufferVec2_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_BufferVec2 *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__97, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.BufferVec2.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":908
 * cdef class BufferVec3(_Buffer):
 * 
 *     def __init__(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERVEC3)
 */

/* Python wrapper */
static int __pyx_pw_8pynodegl_10BufferVec3_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pynodegl_10BufferVec3_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 1))) return -1;
  if (unlikely(__pyx_kwds)) {
    __pyx_v_kwargs = PyDict_Copy(__pyx_kwds); if (unlikely(!__pyx_v_kwargs)) return -1;
    __Pyx_GOTREF(__pyx_v_kwargs);
  } else {
    __pyx_v_kwargs = NULL;
  }
  __Pyx_INCREF(__pyx_args);
  __pyx_v_args = __pyx_args;
  __pyx_r = __pyx_pf_8pynodegl_10BufferVec3___init__(((struct __pyx_obj_8pynodegl_BufferVec3 *)__pyx_v_self), __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pynodegl_10BufferVec3___init__(struct __pyx_obj_8pynodegl_BufferVec3 *__pyx_v_self, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "nodes_def.pyx":909
 * 
 *     def __init__(self, *args, **kwargs):
 *         assert self.ctx is NULL             # <<<<<<<<<<<<<<
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERVEC3)
 *         if self.ctx is NULL:
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!((__pyx_v_self->__pyx_base.__pyx_base.ctx == NULL) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 909, __pyx_L1_error)
    }
  }
  #endif

  /* "nodes_def.pyx":910
 *     def __init__(self, *args, **kwargs):
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERVEC3)             # <<<<<<<<<<<<<<
 *         if self.ctx is NULL:
 *             raise MemoryError()
 */
  __pyx_v_self->__pyx_base.__pyx_base.ctx = ngl_node_create(NGL_NODE_BUFFERVEC3);

  /* "nodes_def.pyx":911
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERVEC3)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         self._init_params(*args, **kwargs)
 */
  __pyx_t_1 = ((__pyx_v_self->__pyx_base.__pyx_base.ctx == NULL) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "nodes_def.pyx":912
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERVEC3)
 *         if self.ctx is NULL:
 *             raise MemoryError()             # <<<<<<<<<<<<<<
 *         self._init_params(*args, **kwargs)
 * 
 */
    PyErr_NoMemory(); __PYX_ERR(0, 912, __pyx_L1_error)

    /* "nodes_def.pyx":911
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERVEC3)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         self._init_params(*args, **kwargs)
 */
  }

  /* "nodes_def.pyx":913
 *         if self.ctx is NULL:
 *             raise MemoryError()
 *         self._init_params(*args, **kwargs)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_init_params); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 913, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_v_args, __pyx_v_kwargs); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 913, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "nodes_def.pyx":908
 * cdef class BufferVec3(_Buffer):
 * 
 *     def __init__(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERVEC3)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pynodegl.BufferVec3.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_10BufferVec3_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pynodegl_10BufferVec3_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_10BufferVec3_2__reduce_cython__(((struct __pyx_obj_8pynodegl_BufferVec3 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_10BufferVec3_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_BufferVec3 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__98, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.BufferVec3.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_10BufferVec3_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8pynodegl_10BufferVec3_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_10BufferVec3_4__setstate_cython__(((struct __pyx_obj_8pynodegl_BufferVec3 *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_10BufferVec3_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_BufferVec3 *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__99, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.BufferVec3.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":918
 * cdef class BufferVec4(_Buffer):
 * 
 *     def __init__(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERVEC4)
 */

/* Python wrapper */
static int __pyx_pw_8pynodegl_10BufferVec4_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pynodegl_10BufferVec4_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 1))) return -1;
  if (unlikely(__pyx_kwds)) {
    __pyx_v_kwargs = PyDict_Copy(__pyx_kwds); if (unlikely(!__pyx_v_kwargs)) return -1;
    __Pyx_GOTREF(__pyx_v_kwargs);
  } else {
    __pyx_v_kwargs = NULL;
  }
  __Pyx_INCREF(__pyx_args);
  __pyx_v_args = __pyx_args;
  __pyx_r = __pyx_pf_8pynodegl_10BufferVec4___init__(((struct __pyx_obj_8pynodegl_BufferVec4 *)__pyx_v_self), __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pynodegl_10BufferVec4___init__(struct __pyx_obj_8pynodegl_BufferVec4 *__pyx_v_self, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "nodes_def.pyx":919
 * 
 *     def __init__(self, *args, **kwargs):
 *         assert self.ctx is NULL             # <<<<<<<<<<<<<<
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERVEC4)
 *         if self.ctx is NULL:
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!((__pyx_v_self->__pyx_base.__pyx_base.ctx == NULL) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 919, __pyx_L1_error)
    }
  }
  #endif

  /* "nodes_def.pyx":920
 *     def __init__(self, *args, **kwargs):
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERVEC4)             # <<<<<<<<<<<<<<
 *         if self.ctx is NULL:
 *             raise MemoryError()
 */
  __pyx_v_self->__pyx_base.__pyx_base.ctx = ngl_node_create(NGL_NODE_BUFFERVEC4);

  /* "nodes_def.pyx":921
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERVEC4)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         self._init_params(*args, **kwargs)
 */
  __pyx_t_1 = ((__pyx_v_self->__pyx_base.__pyx_base.ctx == NULL) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "nodes_def.pyx":922
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERVEC4)
 *         if self.ctx is NULL:
 *             raise MemoryError()             # <<<<<<<<<<<<<<
 *         self._init_params(*args, **kwargs)
 * 
 */
    PyErr_NoMemory(); __PYX_ERR(0, 922, __pyx_L1_error)

    /* "nodes_def.pyx":921
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERVEC4)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         self._init_params(*args, **kwargs)
 */
  }

  /* "nodes_def.pyx":923
 *         if self.ctx is NULL:
 *             raise MemoryError()
 *         self._init_params(*args, **kwargs)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_init_params); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 923, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_v_args, __pyx_v_kwargs); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 923, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "nodes_def.pyx":918
 * cdef class BufferVec4(_Buffer):
 * 
 *     def __init__(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERVEC4)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pynodegl.BufferVec4.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_10BufferVec4_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pynodegl_10BufferVec4_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_10BufferVec4_2__reduce_cython__(((struct __pyx_obj_8pynodegl_BufferVec4 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_10BufferVec4_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_BufferVec4 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__100, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.BufferVec4.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_10BufferVec4_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8pynodegl_10BufferVec4_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_10BufferVec4_4__setstate_cython__(((struct __pyx_obj_8pynodegl_BufferVec4 *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_10BufferVec4_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_BufferVec4 *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__101, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.BufferVec4.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":928
 * cdef class BufferMat4(_Buffer):
 * 
 *     def __init__(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERMAT4)
 */

/* Python wrapper */
static int __pyx_pw_8pynodegl_10BufferMat4_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pynodegl_10BufferMat4_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 1))) return -1;
  if (unlikely(__pyx_kwds)) {
    __pyx_v_kwargs = PyDict_Copy(__pyx_kwds); if (unlikely(!__pyx_v_kwargs)) return -1;
    __Pyx_GOTREF(__pyx_v_kwargs);
  } else {
    __pyx_v_kwargs = NULL;
  }
  __Pyx_INCREF(__pyx_args);
  __pyx_v_args = __pyx_args;
  __pyx_r = __pyx_pf_8pynodegl_10BufferMat4___init__(((struct __pyx_obj_8pynodegl_BufferMat4 *)__pyx_v_self), __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pynodegl_10BufferMat4___init__(struct __pyx_obj_8pynodegl_BufferMat4 *__pyx_v_self, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "nodes_def.pyx":929
 * 
 *     def __init__(self, *args, **kwargs):
 *         assert self.ctx is NULL             # <<<<<<<<<<<<<<
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERMAT4)
 *         if self.ctx is NULL:
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!((__pyx_v_self->__pyx_base.__pyx_base.ctx == NULL) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 929, __pyx_L1_error)
    }
  }
  #endif

  /* "nodes_def.pyx":930
 *     def __init__(self, *args, **kwargs):
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERMAT4)             # <<<<<<<<<<<<<<
 *         if self.ctx is NULL:
 *             raise MemoryError()
 */
  __pyx_v_self->__pyx_base.__pyx_base.ctx = ngl_node_create(NGL_NODE_BUFFERMAT4);

  /* "nodes_def.pyx":931
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERMAT4)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         self._init_params(*args, **kwargs)
 */
  __pyx_t_1 = ((__pyx_v_self->__pyx_base.__pyx_base.ctx == NULL) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "nodes_def.pyx":932
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERMAT4)
 *         if self.ctx is NULL:
 *             raise MemoryError()             # <<<<<<<<<<<<<<
 *         self._init_params(*args, **kwargs)
 * 
 */
    PyErr_NoMemory(); __PYX_ERR(0, 932, __pyx_L1_error)

    /* "nodes_def.pyx":931
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERMAT4)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         self._init_params(*args, **kwargs)
 */
  }

  /* "nodes_def.pyx":933
 *         if self.ctx is NULL:
 *             raise MemoryError()
 *         self._init_params(*args, **kwargs)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_init_params); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 933, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_v_args, __pyx_v_kwargs); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 933, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "nodes_def.pyx":928
 * cdef class BufferMat4(_Buffer):
 * 
 *     def __init__(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_BUFFERMAT4)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pynodegl.BufferMat4.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_10BufferMat4_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pynodegl_10BufferMat4_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_10BufferMat4_2__reduce_cython__(((struct __pyx_obj_8pynodegl_BufferMat4 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_10BufferMat4_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_BufferMat4 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__102, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.BufferMat4.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_10BufferMat4_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8pynodegl_10BufferMat4_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_10BufferMat4_4__setstate_cython__(((struct __pyx_obj_8pynodegl_BufferMat4 *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_10BufferMat4_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_BufferMat4 *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__103, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.BufferMat4.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":938
 * cdef class Camera(_Node):
 * 
 *     def __init__(self, _Node child, eye=None, center=None, up=None, perspective=None, orthographic=None, clipping=None, eye_transform=None, center_transform=None, up_transform=None, fov_anim=None, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         assert child is not None
 * 
 */

/* Python wrapper */
static int __pyx_pw_8pynodegl_6Camera_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pynodegl_6Camera_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pynodegl__Node *__pyx_v_child = 0;
  PyObject *__pyx_v_eye = 0;
  PyObject *__pyx_v_center = 0;
  PyObject *__pyx_v_up = 0;
  PyObject *__pyx_v_perspective = 0;
  PyObject *__pyx_v_orthographic = 0;
  PyObject *__pyx_v_clipping = 0;
  PyObject *__pyx_v_eye_transform = 0;
  PyObject *__pyx_v_center_transform = 0;
  PyObject *__pyx_v_up_transform = 0;
  PyObject *__pyx_v_fov_anim = 0;
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  __pyx_v_kwargs = PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return -1;
  __Pyx_GOTREF(__pyx_v_kwargs);
  if (PyTuple_GET_SIZE(__pyx_args) > 11) {
    __pyx_v_args = PyTuple_GetSlice(__pyx_args, 11, PyTuple_GET_SIZE(__pyx_args));
    if (unlikely(!__pyx_v_args)) {
      __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
      __Pyx_RefNannyFinishContext();
      return -1;
    }
    __Pyx_GOTREF(__pyx_v_args);
  } else {
    __pyx_v_args = __pyx_empty_tuple; __Pyx_INCREF(__pyx_empty_tuple);
  }
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_child,&__pyx_n_s_eye,&__pyx_n_s_center,&__pyx_n_s_up,&__pyx_n_s_perspective,&__pyx_n_s_orthographic,&__pyx_n_s_clipping,&__pyx_n_s_eye_transform,&__pyx_n_s_center_transform,&__pyx_n_s_up_transform,&__pyx_n_s_fov_anim,0};
    PyObject* values[11] = {0,0,0,0,0,0,0,0,0,0,0};
    values[1] = ((PyObject *)Py_None);
    values[2] = ((PyObject *)Py_None);
    values[3] = ((PyObject *)Py_None);
    values[4] = ((PyObject *)Py_None);
    values[5] = ((PyObject *)Py_None);
    values[6] = ((PyObject *)Py_None);
    values[7] = ((PyObject *)Py_None);
    values[8] = ((PyObject *)Py_None);
    values[9] = ((PyObject *)Py_None);
    values[10] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        default:
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        CYTHON_FALLTHROUGH;
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_child)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_eye);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_center);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_up);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_perspective);
          if (value) { values[4] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_orthographic);
          if (value) { values[5] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_clipping);
          if (value) { values[6] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_eye_transform);
          if (value) { values[7] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_center_transform);
          if (value) { values[8] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  9:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_up_transform);
          if (value) { values[9] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case 10:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_fov_anim);
          if (value) { values[10] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t used_pos_args = (pos_args < 11) ? pos_args : 11;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_kwargs, values, used_pos_args, "__init__") < 0)) __PYX_ERR(0, 938, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        default:
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        CYTHON_FALLTHROUGH;
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        case  0:
        goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_child = ((struct __pyx_obj_8pynodegl__Node *)values[0]);
    __pyx_v_eye = values[1];
    __pyx_v_center = values[2];
    __pyx_v_up = values[3];
    __pyx_v_perspective = values[4];
    __pyx_v_orthographic = values[5];
    __pyx_v_clipping = values[6];
    __pyx_v_eye_transform = values[7];
    __pyx_v_center_transform = values[8];
    __pyx_v_up_transform = values[9];
    __pyx_v_fov_anim = values[10];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 1, 11, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 938, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_args); __pyx_v_args = 0;
  __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
  __Pyx_AddTraceback("pynodegl.Camera.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_child), __pyx_ptype_8pynodegl__Node, 1, "child", 0))) __PYX_ERR(0, 938, __pyx_L1_error)
  __pyx_r = __pyx_pf_8pynodegl_6Camera___init__(((struct __pyx_obj_8pynodegl_Camera *)__pyx_v_self), __pyx_v_child, __pyx_v_eye, __pyx_v_center, __pyx_v_up, __pyx_v_perspective, __pyx_v_orthographic, __pyx_v_clipping, __pyx_v_eye_transform, __pyx_v_center_transform, __pyx_v_up_transform, __pyx_v_fov_anim, __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pynodegl_6Camera___init__(struct __pyx_obj_8pynodegl_Camera *__pyx_v_self, struct __pyx_obj_8pynodegl__Node *__pyx_v_child, PyObject *__pyx_v_eye, PyObject *__pyx_v_center, PyObject *__pyx_v_up, PyObject *__pyx_v_perspective, PyObject *__pyx_v_orthographic, PyObject *__pyx_v_clipping, PyObject *__pyx_v_eye_transform, PyObject *__pyx_v_center_transform, PyObject *__pyx_v_up_transform, PyObject *__pyx_v_fov_anim, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "nodes_def.pyx":939
 * 
 *     def __init__(self, _Node child, eye=None, center=None, up=None, perspective=None, orthographic=None, clipping=None, eye_transform=None, center_transform=None, up_transform=None, fov_anim=None, *args, **kwargs):
 *         assert child is not None             # <<<<<<<<<<<<<<
 * 
 *         assert self.ctx is NULL
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = (((PyObject *)__pyx_v_child) != Py_None);
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 939, __pyx_L1_error)
    }
  }
  #endif

  /* "nodes_def.pyx":941
 *         assert child is not None
 * 
 *         assert self.ctx is NULL             # <<<<<<<<<<<<<<
 *         self.ctx = ngl_node_create(NGL_NODE_CAMERA, child.ctx)
 *         if self.ctx is NULL:
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!((__pyx_v_self->__pyx_base.ctx == NULL) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 941, __pyx_L1_error)
    }
  }
  #endif

  /* "nodes_def.pyx":942
 * 
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_CAMERA, child.ctx)             # <<<<<<<<<<<<<<
 *         if self.ctx is NULL:
 *             raise MemoryError()
 */
  __pyx_v_self->__pyx_base.ctx = ngl_node_create(NGL_NODE_CAMERA, __pyx_v_child->ctx);

  /* "nodes_def.pyx":943
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_CAMERA, child.ctx)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         _Node._init_params(self, *args, **kwargs)
 */
  __pyx_t_1 = ((__pyx_v_self->__pyx_base.ctx == NULL) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "nodes_def.pyx":944
 *         self.ctx = ngl_node_create(NGL_NODE_CAMERA, child.ctx)
 *         if self.ctx is NULL:
 *             raise MemoryError()             # <<<<<<<<<<<<<<
 *         _Node._init_params(self, *args, **kwargs)
 * 
 */
    PyErr_NoMemory(); __PYX_ERR(0, 944, __pyx_L1_error)

    /* "nodes_def.pyx":943
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_CAMERA, child.ctx)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         _Node._init_params(self, *args, **kwargs)
 */
  }

  /* "nodes_def.pyx":945
 *         if self.ctx is NULL:
 *             raise MemoryError()
 *         _Node._init_params(self, *args, **kwargs)             # <<<<<<<<<<<<<<
 * 
 *         if eye is not None:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_8pynodegl__Node), __pyx_n_s_init_params); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 945, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 945, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_v_self));
  __pyx_t_4 = PyNumber_Add(__pyx_t_3, __pyx_v_args); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 945, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, __pyx_v_kwargs); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 945, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "nodes_def.pyx":947
 *         _Node._init_params(self, *args, **kwargs)
 * 
 *         if eye is not None:             # <<<<<<<<<<<<<<
 *             self.set_eye(*eye)
 *         if center is not None:
 */
  __pyx_t_1 = (__pyx_v_eye != Py_None);
  __pyx_t_5 = (__pyx_t_1 != 0);
  if (__pyx_t_5) {

    /* "nodes_def.pyx":948
 * 
 *         if eye is not None:
 *             self.set_eye(*eye)             # <<<<<<<<<<<<<<
 *         if center is not None:
 *             self.set_center(*center)
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_eye); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 948, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PySequence_Tuple(__pyx_v_eye); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 948, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 948, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "nodes_def.pyx":947
 *         _Node._init_params(self, *args, **kwargs)
 * 
 *         if eye is not None:             # <<<<<<<<<<<<<<
 *             self.set_eye(*eye)
 *         if center is not None:
 */
  }

  /* "nodes_def.pyx":949
 *         if eye is not None:
 *             self.set_eye(*eye)
 *         if center is not None:             # <<<<<<<<<<<<<<
 *             self.set_center(*center)
 *         if up is not None:
 */
  __pyx_t_5 = (__pyx_v_center != Py_None);
  __pyx_t_1 = (__pyx_t_5 != 0);
  if (__pyx_t_1) {

    /* "nodes_def.pyx":950
 *             self.set_eye(*eye)
 *         if center is not None:
 *             self.set_center(*center)             # <<<<<<<<<<<<<<
 *         if up is not None:
 *             self.set_up(*up)
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_center); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 950, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PySequence_Tuple(__pyx_v_center); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 950, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 950, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "nodes_def.pyx":949
 *         if eye is not None:
 *             self.set_eye(*eye)
 *         if center is not None:             # <<<<<<<<<<<<<<
 *             self.set_center(*center)
 *         if up is not None:
 */
  }

  /* "nodes_def.pyx":951
 *         if center is not None:
 *             self.set_center(*center)
 *         if up is not None:             # <<<<<<<<<<<<<<
 *             self.set_up(*up)
 *         if perspective is not None:
 */
  __pyx_t_1 = (__pyx_v_up != Py_None);
  __pyx_t_5 = (__pyx_t_1 != 0);
  if (__pyx_t_5) {

    /* "nodes_def.pyx":952
 *             self.set_center(*center)
 *         if up is not None:
 *             self.set_up(*up)             # <<<<<<<<<<<<<<
 *         if perspective is not None:
 *             self.set_perspective(*perspective)
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_up); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 952, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PySequence_Tuple(__pyx_v_up); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 952, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 952, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "nodes_def.pyx":951
 *         if center is not None:
 *             self.set_center(*center)
 *         if up is not None:             # <<<<<<<<<<<<<<
 *             self.set_up(*up)
 *         if perspective is not None:
 */
  }

  /* "nodes_def.pyx":953
 *         if up is not None:
 *             self.set_up(*up)
 *         if perspective is not None:             # <<<<<<<<<<<<<<
 *             self.set_perspective(*perspective)
 *         if orthographic is not None:
 */
  __pyx_t_5 = (__pyx_v_perspective != Py_None);
  __pyx_t_1 = (__pyx_t_5 != 0);
  if (__pyx_t_1) {

    /* "nodes_def.pyx":954
 *             self.set_up(*up)
 *         if perspective is not None:
 *             self.set_perspective(*perspective)             # <<<<<<<<<<<<<<
 *         if orthographic is not None:
 *             self.set_orthographic(*orthographic)
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_perspective); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 954, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PySequence_Tuple(__pyx_v_perspective); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 954, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 954, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "nodes_def.pyx":953
 *         if up is not None:
 *             self.set_up(*up)
 *         if perspective is not None:             # <<<<<<<<<<<<<<
 *             self.set_perspective(*perspective)
 *         if orthographic is not None:
 */
  }

  /* "nodes_def.pyx":955
 *         if perspective is not None:
 *             self.set_perspective(*perspective)
 *         if orthographic is not None:             # <<<<<<<<<<<<<<
 *             self.set_orthographic(*orthographic)
 *         if clipping is not None:
 */
  __pyx_t_1 = (__pyx_v_orthographic != Py_None);
  __pyx_t_5 = (__pyx_t_1 != 0);
  if (__pyx_t_5) {

    /* "nodes_def.pyx":956
 *             self.set_perspective(*perspective)
 *         if orthographic is not None:
 *             self.set_orthographic(*orthographic)             # <<<<<<<<<<<<<<
 *         if clipping is not None:
 *             self.set_clipping(*clipping)
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_orthographic); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 956, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PySequence_Tuple(__pyx_v_orthographic); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 956, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 956, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "nodes_def.pyx":955
 *         if perspective is not None:
 *             self.set_perspective(*perspective)
 *         if orthographic is not None:             # <<<<<<<<<<<<<<
 *             self.set_orthographic(*orthographic)
 *         if clipping is not None:
 */
  }

  /* "nodes_def.pyx":957
 *         if orthographic is not None:
 *             self.set_orthographic(*orthographic)
 *         if clipping is not None:             # <<<<<<<<<<<<<<
 *             self.set_clipping(*clipping)
 *         if eye_transform is not None:
 */
  __pyx_t_5 = (__pyx_v_clipping != Py_None);
  __pyx_t_1 = (__pyx_t_5 != 0);
  if (__pyx_t_1) {

    /* "nodes_def.pyx":958
 *             self.set_orthographic(*orthographic)
 *         if clipping is not None:
 *             self.set_clipping(*clipping)             # <<<<<<<<<<<<<<
 *         if eye_transform is not None:
 *             self.set_eye_transform(eye_transform)
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_clipping); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 958, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PySequence_Tuple(__pyx_v_clipping); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 958, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 958, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "nodes_def.pyx":957
 *         if orthographic is not None:
 *             self.set_orthographic(*orthographic)
 *         if clipping is not None:             # <<<<<<<<<<<<<<
 *             self.set_clipping(*clipping)
 *         if eye_transform is not None:
 */
  }

  /* "nodes_def.pyx":959
 *         if clipping is not None:
 *             self.set_clipping(*clipping)
 *         if eye_transform is not None:             # <<<<<<<<<<<<<<
 *             self.set_eye_transform(eye_transform)
 *         if center_transform is not None:
 */
  __pyx_t_1 = (__pyx_v_eye_transform != Py_None);
  __pyx_t_5 = (__pyx_t_1 != 0);
  if (__pyx_t_5) {

    /* "nodes_def.pyx":960
 *             self.set_clipping(*clipping)
 *         if eye_transform is not None:
 *             self.set_eye_transform(eye_transform)             # <<<<<<<<<<<<<<
 *         if center_transform is not None:
 *             self.set_center_transform(center_transform)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_eye_transform); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 960, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_2, __pyx_v_eye_transform) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_eye_transform);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 960, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "nodes_def.pyx":959
 *         if clipping is not None:
 *             self.set_clipping(*clipping)
 *         if eye_transform is not None:             # <<<<<<<<<<<<<<
 *             self.set_eye_transform(eye_transform)
 *         if center_transform is not None:
 */
  }

  /* "nodes_def.pyx":961
 *         if eye_transform is not None:
 *             self.set_eye_transform(eye_transform)
 *         if center_transform is not None:             # <<<<<<<<<<<<<<
 *             self.set_center_transform(center_transform)
 *         if up_transform is not None:
 */
  __pyx_t_5 = (__pyx_v_center_transform != Py_None);
  __pyx_t_1 = (__pyx_t_5 != 0);
  if (__pyx_t_1) {

    /* "nodes_def.pyx":962
 *             self.set_eye_transform(eye_transform)
 *         if center_transform is not None:
 *             self.set_center_transform(center_transform)             # <<<<<<<<<<<<<<
 *         if up_transform is not None:
 *             self.set_up_transform(up_transform)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_center_transform); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 962, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_2, __pyx_v_center_transform) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_center_transform);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 962, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "nodes_def.pyx":961
 *         if eye_transform is not None:
 *             self.set_eye_transform(eye_transform)
 *         if center_transform is not None:             # <<<<<<<<<<<<<<
 *             self.set_center_transform(center_transform)
 *         if up_transform is not None:
 */
  }

  /* "nodes_def.pyx":963
 *         if center_transform is not None:
 *             self.set_center_transform(center_transform)
 *         if up_transform is not None:             # <<<<<<<<<<<<<<
 *             self.set_up_transform(up_transform)
 *         if fov_anim is not None:
 */
  __pyx_t_1 = (__pyx_v_up_transform != Py_None);
  __pyx_t_5 = (__pyx_t_1 != 0);
  if (__pyx_t_5) {

    /* "nodes_def.pyx":964
 *             self.set_center_transform(center_transform)
 *         if up_transform is not None:
 *             self.set_up_transform(up_transform)             # <<<<<<<<<<<<<<
 *         if fov_anim is not None:
 *             self.set_fov_anim(fov_anim)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_up_transform); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 964, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_2, __pyx_v_up_transform) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_up_transform);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 964, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "nodes_def.pyx":963
 *         if center_transform is not None:
 *             self.set_center_transform(center_transform)
 *         if up_transform is not None:             # <<<<<<<<<<<<<<
 *             self.set_up_transform(up_transform)
 *         if fov_anim is not None:
 */
  }

  /* "nodes_def.pyx":965
 *         if up_transform is not None:
 *             self.set_up_transform(up_transform)
 *         if fov_anim is not None:             # <<<<<<<<<<<<<<
 *             self.set_fov_anim(fov_anim)
 * 
 */
  __pyx_t_5 = (__pyx_v_fov_anim != Py_None);
  __pyx_t_1 = (__pyx_t_5 != 0);
  if (__pyx_t_1) {

    /* "nodes_def.pyx":966
 *             self.set_up_transform(up_transform)
 *         if fov_anim is not None:
 *             self.set_fov_anim(fov_anim)             # <<<<<<<<<<<<<<
 * 
 *     def set_eye(self, *eye):
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_fov_anim); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 966, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_2, __pyx_v_fov_anim) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_fov_anim);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 966, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "nodes_def.pyx":965
 *         if up_transform is not None:
 *             self.set_up_transform(up_transform)
 *         if fov_anim is not None:             # <<<<<<<<<<<<<<
 *             self.set_fov_anim(fov_anim)
 * 
 */
  }

  /* "nodes_def.pyx":938
 * cdef class Camera(_Node):
 * 
 *     def __init__(self, _Node child, eye=None, center=None, up=None, perspective=None, orthographic=None, clipping=None, eye_transform=None, center_transform=None, up_transform=None, fov_anim=None, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         assert child is not None
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pynodegl.Camera.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":968
 *             self.set_fov_anim(fov_anim)
 * 
 *     def set_eye(self, *eye):             # <<<<<<<<<<<<<<
 *         cdef float[3] eye_c
 *         cdef int eye_i
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_6Camera_3set_eye(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_8pynodegl_6Camera_3set_eye(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_eye = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_eye (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "set_eye", 0))) return NULL;
  __Pyx_INCREF(__pyx_args);
  __pyx_v_eye = __pyx_args;
  __pyx_r = __pyx_pf_8pynodegl_6Camera_2set_eye(((struct __pyx_obj_8pynodegl_Camera *)__pyx_v_self), __pyx_v_eye);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_eye);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_6Camera_2set_eye(struct __pyx_obj_8pynodegl_Camera *__pyx_v_self, PyObject *__pyx_v_eye) {
  float __pyx_v_eye_c[3];
  int __pyx_v_eye_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  Py_UCS4 __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  int __pyx_t_7;
  float __pyx_t_8;
  __Pyx_RefNannySetupContext("set_eye", 0);

  /* "nodes_def.pyx":971
 *         cdef float[3] eye_c
 *         cdef int eye_i
 *         if len(eye) != 3:             # <<<<<<<<<<<<<<
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (
 *                             "eye", 3, len(eye)))
 */
  __pyx_t_1 = PyTuple_GET_SIZE(__pyx_v_eye); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 971, __pyx_L1_error)
  __pyx_t_2 = ((__pyx_t_1 != 3) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "nodes_def.pyx":972
 *         cdef int eye_i
 *         if len(eye) != 3:
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (             # <<<<<<<<<<<<<<
 *                             "eye", 3, len(eye)))
 *         for eye_i in range(3):
 */
    __pyx_t_3 = PyTuple_New(5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 972, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = 0;
    __pyx_t_4 = 127;
    __Pyx_INCREF(__pyx_kp_u_eye_parameter_is_expected_to_be);
    __pyx_t_1 += 35;
    __Pyx_GIVEREF(__pyx_kp_u_eye_parameter_is_expected_to_be);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_kp_u_eye_parameter_is_expected_to_be);

    /* "nodes_def.pyx":973
 *         if len(eye) != 3:
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (
 *                             "eye", 3, len(eye)))             # <<<<<<<<<<<<<<
 *         for eye_i in range(3):
 *             eye_c[eye_i] = eye[eye_i]
 */
    __pyx_t_5 = __Pyx_PyUnicode_From_long(3, 0, ' ', 'd'); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 973, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_INCREF(__pyx_kp_u_but_got);
    __pyx_t_1 += 9;
    __Pyx_GIVEREF(__pyx_kp_u_but_got);
    PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_kp_u_but_got);
    __pyx_t_6 = PyTuple_GET_SIZE(__pyx_v_eye); if (unlikely(__pyx_t_6 == ((Py_ssize_t)-1))) __PYX_ERR(0, 973, __pyx_L1_error)
    __pyx_t_5 = __Pyx_PyUnicode_From_Py_ssize_t(__pyx_t_6, 0, ' ', 'd'); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 973, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_3, 3, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_INCREF(__pyx_kp_u_values);
    __pyx_t_1 += 7;
    __Pyx_GIVEREF(__pyx_kp_u_values);
    PyTuple_SET_ITEM(__pyx_t_3, 4, __pyx_kp_u_values);

    /* "nodes_def.pyx":972
 *         cdef int eye_i
 *         if len(eye) != 3:
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (             # <<<<<<<<<<<<<<
 *                             "eye", 3, len(eye)))
 *         for eye_i in range(3):
 */
    __pyx_t_5 = __Pyx_PyUnicode_Join(__pyx_t_3, 5, __pyx_t_1, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 972, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 972, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 972, __pyx_L1_error)

    /* "nodes_def.pyx":971
 *         cdef float[3] eye_c
 *         cdef int eye_i
 *         if len(eye) != 3:             # <<<<<<<<<<<<<<
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (
 *                             "eye", 3, len(eye)))
 */
  }

  /* "nodes_def.pyx":974
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (
 *                             "eye", 3, len(eye)))
 *         for eye_i in range(3):             # <<<<<<<<<<<<<<
 *             eye_c[eye_i] = eye[eye_i]
 * 
 */
  for (__pyx_t_7 = 0; __pyx_t_7 < 3; __pyx_t_7+=1) {
    __pyx_v_eye_i = __pyx_t_7;

    /* "nodes_def.pyx":975
 *                             "eye", 3, len(eye)))
 *         for eye_i in range(3):
 *             eye_c[eye_i] = eye[eye_i]             # <<<<<<<<<<<<<<
 * 
 *         return ngl_node_param_set(self.ctx, "eye", eye_c)
 */
    __pyx_t_3 = __Pyx_GetItemInt_Tuple(__pyx_v_eye, __pyx_v_eye_i, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 975, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_8 = __pyx_PyFloat_AsFloat(__pyx_t_3); if (unlikely((__pyx_t_8 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 975, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    (__pyx_v_eye_c[__pyx_v_eye_i]) = __pyx_t_8;
  }

  /* "nodes_def.pyx":977
 *             eye_c[eye_i] = eye[eye_i]
 * 
 *         return ngl_node_param_set(self.ctx, "eye", eye_c)             # <<<<<<<<<<<<<<
 * 
 *     def set_center(self, *center):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"eye"), __pyx_v_eye_c)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 977, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":968
 *             self.set_fov_anim(fov_anim)
 * 
 *     def set_eye(self, *eye):             # <<<<<<<<<<<<<<
 *         cdef float[3] eye_c
 *         cdef int eye_i
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pynodegl.Camera.set_eye", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":979
 *         return ngl_node_param_set(self.ctx, "eye", eye_c)
 * 
 *     def set_center(self, *center):             # <<<<<<<<<<<<<<
 *         cdef float[3] center_c
 *         cdef int center_i
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_6Camera_5set_center(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_8pynodegl_6Camera_5set_center(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_center = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_center (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "set_center", 0))) return NULL;
  __Pyx_INCREF(__pyx_args);
  __pyx_v_center = __pyx_args;
  __pyx_r = __pyx_pf_8pynodegl_6Camera_4set_center(((struct __pyx_obj_8pynodegl_Camera *)__pyx_v_self), __pyx_v_center);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_center);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_6Camera_4set_center(struct __pyx_obj_8pynodegl_Camera *__pyx_v_self, PyObject *__pyx_v_center) {
  float __pyx_v_center_c[3];
  int __pyx_v_center_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  Py_UCS4 __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  int __pyx_t_7;
  float __pyx_t_8;
  __Pyx_RefNannySetupContext("set_center", 0);

  /* "nodes_def.pyx":982
 *         cdef float[3] center_c
 *         cdef int center_i
 *         if len(center) != 3:             # <<<<<<<<<<<<<<
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (
 *                             "center", 3, len(center)))
 */
  __pyx_t_1 = PyTuple_GET_SIZE(__pyx_v_center); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 982, __pyx_L1_error)
  __pyx_t_2 = ((__pyx_t_1 != 3) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "nodes_def.pyx":983
 *         cdef int center_i
 *         if len(center) != 3:
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (             # <<<<<<<<<<<<<<
 *                             "center", 3, len(center)))
 *         for center_i in range(3):
 */
    __pyx_t_3 = PyTuple_New(5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 983, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = 0;
    __pyx_t_4 = 127;
    __Pyx_INCREF(__pyx_kp_u_center_parameter_is_expected_to);
    __pyx_t_1 += 38;
    __Pyx_GIVEREF(__pyx_kp_u_center_parameter_is_expected_to);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_kp_u_center_parameter_is_expected_to);

    /* "nodes_def.pyx":984
 *         if len(center) != 3:
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (
 *                             "center", 3, len(center)))             # <<<<<<<<<<<<<<
 *         for center_i in range(3):
 *             center_c[center_i] = center[center_i]
 */
    __pyx_t_5 = __Pyx_PyUnicode_From_long(3, 0, ' ', 'd'); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 984, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_INCREF(__pyx_kp_u_but_got);
    __pyx_t_1 += 9;
    __Pyx_GIVEREF(__pyx_kp_u_but_got);
    PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_kp_u_but_got);
    __pyx_t_6 = PyTuple_GET_SIZE(__pyx_v_center); if (unlikely(__pyx_t_6 == ((Py_ssize_t)-1))) __PYX_ERR(0, 984, __pyx_L1_error)
    __pyx_t_5 = __Pyx_PyUnicode_From_Py_ssize_t(__pyx_t_6, 0, ' ', 'd'); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 984, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_3, 3, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_INCREF(__pyx_kp_u_values);
    __pyx_t_1 += 7;
    __Pyx_GIVEREF(__pyx_kp_u_values);
    PyTuple_SET_ITEM(__pyx_t_3, 4, __pyx_kp_u_values);

    /* "nodes_def.pyx":983
 *         cdef int center_i
 *         if len(center) != 3:
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (             # <<<<<<<<<<<<<<
 *                             "center", 3, len(center)))
 *         for center_i in range(3):
 */
    __pyx_t_5 = __Pyx_PyUnicode_Join(__pyx_t_3, 5, __pyx_t_1, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 983, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 983, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 983, __pyx_L1_error)

    /* "nodes_def.pyx":982
 *         cdef float[3] center_c
 *         cdef int center_i
 *         if len(center) != 3:             # <<<<<<<<<<<<<<
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (
 *                             "center", 3, len(center)))
 */
  }

  /* "nodes_def.pyx":985
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (
 *                             "center", 3, len(center)))
 *         for center_i in range(3):             # <<<<<<<<<<<<<<
 *             center_c[center_i] = center[center_i]
 * 
 */
  for (__pyx_t_7 = 0; __pyx_t_7 < 3; __pyx_t_7+=1) {
    __pyx_v_center_i = __pyx_t_7;

    /* "nodes_def.pyx":986
 *                             "center", 3, len(center)))
 *         for center_i in range(3):
 *             center_c[center_i] = center[center_i]             # <<<<<<<<<<<<<<
 * 
 *         return ngl_node_param_set(self.ctx, "center", center_c)
 */
    __pyx_t_3 = __Pyx_GetItemInt_Tuple(__pyx_v_center, __pyx_v_center_i, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 986, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_8 = __pyx_PyFloat_AsFloat(__pyx_t_3); if (unlikely((__pyx_t_8 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 986, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    (__pyx_v_center_c[__pyx_v_center_i]) = __pyx_t_8;
  }

  /* "nodes_def.pyx":988
 *             center_c[center_i] = center[center_i]
 * 
 *         return ngl_node_param_set(self.ctx, "center", center_c)             # <<<<<<<<<<<<<<
 * 
 *     def set_up(self, *up):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"center"), __pyx_v_center_c)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 988, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":979
 *         return ngl_node_param_set(self.ctx, "eye", eye_c)
 * 
 *     def set_center(self, *center):             # <<<<<<<<<<<<<<
 *         cdef float[3] center_c
 *         cdef int center_i
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pynodegl.Camera.set_center", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":990
 *         return ngl_node_param_set(self.ctx, "center", center_c)
 * 
 *     def set_up(self, *up):             # <<<<<<<<<<<<<<
 *         cdef float[3] up_c
 *         cdef int up_i
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_6Camera_7set_up(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_8pynodegl_6Camera_7set_up(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_up = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_up (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "set_up", 0))) return NULL;
  __Pyx_INCREF(__pyx_args);
  __pyx_v_up = __pyx_args;
  __pyx_r = __pyx_pf_8pynodegl_6Camera_6set_up(((struct __pyx_obj_8pynodegl_Camera *)__pyx_v_self), __pyx_v_up);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_up);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_6Camera_6set_up(struct __pyx_obj_8pynodegl_Camera *__pyx_v_self, PyObject *__pyx_v_up) {
  float __pyx_v_up_c[3];
  int __pyx_v_up_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  Py_UCS4 __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  int __pyx_t_7;
  float __pyx_t_8;
  __Pyx_RefNannySetupContext("set_up", 0);

  /* "nodes_def.pyx":993
 *         cdef float[3] up_c
 *         cdef int up_i
 *         if len(up) != 3:             # <<<<<<<<<<<<<<
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (
 *                             "up", 3, len(up)))
 */
  __pyx_t_1 = PyTuple_GET_SIZE(__pyx_v_up); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 993, __pyx_L1_error)
  __pyx_t_2 = ((__pyx_t_1 != 3) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "nodes_def.pyx":994
 *         cdef int up_i
 *         if len(up) != 3:
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (             # <<<<<<<<<<<<<<
 *                             "up", 3, len(up)))
 *         for up_i in range(3):
 */
    __pyx_t_3 = PyTuple_New(5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 994, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = 0;
    __pyx_t_4 = 127;
    __Pyx_INCREF(__pyx_kp_u_up_parameter_is_expected_to_be_v);
    __pyx_t_1 += 34;
    __Pyx_GIVEREF(__pyx_kp_u_up_parameter_is_expected_to_be_v);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_kp_u_up_parameter_is_expected_to_be_v);

    /* "nodes_def.pyx":995
 *         if len(up) != 3:
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (
 *                             "up", 3, len(up)))             # <<<<<<<<<<<<<<
 *         for up_i in range(3):
 *             up_c[up_i] = up[up_i]
 */
    __pyx_t_5 = __Pyx_PyUnicode_From_long(3, 0, ' ', 'd'); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 995, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_INCREF(__pyx_kp_u_but_got);
    __pyx_t_1 += 9;
    __Pyx_GIVEREF(__pyx_kp_u_but_got);
    PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_kp_u_but_got);
    __pyx_t_6 = PyTuple_GET_SIZE(__pyx_v_up); if (unlikely(__pyx_t_6 == ((Py_ssize_t)-1))) __PYX_ERR(0, 995, __pyx_L1_error)
    __pyx_t_5 = __Pyx_PyUnicode_From_Py_ssize_t(__pyx_t_6, 0, ' ', 'd'); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 995, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_3, 3, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_INCREF(__pyx_kp_u_values);
    __pyx_t_1 += 7;
    __Pyx_GIVEREF(__pyx_kp_u_values);
    PyTuple_SET_ITEM(__pyx_t_3, 4, __pyx_kp_u_values);

    /* "nodes_def.pyx":994
 *         cdef int up_i
 *         if len(up) != 3:
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (             # <<<<<<<<<<<<<<
 *                             "up", 3, len(up)))
 *         for up_i in range(3):
 */
    __pyx_t_5 = __Pyx_PyUnicode_Join(__pyx_t_3, 5, __pyx_t_1, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 994, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 994, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 994, __pyx_L1_error)

    /* "nodes_def.pyx":993
 *         cdef float[3] up_c
 *         cdef int up_i
 *         if len(up) != 3:             # <<<<<<<<<<<<<<
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (
 *                             "up", 3, len(up)))
 */
  }

  /* "nodes_def.pyx":996
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (
 *                             "up", 3, len(up)))
 *         for up_i in range(3):             # <<<<<<<<<<<<<<
 *             up_c[up_i] = up[up_i]
 * 
 */
  for (__pyx_t_7 = 0; __pyx_t_7 < 3; __pyx_t_7+=1) {
    __pyx_v_up_i = __pyx_t_7;

    /* "nodes_def.pyx":997
 *                             "up", 3, len(up)))
 *         for up_i in range(3):
 *             up_c[up_i] = up[up_i]             # <<<<<<<<<<<<<<
 * 
 *         return ngl_node_param_set(self.ctx, "up", up_c)
 */
    __pyx_t_3 = __Pyx_GetItemInt_Tuple(__pyx_v_up, __pyx_v_up_i, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 997, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_8 = __pyx_PyFloat_AsFloat(__pyx_t_3); if (unlikely((__pyx_t_8 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 997, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    (__pyx_v_up_c[__pyx_v_up_i]) = __pyx_t_8;
  }

  /* "nodes_def.pyx":999
 *             up_c[up_i] = up[up_i]
 * 
 *         return ngl_node_param_set(self.ctx, "up", up_c)             # <<<<<<<<<<<<<<
 * 
 *     def set_perspective(self, *perspective):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"up"), __pyx_v_up_c)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 999, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":990
 *         return ngl_node_param_set(self.ctx, "center", center_c)
 * 
 *     def set_up(self, *up):             # <<<<<<<<<<<<<<
 *         cdef float[3] up_c
 *         cdef int up_i
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pynodegl.Camera.set_up", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":1001
 *         return ngl_node_param_set(self.ctx, "up", up_c)
 * 
 *     def set_perspective(self, *perspective):             # <<<<<<<<<<<<<<
 *         cdef float[2] perspective_c
 *         cdef int perspective_i
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_6Camera_9set_perspective(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_8pynodegl_6Camera_9set_perspective(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_perspective = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_perspective (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "set_perspective", 0))) return NULL;
  __Pyx_INCREF(__pyx_args);
  __pyx_v_perspective = __pyx_args;
  __pyx_r = __pyx_pf_8pynodegl_6Camera_8set_perspective(((struct __pyx_obj_8pynodegl_Camera *)__pyx_v_self), __pyx_v_perspective);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_perspective);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_6Camera_8set_perspective(struct __pyx_obj_8pynodegl_Camera *__pyx_v_self, PyObject *__pyx_v_perspective) {
  float __pyx_v_perspective_c[2];
  int __pyx_v_perspective_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  Py_UCS4 __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  int __pyx_t_7;
  float __pyx_t_8;
  __Pyx_RefNannySetupContext("set_perspective", 0);

  /* "nodes_def.pyx":1004
 *         cdef float[2] perspective_c
 *         cdef int perspective_i
 *         if len(perspective) != 2:             # <<<<<<<<<<<<<<
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (
 *                             "perspective", 2, len(perspective)))
 */
  __pyx_t_1 = PyTuple_GET_SIZE(__pyx_v_perspective); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1004, __pyx_L1_error)
  __pyx_t_2 = ((__pyx_t_1 != 2) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "nodes_def.pyx":1005
 *         cdef int perspective_i
 *         if len(perspective) != 2:
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (             # <<<<<<<<<<<<<<
 *                             "perspective", 2, len(perspective)))
 *         for perspective_i in range(2):
 */
    __pyx_t_3 = PyTuple_New(5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1005, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = 0;
    __pyx_t_4 = 127;
    __Pyx_INCREF(__pyx_kp_u_perspective_parameter_is_expecte);
    __pyx_t_1 += 43;
    __Pyx_GIVEREF(__pyx_kp_u_perspective_parameter_is_expecte);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_kp_u_perspective_parameter_is_expecte);

    /* "nodes_def.pyx":1006
 *         if len(perspective) != 2:
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (
 *                             "perspective", 2, len(perspective)))             # <<<<<<<<<<<<<<
 *         for perspective_i in range(2):
 *             perspective_c[perspective_i] = perspective[perspective_i]
 */
    __pyx_t_5 = __Pyx_PyUnicode_From_long(2, 0, ' ', 'd'); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1006, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_INCREF(__pyx_kp_u_but_got);
    __pyx_t_1 += 9;
    __Pyx_GIVEREF(__pyx_kp_u_but_got);
    PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_kp_u_but_got);
    __pyx_t_6 = PyTuple_GET_SIZE(__pyx_v_perspective); if (unlikely(__pyx_t_6 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1006, __pyx_L1_error)
    __pyx_t_5 = __Pyx_PyUnicode_From_Py_ssize_t(__pyx_t_6, 0, ' ', 'd'); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1006, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_3, 3, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_INCREF(__pyx_kp_u_values);
    __pyx_t_1 += 7;
    __Pyx_GIVEREF(__pyx_kp_u_values);
    PyTuple_SET_ITEM(__pyx_t_3, 4, __pyx_kp_u_values);

    /* "nodes_def.pyx":1005
 *         cdef int perspective_i
 *         if len(perspective) != 2:
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (             # <<<<<<<<<<<<<<
 *                             "perspective", 2, len(perspective)))
 *         for perspective_i in range(2):
 */
    __pyx_t_5 = __Pyx_PyUnicode_Join(__pyx_t_3, 5, __pyx_t_1, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1005, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1005, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 1005, __pyx_L1_error)

    /* "nodes_def.pyx":1004
 *         cdef float[2] perspective_c
 *         cdef int perspective_i
 *         if len(perspective) != 2:             # <<<<<<<<<<<<<<
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (
 *                             "perspective", 2, len(perspective)))
 */
  }

  /* "nodes_def.pyx":1007
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (
 *                             "perspective", 2, len(perspective)))
 *         for perspective_i in range(2):             # <<<<<<<<<<<<<<
 *             perspective_c[perspective_i] = perspective[perspective_i]
 * 
 */
  for (__pyx_t_7 = 0; __pyx_t_7 < 2; __pyx_t_7+=1) {
    __pyx_v_perspective_i = __pyx_t_7;

    /* "nodes_def.pyx":1008
 *                             "perspective", 2, len(perspective)))
 *         for perspective_i in range(2):
 *             perspective_c[perspective_i] = perspective[perspective_i]             # <<<<<<<<<<<<<<
 * 
 *         return ngl_node_param_set(self.ctx, "perspective", perspective_c)
 */
    __pyx_t_3 = __Pyx_GetItemInt_Tuple(__pyx_v_perspective, __pyx_v_perspective_i, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1008, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_8 = __pyx_PyFloat_AsFloat(__pyx_t_3); if (unlikely((__pyx_t_8 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1008, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    (__pyx_v_perspective_c[__pyx_v_perspective_i]) = __pyx_t_8;
  }

  /* "nodes_def.pyx":1010
 *             perspective_c[perspective_i] = perspective[perspective_i]
 * 
 *         return ngl_node_param_set(self.ctx, "perspective", perspective_c)             # <<<<<<<<<<<<<<
 * 
 *     def set_orthographic(self, *orthographic):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"perspective"), __pyx_v_perspective_c)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1010, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":1001
 *         return ngl_node_param_set(self.ctx, "up", up_c)
 * 
 *     def set_perspective(self, *perspective):             # <<<<<<<<<<<<<<
 *         cdef float[2] perspective_c
 *         cdef int perspective_i
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pynodegl.Camera.set_perspective", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":1012
 *         return ngl_node_param_set(self.ctx, "perspective", perspective_c)
 * 
 *     def set_orthographic(self, *orthographic):             # <<<<<<<<<<<<<<
 *         cdef float[4] orthographic_c
 *         cdef int orthographic_i
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_6Camera_11set_orthographic(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_8pynodegl_6Camera_11set_orthographic(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_orthographic = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_orthographic (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "set_orthographic", 0))) return NULL;
  __Pyx_INCREF(__pyx_args);
  __pyx_v_orthographic = __pyx_args;
  __pyx_r = __pyx_pf_8pynodegl_6Camera_10set_orthographic(((struct __pyx_obj_8pynodegl_Camera *)__pyx_v_self), __pyx_v_orthographic);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_orthographic);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_6Camera_10set_orthographic(struct __pyx_obj_8pynodegl_Camera *__pyx_v_self, PyObject *__pyx_v_orthographic) {
  float __pyx_v_orthographic_c[4];
  int __pyx_v_orthographic_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  Py_UCS4 __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  int __pyx_t_7;
  float __pyx_t_8;
  __Pyx_RefNannySetupContext("set_orthographic", 0);

  /* "nodes_def.pyx":1015
 *         cdef float[4] orthographic_c
 *         cdef int orthographic_i
 *         if len(orthographic) != 4:             # <<<<<<<<<<<<<<
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (
 *                             "orthographic", 4, len(orthographic)))
 */
  __pyx_t_1 = PyTuple_GET_SIZE(__pyx_v_orthographic); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1015, __pyx_L1_error)
  __pyx_t_2 = ((__pyx_t_1 != 4) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "nodes_def.pyx":1016
 *         cdef int orthographic_i
 *         if len(orthographic) != 4:
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (             # <<<<<<<<<<<<<<
 *                             "orthographic", 4, len(orthographic)))
 *         for orthographic_i in range(4):
 */
    __pyx_t_3 = PyTuple_New(5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1016, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = 0;
    __pyx_t_4 = 127;
    __Pyx_INCREF(__pyx_kp_u_orthographic_parameter_is_expect);
    __pyx_t_1 += 44;
    __Pyx_GIVEREF(__pyx_kp_u_orthographic_parameter_is_expect);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_kp_u_orthographic_parameter_is_expect);

    /* "nodes_def.pyx":1017
 *         if len(orthographic) != 4:
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (
 *                             "orthographic", 4, len(orthographic)))             # <<<<<<<<<<<<<<
 *         for orthographic_i in range(4):
 *             orthographic_c[orthographic_i] = orthographic[orthographic_i]
 */
    __pyx_t_5 = __Pyx_PyUnicode_From_long(4, 0, ' ', 'd'); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1017, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_INCREF(__pyx_kp_u_but_got);
    __pyx_t_1 += 9;
    __Pyx_GIVEREF(__pyx_kp_u_but_got);
    PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_kp_u_but_got);
    __pyx_t_6 = PyTuple_GET_SIZE(__pyx_v_orthographic); if (unlikely(__pyx_t_6 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1017, __pyx_L1_error)
    __pyx_t_5 = __Pyx_PyUnicode_From_Py_ssize_t(__pyx_t_6, 0, ' ', 'd'); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1017, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_3, 3, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_INCREF(__pyx_kp_u_values);
    __pyx_t_1 += 7;
    __Pyx_GIVEREF(__pyx_kp_u_values);
    PyTuple_SET_ITEM(__pyx_t_3, 4, __pyx_kp_u_values);

    /* "nodes_def.pyx":1016
 *         cdef int orthographic_i
 *         if len(orthographic) != 4:
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (             # <<<<<<<<<<<<<<
 *                             "orthographic", 4, len(orthographic)))
 *         for orthographic_i in range(4):
 */
    __pyx_t_5 = __Pyx_PyUnicode_Join(__pyx_t_3, 5, __pyx_t_1, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1016, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1016, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 1016, __pyx_L1_error)

    /* "nodes_def.pyx":1015
 *         cdef float[4] orthographic_c
 *         cdef int orthographic_i
 *         if len(orthographic) != 4:             # <<<<<<<<<<<<<<
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (
 *                             "orthographic", 4, len(orthographic)))
 */
  }

  /* "nodes_def.pyx":1018
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (
 *                             "orthographic", 4, len(orthographic)))
 *         for orthographic_i in range(4):             # <<<<<<<<<<<<<<
 *             orthographic_c[orthographic_i] = orthographic[orthographic_i]
 * 
 */
  for (__pyx_t_7 = 0; __pyx_t_7 < 4; __pyx_t_7+=1) {
    __pyx_v_orthographic_i = __pyx_t_7;

    /* "nodes_def.pyx":1019
 *                             "orthographic", 4, len(orthographic)))
 *         for orthographic_i in range(4):
 *             orthographic_c[orthographic_i] = orthographic[orthographic_i]             # <<<<<<<<<<<<<<
 * 
 *         return ngl_node_param_set(self.ctx, "orthographic", orthographic_c)
 */
    __pyx_t_3 = __Pyx_GetItemInt_Tuple(__pyx_v_orthographic, __pyx_v_orthographic_i, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1019, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_8 = __pyx_PyFloat_AsFloat(__pyx_t_3); if (unlikely((__pyx_t_8 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1019, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    (__pyx_v_orthographic_c[__pyx_v_orthographic_i]) = __pyx_t_8;
  }

  /* "nodes_def.pyx":1021
 *             orthographic_c[orthographic_i] = orthographic[orthographic_i]
 * 
 *         return ngl_node_param_set(self.ctx, "orthographic", orthographic_c)             # <<<<<<<<<<<<<<
 * 
 *     def set_clipping(self, *clipping):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"orthographic"), __pyx_v_orthographic_c)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1021, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":1012
 *         return ngl_node_param_set(self.ctx, "perspective", perspective_c)
 * 
 *     def set_orthographic(self, *orthographic):             # <<<<<<<<<<<<<<
 *         cdef float[4] orthographic_c
 *         cdef int orthographic_i
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pynodegl.Camera.set_orthographic", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":1023
 *         return ngl_node_param_set(self.ctx, "orthographic", orthographic_c)
 * 
 *     def set_clipping(self, *clipping):             # <<<<<<<<<<<<<<
 *         cdef float[2] clipping_c
 *         cdef int clipping_i
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_6Camera_13set_clipping(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_8pynodegl_6Camera_13set_clipping(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_clipping = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_clipping (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "set_clipping", 0))) return NULL;
  __Pyx_INCREF(__pyx_args);
  __pyx_v_clipping = __pyx_args;
  __pyx_r = __pyx_pf_8pynodegl_6Camera_12set_clipping(((struct __pyx_obj_8pynodegl_Camera *)__pyx_v_self), __pyx_v_clipping);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_clipping);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_6Camera_12set_clipping(struct __pyx_obj_8pynodegl_Camera *__pyx_v_self, PyObject *__pyx_v_clipping) {
  float __pyx_v_clipping_c[2];
  int __pyx_v_clipping_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  Py_UCS4 __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  int __pyx_t_7;
  float __pyx_t_8;
  __Pyx_RefNannySetupContext("set_clipping", 0);

  /* "nodes_def.pyx":1026
 *         cdef float[2] clipping_c
 *         cdef int clipping_i
 *         if len(clipping) != 2:             # <<<<<<<<<<<<<<
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (
 *                             "clipping", 2, len(clipping)))
 */
  __pyx_t_1 = PyTuple_GET_SIZE(__pyx_v_clipping); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1026, __pyx_L1_error)
  __pyx_t_2 = ((__pyx_t_1 != 2) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "nodes_def.pyx":1027
 *         cdef int clipping_i
 *         if len(clipping) != 2:
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (             # <<<<<<<<<<<<<<
 *                             "clipping", 2, len(clipping)))
 *         for clipping_i in range(2):
 */
    __pyx_t_3 = PyTuple_New(5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1027, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = 0;
    __pyx_t_4 = 127;
    __Pyx_INCREF(__pyx_kp_u_clipping_parameter_is_expected_t);
    __pyx_t_1 += 40;
    __Pyx_GIVEREF(__pyx_kp_u_clipping_parameter_is_expected_t);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_kp_u_clipping_parameter_is_expected_t);

    /* "nodes_def.pyx":1028
 *         if len(clipping) != 2:
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (
 *                             "clipping", 2, len(clipping)))             # <<<<<<<<<<<<<<
 *         for clipping_i in range(2):
 *             clipping_c[clipping_i] = clipping[clipping_i]
 */
    __pyx_t_5 = __Pyx_PyUnicode_From_long(2, 0, ' ', 'd'); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1028, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_INCREF(__pyx_kp_u_but_got);
    __pyx_t_1 += 9;
    __Pyx_GIVEREF(__pyx_kp_u_but_got);
    PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_kp_u_but_got);
    __pyx_t_6 = PyTuple_GET_SIZE(__pyx_v_clipping); if (unlikely(__pyx_t_6 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1028, __pyx_L1_error)
    __pyx_t_5 = __Pyx_PyUnicode_From_Py_ssize_t(__pyx_t_6, 0, ' ', 'd'); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1028, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_3, 3, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_INCREF(__pyx_kp_u_values);
    __pyx_t_1 += 7;
    __Pyx_GIVEREF(__pyx_kp_u_values);
    PyTuple_SET_ITEM(__pyx_t_3, 4, __pyx_kp_u_values);

    /* "nodes_def.pyx":1027
 *         cdef int clipping_i
 *         if len(clipping) != 2:
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (             # <<<<<<<<<<<<<<
 *                             "clipping", 2, len(clipping)))
 *         for clipping_i in range(2):
 */
    __pyx_t_5 = __Pyx_PyUnicode_Join(__pyx_t_3, 5, __pyx_t_1, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1027, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1027, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 1027, __pyx_L1_error)

    /* "nodes_def.pyx":1026
 *         cdef float[2] clipping_c
 *         cdef int clipping_i
 *         if len(clipping) != 2:             # <<<<<<<<<<<<<<
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (
 *                             "clipping", 2, len(clipping)))
 */
  }

  /* "nodes_def.pyx":1029
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (
 *                             "clipping", 2, len(clipping)))
 *         for clipping_i in range(2):             # <<<<<<<<<<<<<<
 *             clipping_c[clipping_i] = clipping[clipping_i]
 * 
 */
  for (__pyx_t_7 = 0; __pyx_t_7 < 2; __pyx_t_7+=1) {
    __pyx_v_clipping_i = __pyx_t_7;

    /* "nodes_def.pyx":1030
 *                             "clipping", 2, len(clipping)))
 *         for clipping_i in range(2):
 *             clipping_c[clipping_i] = clipping[clipping_i]             # <<<<<<<<<<<<<<
 * 
 *         return ngl_node_param_set(self.ctx, "clipping", clipping_c)
 */
    __pyx_t_3 = __Pyx_GetItemInt_Tuple(__pyx_v_clipping, __pyx_v_clipping_i, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1030, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_8 = __pyx_PyFloat_AsFloat(__pyx_t_3); if (unlikely((__pyx_t_8 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1030, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    (__pyx_v_clipping_c[__pyx_v_clipping_i]) = __pyx_t_8;
  }

  /* "nodes_def.pyx":1032
 *             clipping_c[clipping_i] = clipping[clipping_i]
 * 
 *         return ngl_node_param_set(self.ctx, "clipping", clipping_c)             # <<<<<<<<<<<<<<
 * 
 *     def set_eye_transform(self, _Node eye_transform):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"clipping"), __pyx_v_clipping_c)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1032, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":1023
 *         return ngl_node_param_set(self.ctx, "orthographic", orthographic_c)
 * 
 *     def set_clipping(self, *clipping):             # <<<<<<<<<<<<<<
 *         cdef float[2] clipping_c
 *         cdef int clipping_i
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pynodegl.Camera.set_clipping", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":1034
 *         return ngl_node_param_set(self.ctx, "clipping", clipping_c)
 * 
 *     def set_eye_transform(self, _Node eye_transform):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "eye_transform", eye_transform.ctx)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_6Camera_15set_eye_transform(PyObject *__pyx_v_self, PyObject *__pyx_v_eye_transform); /*proto*/
static PyObject *__pyx_pw_8pynodegl_6Camera_15set_eye_transform(PyObject *__pyx_v_self, PyObject *__pyx_v_eye_transform) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_eye_transform (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_eye_transform), __pyx_ptype_8pynodegl__Node, 1, "eye_transform", 0))) __PYX_ERR(0, 1034, __pyx_L1_error)
  __pyx_r = __pyx_pf_8pynodegl_6Camera_14set_eye_transform(((struct __pyx_obj_8pynodegl_Camera *)__pyx_v_self), ((struct __pyx_obj_8pynodegl__Node *)__pyx_v_eye_transform));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_6Camera_14set_eye_transform(struct __pyx_obj_8pynodegl_Camera *__pyx_v_self, struct __pyx_obj_8pynodegl__Node *__pyx_v_eye_transform) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("set_eye_transform", 0);

  /* "nodes_def.pyx":1035
 * 
 *     def set_eye_transform(self, _Node eye_transform):
 *         return ngl_node_param_set(self.ctx, "eye_transform", eye_transform.ctx)             # <<<<<<<<<<<<<<
 * 
 *     def set_center_transform(self, _Node center_transform):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"eye_transform"), __pyx_v_eye_transform->ctx)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1035, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":1034
 *         return ngl_node_param_set(self.ctx, "clipping", clipping_c)
 * 
 *     def set_eye_transform(self, _Node eye_transform):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "eye_transform", eye_transform.ctx)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.Camera.set_eye_transform", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":1037
 *         return ngl_node_param_set(self.ctx, "eye_transform", eye_transform.ctx)
 * 
 *     def set_center_transform(self, _Node center_transform):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "center_transform", center_transform.ctx)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_6Camera_17set_center_transform(PyObject *__pyx_v_self, PyObject *__pyx_v_center_transform); /*proto*/
static PyObject *__pyx_pw_8pynodegl_6Camera_17set_center_transform(PyObject *__pyx_v_self, PyObject *__pyx_v_center_transform) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_center_transform (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_center_transform), __pyx_ptype_8pynodegl__Node, 1, "center_transform", 0))) __PYX_ERR(0, 1037, __pyx_L1_error)
  __pyx_r = __pyx_pf_8pynodegl_6Camera_16set_center_transform(((struct __pyx_obj_8pynodegl_Camera *)__pyx_v_self), ((struct __pyx_obj_8pynodegl__Node *)__pyx_v_center_transform));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_6Camera_16set_center_transform(struct __pyx_obj_8pynodegl_Camera *__pyx_v_self, struct __pyx_obj_8pynodegl__Node *__pyx_v_center_transform) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("set_center_transform", 0);

  /* "nodes_def.pyx":1038
 * 
 *     def set_center_transform(self, _Node center_transform):
 *         return ngl_node_param_set(self.ctx, "center_transform", center_transform.ctx)             # <<<<<<<<<<<<<<
 * 
 *     def set_up_transform(self, _Node up_transform):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"center_transform"), __pyx_v_center_transform->ctx)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1038, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":1037
 *         return ngl_node_param_set(self.ctx, "eye_transform", eye_transform.ctx)
 * 
 *     def set_center_transform(self, _Node center_transform):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "center_transform", center_transform.ctx)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.Camera.set_center_transform", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":1040
 *         return ngl_node_param_set(self.ctx, "center_transform", center_transform.ctx)
 * 
 *     def set_up_transform(self, _Node up_transform):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "up_transform", up_transform.ctx)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_6Camera_19set_up_transform(PyObject *__pyx_v_self, PyObject *__pyx_v_up_transform); /*proto*/
static PyObject *__pyx_pw_8pynodegl_6Camera_19set_up_transform(PyObject *__pyx_v_self, PyObject *__pyx_v_up_transform) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_up_transform (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_up_transform), __pyx_ptype_8pynodegl__Node, 1, "up_transform", 0))) __PYX_ERR(0, 1040, __pyx_L1_error)
  __pyx_r = __pyx_pf_8pynodegl_6Camera_18set_up_transform(((struct __pyx_obj_8pynodegl_Camera *)__pyx_v_self), ((struct __pyx_obj_8pynodegl__Node *)__pyx_v_up_transform));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_6Camera_18set_up_transform(struct __pyx_obj_8pynodegl_Camera *__pyx_v_self, struct __pyx_obj_8pynodegl__Node *__pyx_v_up_transform) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("set_up_transform", 0);

  /* "nodes_def.pyx":1041
 * 
 *     def set_up_transform(self, _Node up_transform):
 *         return ngl_node_param_set(self.ctx, "up_transform", up_transform.ctx)             # <<<<<<<<<<<<<<
 * 
 *     def set_fov_anim(self, _Node fov_anim):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"up_transform"), __pyx_v_up_transform->ctx)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1041, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":1040
 *         return ngl_node_param_set(self.ctx, "center_transform", center_transform.ctx)
 * 
 *     def set_up_transform(self, _Node up_transform):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "up_transform", up_transform.ctx)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.Camera.set_up_transform", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":1043
 *         return ngl_node_param_set(self.ctx, "up_transform", up_transform.ctx)
 * 
 *     def set_fov_anim(self, _Node fov_anim):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "fov_anim", fov_anim.ctx)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_6Camera_21set_fov_anim(PyObject *__pyx_v_self, PyObject *__pyx_v_fov_anim); /*proto*/
static PyObject *__pyx_pw_8pynodegl_6Camera_21set_fov_anim(PyObject *__pyx_v_self, PyObject *__pyx_v_fov_anim) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_fov_anim (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_fov_anim), __pyx_ptype_8pynodegl__Node, 1, "fov_anim", 0))) __PYX_ERR(0, 1043, __pyx_L1_error)
  __pyx_r = __pyx_pf_8pynodegl_6Camera_20set_fov_anim(((struct __pyx_obj_8pynodegl_Camera *)__pyx_v_self), ((struct __pyx_obj_8pynodegl__Node *)__pyx_v_fov_anim));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_6Camera_20set_fov_anim(struct __pyx_obj_8pynodegl_Camera *__pyx_v_self, struct __pyx_obj_8pynodegl__Node *__pyx_v_fov_anim) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("set_fov_anim", 0);

  /* "nodes_def.pyx":1044
 * 
 *     def set_fov_anim(self, _Node fov_anim):
 *         return ngl_node_param_set(self.ctx, "fov_anim", fov_anim.ctx)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"fov_anim"), __pyx_v_fov_anim->ctx)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1044, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":1043
 *         return ngl_node_param_set(self.ctx, "up_transform", up_transform.ctx)
 * 
 *     def set_fov_anim(self, _Node fov_anim):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "fov_anim", fov_anim.ctx)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.Camera.set_fov_anim", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_6Camera_23__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pynodegl_6Camera_23__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_6Camera_22__reduce_cython__(((struct __pyx_obj_8pynodegl_Camera *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_6Camera_22__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_Camera *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__104, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.Camera.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_6Camera_25__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8pynodegl_6Camera_25__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_6Camera_24__setstate_cython__(((struct __pyx_obj_8pynodegl_Camera *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_6Camera_24__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_Camera *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__105, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.Camera.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":1049
 * cdef class Circle(_Node):
 * 
 *     def __init__(self, radius=None, npoints=None, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_CIRCLE)
 */

/* Python wrapper */
static int __pyx_pw_8pynodegl_6Circle_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pynodegl_6Circle_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_radius = 0;
  PyObject *__pyx_v_npoints = 0;
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  __pyx_v_kwargs = PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return -1;
  __Pyx_GOTREF(__pyx_v_kwargs);
  if (PyTuple_GET_SIZE(__pyx_args) > 2) {
    __pyx_v_args = PyTuple_GetSlice(__pyx_args, 2, PyTuple_GET_SIZE(__pyx_args));
    if (unlikely(!__pyx_v_args)) {
      __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
      __Pyx_RefNannyFinishContext();
      return -1;
    }
    __Pyx_GOTREF(__pyx_v_args);
  } else {
    __pyx_v_args = __pyx_empty_tuple; __Pyx_INCREF(__pyx_empty_tuple);
  }
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_radius,&__pyx_n_s_npoints,0};
    PyObject* values[2] = {0,0};
    values[0] = ((PyObject *)Py_None);
    values[1] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        default:
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_radius);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_npoints);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t used_pos_args = (pos_args < 2) ? pos_args : 2;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_kwargs, values, used_pos_args, "__init__") < 0)) __PYX_ERR(0, 1049, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        default:
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
      }
    }
    __pyx_v_radius = values[0];
    __pyx_v_npoints = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_args); __pyx_v_args = 0;
  __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
  __Pyx_AddTraceback("pynodegl.Circle.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pynodegl_6Circle___init__(((struct __pyx_obj_8pynodegl_Circle *)__pyx_v_self), __pyx_v_radius, __pyx_v_npoints, __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pynodegl_6Circle___init__(struct __pyx_obj_8pynodegl_Circle *__pyx_v_self, PyObject *__pyx_v_radius, PyObject *__pyx_v_npoints, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "nodes_def.pyx":1050
 * 
 *     def __init__(self, radius=None, npoints=None, *args, **kwargs):
 *         assert self.ctx is NULL             # <<<<<<<<<<<<<<
 *         self.ctx = ngl_node_create(NGL_NODE_CIRCLE)
 *         if self.ctx is NULL:
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!((__pyx_v_self->__pyx_base.ctx == NULL) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 1050, __pyx_L1_error)
    }
  }
  #endif

  /* "nodes_def.pyx":1051
 *     def __init__(self, radius=None, npoints=None, *args, **kwargs):
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_CIRCLE)             # <<<<<<<<<<<<<<
 *         if self.ctx is NULL:
 *             raise MemoryError()
 */
  __pyx_v_self->__pyx_base.ctx = ngl_node_create(NGL_NODE_CIRCLE);

  /* "nodes_def.pyx":1052
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_CIRCLE)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         _Node._init_params(self, *args, **kwargs)
 */
  __pyx_t_1 = ((__pyx_v_self->__pyx_base.ctx == NULL) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "nodes_def.pyx":1053
 *         self.ctx = ngl_node_create(NGL_NODE_CIRCLE)
 *         if self.ctx is NULL:
 *             raise MemoryError()             # <<<<<<<<<<<<<<
 *         _Node._init_params(self, *args, **kwargs)
 * 
 */
    PyErr_NoMemory(); __PYX_ERR(0, 1053, __pyx_L1_error)

    /* "nodes_def.pyx":1052
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_CIRCLE)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         _Node._init_params(self, *args, **kwargs)
 */
  }

  /* "nodes_def.pyx":1054
 *         if self.ctx is NULL:
 *             raise MemoryError()
 *         _Node._init_params(self, *args, **kwargs)             # <<<<<<<<<<<<<<
 * 
 *         if radius is not None:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_8pynodegl__Node), __pyx_n_s_init_params); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1054, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1054, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_v_self));
  __pyx_t_4 = PyNumber_Add(__pyx_t_3, __pyx_v_args); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1054, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, __pyx_v_kwargs); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1054, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "nodes_def.pyx":1056
 *         _Node._init_params(self, *args, **kwargs)
 * 
 *         if radius is not None:             # <<<<<<<<<<<<<<
 *             self.set_radius(radius)
 *         if npoints is not None:
 */
  __pyx_t_1 = (__pyx_v_radius != Py_None);
  __pyx_t_5 = (__pyx_t_1 != 0);
  if (__pyx_t_5) {

    /* "nodes_def.pyx":1057
 * 
 *         if radius is not None:
 *             self.set_radius(radius)             # <<<<<<<<<<<<<<
 *         if npoints is not None:
 *             self.set_npoints(npoints)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_radius); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1057, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_2, __pyx_v_radius) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_radius);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1057, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "nodes_def.pyx":1056
 *         _Node._init_params(self, *args, **kwargs)
 * 
 *         if radius is not None:             # <<<<<<<<<<<<<<
 *             self.set_radius(radius)
 *         if npoints is not None:
 */
  }

  /* "nodes_def.pyx":1058
 *         if radius is not None:
 *             self.set_radius(radius)
 *         if npoints is not None:             # <<<<<<<<<<<<<<
 *             self.set_npoints(npoints)
 * 
 */
  __pyx_t_5 = (__pyx_v_npoints != Py_None);
  __pyx_t_1 = (__pyx_t_5 != 0);
  if (__pyx_t_1) {

    /* "nodes_def.pyx":1059
 *             self.set_radius(radius)
 *         if npoints is not None:
 *             self.set_npoints(npoints)             # <<<<<<<<<<<<<<
 * 
 *     def set_radius(self, double radius):
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_npoints); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1059, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_2, __pyx_v_npoints) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_npoints);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1059, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "nodes_def.pyx":1058
 *         if radius is not None:
 *             self.set_radius(radius)
 *         if npoints is not None:             # <<<<<<<<<<<<<<
 *             self.set_npoints(npoints)
 * 
 */
  }

  /* "nodes_def.pyx":1049
 * cdef class Circle(_Node):
 * 
 *     def __init__(self, radius=None, npoints=None, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_CIRCLE)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pynodegl.Circle.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":1061
 *             self.set_npoints(npoints)
 * 
 *     def set_radius(self, double radius):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "radius", radius)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_6Circle_3set_radius(PyObject *__pyx_v_self, PyObject *__pyx_arg_radius); /*proto*/
static PyObject *__pyx_pw_8pynodegl_6Circle_3set_radius(PyObject *__pyx_v_self, PyObject *__pyx_arg_radius) {
  double __pyx_v_radius;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_radius (wrapper)", 0);
  assert(__pyx_arg_radius); {
    __pyx_v_radius = __pyx_PyFloat_AsDouble(__pyx_arg_radius); if (unlikely((__pyx_v_radius == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1061, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pynodegl.Circle.set_radius", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pynodegl_6Circle_2set_radius(((struct __pyx_obj_8pynodegl_Circle *)__pyx_v_self), ((double)__pyx_v_radius));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_6Circle_2set_radius(struct __pyx_obj_8pynodegl_Circle *__pyx_v_self, double __pyx_v_radius) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("set_radius", 0);

  /* "nodes_def.pyx":1062
 * 
 *     def set_radius(self, double radius):
 *         return ngl_node_param_set(self.ctx, "radius", radius)             # <<<<<<<<<<<<<<
 * 
 *     def set_npoints(self, int npoints):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"radius"), __pyx_v_radius)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1062, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":1061
 *             self.set_npoints(npoints)
 * 
 *     def set_radius(self, double radius):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "radius", radius)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.Circle.set_radius", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":1064
 *         return ngl_node_param_set(self.ctx, "radius", radius)
 * 
 *     def set_npoints(self, int npoints):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "npoints", npoints)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_6Circle_5set_npoints(PyObject *__pyx_v_self, PyObject *__pyx_arg_npoints); /*proto*/
static PyObject *__pyx_pw_8pynodegl_6Circle_5set_npoints(PyObject *__pyx_v_self, PyObject *__pyx_arg_npoints) {
  int __pyx_v_npoints;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_npoints (wrapper)", 0);
  assert(__pyx_arg_npoints); {
    __pyx_v_npoints = __Pyx_PyInt_As_int(__pyx_arg_npoints); if (unlikely((__pyx_v_npoints == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1064, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pynodegl.Circle.set_npoints", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pynodegl_6Circle_4set_npoints(((struct __pyx_obj_8pynodegl_Circle *)__pyx_v_self), ((int)__pyx_v_npoints));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_6Circle_4set_npoints(struct __pyx_obj_8pynodegl_Circle *__pyx_v_self, int __pyx_v_npoints) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("set_npoints", 0);

  /* "nodes_def.pyx":1065
 * 
 *     def set_npoints(self, int npoints):
 *         return ngl_node_param_set(self.ctx, "npoints", npoints)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"npoints"), __pyx_v_npoints)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1065, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":1064
 *         return ngl_node_param_set(self.ctx, "radius", radius)
 * 
 *     def set_npoints(self, int npoints):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "npoints", npoints)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.Circle.set_npoints", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_6Circle_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pynodegl_6Circle_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_6Circle_6__reduce_cython__(((struct __pyx_obj_8pynodegl_Circle *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_6Circle_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_Circle *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__106, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.Circle.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_6Circle_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8pynodegl_6Circle_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_6Circle_8__setstate_cython__(((struct __pyx_obj_8pynodegl_Circle *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_6Circle_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_Circle *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__107, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.Circle.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":1070
 * cdef class Compute(_Node):
 * 
 *     def __init__(self, int nb_group_x, int nb_group_y, int nb_group_z, _Node program, textures=None, uniforms=None, blocks=None, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         assert program is not None
 * 
 */

/* Python wrapper */
static int __pyx_pw_8pynodegl_7Compute_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pynodegl_7Compute_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_nb_group_x;
  int __pyx_v_nb_group_y;
  int __pyx_v_nb_group_z;
  struct __pyx_obj_8pynodegl__Node *__pyx_v_program = 0;
  PyObject *__pyx_v_textures = 0;
  PyObject *__pyx_v_uniforms = 0;
  PyObject *__pyx_v_blocks = 0;
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  __pyx_v_kwargs = PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return -1;
  __Pyx_GOTREF(__pyx_v_kwargs);
  if (PyTuple_GET_SIZE(__pyx_args) > 7) {
    __pyx_v_args = PyTuple_GetSlice(__pyx_args, 7, PyTuple_GET_SIZE(__pyx_args));
    if (unlikely(!__pyx_v_args)) {
      __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
      __Pyx_RefNannyFinishContext();
      return -1;
    }
    __Pyx_GOTREF(__pyx_v_args);
  } else {
    __pyx_v_args = __pyx_empty_tuple; __Pyx_INCREF(__pyx_empty_tuple);
  }
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_nb_group_x,&__pyx_n_s_nb_group_y,&__pyx_n_s_nb_group_z,&__pyx_n_s_program,&__pyx_n_s_textures,&__pyx_n_s_uniforms,&__pyx_n_s_blocks,0};
    PyObject* values[7] = {0,0,0,0,0,0,0};
    values[4] = ((PyObject *)Py_None);
    values[5] = ((PyObject *)Py_None);
    values[6] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        default:
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_nb_group_x)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_nb_group_y)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 4, 7, 1); __PYX_ERR(0, 1070, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_nb_group_z)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 4, 7, 2); __PYX_ERR(0, 1070, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_program)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 4, 7, 3); __PYX_ERR(0, 1070, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_textures);
          if (value) { values[4] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_uniforms);
          if (value) { values[5] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_blocks);
          if (value) { values[6] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t used_pos_args = (pos_args < 7) ? pos_args : 7;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_kwargs, values, used_pos_args, "__init__") < 0)) __PYX_ERR(0, 1070, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        default:
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        case  3:
        case  2:
        case  1:
        case  0:
        goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_nb_group_x = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_nb_group_x == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1070, __pyx_L3_error)
    __pyx_v_nb_group_y = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_nb_group_y == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1070, __pyx_L3_error)
    __pyx_v_nb_group_z = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_nb_group_z == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1070, __pyx_L3_error)
    __pyx_v_program = ((struct __pyx_obj_8pynodegl__Node *)values[3]);
    __pyx_v_textures = values[4];
    __pyx_v_uniforms = values[5];
    __pyx_v_blocks = values[6];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 4, 7, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1070, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_args); __pyx_v_args = 0;
  __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
  __Pyx_AddTraceback("pynodegl.Compute.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_program), __pyx_ptype_8pynodegl__Node, 1, "program", 0))) __PYX_ERR(0, 1070, __pyx_L1_error)
  __pyx_r = __pyx_pf_8pynodegl_7Compute___init__(((struct __pyx_obj_8pynodegl_Compute *)__pyx_v_self), __pyx_v_nb_group_x, __pyx_v_nb_group_y, __pyx_v_nb_group_z, __pyx_v_program, __pyx_v_textures, __pyx_v_uniforms, __pyx_v_blocks, __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pynodegl_7Compute___init__(struct __pyx_obj_8pynodegl_Compute *__pyx_v_self, int __pyx_v_nb_group_x, int __pyx_v_nb_group_y, int __pyx_v_nb_group_z, struct __pyx_obj_8pynodegl__Node *__pyx_v_program, PyObject *__pyx_v_textures, PyObject *__pyx_v_uniforms, PyObject *__pyx_v_blocks, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "nodes_def.pyx":1071
 * 
 *     def __init__(self, int nb_group_x, int nb_group_y, int nb_group_z, _Node program, textures=None, uniforms=None, blocks=None, *args, **kwargs):
 *         assert program is not None             # <<<<<<<<<<<<<<
 * 
 *         assert self.ctx is NULL
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = (((PyObject *)__pyx_v_program) != Py_None);
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 1071, __pyx_L1_error)
    }
  }
  #endif

  /* "nodes_def.pyx":1073
 *         assert program is not None
 * 
 *         assert self.ctx is NULL             # <<<<<<<<<<<<<<
 *         self.ctx = ngl_node_create(NGL_NODE_COMPUTE, nb_group_x, nb_group_y, nb_group_z, program.ctx)
 *         if self.ctx is NULL:
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!((__pyx_v_self->__pyx_base.ctx == NULL) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 1073, __pyx_L1_error)
    }
  }
  #endif

  /* "nodes_def.pyx":1074
 * 
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_COMPUTE, nb_group_x, nb_group_y, nb_group_z, program.ctx)             # <<<<<<<<<<<<<<
 *         if self.ctx is NULL:
 *             raise MemoryError()
 */
  __pyx_v_self->__pyx_base.ctx = ngl_node_create(NGL_NODE_COMPUTE, __pyx_v_nb_group_x, __pyx_v_nb_group_y, __pyx_v_nb_group_z, __pyx_v_program->ctx);

  /* "nodes_def.pyx":1075
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_COMPUTE, nb_group_x, nb_group_y, nb_group_z, program.ctx)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         _Node._init_params(self, *args, **kwargs)
 */
  __pyx_t_1 = ((__pyx_v_self->__pyx_base.ctx == NULL) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "nodes_def.pyx":1076
 *         self.ctx = ngl_node_create(NGL_NODE_COMPUTE, nb_group_x, nb_group_y, nb_group_z, program.ctx)
 *         if self.ctx is NULL:
 *             raise MemoryError()             # <<<<<<<<<<<<<<
 *         _Node._init_params(self, *args, **kwargs)
 * 
 */
    PyErr_NoMemory(); __PYX_ERR(0, 1076, __pyx_L1_error)

    /* "nodes_def.pyx":1075
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_COMPUTE, nb_group_x, nb_group_y, nb_group_z, program.ctx)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         _Node._init_params(self, *args, **kwargs)
 */
  }

  /* "nodes_def.pyx":1077
 *         if self.ctx is NULL:
 *             raise MemoryError()
 *         _Node._init_params(self, *args, **kwargs)             # <<<<<<<<<<<<<<
 * 
 *         if textures is not None:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_8pynodegl__Node), __pyx_n_s_init_params); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1077, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1077, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_v_self));
  __pyx_t_4 = PyNumber_Add(__pyx_t_3, __pyx_v_args); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1077, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, __pyx_v_kwargs); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1077, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "nodes_def.pyx":1079
 *         _Node._init_params(self, *args, **kwargs)
 * 
 *         if textures is not None:             # <<<<<<<<<<<<<<
 *             self.update_textures(textures)
 *         if uniforms is not None:
 */
  __pyx_t_1 = (__pyx_v_textures != Py_None);
  __pyx_t_5 = (__pyx_t_1 != 0);
  if (__pyx_t_5) {

    /* "nodes_def.pyx":1080
 * 
 *         if textures is not None:
 *             self.update_textures(textures)             # <<<<<<<<<<<<<<
 *         if uniforms is not None:
 *             self.update_uniforms(uniforms)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_update_textures); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1080, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_2, __pyx_v_textures) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_textures);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1080, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "nodes_def.pyx":1079
 *         _Node._init_params(self, *args, **kwargs)
 * 
 *         if textures is not None:             # <<<<<<<<<<<<<<
 *             self.update_textures(textures)
 *         if uniforms is not None:
 */
  }

  /* "nodes_def.pyx":1081
 *         if textures is not None:
 *             self.update_textures(textures)
 *         if uniforms is not None:             # <<<<<<<<<<<<<<
 *             self.update_uniforms(uniforms)
 *         if blocks is not None:
 */
  __pyx_t_5 = (__pyx_v_uniforms != Py_None);
  __pyx_t_1 = (__pyx_t_5 != 0);
  if (__pyx_t_1) {

    /* "nodes_def.pyx":1082
 *             self.update_textures(textures)
 *         if uniforms is not None:
 *             self.update_uniforms(uniforms)             # <<<<<<<<<<<<<<
 *         if blocks is not None:
 *             self.update_blocks(blocks)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_update_uniforms); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1082, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_2, __pyx_v_uniforms) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_uniforms);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1082, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "nodes_def.pyx":1081
 *         if textures is not None:
 *             self.update_textures(textures)
 *         if uniforms is not None:             # <<<<<<<<<<<<<<
 *             self.update_uniforms(uniforms)
 *         if blocks is not None:
 */
  }

  /* "nodes_def.pyx":1083
 *         if uniforms is not None:
 *             self.update_uniforms(uniforms)
 *         if blocks is not None:             # <<<<<<<<<<<<<<
 *             self.update_blocks(blocks)
 * 
 */
  __pyx_t_1 = (__pyx_v_blocks != Py_None);
  __pyx_t_5 = (__pyx_t_1 != 0);
  if (__pyx_t_5) {

    /* "nodes_def.pyx":1084
 *             self.update_uniforms(uniforms)
 *         if blocks is not None:
 *             self.update_blocks(blocks)             # <<<<<<<<<<<<<<
 * 
 *     def update_textures(self, arg=None, **kwargs):
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_update_blocks); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1084, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_2, __pyx_v_blocks) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_blocks);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1084, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "nodes_def.pyx":1083
 *         if uniforms is not None:
 *             self.update_uniforms(uniforms)
 *         if blocks is not None:             # <<<<<<<<<<<<<<
 *             self.update_blocks(blocks)
 * 
 */
  }

  /* "nodes_def.pyx":1070
 * cdef class Compute(_Node):
 * 
 *     def __init__(self, int nb_group_x, int nb_group_y, int nb_group_z, _Node program, textures=None, uniforms=None, blocks=None, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         assert program is not None
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pynodegl.Compute.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":1086
 *             self.update_blocks(blocks)
 * 
 *     def update_textures(self, arg=None, **kwargs):             # <<<<<<<<<<<<<<
 *         return self._update_dict("textures", arg, **kwargs)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_7Compute_3update_textures(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_8pynodegl_7Compute_3update_textures(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_arg = 0;
  PyObject *__pyx_v_kwargs = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("update_textures (wrapper)", 0);
  __pyx_v_kwargs = PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return NULL;
  __Pyx_GOTREF(__pyx_v_kwargs);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_arg,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_arg);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_kwargs, values, pos_args, "update_textures") < 0)) __PYX_ERR(0, 1086, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_arg = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("update_textures", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1086, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
  __Pyx_AddTraceback("pynodegl.Compute.update_textures", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pynodegl_7Compute_2update_textures(((struct __pyx_obj_8pynodegl_Compute *)__pyx_v_self), __pyx_v_arg, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_7Compute_2update_textures(struct __pyx_obj_8pynodegl_Compute *__pyx_v_self, PyObject *__pyx_v_arg, PyObject *__pyx_v_kwargs) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("update_textures", 0);

  /* "nodes_def.pyx":1087
 * 
 *     def update_textures(self, arg=None, **kwargs):
 *         return self._update_dict("textures", arg, **kwargs)             # <<<<<<<<<<<<<<
 * 
 *     def update_uniforms(self, arg=None, **kwargs):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_update_dict); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1087, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1087, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_u_textures);
  __Pyx_GIVEREF(__pyx_n_u_textures);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_n_u_textures);
  __Pyx_INCREF(__pyx_v_arg);
  __Pyx_GIVEREF(__pyx_v_arg);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_arg);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, __pyx_v_kwargs); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1087, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":1086
 *             self.update_blocks(blocks)
 * 
 *     def update_textures(self, arg=None, **kwargs):             # <<<<<<<<<<<<<<
 *         return self._update_dict("textures", arg, **kwargs)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pynodegl.Compute.update_textures", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":1089
 *         return self._update_dict("textures", arg, **kwargs)
 * 
 *     def update_uniforms(self, arg=None, **kwargs):             # <<<<<<<<<<<<<<
 *         return self._update_dict("uniforms", arg, **kwargs)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_7Compute_5update_uniforms(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_8pynodegl_7Compute_5update_uniforms(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_arg = 0;
  PyObject *__pyx_v_kwargs = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("update_uniforms (wrapper)", 0);
  __pyx_v_kwargs = PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return NULL;
  __Pyx_GOTREF(__pyx_v_kwargs);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_arg,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_arg);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_kwargs, values, pos_args, "update_uniforms") < 0)) __PYX_ERR(0, 1089, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_arg = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("update_uniforms", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1089, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
  __Pyx_AddTraceback("pynodegl.Compute.update_uniforms", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pynodegl_7Compute_4update_uniforms(((struct __pyx_obj_8pynodegl_Compute *)__pyx_v_self), __pyx_v_arg, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_7Compute_4update_uniforms(struct __pyx_obj_8pynodegl_Compute *__pyx_v_self, PyObject *__pyx_v_arg, PyObject *__pyx_v_kwargs) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("update_uniforms", 0);

  /* "nodes_def.pyx":1090
 * 
 *     def update_uniforms(self, arg=None, **kwargs):
 *         return self._update_dict("uniforms", arg, **kwargs)             # <<<<<<<<<<<<<<
 * 
 *     def update_blocks(self, arg=None, **kwargs):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_update_dict); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1090, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1090, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_u_uniforms);
  __Pyx_GIVEREF(__pyx_n_u_uniforms);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_n_u_uniforms);
  __Pyx_INCREF(__pyx_v_arg);
  __Pyx_GIVEREF(__pyx_v_arg);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_arg);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, __pyx_v_kwargs); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1090, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":1089
 *         return self._update_dict("textures", arg, **kwargs)
 * 
 *     def update_uniforms(self, arg=None, **kwargs):             # <<<<<<<<<<<<<<
 *         return self._update_dict("uniforms", arg, **kwargs)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pynodegl.Compute.update_uniforms", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":1092
 *         return self._update_dict("uniforms", arg, **kwargs)
 * 
 *     def update_blocks(self, arg=None, **kwargs):             # <<<<<<<<<<<<<<
 *         return self._update_dict("blocks", arg, **kwargs)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_7Compute_7update_blocks(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_8pynodegl_7Compute_7update_blocks(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_arg = 0;
  PyObject *__pyx_v_kwargs = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("update_blocks (wrapper)", 0);
  __pyx_v_kwargs = PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return NULL;
  __Pyx_GOTREF(__pyx_v_kwargs);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_arg,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_arg);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_kwargs, values, pos_args, "update_blocks") < 0)) __PYX_ERR(0, 1092, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_arg = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("update_blocks", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1092, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
  __Pyx_AddTraceback("pynodegl.Compute.update_blocks", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pynodegl_7Compute_6update_blocks(((struct __pyx_obj_8pynodegl_Compute *)__pyx_v_self), __pyx_v_arg, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_7Compute_6update_blocks(struct __pyx_obj_8pynodegl_Compute *__pyx_v_self, PyObject *__pyx_v_arg, PyObject *__pyx_v_kwargs) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("update_blocks", 0);

  /* "nodes_def.pyx":1093
 * 
 *     def update_blocks(self, arg=None, **kwargs):
 *         return self._update_dict("blocks", arg, **kwargs)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_update_dict); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1093, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1093, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_u_blocks);
  __Pyx_GIVEREF(__pyx_n_u_blocks);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_n_u_blocks);
  __Pyx_INCREF(__pyx_v_arg);
  __Pyx_GIVEREF(__pyx_v_arg);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_arg);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, __pyx_v_kwargs); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1093, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":1092
 *         return self._update_dict("uniforms", arg, **kwargs)
 * 
 *     def update_blocks(self, arg=None, **kwargs):             # <<<<<<<<<<<<<<
 *         return self._update_dict("blocks", arg, **kwargs)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pynodegl.Compute.update_blocks", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_7Compute_9__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pynodegl_7Compute_9__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_7Compute_8__reduce_cython__(((struct __pyx_obj_8pynodegl_Compute *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_7Compute_8__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_Compute *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__108, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.Compute.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_7Compute_11__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8pynodegl_7Compute_11__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_7Compute_10__setstate_cython__(((struct __pyx_obj_8pynodegl_Compute *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_7Compute_10__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_Compute *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__109, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.Compute.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":1098
 * cdef class ComputeProgram(_Node):
 * 
 *     def __init__(self, const char *compute, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_COMPUTEPROGRAM, compute)
 */

/* Python wrapper */
static int __pyx_pw_8pynodegl_14ComputeProgram_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pynodegl_14ComputeProgram_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  char const *__pyx_v_compute;
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  __pyx_v_kwargs = PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return -1;
  __Pyx_GOTREF(__pyx_v_kwargs);
  if (PyTuple_GET_SIZE(__pyx_args) > 1) {
    __pyx_v_args = PyTuple_GetSlice(__pyx_args, 1, PyTuple_GET_SIZE(__pyx_args));
    if (unlikely(!__pyx_v_args)) {
      __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
      __Pyx_RefNannyFinishContext();
      return -1;
    }
    __Pyx_GOTREF(__pyx_v_args);
  } else {
    __pyx_v_args = __pyx_empty_tuple; __Pyx_INCREF(__pyx_empty_tuple);
  }
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_compute,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        default:
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_compute)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t used_pos_args = (pos_args < 1) ? pos_args : 1;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_kwargs, values, used_pos_args, "__init__") < 0)) __PYX_ERR(0, 1098, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) < 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_compute = __Pyx_PyObject_AsString(values[0]); if (unlikely((!__pyx_v_compute) && PyErr_Occurred())) __PYX_ERR(0, 1098, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1098, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_args); __pyx_v_args = 0;
  __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
  __Pyx_AddTraceback("pynodegl.ComputeProgram.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pynodegl_14ComputeProgram___init__(((struct __pyx_obj_8pynodegl_ComputeProgram *)__pyx_v_self), __pyx_v_compute, __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pynodegl_14ComputeProgram___init__(struct __pyx_obj_8pynodegl_ComputeProgram *__pyx_v_self, char const *__pyx_v_compute, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "nodes_def.pyx":1099
 * 
 *     def __init__(self, const char *compute, *args, **kwargs):
 *         assert self.ctx is NULL             # <<<<<<<<<<<<<<
 *         self.ctx = ngl_node_create(NGL_NODE_COMPUTEPROGRAM, compute)
 *         if self.ctx is NULL:
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!((__pyx_v_self->__pyx_base.ctx == NULL) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 1099, __pyx_L1_error)
    }
  }
  #endif

  /* "nodes_def.pyx":1100
 *     def __init__(self, const char *compute, *args, **kwargs):
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_COMPUTEPROGRAM, compute)             # <<<<<<<<<<<<<<
 *         if self.ctx is NULL:
 *             raise MemoryError()
 */
  __pyx_v_self->__pyx_base.ctx = ngl_node_create(NGL_NODE_COMPUTEPROGRAM, __pyx_v_compute);

  /* "nodes_def.pyx":1101
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_COMPUTEPROGRAM, compute)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         _Node._init_params(self, *args, **kwargs)
 */
  __pyx_t_1 = ((__pyx_v_self->__pyx_base.ctx == NULL) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "nodes_def.pyx":1102
 *         self.ctx = ngl_node_create(NGL_NODE_COMPUTEPROGRAM, compute)
 *         if self.ctx is NULL:
 *             raise MemoryError()             # <<<<<<<<<<<<<<
 *         _Node._init_params(self, *args, **kwargs)
 * 
 */
    PyErr_NoMemory(); __PYX_ERR(0, 1102, __pyx_L1_error)

    /* "nodes_def.pyx":1101
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_COMPUTEPROGRAM, compute)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         _Node._init_params(self, *args, **kwargs)
 */
  }

  /* "nodes_def.pyx":1103
 *         if self.ctx is NULL:
 *             raise MemoryError()
 *         _Node._init_params(self, *args, **kwargs)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_8pynodegl__Node), __pyx_n_s_init_params); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1103, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1103, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_v_self));
  __pyx_t_4 = PyNumber_Add(__pyx_t_3, __pyx_v_args); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1103, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, __pyx_v_kwargs); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1103, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "nodes_def.pyx":1098
 * cdef class ComputeProgram(_Node):
 * 
 *     def __init__(self, const char *compute, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_COMPUTEPROGRAM, compute)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pynodegl.ComputeProgram.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_14ComputeProgram_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pynodegl_14ComputeProgram_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_14ComputeProgram_2__reduce_cython__(((struct __pyx_obj_8pynodegl_ComputeProgram *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_14ComputeProgram_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_ComputeProgram *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__110, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.ComputeProgram.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_14ComputeProgram_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8pynodegl_14ComputeProgram_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_14ComputeProgram_4__setstate_cython__(((struct __pyx_obj_8pynodegl_ComputeProgram *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_14ComputeProgram_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_ComputeProgram *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__111, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.ComputeProgram.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":1109
 * cdef class Geometry(_Node):
 * 
 *     def __init__(self, _Node vertices, uvcoords=None, normals=None, indices=None, topology=None, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         assert vertices is not None
 * 
 */

/* Python wrapper */
static int __pyx_pw_8pynodegl_8Geometry_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pynodegl_8Geometry_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pynodegl__Node *__pyx_v_vertices = 0;
  PyObject *__pyx_v_uvcoords = 0;
  PyObject *__pyx_v_normals = 0;
  PyObject *__pyx_v_indices = 0;
  PyObject *__pyx_v_topology = 0;
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  __pyx_v_kwargs = PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return -1;
  __Pyx_GOTREF(__pyx_v_kwargs);
  if (PyTuple_GET_SIZE(__pyx_args) > 5) {
    __pyx_v_args = PyTuple_GetSlice(__pyx_args, 5, PyTuple_GET_SIZE(__pyx_args));
    if (unlikely(!__pyx_v_args)) {
      __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
      __Pyx_RefNannyFinishContext();
      return -1;
    }
    __Pyx_GOTREF(__pyx_v_args);
  } else {
    __pyx_v_args = __pyx_empty_tuple; __Pyx_INCREF(__pyx_empty_tuple);
  }
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_vertices,&__pyx_n_s_uvcoords,&__pyx_n_s_normals,&__pyx_n_s_indices,&__pyx_n_s_topology,0};
    PyObject* values[5] = {0,0,0,0,0};
    values[1] = ((PyObject *)Py_None);
    values[2] = ((PyObject *)Py_None);
    values[3] = ((PyObject *)Py_None);
    values[4] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        default:
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_vertices)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_uvcoords);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_normals);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_indices);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_topology);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t used_pos_args = (pos_args < 5) ? pos_args : 5;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_kwargs, values, used_pos_args, "__init__") < 0)) __PYX_ERR(0, 1109, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        default:
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        case  0:
        goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_vertices = ((struct __pyx_obj_8pynodegl__Node *)values[0]);
    __pyx_v_uvcoords = values[1];
    __pyx_v_normals = values[2];
    __pyx_v_indices = values[3];
    __pyx_v_topology = values[4];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 1, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1109, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_args); __pyx_v_args = 0;
  __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
  __Pyx_AddTraceback("pynodegl.Geometry.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_vertices), __pyx_ptype_8pynodegl__Node, 1, "vertices", 0))) __PYX_ERR(0, 1109, __pyx_L1_error)
  __pyx_r = __pyx_pf_8pynodegl_8Geometry___init__(((struct __pyx_obj_8pynodegl_Geometry *)__pyx_v_self), __pyx_v_vertices, __pyx_v_uvcoords, __pyx_v_normals, __pyx_v_indices, __pyx_v_topology, __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pynodegl_8Geometry___init__(struct __pyx_obj_8pynodegl_Geometry *__pyx_v_self, struct __pyx_obj_8pynodegl__Node *__pyx_v_vertices, PyObject *__pyx_v_uvcoords, PyObject *__pyx_v_normals, PyObject *__pyx_v_indices, PyObject *__pyx_v_topology, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "nodes_def.pyx":1110
 * 
 *     def __init__(self, _Node vertices, uvcoords=None, normals=None, indices=None, topology=None, *args, **kwargs):
 *         assert vertices is not None             # <<<<<<<<<<<<<<
 * 
 *         assert self.ctx is NULL
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = (((PyObject *)__pyx_v_vertices) != Py_None);
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 1110, __pyx_L1_error)
    }
  }
  #endif

  /* "nodes_def.pyx":1112
 *         assert vertices is not None
 * 
 *         assert self.ctx is NULL             # <<<<<<<<<<<<<<
 *         self.ctx = ngl_node_create(NGL_NODE_GEOMETRY, vertices.ctx)
 *         if self.ctx is NULL:
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!((__pyx_v_self->__pyx_base.ctx == NULL) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 1112, __pyx_L1_error)
    }
  }
  #endif

  /* "nodes_def.pyx":1113
 * 
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_GEOMETRY, vertices.ctx)             # <<<<<<<<<<<<<<
 *         if self.ctx is NULL:
 *             raise MemoryError()
 */
  __pyx_v_self->__pyx_base.ctx = ngl_node_create(NGL_NODE_GEOMETRY, __pyx_v_vertices->ctx);

  /* "nodes_def.pyx":1114
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_GEOMETRY, vertices.ctx)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         _Node._init_params(self, *args, **kwargs)
 */
  __pyx_t_1 = ((__pyx_v_self->__pyx_base.ctx == NULL) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "nodes_def.pyx":1115
 *         self.ctx = ngl_node_create(NGL_NODE_GEOMETRY, vertices.ctx)
 *         if self.ctx is NULL:
 *             raise MemoryError()             # <<<<<<<<<<<<<<
 *         _Node._init_params(self, *args, **kwargs)
 * 
 */
    PyErr_NoMemory(); __PYX_ERR(0, 1115, __pyx_L1_error)

    /* "nodes_def.pyx":1114
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_GEOMETRY, vertices.ctx)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         _Node._init_params(self, *args, **kwargs)
 */
  }

  /* "nodes_def.pyx":1116
 *         if self.ctx is NULL:
 *             raise MemoryError()
 *         _Node._init_params(self, *args, **kwargs)             # <<<<<<<<<<<<<<
 * 
 *         if uvcoords is not None:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_8pynodegl__Node), __pyx_n_s_init_params); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1116, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1116, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_v_self));
  __pyx_t_4 = PyNumber_Add(__pyx_t_3, __pyx_v_args); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1116, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, __pyx_v_kwargs); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1116, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "nodes_def.pyx":1118
 *         _Node._init_params(self, *args, **kwargs)
 * 
 *         if uvcoords is not None:             # <<<<<<<<<<<<<<
 *             self.set_uvcoords(uvcoords)
 *         if normals is not None:
 */
  __pyx_t_1 = (__pyx_v_uvcoords != Py_None);
  __pyx_t_5 = (__pyx_t_1 != 0);
  if (__pyx_t_5) {

    /* "nodes_def.pyx":1119
 * 
 *         if uvcoords is not None:
 *             self.set_uvcoords(uvcoords)             # <<<<<<<<<<<<<<
 *         if normals is not None:
 *             self.set_normals(normals)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_uvcoords); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1119, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_2, __pyx_v_uvcoords) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_uvcoords);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1119, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "nodes_def.pyx":1118
 *         _Node._init_params(self, *args, **kwargs)
 * 
 *         if uvcoords is not None:             # <<<<<<<<<<<<<<
 *             self.set_uvcoords(uvcoords)
 *         if normals is not None:
 */
  }

  /* "nodes_def.pyx":1120
 *         if uvcoords is not None:
 *             self.set_uvcoords(uvcoords)
 *         if normals is not None:             # <<<<<<<<<<<<<<
 *             self.set_normals(normals)
 *         if indices is not None:
 */
  __pyx_t_5 = (__pyx_v_normals != Py_None);
  __pyx_t_1 = (__pyx_t_5 != 0);
  if (__pyx_t_1) {

    /* "nodes_def.pyx":1121
 *             self.set_uvcoords(uvcoords)
 *         if normals is not None:
 *             self.set_normals(normals)             # <<<<<<<<<<<<<<
 *         if indices is not None:
 *             self.set_indices(indices)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_normals); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1121, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_2, __pyx_v_normals) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_normals);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1121, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "nodes_def.pyx":1120
 *         if uvcoords is not None:
 *             self.set_uvcoords(uvcoords)
 *         if normals is not None:             # <<<<<<<<<<<<<<
 *             self.set_normals(normals)
 *         if indices is not None:
 */
  }

  /* "nodes_def.pyx":1122
 *         if normals is not None:
 *             self.set_normals(normals)
 *         if indices is not None:             # <<<<<<<<<<<<<<
 *             self.set_indices(indices)
 *         if topology is not None:
 */
  __pyx_t_1 = (__pyx_v_indices != Py_None);
  __pyx_t_5 = (__pyx_t_1 != 0);
  if (__pyx_t_5) {

    /* "nodes_def.pyx":1123
 *             self.set_normals(normals)
 *         if indices is not None:
 *             self.set_indices(indices)             # <<<<<<<<<<<<<<
 *         if topology is not None:
 *             self.set_topology(topology)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_indices); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1123, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_2, __pyx_v_indices) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_indices);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1123, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "nodes_def.pyx":1122
 *         if normals is not None:
 *             self.set_normals(normals)
 *         if indices is not None:             # <<<<<<<<<<<<<<
 *             self.set_indices(indices)
 *         if topology is not None:
 */
  }

  /* "nodes_def.pyx":1124
 *         if indices is not None:
 *             self.set_indices(indices)
 *         if topology is not None:             # <<<<<<<<<<<<<<
 *             self.set_topology(topology)
 * 
 */
  __pyx_t_5 = (__pyx_v_topology != Py_None);
  __pyx_t_1 = (__pyx_t_5 != 0);
  if (__pyx_t_1) {

    /* "nodes_def.pyx":1125
 *             self.set_indices(indices)
 *         if topology is not None:
 *             self.set_topology(topology)             # <<<<<<<<<<<<<<
 * 
 *     def set_uvcoords(self, _Node uvcoords):
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_topology); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1125, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_2, __pyx_v_topology) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_topology);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1125, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "nodes_def.pyx":1124
 *         if indices is not None:
 *             self.set_indices(indices)
 *         if topology is not None:             # <<<<<<<<<<<<<<
 *             self.set_topology(topology)
 * 
 */
  }

  /* "nodes_def.pyx":1109
 * cdef class Geometry(_Node):
 * 
 *     def __init__(self, _Node vertices, uvcoords=None, normals=None, indices=None, topology=None, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         assert vertices is not None
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pynodegl.Geometry.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":1127
 *             self.set_topology(topology)
 * 
 *     def set_uvcoords(self, _Node uvcoords):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "uvcoords", uvcoords.ctx)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_8Geometry_3set_uvcoords(PyObject *__pyx_v_self, PyObject *__pyx_v_uvcoords); /*proto*/
static PyObject *__pyx_pw_8pynodegl_8Geometry_3set_uvcoords(PyObject *__pyx_v_self, PyObject *__pyx_v_uvcoords) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_uvcoords (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_uvcoords), __pyx_ptype_8pynodegl__Node, 1, "uvcoords", 0))) __PYX_ERR(0, 1127, __pyx_L1_error)
  __pyx_r = __pyx_pf_8pynodegl_8Geometry_2set_uvcoords(((struct __pyx_obj_8pynodegl_Geometry *)__pyx_v_self), ((struct __pyx_obj_8pynodegl__Node *)__pyx_v_uvcoords));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_8Geometry_2set_uvcoords(struct __pyx_obj_8pynodegl_Geometry *__pyx_v_self, struct __pyx_obj_8pynodegl__Node *__pyx_v_uvcoords) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("set_uvcoords", 0);

  /* "nodes_def.pyx":1128
 * 
 *     def set_uvcoords(self, _Node uvcoords):
 *         return ngl_node_param_set(self.ctx, "uvcoords", uvcoords.ctx)             # <<<<<<<<<<<<<<
 * 
 *     def set_normals(self, _Node normals):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"uvcoords"), __pyx_v_uvcoords->ctx)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1128, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":1127
 *             self.set_topology(topology)
 * 
 *     def set_uvcoords(self, _Node uvcoords):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "uvcoords", uvcoords.ctx)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.Geometry.set_uvcoords", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":1130
 *         return ngl_node_param_set(self.ctx, "uvcoords", uvcoords.ctx)
 * 
 *     def set_normals(self, _Node normals):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "normals", normals.ctx)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_8Geometry_5set_normals(PyObject *__pyx_v_self, PyObject *__pyx_v_normals); /*proto*/
static PyObject *__pyx_pw_8pynodegl_8Geometry_5set_normals(PyObject *__pyx_v_self, PyObject *__pyx_v_normals) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_normals (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_normals), __pyx_ptype_8pynodegl__Node, 1, "normals", 0))) __PYX_ERR(0, 1130, __pyx_L1_error)
  __pyx_r = __pyx_pf_8pynodegl_8Geometry_4set_normals(((struct __pyx_obj_8pynodegl_Geometry *)__pyx_v_self), ((struct __pyx_obj_8pynodegl__Node *)__pyx_v_normals));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_8Geometry_4set_normals(struct __pyx_obj_8pynodegl_Geometry *__pyx_v_self, struct __pyx_obj_8pynodegl__Node *__pyx_v_normals) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("set_normals", 0);

  /* "nodes_def.pyx":1131
 * 
 *     def set_normals(self, _Node normals):
 *         return ngl_node_param_set(self.ctx, "normals", normals.ctx)             # <<<<<<<<<<<<<<
 * 
 *     def set_indices(self, _Node indices):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"normals"), __pyx_v_normals->ctx)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1131, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":1130
 *         return ngl_node_param_set(self.ctx, "uvcoords", uvcoords.ctx)
 * 
 *     def set_normals(self, _Node normals):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "normals", normals.ctx)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.Geometry.set_normals", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":1133
 *         return ngl_node_param_set(self.ctx, "normals", normals.ctx)
 * 
 *     def set_indices(self, _Node indices):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "indices", indices.ctx)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_8Geometry_7set_indices(PyObject *__pyx_v_self, PyObject *__pyx_v_indices); /*proto*/
static PyObject *__pyx_pw_8pynodegl_8Geometry_7set_indices(PyObject *__pyx_v_self, PyObject *__pyx_v_indices) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_indices (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_indices), __pyx_ptype_8pynodegl__Node, 1, "indices", 0))) __PYX_ERR(0, 1133, __pyx_L1_error)
  __pyx_r = __pyx_pf_8pynodegl_8Geometry_6set_indices(((struct __pyx_obj_8pynodegl_Geometry *)__pyx_v_self), ((struct __pyx_obj_8pynodegl__Node *)__pyx_v_indices));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_8Geometry_6set_indices(struct __pyx_obj_8pynodegl_Geometry *__pyx_v_self, struct __pyx_obj_8pynodegl__Node *__pyx_v_indices) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("set_indices", 0);

  /* "nodes_def.pyx":1134
 * 
 *     def set_indices(self, _Node indices):
 *         return ngl_node_param_set(self.ctx, "indices", indices.ctx)             # <<<<<<<<<<<<<<
 * 
 *     def set_topology(self, const char * topology):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"indices"), __pyx_v_indices->ctx)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1134, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":1133
 *         return ngl_node_param_set(self.ctx, "normals", normals.ctx)
 * 
 *     def set_indices(self, _Node indices):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "indices", indices.ctx)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.Geometry.set_indices", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":1136
 *         return ngl_node_param_set(self.ctx, "indices", indices.ctx)
 * 
 *     def set_topology(self, const char * topology):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "topology", topology)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_8Geometry_9set_topology(PyObject *__pyx_v_self, PyObject *__pyx_arg_topology); /*proto*/
static PyObject *__pyx_pw_8pynodegl_8Geometry_9set_topology(PyObject *__pyx_v_self, PyObject *__pyx_arg_topology) {
  char const *__pyx_v_topology;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_topology (wrapper)", 0);
  assert(__pyx_arg_topology); {
    __pyx_v_topology = __Pyx_PyObject_AsString(__pyx_arg_topology); if (unlikely((!__pyx_v_topology) && PyErr_Occurred())) __PYX_ERR(0, 1136, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pynodegl.Geometry.set_topology", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pynodegl_8Geometry_8set_topology(((struct __pyx_obj_8pynodegl_Geometry *)__pyx_v_self), ((char const *)__pyx_v_topology));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_8Geometry_8set_topology(struct __pyx_obj_8pynodegl_Geometry *__pyx_v_self, char const *__pyx_v_topology) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("set_topology", 0);

  /* "nodes_def.pyx":1137
 * 
 *     def set_topology(self, const char * topology):
 *         return ngl_node_param_set(self.ctx, "topology", topology)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"topology"), __pyx_v_topology)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1137, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":1136
 *         return ngl_node_param_set(self.ctx, "indices", indices.ctx)
 * 
 *     def set_topology(self, const char * topology):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "topology", topology)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.Geometry.set_topology", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_8Geometry_11__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pynodegl_8Geometry_11__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_8Geometry_10__reduce_cython__(((struct __pyx_obj_8pynodegl_Geometry *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_8Geometry_10__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_Geometry *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__112, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.Geometry.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_8Geometry_13__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8pynodegl_8Geometry_13__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_8Geometry_12__setstate_cython__(((struct __pyx_obj_8pynodegl_Geometry *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_8Geometry_12__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_Geometry *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__113, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.Geometry.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":1142
 * cdef class GraphicConfig(_Node):
 * 
 *     def __init__(self, _Node child, blend=None, blend_src_factor=None, blend_dst_factor=None, blend_src_factor_a=None, blend_dst_factor_a=None, blend_op=None, blend_op_a=None, color_write_mask=None, depth_test=None, depth_write_mask=None, depth_func=None, stencil_test=None, stencil_write_mask=None, stencil_func=None, stencil_ref=None, stencil_read_mask=None, stencil_fail=None, stencil_depth_fail=None, stencil_depth_pass=None, cull_face=None, cull_face_mode=None, scissor_test=None, scissor=None, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         assert child is not None
 * 
 */

/* Python wrapper */
static int __pyx_pw_8pynodegl_13GraphicConfig_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pynodegl_13GraphicConfig_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pynodegl__Node *__pyx_v_child = 0;
  PyObject *__pyx_v_blend = 0;
  PyObject *__pyx_v_blend_src_factor = 0;
  PyObject *__pyx_v_blend_dst_factor = 0;
  PyObject *__pyx_v_blend_src_factor_a = 0;
  PyObject *__pyx_v_blend_dst_factor_a = 0;
  PyObject *__pyx_v_blend_op = 0;
  PyObject *__pyx_v_blend_op_a = 0;
  PyObject *__pyx_v_color_write_mask = 0;
  PyObject *__pyx_v_depth_test = 0;
  PyObject *__pyx_v_depth_write_mask = 0;
  PyObject *__pyx_v_depth_func = 0;
  PyObject *__pyx_v_stencil_test = 0;
  PyObject *__pyx_v_stencil_write_mask = 0;
  PyObject *__pyx_v_stencil_func = 0;
  PyObject *__pyx_v_stencil_ref = 0;
  PyObject *__pyx_v_stencil_read_mask = 0;
  PyObject *__pyx_v_stencil_fail = 0;
  PyObject *__pyx_v_stencil_depth_fail = 0;
  PyObject *__pyx_v_stencil_depth_pass = 0;
  PyObject *__pyx_v_cull_face = 0;
  PyObject *__pyx_v_cull_face_mode = 0;
  PyObject *__pyx_v_scissor_test = 0;
  PyObject *__pyx_v_scissor = 0;
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  __pyx_v_kwargs = PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return -1;
  __Pyx_GOTREF(__pyx_v_kwargs);
  if (PyTuple_GET_SIZE(__pyx_args) > 24) {
    __pyx_v_args = PyTuple_GetSlice(__pyx_args, 24, PyTuple_GET_SIZE(__pyx_args));
    if (unlikely(!__pyx_v_args)) {
      __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
      __Pyx_RefNannyFinishContext();
      return -1;
    }
    __Pyx_GOTREF(__pyx_v_args);
  } else {
    __pyx_v_args = __pyx_empty_tuple; __Pyx_INCREF(__pyx_empty_tuple);
  }
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_child,&__pyx_n_s_blend,&__pyx_n_s_blend_src_factor,&__pyx_n_s_blend_dst_factor,&__pyx_n_s_blend_src_factor_a,&__pyx_n_s_blend_dst_factor_a,&__pyx_n_s_blend_op,&__pyx_n_s_blend_op_a,&__pyx_n_s_color_write_mask,&__pyx_n_s_depth_test,&__pyx_n_s_depth_write_mask,&__pyx_n_s_depth_func,&__pyx_n_s_stencil_test,&__pyx_n_s_stencil_write_mask,&__pyx_n_s_stencil_func,&__pyx_n_s_stencil_ref,&__pyx_n_s_stencil_read_mask,&__pyx_n_s_stencil_fail,&__pyx_n_s_stencil_depth_fail,&__pyx_n_s_stencil_depth_pass,&__pyx_n_s_cull_face,&__pyx_n_s_cull_face_mode,&__pyx_n_s_scissor_test,&__pyx_n_s_scissor,0};
    PyObject* values[24] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    values[1] = ((PyObject *)Py_None);
    values[2] = ((PyObject *)Py_None);
    values[3] = ((PyObject *)Py_None);
    values[4] = ((PyObject *)Py_None);
    values[5] = ((PyObject *)Py_None);
    values[6] = ((PyObject *)Py_None);
    values[7] = ((PyObject *)Py_None);
    values[8] = ((PyObject *)Py_None);
    values[9] = ((PyObject *)Py_None);
    values[10] = ((PyObject *)Py_None);
    values[11] = ((PyObject *)Py_None);
    values[12] = ((PyObject *)Py_None);
    values[13] = ((PyObject *)Py_None);
    values[14] = ((PyObject *)Py_None);
    values[15] = ((PyObject *)Py_None);
    values[16] = ((PyObject *)Py_None);
    values[17] = ((PyObject *)Py_None);
    values[18] = ((PyObject *)Py_None);
    values[19] = ((PyObject *)Py_None);
    values[20] = ((PyObject *)Py_None);
    values[21] = ((PyObject *)Py_None);
    values[22] = ((PyObject *)Py_None);
    values[23] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        default:
        case 24: values[23] = PyTuple_GET_ITEM(__pyx_args, 23);
        CYTHON_FALLTHROUGH;
        case 23: values[22] = PyTuple_GET_ITEM(__pyx_args, 22);
        CYTHON_FALLTHROUGH;
        case 22: values[21] = PyTuple_GET_ITEM(__pyx_args, 21);
        CYTHON_FALLTHROUGH;
        case 21: values[20] = PyTuple_GET_ITEM(__pyx_args, 20);
        CYTHON_FALLTHROUGH;
        case 20: values[19] = PyTuple_GET_ITEM(__pyx_args, 19);
        CYTHON_FALLTHROUGH;
        case 19: values[18] = PyTuple_GET_ITEM(__pyx_args, 18);
        CYTHON_FALLTHROUGH;
        case 18: values[17] = PyTuple_GET_ITEM(__pyx_args, 17);
        CYTHON_FALLTHROUGH;
        case 17: values[16] = PyTuple_GET_ITEM(__pyx_args, 16);
        CYTHON_FALLTHROUGH;
        case 16: values[15] = PyTuple_GET_ITEM(__pyx_args, 15);
        CYTHON_FALLTHROUGH;
        case 15: values[14] = PyTuple_GET_ITEM(__pyx_args, 14);
        CYTHON_FALLTHROUGH;
        case 14: values[13] = PyTuple_GET_ITEM(__pyx_args, 13);
        CYTHON_FALLTHROUGH;
        case 13: values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
        CYTHON_FALLTHROUGH;
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        CYTHON_FALLTHROUGH;
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        CYTHON_FALLTHROUGH;
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_child)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_blend);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_blend_src_factor);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_blend_dst_factor);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_blend_src_factor_a);
          if (value) { values[4] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_blend_dst_factor_a);
          if (value) { values[5] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_blend_op);
          if (value) { values[6] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_blend_op_a);
          if (value) { values[7] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_color_write_mask);
          if (value) { values[8] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  9:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_depth_test);
          if (value) { values[9] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case 10:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_depth_write_mask);
          if (value) { values[10] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case 11:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_depth_func);
          if (value) { values[11] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case 12:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_stencil_test);
          if (value) { values[12] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case 13:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_stencil_write_mask);
          if (value) { values[13] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case 14:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_stencil_func);
          if (value) { values[14] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case 15:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_stencil_ref);
          if (value) { values[15] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case 16:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_stencil_read_mask);
          if (value) { values[16] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case 17:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_stencil_fail);
          if (value) { values[17] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case 18:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_stencil_depth_fail);
          if (value) { values[18] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case 19:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_stencil_depth_pass);
          if (value) { values[19] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case 20:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_cull_face);
          if (value) { values[20] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case 21:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_cull_face_mode);
          if (value) { values[21] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case 22:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_scissor_test);
          if (value) { values[22] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case 23:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_scissor);
          if (value) { values[23] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t used_pos_args = (pos_args < 24) ? pos_args : 24;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_kwargs, values, used_pos_args, "__init__") < 0)) __PYX_ERR(0, 1142, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        default:
        case 24: values[23] = PyTuple_GET_ITEM(__pyx_args, 23);
        CYTHON_FALLTHROUGH;
        case 23: values[22] = PyTuple_GET_ITEM(__pyx_args, 22);
        CYTHON_FALLTHROUGH;
        case 22: values[21] = PyTuple_GET_ITEM(__pyx_args, 21);
        CYTHON_FALLTHROUGH;
        case 21: values[20] = PyTuple_GET_ITEM(__pyx_args, 20);
        CYTHON_FALLTHROUGH;
        case 20: values[19] = PyTuple_GET_ITEM(__pyx_args, 19);
        CYTHON_FALLTHROUGH;
        case 19: values[18] = PyTuple_GET_ITEM(__pyx_args, 18);
        CYTHON_FALLTHROUGH;
        case 18: values[17] = PyTuple_GET_ITEM(__pyx_args, 17);
        CYTHON_FALLTHROUGH;
        case 17: values[16] = PyTuple_GET_ITEM(__pyx_args, 16);
        CYTHON_FALLTHROUGH;
        case 16: values[15] = PyTuple_GET_ITEM(__pyx_args, 15);
        CYTHON_FALLTHROUGH;
        case 15: values[14] = PyTuple_GET_ITEM(__pyx_args, 14);
        CYTHON_FALLTHROUGH;
        case 14: values[13] = PyTuple_GET_ITEM(__pyx_args, 13);
        CYTHON_FALLTHROUGH;
        case 13: values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
        CYTHON_FALLTHROUGH;
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        CYTHON_FALLTHROUGH;
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        CYTHON_FALLTHROUGH;
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        case  0:
        goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_child = ((struct __pyx_obj_8pynodegl__Node *)values[0]);
    __pyx_v_blend = values[1];
    __pyx_v_blend_src_factor = values[2];
    __pyx_v_blend_dst_factor = values[3];
    __pyx_v_blend_src_factor_a = values[4];
    __pyx_v_blend_dst_factor_a = values[5];
    __pyx_v_blend_op = values[6];
    __pyx_v_blend_op_a = values[7];
    __pyx_v_color_write_mask = values[8];
    __pyx_v_depth_test = values[9];
    __pyx_v_depth_write_mask = values[10];
    __pyx_v_depth_func = values[11];
    __pyx_v_stencil_test = values[12];
    __pyx_v_stencil_write_mask = values[13];
    __pyx_v_stencil_func = values[14];
    __pyx_v_stencil_ref = values[15];
    __pyx_v_stencil_read_mask = values[16];
    __pyx_v_stencil_fail = values[17];
    __pyx_v_stencil_depth_fail = values[18];
    __pyx_v_stencil_depth_pass = values[19];
    __pyx_v_cull_face = values[20];
    __pyx_v_cull_face_mode = values[21];
    __pyx_v_scissor_test = values[22];
    __pyx_v_scissor = values[23];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 1, 24, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1142, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_args); __pyx_v_args = 0;
  __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
  __Pyx_AddTraceback("pynodegl.GraphicConfig.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_child), __pyx_ptype_8pynodegl__Node, 1, "child", 0))) __PYX_ERR(0, 1142, __pyx_L1_error)
  __pyx_r = __pyx_pf_8pynodegl_13GraphicConfig___init__(((struct __pyx_obj_8pynodegl_GraphicConfig *)__pyx_v_self), __pyx_v_child, __pyx_v_blend, __pyx_v_blend_src_factor, __pyx_v_blend_dst_factor, __pyx_v_blend_src_factor_a, __pyx_v_blend_dst_factor_a, __pyx_v_blend_op, __pyx_v_blend_op_a, __pyx_v_color_write_mask, __pyx_v_depth_test, __pyx_v_depth_write_mask, __pyx_v_depth_func, __pyx_v_stencil_test, __pyx_v_stencil_write_mask, __pyx_v_stencil_func, __pyx_v_stencil_ref, __pyx_v_stencil_read_mask, __pyx_v_stencil_fail, __pyx_v_stencil_depth_fail, __pyx_v_stencil_depth_pass, __pyx_v_cull_face, __pyx_v_cull_face_mode, __pyx_v_scissor_test, __pyx_v_scissor, __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pynodegl_13GraphicConfig___init__(struct __pyx_obj_8pynodegl_GraphicConfig *__pyx_v_self, struct __pyx_obj_8pynodegl__Node *__pyx_v_child, PyObject *__pyx_v_blend, PyObject *__pyx_v_blend_src_factor, PyObject *__pyx_v_blend_dst_factor, PyObject *__pyx_v_blend_src_factor_a, PyObject *__pyx_v_blend_dst_factor_a, PyObject *__pyx_v_blend_op, PyObject *__pyx_v_blend_op_a, PyObject *__pyx_v_color_write_mask, PyObject *__pyx_v_depth_test, PyObject *__pyx_v_depth_write_mask, PyObject *__pyx_v_depth_func, PyObject *__pyx_v_stencil_test, PyObject *__pyx_v_stencil_write_mask, PyObject *__pyx_v_stencil_func, PyObject *__pyx_v_stencil_ref, PyObject *__pyx_v_stencil_read_mask, PyObject *__pyx_v_stencil_fail, PyObject *__pyx_v_stencil_depth_fail, PyObject *__pyx_v_stencil_depth_pass, PyObject *__pyx_v_cull_face, PyObject *__pyx_v_cull_face_mode, PyObject *__pyx_v_scissor_test, PyObject *__pyx_v_scissor, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "nodes_def.pyx":1143
 * 
 *     def __init__(self, _Node child, blend=None, blend_src_factor=None, blend_dst_factor=None, blend_src_factor_a=None, blend_dst_factor_a=None, blend_op=None, blend_op_a=None, color_write_mask=None, depth_test=None, depth_write_mask=None, depth_func=None, stencil_test=None, stencil_write_mask=None, stencil_func=None, stencil_ref=None, stencil_read_mask=None, stencil_fail=None, stencil_depth_fail=None, stencil_depth_pass=None, cull_face=None, cull_face_mode=None, scissor_test=None, scissor=None, *args, **kwargs):
 *         assert child is not None             # <<<<<<<<<<<<<<
 * 
 *         assert self.ctx is NULL
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = (((PyObject *)__pyx_v_child) != Py_None);
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 1143, __pyx_L1_error)
    }
  }
  #endif

  /* "nodes_def.pyx":1145
 *         assert child is not None
 * 
 *         assert self.ctx is NULL             # <<<<<<<<<<<<<<
 *         self.ctx = ngl_node_create(NGL_NODE_GRAPHICCONFIG, child.ctx)
 *         if self.ctx is NULL:
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!((__pyx_v_self->__pyx_base.ctx == NULL) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 1145, __pyx_L1_error)
    }
  }
  #endif

  /* "nodes_def.pyx":1146
 * 
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_GRAPHICCONFIG, child.ctx)             # <<<<<<<<<<<<<<
 *         if self.ctx is NULL:
 *             raise MemoryError()
 */
  __pyx_v_self->__pyx_base.ctx = ngl_node_create(NGL_NODE_GRAPHICCONFIG, __pyx_v_child->ctx);

  /* "nodes_def.pyx":1147
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_GRAPHICCONFIG, child.ctx)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         _Node._init_params(self, *args, **kwargs)
 */
  __pyx_t_1 = ((__pyx_v_self->__pyx_base.ctx == NULL) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "nodes_def.pyx":1148
 *         self.ctx = ngl_node_create(NGL_NODE_GRAPHICCONFIG, child.ctx)
 *         if self.ctx is NULL:
 *             raise MemoryError()             # <<<<<<<<<<<<<<
 *         _Node._init_params(self, *args, **kwargs)
 * 
 */
    PyErr_NoMemory(); __PYX_ERR(0, 1148, __pyx_L1_error)

    /* "nodes_def.pyx":1147
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_GRAPHICCONFIG, child.ctx)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         _Node._init_params(self, *args, **kwargs)
 */
  }

  /* "nodes_def.pyx":1149
 *         if self.ctx is NULL:
 *             raise MemoryError()
 *         _Node._init_params(self, *args, **kwargs)             # <<<<<<<<<<<<<<
 * 
 *         if blend is not None:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_8pynodegl__Node), __pyx_n_s_init_params); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1149, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1149, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_v_self));
  __pyx_t_4 = PyNumber_Add(__pyx_t_3, __pyx_v_args); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1149, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, __pyx_v_kwargs); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1149, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "nodes_def.pyx":1151
 *         _Node._init_params(self, *args, **kwargs)
 * 
 *         if blend is not None:             # <<<<<<<<<<<<<<
 *             self.set_blend(blend)
 *         if blend_src_factor is not None:
 */
  __pyx_t_1 = (__pyx_v_blend != Py_None);
  __pyx_t_5 = (__pyx_t_1 != 0);
  if (__pyx_t_5) {

    /* "nodes_def.pyx":1152
 * 
 *         if blend is not None:
 *             self.set_blend(blend)             # <<<<<<<<<<<<<<
 *         if blend_src_factor is not None:
 *             self.set_blend_src_factor(blend_src_factor)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_blend); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1152, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_2, __pyx_v_blend) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_blend);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1152, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "nodes_def.pyx":1151
 *         _Node._init_params(self, *args, **kwargs)
 * 
 *         if blend is not None:             # <<<<<<<<<<<<<<
 *             self.set_blend(blend)
 *         if blend_src_factor is not None:
 */
  }

  /* "nodes_def.pyx":1153
 *         if blend is not None:
 *             self.set_blend(blend)
 *         if blend_src_factor is not None:             # <<<<<<<<<<<<<<
 *             self.set_blend_src_factor(blend_src_factor)
 *         if blend_dst_factor is not None:
 */
  __pyx_t_5 = (__pyx_v_blend_src_factor != Py_None);
  __pyx_t_1 = (__pyx_t_5 != 0);
  if (__pyx_t_1) {

    /* "nodes_def.pyx":1154
 *             self.set_blend(blend)
 *         if blend_src_factor is not None:
 *             self.set_blend_src_factor(blend_src_factor)             # <<<<<<<<<<<<<<
 *         if blend_dst_factor is not None:
 *             self.set_blend_dst_factor(blend_dst_factor)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_blend_src_factor); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1154, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_2, __pyx_v_blend_src_factor) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_blend_src_factor);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1154, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "nodes_def.pyx":1153
 *         if blend is not None:
 *             self.set_blend(blend)
 *         if blend_src_factor is not None:             # <<<<<<<<<<<<<<
 *             self.set_blend_src_factor(blend_src_factor)
 *         if blend_dst_factor is not None:
 */
  }

  /* "nodes_def.pyx":1155
 *         if blend_src_factor is not None:
 *             self.set_blend_src_factor(blend_src_factor)
 *         if blend_dst_factor is not None:             # <<<<<<<<<<<<<<
 *             self.set_blend_dst_factor(blend_dst_factor)
 *         if blend_src_factor_a is not None:
 */
  __pyx_t_1 = (__pyx_v_blend_dst_factor != Py_None);
  __pyx_t_5 = (__pyx_t_1 != 0);
  if (__pyx_t_5) {

    /* "nodes_def.pyx":1156
 *             self.set_blend_src_factor(blend_src_factor)
 *         if blend_dst_factor is not None:
 *             self.set_blend_dst_factor(blend_dst_factor)             # <<<<<<<<<<<<<<
 *         if blend_src_factor_a is not None:
 *             self.set_blend_src_factor_a(blend_src_factor_a)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_blend_dst_factor); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1156, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_2, __pyx_v_blend_dst_factor) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_blend_dst_factor);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1156, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "nodes_def.pyx":1155
 *         if blend_src_factor is not None:
 *             self.set_blend_src_factor(blend_src_factor)
 *         if blend_dst_factor is not None:             # <<<<<<<<<<<<<<
 *             self.set_blend_dst_factor(blend_dst_factor)
 *         if blend_src_factor_a is not None:
 */
  }

  /* "nodes_def.pyx":1157
 *         if blend_dst_factor is not None:
 *             self.set_blend_dst_factor(blend_dst_factor)
 *         if blend_src_factor_a is not None:             # <<<<<<<<<<<<<<
 *             self.set_blend_src_factor_a(blend_src_factor_a)
 *         if blend_dst_factor_a is not None:
 */
  __pyx_t_5 = (__pyx_v_blend_src_factor_a != Py_None);
  __pyx_t_1 = (__pyx_t_5 != 0);
  if (__pyx_t_1) {

    /* "nodes_def.pyx":1158
 *             self.set_blend_dst_factor(blend_dst_factor)
 *         if blend_src_factor_a is not None:
 *             self.set_blend_src_factor_a(blend_src_factor_a)             # <<<<<<<<<<<<<<
 *         if blend_dst_factor_a is not None:
 *             self.set_blend_dst_factor_a(blend_dst_factor_a)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_blend_src_factor_a); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1158, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_2, __pyx_v_blend_src_factor_a) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_blend_src_factor_a);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1158, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "nodes_def.pyx":1157
 *         if blend_dst_factor is not None:
 *             self.set_blend_dst_factor(blend_dst_factor)
 *         if blend_src_factor_a is not None:             # <<<<<<<<<<<<<<
 *             self.set_blend_src_factor_a(blend_src_factor_a)
 *         if blend_dst_factor_a is not None:
 */
  }

  /* "nodes_def.pyx":1159
 *         if blend_src_factor_a is not None:
 *             self.set_blend_src_factor_a(blend_src_factor_a)
 *         if blend_dst_factor_a is not None:             # <<<<<<<<<<<<<<
 *             self.set_blend_dst_factor_a(blend_dst_factor_a)
 *         if blend_op is not None:
 */
  __pyx_t_1 = (__pyx_v_blend_dst_factor_a != Py_None);
  __pyx_t_5 = (__pyx_t_1 != 0);
  if (__pyx_t_5) {

    /* "nodes_def.pyx":1160
 *             self.set_blend_src_factor_a(blend_src_factor_a)
 *         if blend_dst_factor_a is not None:
 *             self.set_blend_dst_factor_a(blend_dst_factor_a)             # <<<<<<<<<<<<<<
 *         if blend_op is not None:
 *             self.set_blend_op(blend_op)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_blend_dst_factor_a); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1160, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_2, __pyx_v_blend_dst_factor_a) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_blend_dst_factor_a);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1160, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "nodes_def.pyx":1159
 *         if blend_src_factor_a is not None:
 *             self.set_blend_src_factor_a(blend_src_factor_a)
 *         if blend_dst_factor_a is not None:             # <<<<<<<<<<<<<<
 *             self.set_blend_dst_factor_a(blend_dst_factor_a)
 *         if blend_op is not None:
 */
  }

  /* "nodes_def.pyx":1161
 *         if blend_dst_factor_a is not None:
 *             self.set_blend_dst_factor_a(blend_dst_factor_a)
 *         if blend_op is not None:             # <<<<<<<<<<<<<<
 *             self.set_blend_op(blend_op)
 *         if blend_op_a is not None:
 */
  __pyx_t_5 = (__pyx_v_blend_op != Py_None);
  __pyx_t_1 = (__pyx_t_5 != 0);
  if (__pyx_t_1) {

    /* "nodes_def.pyx":1162
 *             self.set_blend_dst_factor_a(blend_dst_factor_a)
 *         if blend_op is not None:
 *             self.set_blend_op(blend_op)             # <<<<<<<<<<<<<<
 *         if blend_op_a is not None:
 *             self.set_blend_op_a(blend_op_a)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_blend_op); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1162, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_2, __pyx_v_blend_op) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_blend_op);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1162, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "nodes_def.pyx":1161
 *         if blend_dst_factor_a is not None:
 *             self.set_blend_dst_factor_a(blend_dst_factor_a)
 *         if blend_op is not None:             # <<<<<<<<<<<<<<
 *             self.set_blend_op(blend_op)
 *         if blend_op_a is not None:
 */
  }

  /* "nodes_def.pyx":1163
 *         if blend_op is not None:
 *             self.set_blend_op(blend_op)
 *         if blend_op_a is not None:             # <<<<<<<<<<<<<<
 *             self.set_blend_op_a(blend_op_a)
 *         if color_write_mask is not None:
 */
  __pyx_t_1 = (__pyx_v_blend_op_a != Py_None);
  __pyx_t_5 = (__pyx_t_1 != 0);
  if (__pyx_t_5) {

    /* "nodes_def.pyx":1164
 *             self.set_blend_op(blend_op)
 *         if blend_op_a is not None:
 *             self.set_blend_op_a(blend_op_a)             # <<<<<<<<<<<<<<
 *         if color_write_mask is not None:
 *             self.set_color_write_mask(color_write_mask)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_blend_op_a); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1164, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_2, __pyx_v_blend_op_a) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_blend_op_a);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1164, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "nodes_def.pyx":1163
 *         if blend_op is not None:
 *             self.set_blend_op(blend_op)
 *         if blend_op_a is not None:             # <<<<<<<<<<<<<<
 *             self.set_blend_op_a(blend_op_a)
 *         if color_write_mask is not None:
 */
  }

  /* "nodes_def.pyx":1165
 *         if blend_op_a is not None:
 *             self.set_blend_op_a(blend_op_a)
 *         if color_write_mask is not None:             # <<<<<<<<<<<<<<
 *             self.set_color_write_mask(color_write_mask)
 *         if depth_test is not None:
 */
  __pyx_t_5 = (__pyx_v_color_write_mask != Py_None);
  __pyx_t_1 = (__pyx_t_5 != 0);
  if (__pyx_t_1) {

    /* "nodes_def.pyx":1166
 *             self.set_blend_op_a(blend_op_a)
 *         if color_write_mask is not None:
 *             self.set_color_write_mask(color_write_mask)             # <<<<<<<<<<<<<<
 *         if depth_test is not None:
 *             self.set_depth_test(depth_test)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_color_write_mask); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1166, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_2, __pyx_v_color_write_mask) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_color_write_mask);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1166, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "nodes_def.pyx":1165
 *         if blend_op_a is not None:
 *             self.set_blend_op_a(blend_op_a)
 *         if color_write_mask is not None:             # <<<<<<<<<<<<<<
 *             self.set_color_write_mask(color_write_mask)
 *         if depth_test is not None:
 */
  }

  /* "nodes_def.pyx":1167
 *         if color_write_mask is not None:
 *             self.set_color_write_mask(color_write_mask)
 *         if depth_test is not None:             # <<<<<<<<<<<<<<
 *             self.set_depth_test(depth_test)
 *         if depth_write_mask is not None:
 */
  __pyx_t_1 = (__pyx_v_depth_test != Py_None);
  __pyx_t_5 = (__pyx_t_1 != 0);
  if (__pyx_t_5) {

    /* "nodes_def.pyx":1168
 *             self.set_color_write_mask(color_write_mask)
 *         if depth_test is not None:
 *             self.set_depth_test(depth_test)             # <<<<<<<<<<<<<<
 *         if depth_write_mask is not None:
 *             self.set_depth_write_mask(depth_write_mask)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_depth_test); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1168, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_2, __pyx_v_depth_test) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_depth_test);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1168, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "nodes_def.pyx":1167
 *         if color_write_mask is not None:
 *             self.set_color_write_mask(color_write_mask)
 *         if depth_test is not None:             # <<<<<<<<<<<<<<
 *             self.set_depth_test(depth_test)
 *         if depth_write_mask is not None:
 */
  }

  /* "nodes_def.pyx":1169
 *         if depth_test is not None:
 *             self.set_depth_test(depth_test)
 *         if depth_write_mask is not None:             # <<<<<<<<<<<<<<
 *             self.set_depth_write_mask(depth_write_mask)
 *         if depth_func is not None:
 */
  __pyx_t_5 = (__pyx_v_depth_write_mask != Py_None);
  __pyx_t_1 = (__pyx_t_5 != 0);
  if (__pyx_t_1) {

    /* "nodes_def.pyx":1170
 *             self.set_depth_test(depth_test)
 *         if depth_write_mask is not None:
 *             self.set_depth_write_mask(depth_write_mask)             # <<<<<<<<<<<<<<
 *         if depth_func is not None:
 *             self.set_depth_func(depth_func)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_depth_write_mask); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1170, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_2, __pyx_v_depth_write_mask) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_depth_write_mask);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1170, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "nodes_def.pyx":1169
 *         if depth_test is not None:
 *             self.set_depth_test(depth_test)
 *         if depth_write_mask is not None:             # <<<<<<<<<<<<<<
 *             self.set_depth_write_mask(depth_write_mask)
 *         if depth_func is not None:
 */
  }

  /* "nodes_def.pyx":1171
 *         if depth_write_mask is not None:
 *             self.set_depth_write_mask(depth_write_mask)
 *         if depth_func is not None:             # <<<<<<<<<<<<<<
 *             self.set_depth_func(depth_func)
 *         if stencil_test is not None:
 */
  __pyx_t_1 = (__pyx_v_depth_func != Py_None);
  __pyx_t_5 = (__pyx_t_1 != 0);
  if (__pyx_t_5) {

    /* "nodes_def.pyx":1172
 *             self.set_depth_write_mask(depth_write_mask)
 *         if depth_func is not None:
 *             self.set_depth_func(depth_func)             # <<<<<<<<<<<<<<
 *         if stencil_test is not None:
 *             self.set_stencil_test(stencil_test)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_depth_func); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1172, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_2, __pyx_v_depth_func) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_depth_func);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1172, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "nodes_def.pyx":1171
 *         if depth_write_mask is not None:
 *             self.set_depth_write_mask(depth_write_mask)
 *         if depth_func is not None:             # <<<<<<<<<<<<<<
 *             self.set_depth_func(depth_func)
 *         if stencil_test is not None:
 */
  }

  /* "nodes_def.pyx":1173
 *         if depth_func is not None:
 *             self.set_depth_func(depth_func)
 *         if stencil_test is not None:             # <<<<<<<<<<<<<<
 *             self.set_stencil_test(stencil_test)
 *         if stencil_write_mask is not None:
 */
  __pyx_t_5 = (__pyx_v_stencil_test != Py_None);
  __pyx_t_1 = (__pyx_t_5 != 0);
  if (__pyx_t_1) {

    /* "nodes_def.pyx":1174
 *             self.set_depth_func(depth_func)
 *         if stencil_test is not None:
 *             self.set_stencil_test(stencil_test)             # <<<<<<<<<<<<<<
 *         if stencil_write_mask is not None:
 *             self.set_stencil_write_mask(stencil_write_mask)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_stencil_test); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1174, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_2, __pyx_v_stencil_test) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_stencil_test);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1174, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "nodes_def.pyx":1173
 *         if depth_func is not None:
 *             self.set_depth_func(depth_func)
 *         if stencil_test is not None:             # <<<<<<<<<<<<<<
 *             self.set_stencil_test(stencil_test)
 *         if stencil_write_mask is not None:
 */
  }

  /* "nodes_def.pyx":1175
 *         if stencil_test is not None:
 *             self.set_stencil_test(stencil_test)
 *         if stencil_write_mask is not None:             # <<<<<<<<<<<<<<
 *             self.set_stencil_write_mask(stencil_write_mask)
 *         if stencil_func is not None:
 */
  __pyx_t_1 = (__pyx_v_stencil_write_mask != Py_None);
  __pyx_t_5 = (__pyx_t_1 != 0);
  if (__pyx_t_5) {

    /* "nodes_def.pyx":1176
 *             self.set_stencil_test(stencil_test)
 *         if stencil_write_mask is not None:
 *             self.set_stencil_write_mask(stencil_write_mask)             # <<<<<<<<<<<<<<
 *         if stencil_func is not None:
 *             self.set_stencil_func(stencil_func)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_stencil_write_mask); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1176, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_2, __pyx_v_stencil_write_mask) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_stencil_write_mask);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1176, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "nodes_def.pyx":1175
 *         if stencil_test is not None:
 *             self.set_stencil_test(stencil_test)
 *         if stencil_write_mask is not None:             # <<<<<<<<<<<<<<
 *             self.set_stencil_write_mask(stencil_write_mask)
 *         if stencil_func is not None:
 */
  }

  /* "nodes_def.pyx":1177
 *         if stencil_write_mask is not None:
 *             self.set_stencil_write_mask(stencil_write_mask)
 *         if stencil_func is not None:             # <<<<<<<<<<<<<<
 *             self.set_stencil_func(stencil_func)
 *         if stencil_ref is not None:
 */
  __pyx_t_5 = (__pyx_v_stencil_func != Py_None);
  __pyx_t_1 = (__pyx_t_5 != 0);
  if (__pyx_t_1) {

    /* "nodes_def.pyx":1178
 *             self.set_stencil_write_mask(stencil_write_mask)
 *         if stencil_func is not None:
 *             self.set_stencil_func(stencil_func)             # <<<<<<<<<<<<<<
 *         if stencil_ref is not None:
 *             self.set_stencil_ref(stencil_ref)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_stencil_func); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1178, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_2, __pyx_v_stencil_func) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_stencil_func);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1178, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "nodes_def.pyx":1177
 *         if stencil_write_mask is not None:
 *             self.set_stencil_write_mask(stencil_write_mask)
 *         if stencil_func is not None:             # <<<<<<<<<<<<<<
 *             self.set_stencil_func(stencil_func)
 *         if stencil_ref is not None:
 */
  }

  /* "nodes_def.pyx":1179
 *         if stencil_func is not None:
 *             self.set_stencil_func(stencil_func)
 *         if stencil_ref is not None:             # <<<<<<<<<<<<<<
 *             self.set_stencil_ref(stencil_ref)
 *         if stencil_read_mask is not None:
 */
  __pyx_t_1 = (__pyx_v_stencil_ref != Py_None);
  __pyx_t_5 = (__pyx_t_1 != 0);
  if (__pyx_t_5) {

    /* "nodes_def.pyx":1180
 *             self.set_stencil_func(stencil_func)
 *         if stencil_ref is not None:
 *             self.set_stencil_ref(stencil_ref)             # <<<<<<<<<<<<<<
 *         if stencil_read_mask is not None:
 *             self.set_stencil_read_mask(stencil_read_mask)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_stencil_ref); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1180, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_2, __pyx_v_stencil_ref) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_stencil_ref);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1180, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "nodes_def.pyx":1179
 *         if stencil_func is not None:
 *             self.set_stencil_func(stencil_func)
 *         if stencil_ref is not None:             # <<<<<<<<<<<<<<
 *             self.set_stencil_ref(stencil_ref)
 *         if stencil_read_mask is not None:
 */
  }

  /* "nodes_def.pyx":1181
 *         if stencil_ref is not None:
 *             self.set_stencil_ref(stencil_ref)
 *         if stencil_read_mask is not None:             # <<<<<<<<<<<<<<
 *             self.set_stencil_read_mask(stencil_read_mask)
 *         if stencil_fail is not None:
 */
  __pyx_t_5 = (__pyx_v_stencil_read_mask != Py_None);
  __pyx_t_1 = (__pyx_t_5 != 0);
  if (__pyx_t_1) {

    /* "nodes_def.pyx":1182
 *             self.set_stencil_ref(stencil_ref)
 *         if stencil_read_mask is not None:
 *             self.set_stencil_read_mask(stencil_read_mask)             # <<<<<<<<<<<<<<
 *         if stencil_fail is not None:
 *             self.set_stencil_fail(stencil_fail)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_stencil_read_mask); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1182, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_2, __pyx_v_stencil_read_mask) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_stencil_read_mask);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1182, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "nodes_def.pyx":1181
 *         if stencil_ref is not None:
 *             self.set_stencil_ref(stencil_ref)
 *         if stencil_read_mask is not None:             # <<<<<<<<<<<<<<
 *             self.set_stencil_read_mask(stencil_read_mask)
 *         if stencil_fail is not None:
 */
  }

  /* "nodes_def.pyx":1183
 *         if stencil_read_mask is not None:
 *             self.set_stencil_read_mask(stencil_read_mask)
 *         if stencil_fail is not None:             # <<<<<<<<<<<<<<
 *             self.set_stencil_fail(stencil_fail)
 *         if stencil_depth_fail is not None:
 */
  __pyx_t_1 = (__pyx_v_stencil_fail != Py_None);
  __pyx_t_5 = (__pyx_t_1 != 0);
  if (__pyx_t_5) {

    /* "nodes_def.pyx":1184
 *             self.set_stencil_read_mask(stencil_read_mask)
 *         if stencil_fail is not None:
 *             self.set_stencil_fail(stencil_fail)             # <<<<<<<<<<<<<<
 *         if stencil_depth_fail is not None:
 *             self.set_stencil_depth_fail(stencil_depth_fail)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_stencil_fail); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1184, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_2, __pyx_v_stencil_fail) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_stencil_fail);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1184, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "nodes_def.pyx":1183
 *         if stencil_read_mask is not None:
 *             self.set_stencil_read_mask(stencil_read_mask)
 *         if stencil_fail is not None:             # <<<<<<<<<<<<<<
 *             self.set_stencil_fail(stencil_fail)
 *         if stencil_depth_fail is not None:
 */
  }

  /* "nodes_def.pyx":1185
 *         if stencil_fail is not None:
 *             self.set_stencil_fail(stencil_fail)
 *         if stencil_depth_fail is not None:             # <<<<<<<<<<<<<<
 *             self.set_stencil_depth_fail(stencil_depth_fail)
 *         if stencil_depth_pass is not None:
 */
  __pyx_t_5 = (__pyx_v_stencil_depth_fail != Py_None);
  __pyx_t_1 = (__pyx_t_5 != 0);
  if (__pyx_t_1) {

    /* "nodes_def.pyx":1186
 *             self.set_stencil_fail(stencil_fail)
 *         if stencil_depth_fail is not None:
 *             self.set_stencil_depth_fail(stencil_depth_fail)             # <<<<<<<<<<<<<<
 *         if stencil_depth_pass is not None:
 *             self.set_stencil_depth_pass(stencil_depth_pass)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_stencil_depth_fail); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1186, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_2, __pyx_v_stencil_depth_fail) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_stencil_depth_fail);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1186, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "nodes_def.pyx":1185
 *         if stencil_fail is not None:
 *             self.set_stencil_fail(stencil_fail)
 *         if stencil_depth_fail is not None:             # <<<<<<<<<<<<<<
 *             self.set_stencil_depth_fail(stencil_depth_fail)
 *         if stencil_depth_pass is not None:
 */
  }

  /* "nodes_def.pyx":1187
 *         if stencil_depth_fail is not None:
 *             self.set_stencil_depth_fail(stencil_depth_fail)
 *         if stencil_depth_pass is not None:             # <<<<<<<<<<<<<<
 *             self.set_stencil_depth_pass(stencil_depth_pass)
 *         if cull_face is not None:
 */
  __pyx_t_1 = (__pyx_v_stencil_depth_pass != Py_None);
  __pyx_t_5 = (__pyx_t_1 != 0);
  if (__pyx_t_5) {

    /* "nodes_def.pyx":1188
 *             self.set_stencil_depth_fail(stencil_depth_fail)
 *         if stencil_depth_pass is not None:
 *             self.set_stencil_depth_pass(stencil_depth_pass)             # <<<<<<<<<<<<<<
 *         if cull_face is not None:
 *             self.set_cull_face(cull_face)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_stencil_depth_pass); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1188, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_2, __pyx_v_stencil_depth_pass) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_stencil_depth_pass);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1188, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "nodes_def.pyx":1187
 *         if stencil_depth_fail is not None:
 *             self.set_stencil_depth_fail(stencil_depth_fail)
 *         if stencil_depth_pass is not None:             # <<<<<<<<<<<<<<
 *             self.set_stencil_depth_pass(stencil_depth_pass)
 *         if cull_face is not None:
 */
  }

  /* "nodes_def.pyx":1189
 *         if stencil_depth_pass is not None:
 *             self.set_stencil_depth_pass(stencil_depth_pass)
 *         if cull_face is not None:             # <<<<<<<<<<<<<<
 *             self.set_cull_face(cull_face)
 *         if cull_face_mode is not None:
 */
  __pyx_t_5 = (__pyx_v_cull_face != Py_None);
  __pyx_t_1 = (__pyx_t_5 != 0);
  if (__pyx_t_1) {

    /* "nodes_def.pyx":1190
 *             self.set_stencil_depth_pass(stencil_depth_pass)
 *         if cull_face is not None:
 *             self.set_cull_face(cull_face)             # <<<<<<<<<<<<<<
 *         if cull_face_mode is not None:
 *             self.set_cull_face_mode(cull_face_mode)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_cull_face); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1190, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_2, __pyx_v_cull_face) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_cull_face);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1190, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "nodes_def.pyx":1189
 *         if stencil_depth_pass is not None:
 *             self.set_stencil_depth_pass(stencil_depth_pass)
 *         if cull_face is not None:             # <<<<<<<<<<<<<<
 *             self.set_cull_face(cull_face)
 *         if cull_face_mode is not None:
 */
  }

  /* "nodes_def.pyx":1191
 *         if cull_face is not None:
 *             self.set_cull_face(cull_face)
 *         if cull_face_mode is not None:             # <<<<<<<<<<<<<<
 *             self.set_cull_face_mode(cull_face_mode)
 *         if scissor_test is not None:
 */
  __pyx_t_1 = (__pyx_v_cull_face_mode != Py_None);
  __pyx_t_5 = (__pyx_t_1 != 0);
  if (__pyx_t_5) {

    /* "nodes_def.pyx":1192
 *             self.set_cull_face(cull_face)
 *         if cull_face_mode is not None:
 *             self.set_cull_face_mode(cull_face_mode)             # <<<<<<<<<<<<<<
 *         if scissor_test is not None:
 *             self.set_scissor_test(scissor_test)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_cull_face_mode); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1192, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_2, __pyx_v_cull_face_mode) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_cull_face_mode);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1192, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "nodes_def.pyx":1191
 *         if cull_face is not None:
 *             self.set_cull_face(cull_face)
 *         if cull_face_mode is not None:             # <<<<<<<<<<<<<<
 *             self.set_cull_face_mode(cull_face_mode)
 *         if scissor_test is not None:
 */
  }

  /* "nodes_def.pyx":1193
 *         if cull_face_mode is not None:
 *             self.set_cull_face_mode(cull_face_mode)
 *         if scissor_test is not None:             # <<<<<<<<<<<<<<
 *             self.set_scissor_test(scissor_test)
 *         if scissor is not None:
 */
  __pyx_t_5 = (__pyx_v_scissor_test != Py_None);
  __pyx_t_1 = (__pyx_t_5 != 0);
  if (__pyx_t_1) {

    /* "nodes_def.pyx":1194
 *             self.set_cull_face_mode(cull_face_mode)
 *         if scissor_test is not None:
 *             self.set_scissor_test(scissor_test)             # <<<<<<<<<<<<<<
 *         if scissor is not None:
 *             self.set_scissor(*scissor)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_scissor_test); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1194, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_2, __pyx_v_scissor_test) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_scissor_test);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1194, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "nodes_def.pyx":1193
 *         if cull_face_mode is not None:
 *             self.set_cull_face_mode(cull_face_mode)
 *         if scissor_test is not None:             # <<<<<<<<<<<<<<
 *             self.set_scissor_test(scissor_test)
 *         if scissor is not None:
 */
  }

  /* "nodes_def.pyx":1195
 *         if scissor_test is not None:
 *             self.set_scissor_test(scissor_test)
 *         if scissor is not None:             # <<<<<<<<<<<<<<
 *             self.set_scissor(*scissor)
 * 
 */
  __pyx_t_1 = (__pyx_v_scissor != Py_None);
  __pyx_t_5 = (__pyx_t_1 != 0);
  if (__pyx_t_5) {

    /* "nodes_def.pyx":1196
 *             self.set_scissor_test(scissor_test)
 *         if scissor is not None:
 *             self.set_scissor(*scissor)             # <<<<<<<<<<<<<<
 * 
 *     def set_blend(self, bint blend):
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_scissor); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1196, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PySequence_Tuple(__pyx_v_scissor); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1196, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1196, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "nodes_def.pyx":1195
 *         if scissor_test is not None:
 *             self.set_scissor_test(scissor_test)
 *         if scissor is not None:             # <<<<<<<<<<<<<<
 *             self.set_scissor(*scissor)
 * 
 */
  }

  /* "nodes_def.pyx":1142
 * cdef class GraphicConfig(_Node):
 * 
 *     def __init__(self, _Node child, blend=None, blend_src_factor=None, blend_dst_factor=None, blend_src_factor_a=None, blend_dst_factor_a=None, blend_op=None, blend_op_a=None, color_write_mask=None, depth_test=None, depth_write_mask=None, depth_func=None, stencil_test=None, stencil_write_mask=None, stencil_func=None, stencil_ref=None, stencil_read_mask=None, stencil_fail=None, stencil_depth_fail=None, stencil_depth_pass=None, cull_face=None, cull_face_mode=None, scissor_test=None, scissor=None, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         assert child is not None
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pynodegl.GraphicConfig.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":1198
 *             self.set_scissor(*scissor)
 * 
 *     def set_blend(self, bint blend):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "blend", blend)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_13GraphicConfig_3set_blend(PyObject *__pyx_v_self, PyObject *__pyx_arg_blend); /*proto*/
static PyObject *__pyx_pw_8pynodegl_13GraphicConfig_3set_blend(PyObject *__pyx_v_self, PyObject *__pyx_arg_blend) {
  int __pyx_v_blend;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_blend (wrapper)", 0);
  assert(__pyx_arg_blend); {
    __pyx_v_blend = __Pyx_PyObject_IsTrue(__pyx_arg_blend); if (unlikely((__pyx_v_blend == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1198, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pynodegl.GraphicConfig.set_blend", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pynodegl_13GraphicConfig_2set_blend(((struct __pyx_obj_8pynodegl_GraphicConfig *)__pyx_v_self), ((int)__pyx_v_blend));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_13GraphicConfig_2set_blend(struct __pyx_obj_8pynodegl_GraphicConfig *__pyx_v_self, int __pyx_v_blend) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("set_blend", 0);

  /* "nodes_def.pyx":1199
 * 
 *     def set_blend(self, bint blend):
 *         return ngl_node_param_set(self.ctx, "blend", blend)             # <<<<<<<<<<<<<<
 * 
 *     def set_blend_src_factor(self, const char * blend_src_factor):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"blend"), __pyx_v_blend)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1199, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":1198
 *             self.set_scissor(*scissor)
 * 
 *     def set_blend(self, bint blend):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "blend", blend)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.GraphicConfig.set_blend", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":1201
 *         return ngl_node_param_set(self.ctx, "blend", blend)
 * 
 *     def set_blend_src_factor(self, const char * blend_src_factor):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "blend_src_factor", blend_src_factor)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_13GraphicConfig_5set_blend_src_factor(PyObject *__pyx_v_self, PyObject *__pyx_arg_blend_src_factor); /*proto*/
static PyObject *__pyx_pw_8pynodegl_13GraphicConfig_5set_blend_src_factor(PyObject *__pyx_v_self, PyObject *__pyx_arg_blend_src_factor) {
  char const *__pyx_v_blend_src_factor;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_blend_src_factor (wrapper)", 0);
  assert(__pyx_arg_blend_src_factor); {
    __pyx_v_blend_src_factor = __Pyx_PyObject_AsString(__pyx_arg_blend_src_factor); if (unlikely((!__pyx_v_blend_src_factor) && PyErr_Occurred())) __PYX_ERR(0, 1201, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pynodegl.GraphicConfig.set_blend_src_factor", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pynodegl_13GraphicConfig_4set_blend_src_factor(((struct __pyx_obj_8pynodegl_GraphicConfig *)__pyx_v_self), ((char const *)__pyx_v_blend_src_factor));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_13GraphicConfig_4set_blend_src_factor(struct __pyx_obj_8pynodegl_GraphicConfig *__pyx_v_self, char const *__pyx_v_blend_src_factor) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("set_blend_src_factor", 0);

  /* "nodes_def.pyx":1202
 * 
 *     def set_blend_src_factor(self, const char * blend_src_factor):
 *         return ngl_node_param_set(self.ctx, "blend_src_factor", blend_src_factor)             # <<<<<<<<<<<<<<
 * 
 *     def set_blend_dst_factor(self, const char * blend_dst_factor):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"blend_src_factor"), __pyx_v_blend_src_factor)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1202, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":1201
 *         return ngl_node_param_set(self.ctx, "blend", blend)
 * 
 *     def set_blend_src_factor(self, const char * blend_src_factor):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "blend_src_factor", blend_src_factor)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.GraphicConfig.set_blend_src_factor", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":1204
 *         return ngl_node_param_set(self.ctx, "blend_src_factor", blend_src_factor)
 * 
 *     def set_blend_dst_factor(self, const char * blend_dst_factor):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "blend_dst_factor", blend_dst_factor)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_13GraphicConfig_7set_blend_dst_factor(PyObject *__pyx_v_self, PyObject *__pyx_arg_blend_dst_factor); /*proto*/
static PyObject *__pyx_pw_8pynodegl_13GraphicConfig_7set_blend_dst_factor(PyObject *__pyx_v_self, PyObject *__pyx_arg_blend_dst_factor) {
  char const *__pyx_v_blend_dst_factor;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_blend_dst_factor (wrapper)", 0);
  assert(__pyx_arg_blend_dst_factor); {
    __pyx_v_blend_dst_factor = __Pyx_PyObject_AsString(__pyx_arg_blend_dst_factor); if (unlikely((!__pyx_v_blend_dst_factor) && PyErr_Occurred())) __PYX_ERR(0, 1204, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pynodegl.GraphicConfig.set_blend_dst_factor", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pynodegl_13GraphicConfig_6set_blend_dst_factor(((struct __pyx_obj_8pynodegl_GraphicConfig *)__pyx_v_self), ((char const *)__pyx_v_blend_dst_factor));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_13GraphicConfig_6set_blend_dst_factor(struct __pyx_obj_8pynodegl_GraphicConfig *__pyx_v_self, char const *__pyx_v_blend_dst_factor) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("set_blend_dst_factor", 0);

  /* "nodes_def.pyx":1205
 * 
 *     def set_blend_dst_factor(self, const char * blend_dst_factor):
 *         return ngl_node_param_set(self.ctx, "blend_dst_factor", blend_dst_factor)             # <<<<<<<<<<<<<<
 * 
 *     def set_blend_src_factor_a(self, const char * blend_src_factor_a):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"blend_dst_factor"), __pyx_v_blend_dst_factor)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1205, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":1204
 *         return ngl_node_param_set(self.ctx, "blend_src_factor", blend_src_factor)
 * 
 *     def set_blend_dst_factor(self, const char * blend_dst_factor):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "blend_dst_factor", blend_dst_factor)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.GraphicConfig.set_blend_dst_factor", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":1207
 *         return ngl_node_param_set(self.ctx, "blend_dst_factor", blend_dst_factor)
 * 
 *     def set_blend_src_factor_a(self, const char * blend_src_factor_a):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "blend_src_factor_a", blend_src_factor_a)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_13GraphicConfig_9set_blend_src_factor_a(PyObject *__pyx_v_self, PyObject *__pyx_arg_blend_src_factor_a); /*proto*/
static PyObject *__pyx_pw_8pynodegl_13GraphicConfig_9set_blend_src_factor_a(PyObject *__pyx_v_self, PyObject *__pyx_arg_blend_src_factor_a) {
  char const *__pyx_v_blend_src_factor_a;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_blend_src_factor_a (wrapper)", 0);
  assert(__pyx_arg_blend_src_factor_a); {
    __pyx_v_blend_src_factor_a = __Pyx_PyObject_AsString(__pyx_arg_blend_src_factor_a); if (unlikely((!__pyx_v_blend_src_factor_a) && PyErr_Occurred())) __PYX_ERR(0, 1207, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pynodegl.GraphicConfig.set_blend_src_factor_a", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pynodegl_13GraphicConfig_8set_blend_src_factor_a(((struct __pyx_obj_8pynodegl_GraphicConfig *)__pyx_v_self), ((char const *)__pyx_v_blend_src_factor_a));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_13GraphicConfig_8set_blend_src_factor_a(struct __pyx_obj_8pynodegl_GraphicConfig *__pyx_v_self, char const *__pyx_v_blend_src_factor_a) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("set_blend_src_factor_a", 0);

  /* "nodes_def.pyx":1208
 * 
 *     def set_blend_src_factor_a(self, const char * blend_src_factor_a):
 *         return ngl_node_param_set(self.ctx, "blend_src_factor_a", blend_src_factor_a)             # <<<<<<<<<<<<<<
 * 
 *     def set_blend_dst_factor_a(self, const char * blend_dst_factor_a):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"blend_src_factor_a"), __pyx_v_blend_src_factor_a)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1208, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":1207
 *         return ngl_node_param_set(self.ctx, "blend_dst_factor", blend_dst_factor)
 * 
 *     def set_blend_src_factor_a(self, const char * blend_src_factor_a):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "blend_src_factor_a", blend_src_factor_a)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.GraphicConfig.set_blend_src_factor_a", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":1210
 *         return ngl_node_param_set(self.ctx, "blend_src_factor_a", blend_src_factor_a)
 * 
 *     def set_blend_dst_factor_a(self, const char * blend_dst_factor_a):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "blend_dst_factor_a", blend_dst_factor_a)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_13GraphicConfig_11set_blend_dst_factor_a(PyObject *__pyx_v_self, PyObject *__pyx_arg_blend_dst_factor_a); /*proto*/
static PyObject *__pyx_pw_8pynodegl_13GraphicConfig_11set_blend_dst_factor_a(PyObject *__pyx_v_self, PyObject *__pyx_arg_blend_dst_factor_a) {
  char const *__pyx_v_blend_dst_factor_a;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_blend_dst_factor_a (wrapper)", 0);
  assert(__pyx_arg_blend_dst_factor_a); {
    __pyx_v_blend_dst_factor_a = __Pyx_PyObject_AsString(__pyx_arg_blend_dst_factor_a); if (unlikely((!__pyx_v_blend_dst_factor_a) && PyErr_Occurred())) __PYX_ERR(0, 1210, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pynodegl.GraphicConfig.set_blend_dst_factor_a", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pynodegl_13GraphicConfig_10set_blend_dst_factor_a(((struct __pyx_obj_8pynodegl_GraphicConfig *)__pyx_v_self), ((char const *)__pyx_v_blend_dst_factor_a));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_13GraphicConfig_10set_blend_dst_factor_a(struct __pyx_obj_8pynodegl_GraphicConfig *__pyx_v_self, char const *__pyx_v_blend_dst_factor_a) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("set_blend_dst_factor_a", 0);

  /* "nodes_def.pyx":1211
 * 
 *     def set_blend_dst_factor_a(self, const char * blend_dst_factor_a):
 *         return ngl_node_param_set(self.ctx, "blend_dst_factor_a", blend_dst_factor_a)             # <<<<<<<<<<<<<<
 * 
 *     def set_blend_op(self, const char * blend_op):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"blend_dst_factor_a"), __pyx_v_blend_dst_factor_a)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1211, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":1210
 *         return ngl_node_param_set(self.ctx, "blend_src_factor_a", blend_src_factor_a)
 * 
 *     def set_blend_dst_factor_a(self, const char * blend_dst_factor_a):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "blend_dst_factor_a", blend_dst_factor_a)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.GraphicConfig.set_blend_dst_factor_a", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":1213
 *         return ngl_node_param_set(self.ctx, "blend_dst_factor_a", blend_dst_factor_a)
 * 
 *     def set_blend_op(self, const char * blend_op):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "blend_op", blend_op)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_13GraphicConfig_13set_blend_op(PyObject *__pyx_v_self, PyObject *__pyx_arg_blend_op); /*proto*/
static PyObject *__pyx_pw_8pynodegl_13GraphicConfig_13set_blend_op(PyObject *__pyx_v_self, PyObject *__pyx_arg_blend_op) {
  char const *__pyx_v_blend_op;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_blend_op (wrapper)", 0);
  assert(__pyx_arg_blend_op); {
    __pyx_v_blend_op = __Pyx_PyObject_AsString(__pyx_arg_blend_op); if (unlikely((!__pyx_v_blend_op) && PyErr_Occurred())) __PYX_ERR(0, 1213, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pynodegl.GraphicConfig.set_blend_op", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pynodegl_13GraphicConfig_12set_blend_op(((struct __pyx_obj_8pynodegl_GraphicConfig *)__pyx_v_self), ((char const *)__pyx_v_blend_op));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_13GraphicConfig_12set_blend_op(struct __pyx_obj_8pynodegl_GraphicConfig *__pyx_v_self, char const *__pyx_v_blend_op) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("set_blend_op", 0);

  /* "nodes_def.pyx":1214
 * 
 *     def set_blend_op(self, const char * blend_op):
 *         return ngl_node_param_set(self.ctx, "blend_op", blend_op)             # <<<<<<<<<<<<<<
 * 
 *     def set_blend_op_a(self, const char * blend_op_a):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"blend_op"), __pyx_v_blend_op)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1214, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":1213
 *         return ngl_node_param_set(self.ctx, "blend_dst_factor_a", blend_dst_factor_a)
 * 
 *     def set_blend_op(self, const char * blend_op):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "blend_op", blend_op)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.GraphicConfig.set_blend_op", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":1216
 *         return ngl_node_param_set(self.ctx, "blend_op", blend_op)
 * 
 *     def set_blend_op_a(self, const char * blend_op_a):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "blend_op_a", blend_op_a)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_13GraphicConfig_15set_blend_op_a(PyObject *__pyx_v_self, PyObject *__pyx_arg_blend_op_a); /*proto*/
static PyObject *__pyx_pw_8pynodegl_13GraphicConfig_15set_blend_op_a(PyObject *__pyx_v_self, PyObject *__pyx_arg_blend_op_a) {
  char const *__pyx_v_blend_op_a;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_blend_op_a (wrapper)", 0);
  assert(__pyx_arg_blend_op_a); {
    __pyx_v_blend_op_a = __Pyx_PyObject_AsString(__pyx_arg_blend_op_a); if (unlikely((!__pyx_v_blend_op_a) && PyErr_Occurred())) __PYX_ERR(0, 1216, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pynodegl.GraphicConfig.set_blend_op_a", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pynodegl_13GraphicConfig_14set_blend_op_a(((struct __pyx_obj_8pynodegl_GraphicConfig *)__pyx_v_self), ((char const *)__pyx_v_blend_op_a));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_13GraphicConfig_14set_blend_op_a(struct __pyx_obj_8pynodegl_GraphicConfig *__pyx_v_self, char const *__pyx_v_blend_op_a) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("set_blend_op_a", 0);

  /* "nodes_def.pyx":1217
 * 
 *     def set_blend_op_a(self, const char * blend_op_a):
 *         return ngl_node_param_set(self.ctx, "blend_op_a", blend_op_a)             # <<<<<<<<<<<<<<
 * 
 *     def set_color_write_mask(self, const char * color_write_mask):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"blend_op_a"), __pyx_v_blend_op_a)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1217, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":1216
 *         return ngl_node_param_set(self.ctx, "blend_op", blend_op)
 * 
 *     def set_blend_op_a(self, const char * blend_op_a):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "blend_op_a", blend_op_a)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.GraphicConfig.set_blend_op_a", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":1219
 *         return ngl_node_param_set(self.ctx, "blend_op_a", blend_op_a)
 * 
 *     def set_color_write_mask(self, const char * color_write_mask):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "color_write_mask", color_write_mask)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_13GraphicConfig_17set_color_write_mask(PyObject *__pyx_v_self, PyObject *__pyx_arg_color_write_mask); /*proto*/
static PyObject *__pyx_pw_8pynodegl_13GraphicConfig_17set_color_write_mask(PyObject *__pyx_v_self, PyObject *__pyx_arg_color_write_mask) {
  char const *__pyx_v_color_write_mask;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_color_write_mask (wrapper)", 0);
  assert(__pyx_arg_color_write_mask); {
    __pyx_v_color_write_mask = __Pyx_PyObject_AsString(__pyx_arg_color_write_mask); if (unlikely((!__pyx_v_color_write_mask) && PyErr_Occurred())) __PYX_ERR(0, 1219, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pynodegl.GraphicConfig.set_color_write_mask", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pynodegl_13GraphicConfig_16set_color_write_mask(((struct __pyx_obj_8pynodegl_GraphicConfig *)__pyx_v_self), ((char const *)__pyx_v_color_write_mask));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_13GraphicConfig_16set_color_write_mask(struct __pyx_obj_8pynodegl_GraphicConfig *__pyx_v_self, char const *__pyx_v_color_write_mask) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("set_color_write_mask", 0);

  /* "nodes_def.pyx":1220
 * 
 *     def set_color_write_mask(self, const char * color_write_mask):
 *         return ngl_node_param_set(self.ctx, "color_write_mask", color_write_mask)             # <<<<<<<<<<<<<<
 * 
 *     def set_depth_test(self, bint depth_test):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"color_write_mask"), __pyx_v_color_write_mask)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1220, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":1219
 *         return ngl_node_param_set(self.ctx, "blend_op_a", blend_op_a)
 * 
 *     def set_color_write_mask(self, const char * color_write_mask):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "color_write_mask", color_write_mask)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.GraphicConfig.set_color_write_mask", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":1222
 *         return ngl_node_param_set(self.ctx, "color_write_mask", color_write_mask)
 * 
 *     def set_depth_test(self, bint depth_test):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "depth_test", depth_test)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_13GraphicConfig_19set_depth_test(PyObject *__pyx_v_self, PyObject *__pyx_arg_depth_test); /*proto*/
static PyObject *__pyx_pw_8pynodegl_13GraphicConfig_19set_depth_test(PyObject *__pyx_v_self, PyObject *__pyx_arg_depth_test) {
  int __pyx_v_depth_test;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_depth_test (wrapper)", 0);
  assert(__pyx_arg_depth_test); {
    __pyx_v_depth_test = __Pyx_PyObject_IsTrue(__pyx_arg_depth_test); if (unlikely((__pyx_v_depth_test == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1222, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pynodegl.GraphicConfig.set_depth_test", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pynodegl_13GraphicConfig_18set_depth_test(((struct __pyx_obj_8pynodegl_GraphicConfig *)__pyx_v_self), ((int)__pyx_v_depth_test));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_13GraphicConfig_18set_depth_test(struct __pyx_obj_8pynodegl_GraphicConfig *__pyx_v_self, int __pyx_v_depth_test) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("set_depth_test", 0);

  /* "nodes_def.pyx":1223
 * 
 *     def set_depth_test(self, bint depth_test):
 *         return ngl_node_param_set(self.ctx, "depth_test", depth_test)             # <<<<<<<<<<<<<<
 * 
 *     def set_depth_write_mask(self, bint depth_write_mask):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"depth_test"), __pyx_v_depth_test)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1223, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":1222
 *         return ngl_node_param_set(self.ctx, "color_write_mask", color_write_mask)
 * 
 *     def set_depth_test(self, bint depth_test):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "depth_test", depth_test)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.GraphicConfig.set_depth_test", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":1225
 *         return ngl_node_param_set(self.ctx, "depth_test", depth_test)
 * 
 *     def set_depth_write_mask(self, bint depth_write_mask):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "depth_write_mask", depth_write_mask)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_13GraphicConfig_21set_depth_write_mask(PyObject *__pyx_v_self, PyObject *__pyx_arg_depth_write_mask); /*proto*/
static PyObject *__pyx_pw_8pynodegl_13GraphicConfig_21set_depth_write_mask(PyObject *__pyx_v_self, PyObject *__pyx_arg_depth_write_mask) {
  int __pyx_v_depth_write_mask;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_depth_write_mask (wrapper)", 0);
  assert(__pyx_arg_depth_write_mask); {
    __pyx_v_depth_write_mask = __Pyx_PyObject_IsTrue(__pyx_arg_depth_write_mask); if (unlikely((__pyx_v_depth_write_mask == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1225, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pynodegl.GraphicConfig.set_depth_write_mask", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pynodegl_13GraphicConfig_20set_depth_write_mask(((struct __pyx_obj_8pynodegl_GraphicConfig *)__pyx_v_self), ((int)__pyx_v_depth_write_mask));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_13GraphicConfig_20set_depth_write_mask(struct __pyx_obj_8pynodegl_GraphicConfig *__pyx_v_self, int __pyx_v_depth_write_mask) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("set_depth_write_mask", 0);

  /* "nodes_def.pyx":1226
 * 
 *     def set_depth_write_mask(self, bint depth_write_mask):
 *         return ngl_node_param_set(self.ctx, "depth_write_mask", depth_write_mask)             # <<<<<<<<<<<<<<
 * 
 *     def set_depth_func(self, const char * depth_func):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"depth_write_mask"), __pyx_v_depth_write_mask)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1226, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":1225
 *         return ngl_node_param_set(self.ctx, "depth_test", depth_test)
 * 
 *     def set_depth_write_mask(self, bint depth_write_mask):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "depth_write_mask", depth_write_mask)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.GraphicConfig.set_depth_write_mask", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":1228
 *         return ngl_node_param_set(self.ctx, "depth_write_mask", depth_write_mask)
 * 
 *     def set_depth_func(self, const char * depth_func):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "depth_func", depth_func)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_13GraphicConfig_23set_depth_func(PyObject *__pyx_v_self, PyObject *__pyx_arg_depth_func); /*proto*/
static PyObject *__pyx_pw_8pynodegl_13GraphicConfig_23set_depth_func(PyObject *__pyx_v_self, PyObject *__pyx_arg_depth_func) {
  char const *__pyx_v_depth_func;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_depth_func (wrapper)", 0);
  assert(__pyx_arg_depth_func); {
    __pyx_v_depth_func = __Pyx_PyObject_AsString(__pyx_arg_depth_func); if (unlikely((!__pyx_v_depth_func) && PyErr_Occurred())) __PYX_ERR(0, 1228, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pynodegl.GraphicConfig.set_depth_func", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pynodegl_13GraphicConfig_22set_depth_func(((struct __pyx_obj_8pynodegl_GraphicConfig *)__pyx_v_self), ((char const *)__pyx_v_depth_func));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_13GraphicConfig_22set_depth_func(struct __pyx_obj_8pynodegl_GraphicConfig *__pyx_v_self, char const *__pyx_v_depth_func) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("set_depth_func", 0);

  /* "nodes_def.pyx":1229
 * 
 *     def set_depth_func(self, const char * depth_func):
 *         return ngl_node_param_set(self.ctx, "depth_func", depth_func)             # <<<<<<<<<<<<<<
 * 
 *     def set_stencil_test(self, bint stencil_test):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"depth_func"), __pyx_v_depth_func)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1229, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":1228
 *         return ngl_node_param_set(self.ctx, "depth_write_mask", depth_write_mask)
 * 
 *     def set_depth_func(self, const char * depth_func):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "depth_func", depth_func)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.GraphicConfig.set_depth_func", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":1231
 *         return ngl_node_param_set(self.ctx, "depth_func", depth_func)
 * 
 *     def set_stencil_test(self, bint stencil_test):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "stencil_test", stencil_test)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_13GraphicConfig_25set_stencil_test(PyObject *__pyx_v_self, PyObject *__pyx_arg_stencil_test); /*proto*/
static PyObject *__pyx_pw_8pynodegl_13GraphicConfig_25set_stencil_test(PyObject *__pyx_v_self, PyObject *__pyx_arg_stencil_test) {
  int __pyx_v_stencil_test;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_stencil_test (wrapper)", 0);
  assert(__pyx_arg_stencil_test); {
    __pyx_v_stencil_test = __Pyx_PyObject_IsTrue(__pyx_arg_stencil_test); if (unlikely((__pyx_v_stencil_test == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1231, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pynodegl.GraphicConfig.set_stencil_test", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pynodegl_13GraphicConfig_24set_stencil_test(((struct __pyx_obj_8pynodegl_GraphicConfig *)__pyx_v_self), ((int)__pyx_v_stencil_test));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_13GraphicConfig_24set_stencil_test(struct __pyx_obj_8pynodegl_GraphicConfig *__pyx_v_self, int __pyx_v_stencil_test) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("set_stencil_test", 0);

  /* "nodes_def.pyx":1232
 * 
 *     def set_stencil_test(self, bint stencil_test):
 *         return ngl_node_param_set(self.ctx, "stencil_test", stencil_test)             # <<<<<<<<<<<<<<
 * 
 *     def set_stencil_write_mask(self, int stencil_write_mask):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"stencil_test"), __pyx_v_stencil_test)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1232, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":1231
 *         return ngl_node_param_set(self.ctx, "depth_func", depth_func)
 * 
 *     def set_stencil_test(self, bint stencil_test):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "stencil_test", stencil_test)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.GraphicConfig.set_stencil_test", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":1234
 *         return ngl_node_param_set(self.ctx, "stencil_test", stencil_test)
 * 
 *     def set_stencil_write_mask(self, int stencil_write_mask):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "stencil_write_mask", stencil_write_mask)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_13GraphicConfig_27set_stencil_write_mask(PyObject *__pyx_v_self, PyObject *__pyx_arg_stencil_write_mask); /*proto*/
static PyObject *__pyx_pw_8pynodegl_13GraphicConfig_27set_stencil_write_mask(PyObject *__pyx_v_self, PyObject *__pyx_arg_stencil_write_mask) {
  int __pyx_v_stencil_write_mask;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_stencil_write_mask (wrapper)", 0);
  assert(__pyx_arg_stencil_write_mask); {
    __pyx_v_stencil_write_mask = __Pyx_PyInt_As_int(__pyx_arg_stencil_write_mask); if (unlikely((__pyx_v_stencil_write_mask == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1234, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pynodegl.GraphicConfig.set_stencil_write_mask", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pynodegl_13GraphicConfig_26set_stencil_write_mask(((struct __pyx_obj_8pynodegl_GraphicConfig *)__pyx_v_self), ((int)__pyx_v_stencil_write_mask));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_13GraphicConfig_26set_stencil_write_mask(struct __pyx_obj_8pynodegl_GraphicConfig *__pyx_v_self, int __pyx_v_stencil_write_mask) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("set_stencil_write_mask", 0);

  /* "nodes_def.pyx":1235
 * 
 *     def set_stencil_write_mask(self, int stencil_write_mask):
 *         return ngl_node_param_set(self.ctx, "stencil_write_mask", stencil_write_mask)             # <<<<<<<<<<<<<<
 * 
 *     def set_stencil_func(self, const char * stencil_func):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"stencil_write_mask"), __pyx_v_stencil_write_mask)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1235, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":1234
 *         return ngl_node_param_set(self.ctx, "stencil_test", stencil_test)
 * 
 *     def set_stencil_write_mask(self, int stencil_write_mask):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "stencil_write_mask", stencil_write_mask)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.GraphicConfig.set_stencil_write_mask", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":1237
 *         return ngl_node_param_set(self.ctx, "stencil_write_mask", stencil_write_mask)
 * 
 *     def set_stencil_func(self, const char * stencil_func):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "stencil_func", stencil_func)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_13GraphicConfig_29set_stencil_func(PyObject *__pyx_v_self, PyObject *__pyx_arg_stencil_func); /*proto*/
static PyObject *__pyx_pw_8pynodegl_13GraphicConfig_29set_stencil_func(PyObject *__pyx_v_self, PyObject *__pyx_arg_stencil_func) {
  char const *__pyx_v_stencil_func;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_stencil_func (wrapper)", 0);
  assert(__pyx_arg_stencil_func); {
    __pyx_v_stencil_func = __Pyx_PyObject_AsString(__pyx_arg_stencil_func); if (unlikely((!__pyx_v_stencil_func) && PyErr_Occurred())) __PYX_ERR(0, 1237, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pynodegl.GraphicConfig.set_stencil_func", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pynodegl_13GraphicConfig_28set_stencil_func(((struct __pyx_obj_8pynodegl_GraphicConfig *)__pyx_v_self), ((char const *)__pyx_v_stencil_func));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_13GraphicConfig_28set_stencil_func(struct __pyx_obj_8pynodegl_GraphicConfig *__pyx_v_self, char const *__pyx_v_stencil_func) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("set_stencil_func", 0);

  /* "nodes_def.pyx":1238
 * 
 *     def set_stencil_func(self, const char * stencil_func):
 *         return ngl_node_param_set(self.ctx, "stencil_func", stencil_func)             # <<<<<<<<<<<<<<
 * 
 *     def set_stencil_ref(self, int stencil_ref):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"stencil_func"), __pyx_v_stencil_func)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1238, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":1237
 *         return ngl_node_param_set(self.ctx, "stencil_write_mask", stencil_write_mask)
 * 
 *     def set_stencil_func(self, const char * stencil_func):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "stencil_func", stencil_func)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.GraphicConfig.set_stencil_func", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":1240
 *         return ngl_node_param_set(self.ctx, "stencil_func", stencil_func)
 * 
 *     def set_stencil_ref(self, int stencil_ref):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "stencil_ref", stencil_ref)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_13GraphicConfig_31set_stencil_ref(PyObject *__pyx_v_self, PyObject *__pyx_arg_stencil_ref); /*proto*/
static PyObject *__pyx_pw_8pynodegl_13GraphicConfig_31set_stencil_ref(PyObject *__pyx_v_self, PyObject *__pyx_arg_stencil_ref) {
  int __pyx_v_stencil_ref;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_stencil_ref (wrapper)", 0);
  assert(__pyx_arg_stencil_ref); {
    __pyx_v_stencil_ref = __Pyx_PyInt_As_int(__pyx_arg_stencil_ref); if (unlikely((__pyx_v_stencil_ref == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1240, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pynodegl.GraphicConfig.set_stencil_ref", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pynodegl_13GraphicConfig_30set_stencil_ref(((struct __pyx_obj_8pynodegl_GraphicConfig *)__pyx_v_self), ((int)__pyx_v_stencil_ref));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_13GraphicConfig_30set_stencil_ref(struct __pyx_obj_8pynodegl_GraphicConfig *__pyx_v_self, int __pyx_v_stencil_ref) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("set_stencil_ref", 0);

  /* "nodes_def.pyx":1241
 * 
 *     def set_stencil_ref(self, int stencil_ref):
 *         return ngl_node_param_set(self.ctx, "stencil_ref", stencil_ref)             # <<<<<<<<<<<<<<
 * 
 *     def set_stencil_read_mask(self, int stencil_read_mask):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"stencil_ref"), __pyx_v_stencil_ref)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1241, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":1240
 *         return ngl_node_param_set(self.ctx, "stencil_func", stencil_func)
 * 
 *     def set_stencil_ref(self, int stencil_ref):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "stencil_ref", stencil_ref)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.GraphicConfig.set_stencil_ref", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":1243
 *         return ngl_node_param_set(self.ctx, "stencil_ref", stencil_ref)
 * 
 *     def set_stencil_read_mask(self, int stencil_read_mask):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "stencil_read_mask", stencil_read_mask)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_13GraphicConfig_33set_stencil_read_mask(PyObject *__pyx_v_self, PyObject *__pyx_arg_stencil_read_mask); /*proto*/
static PyObject *__pyx_pw_8pynodegl_13GraphicConfig_33set_stencil_read_mask(PyObject *__pyx_v_self, PyObject *__pyx_arg_stencil_read_mask) {
  int __pyx_v_stencil_read_mask;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_stencil_read_mask (wrapper)", 0);
  assert(__pyx_arg_stencil_read_mask); {
    __pyx_v_stencil_read_mask = __Pyx_PyInt_As_int(__pyx_arg_stencil_read_mask); if (unlikely((__pyx_v_stencil_read_mask == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1243, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pynodegl.GraphicConfig.set_stencil_read_mask", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pynodegl_13GraphicConfig_32set_stencil_read_mask(((struct __pyx_obj_8pynodegl_GraphicConfig *)__pyx_v_self), ((int)__pyx_v_stencil_read_mask));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_13GraphicConfig_32set_stencil_read_mask(struct __pyx_obj_8pynodegl_GraphicConfig *__pyx_v_self, int __pyx_v_stencil_read_mask) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("set_stencil_read_mask", 0);

  /* "nodes_def.pyx":1244
 * 
 *     def set_stencil_read_mask(self, int stencil_read_mask):
 *         return ngl_node_param_set(self.ctx, "stencil_read_mask", stencil_read_mask)             # <<<<<<<<<<<<<<
 * 
 *     def set_stencil_fail(self, const char * stencil_fail):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"stencil_read_mask"), __pyx_v_stencil_read_mask)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1244, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":1243
 *         return ngl_node_param_set(self.ctx, "stencil_ref", stencil_ref)
 * 
 *     def set_stencil_read_mask(self, int stencil_read_mask):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "stencil_read_mask", stencil_read_mask)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.GraphicConfig.set_stencil_read_mask", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":1246
 *         return ngl_node_param_set(self.ctx, "stencil_read_mask", stencil_read_mask)
 * 
 *     def set_stencil_fail(self, const char * stencil_fail):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "stencil_fail", stencil_fail)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_13GraphicConfig_35set_stencil_fail(PyObject *__pyx_v_self, PyObject *__pyx_arg_stencil_fail); /*proto*/
static PyObject *__pyx_pw_8pynodegl_13GraphicConfig_35set_stencil_fail(PyObject *__pyx_v_self, PyObject *__pyx_arg_stencil_fail) {
  char const *__pyx_v_stencil_fail;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_stencil_fail (wrapper)", 0);
  assert(__pyx_arg_stencil_fail); {
    __pyx_v_stencil_fail = __Pyx_PyObject_AsString(__pyx_arg_stencil_fail); if (unlikely((!__pyx_v_stencil_fail) && PyErr_Occurred())) __PYX_ERR(0, 1246, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pynodegl.GraphicConfig.set_stencil_fail", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pynodegl_13GraphicConfig_34set_stencil_fail(((struct __pyx_obj_8pynodegl_GraphicConfig *)__pyx_v_self), ((char const *)__pyx_v_stencil_fail));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_13GraphicConfig_34set_stencil_fail(struct __pyx_obj_8pynodegl_GraphicConfig *__pyx_v_self, char const *__pyx_v_stencil_fail) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("set_stencil_fail", 0);

  /* "nodes_def.pyx":1247
 * 
 *     def set_stencil_fail(self, const char * stencil_fail):
 *         return ngl_node_param_set(self.ctx, "stencil_fail", stencil_fail)             # <<<<<<<<<<<<<<
 * 
 *     def set_stencil_depth_fail(self, const char * stencil_depth_fail):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"stencil_fail"), __pyx_v_stencil_fail)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1247, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":1246
 *         return ngl_node_param_set(self.ctx, "stencil_read_mask", stencil_read_mask)
 * 
 *     def set_stencil_fail(self, const char * stencil_fail):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "stencil_fail", stencil_fail)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.GraphicConfig.set_stencil_fail", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":1249
 *         return ngl_node_param_set(self.ctx, "stencil_fail", stencil_fail)
 * 
 *     def set_stencil_depth_fail(self, const char * stencil_depth_fail):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "stencil_depth_fail", stencil_depth_fail)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_13GraphicConfig_37set_stencil_depth_fail(PyObject *__pyx_v_self, PyObject *__pyx_arg_stencil_depth_fail); /*proto*/
static PyObject *__pyx_pw_8pynodegl_13GraphicConfig_37set_stencil_depth_fail(PyObject *__pyx_v_self, PyObject *__pyx_arg_stencil_depth_fail) {
  char const *__pyx_v_stencil_depth_fail;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_stencil_depth_fail (wrapper)", 0);
  assert(__pyx_arg_stencil_depth_fail); {
    __pyx_v_stencil_depth_fail = __Pyx_PyObject_AsString(__pyx_arg_stencil_depth_fail); if (unlikely((!__pyx_v_stencil_depth_fail) && PyErr_Occurred())) __PYX_ERR(0, 1249, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pynodegl.GraphicConfig.set_stencil_depth_fail", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pynodegl_13GraphicConfig_36set_stencil_depth_fail(((struct __pyx_obj_8pynodegl_GraphicConfig *)__pyx_v_self), ((char const *)__pyx_v_stencil_depth_fail));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_13GraphicConfig_36set_stencil_depth_fail(struct __pyx_obj_8pynodegl_GraphicConfig *__pyx_v_self, char const *__pyx_v_stencil_depth_fail) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("set_stencil_depth_fail", 0);

  /* "nodes_def.pyx":1250
 * 
 *     def set_stencil_depth_fail(self, const char * stencil_depth_fail):
 *         return ngl_node_param_set(self.ctx, "stencil_depth_fail", stencil_depth_fail)             # <<<<<<<<<<<<<<
 * 
 *     def set_stencil_depth_pass(self, const char * stencil_depth_pass):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"stencil_depth_fail"), __pyx_v_stencil_depth_fail)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1250, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":1249
 *         return ngl_node_param_set(self.ctx, "stencil_fail", stencil_fail)
 * 
 *     def set_stencil_depth_fail(self, const char * stencil_depth_fail):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "stencil_depth_fail", stencil_depth_fail)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.GraphicConfig.set_stencil_depth_fail", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":1252
 *         return ngl_node_param_set(self.ctx, "stencil_depth_fail", stencil_depth_fail)
 * 
 *     def set_stencil_depth_pass(self, const char * stencil_depth_pass):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "stencil_depth_pass", stencil_depth_pass)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_13GraphicConfig_39set_stencil_depth_pass(PyObject *__pyx_v_self, PyObject *__pyx_arg_stencil_depth_pass); /*proto*/
static PyObject *__pyx_pw_8pynodegl_13GraphicConfig_39set_stencil_depth_pass(PyObject *__pyx_v_self, PyObject *__pyx_arg_stencil_depth_pass) {
  char const *__pyx_v_stencil_depth_pass;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_stencil_depth_pass (wrapper)", 0);
  assert(__pyx_arg_stencil_depth_pass); {
    __pyx_v_stencil_depth_pass = __Pyx_PyObject_AsString(__pyx_arg_stencil_depth_pass); if (unlikely((!__pyx_v_stencil_depth_pass) && PyErr_Occurred())) __PYX_ERR(0, 1252, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pynodegl.GraphicConfig.set_stencil_depth_pass", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pynodegl_13GraphicConfig_38set_stencil_depth_pass(((struct __pyx_obj_8pynodegl_GraphicConfig *)__pyx_v_self), ((char const *)__pyx_v_stencil_depth_pass));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_13GraphicConfig_38set_stencil_depth_pass(struct __pyx_obj_8pynodegl_GraphicConfig *__pyx_v_self, char const *__pyx_v_stencil_depth_pass) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("set_stencil_depth_pass", 0);

  /* "nodes_def.pyx":1253
 * 
 *     def set_stencil_depth_pass(self, const char * stencil_depth_pass):
 *         return ngl_node_param_set(self.ctx, "stencil_depth_pass", stencil_depth_pass)             # <<<<<<<<<<<<<<
 * 
 *     def set_cull_face(self, bint cull_face):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"stencil_depth_pass"), __pyx_v_stencil_depth_pass)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1253, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":1252
 *         return ngl_node_param_set(self.ctx, "stencil_depth_fail", stencil_depth_fail)
 * 
 *     def set_stencil_depth_pass(self, const char * stencil_depth_pass):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "stencil_depth_pass", stencil_depth_pass)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.GraphicConfig.set_stencil_depth_pass", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":1255
 *         return ngl_node_param_set(self.ctx, "stencil_depth_pass", stencil_depth_pass)
 * 
 *     def set_cull_face(self, bint cull_face):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "cull_face", cull_face)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_13GraphicConfig_41set_cull_face(PyObject *__pyx_v_self, PyObject *__pyx_arg_cull_face); /*proto*/
static PyObject *__pyx_pw_8pynodegl_13GraphicConfig_41set_cull_face(PyObject *__pyx_v_self, PyObject *__pyx_arg_cull_face) {
  int __pyx_v_cull_face;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_cull_face (wrapper)", 0);
  assert(__pyx_arg_cull_face); {
    __pyx_v_cull_face = __Pyx_PyObject_IsTrue(__pyx_arg_cull_face); if (unlikely((__pyx_v_cull_face == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1255, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pynodegl.GraphicConfig.set_cull_face", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pynodegl_13GraphicConfig_40set_cull_face(((struct __pyx_obj_8pynodegl_GraphicConfig *)__pyx_v_self), ((int)__pyx_v_cull_face));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_13GraphicConfig_40set_cull_face(struct __pyx_obj_8pynodegl_GraphicConfig *__pyx_v_self, int __pyx_v_cull_face) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("set_cull_face", 0);

  /* "nodes_def.pyx":1256
 * 
 *     def set_cull_face(self, bint cull_face):
 *         return ngl_node_param_set(self.ctx, "cull_face", cull_face)             # <<<<<<<<<<<<<<
 * 
 *     def set_cull_face_mode(self, const char * cull_face_mode):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"cull_face"), __pyx_v_cull_face)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1256, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":1255
 *         return ngl_node_param_set(self.ctx, "stencil_depth_pass", stencil_depth_pass)
 * 
 *     def set_cull_face(self, bint cull_face):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "cull_face", cull_face)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.GraphicConfig.set_cull_face", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":1258
 *         return ngl_node_param_set(self.ctx, "cull_face", cull_face)
 * 
 *     def set_cull_face_mode(self, const char * cull_face_mode):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "cull_face_mode", cull_face_mode)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_13GraphicConfig_43set_cull_face_mode(PyObject *__pyx_v_self, PyObject *__pyx_arg_cull_face_mode); /*proto*/
static PyObject *__pyx_pw_8pynodegl_13GraphicConfig_43set_cull_face_mode(PyObject *__pyx_v_self, PyObject *__pyx_arg_cull_face_mode) {
  char const *__pyx_v_cull_face_mode;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_cull_face_mode (wrapper)", 0);
  assert(__pyx_arg_cull_face_mode); {
    __pyx_v_cull_face_mode = __Pyx_PyObject_AsString(__pyx_arg_cull_face_mode); if (unlikely((!__pyx_v_cull_face_mode) && PyErr_Occurred())) __PYX_ERR(0, 1258, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pynodegl.GraphicConfig.set_cull_face_mode", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pynodegl_13GraphicConfig_42set_cull_face_mode(((struct __pyx_obj_8pynodegl_GraphicConfig *)__pyx_v_self), ((char const *)__pyx_v_cull_face_mode));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_13GraphicConfig_42set_cull_face_mode(struct __pyx_obj_8pynodegl_GraphicConfig *__pyx_v_self, char const *__pyx_v_cull_face_mode) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("set_cull_face_mode", 0);

  /* "nodes_def.pyx":1259
 * 
 *     def set_cull_face_mode(self, const char * cull_face_mode):
 *         return ngl_node_param_set(self.ctx, "cull_face_mode", cull_face_mode)             # <<<<<<<<<<<<<<
 * 
 *     def set_scissor_test(self, bint scissor_test):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"cull_face_mode"), __pyx_v_cull_face_mode)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1259, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":1258
 *         return ngl_node_param_set(self.ctx, "cull_face", cull_face)
 * 
 *     def set_cull_face_mode(self, const char * cull_face_mode):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "cull_face_mode", cull_face_mode)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.GraphicConfig.set_cull_face_mode", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":1261
 *         return ngl_node_param_set(self.ctx, "cull_face_mode", cull_face_mode)
 * 
 *     def set_scissor_test(self, bint scissor_test):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "scissor_test", scissor_test)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_13GraphicConfig_45set_scissor_test(PyObject *__pyx_v_self, PyObject *__pyx_arg_scissor_test); /*proto*/
static PyObject *__pyx_pw_8pynodegl_13GraphicConfig_45set_scissor_test(PyObject *__pyx_v_self, PyObject *__pyx_arg_scissor_test) {
  int __pyx_v_scissor_test;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_scissor_test (wrapper)", 0);
  assert(__pyx_arg_scissor_test); {
    __pyx_v_scissor_test = __Pyx_PyObject_IsTrue(__pyx_arg_scissor_test); if (unlikely((__pyx_v_scissor_test == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1261, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pynodegl.GraphicConfig.set_scissor_test", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pynodegl_13GraphicConfig_44set_scissor_test(((struct __pyx_obj_8pynodegl_GraphicConfig *)__pyx_v_self), ((int)__pyx_v_scissor_test));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_13GraphicConfig_44set_scissor_test(struct __pyx_obj_8pynodegl_GraphicConfig *__pyx_v_self, int __pyx_v_scissor_test) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("set_scissor_test", 0);

  /* "nodes_def.pyx":1262
 * 
 *     def set_scissor_test(self, bint scissor_test):
 *         return ngl_node_param_set(self.ctx, "scissor_test", scissor_test)             # <<<<<<<<<<<<<<
 * 
 *     def set_scissor(self, *scissor):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"scissor_test"), __pyx_v_scissor_test)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1262, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":1261
 *         return ngl_node_param_set(self.ctx, "cull_face_mode", cull_face_mode)
 * 
 *     def set_scissor_test(self, bint scissor_test):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "scissor_test", scissor_test)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.GraphicConfig.set_scissor_test", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":1264
 *         return ngl_node_param_set(self.ctx, "scissor_test", scissor_test)
 * 
 *     def set_scissor(self, *scissor):             # <<<<<<<<<<<<<<
 *         cdef float[4] scissor_c
 *         cdef int scissor_i
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_13GraphicConfig_47set_scissor(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_8pynodegl_13GraphicConfig_47set_scissor(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_scissor = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_scissor (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "set_scissor", 0))) return NULL;
  __Pyx_INCREF(__pyx_args);
  __pyx_v_scissor = __pyx_args;
  __pyx_r = __pyx_pf_8pynodegl_13GraphicConfig_46set_scissor(((struct __pyx_obj_8pynodegl_GraphicConfig *)__pyx_v_self), __pyx_v_scissor);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_scissor);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_13GraphicConfig_46set_scissor(struct __pyx_obj_8pynodegl_GraphicConfig *__pyx_v_self, PyObject *__pyx_v_scissor) {
  float __pyx_v_scissor_c[4];
  int __pyx_v_scissor_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  Py_UCS4 __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  int __pyx_t_7;
  float __pyx_t_8;
  __Pyx_RefNannySetupContext("set_scissor", 0);

  /* "nodes_def.pyx":1267
 *         cdef float[4] scissor_c
 *         cdef int scissor_i
 *         if len(scissor) != 4:             # <<<<<<<<<<<<<<
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (
 *                             "scissor", 4, len(scissor)))
 */
  __pyx_t_1 = PyTuple_GET_SIZE(__pyx_v_scissor); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1267, __pyx_L1_error)
  __pyx_t_2 = ((__pyx_t_1 != 4) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "nodes_def.pyx":1268
 *         cdef int scissor_i
 *         if len(scissor) != 4:
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (             # <<<<<<<<<<<<<<
 *                             "scissor", 4, len(scissor)))
 *         for scissor_i in range(4):
 */
    __pyx_t_3 = PyTuple_New(5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1268, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = 0;
    __pyx_t_4 = 127;
    __Pyx_INCREF(__pyx_kp_u_scissor_parameter_is_expected_to);
    __pyx_t_1 += 39;
    __Pyx_GIVEREF(__pyx_kp_u_scissor_parameter_is_expected_to);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_kp_u_scissor_parameter_is_expected_to);

    /* "nodes_def.pyx":1269
 *         if len(scissor) != 4:
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (
 *                             "scissor", 4, len(scissor)))             # <<<<<<<<<<<<<<
 *         for scissor_i in range(4):
 *             scissor_c[scissor_i] = scissor[scissor_i]
 */
    __pyx_t_5 = __Pyx_PyUnicode_From_long(4, 0, ' ', 'd'); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1269, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_INCREF(__pyx_kp_u_but_got);
    __pyx_t_1 += 9;
    __Pyx_GIVEREF(__pyx_kp_u_but_got);
    PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_kp_u_but_got);
    __pyx_t_6 = PyTuple_GET_SIZE(__pyx_v_scissor); if (unlikely(__pyx_t_6 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1269, __pyx_L1_error)
    __pyx_t_5 = __Pyx_PyUnicode_From_Py_ssize_t(__pyx_t_6, 0, ' ', 'd'); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1269, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_3, 3, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_INCREF(__pyx_kp_u_values);
    __pyx_t_1 += 7;
    __Pyx_GIVEREF(__pyx_kp_u_values);
    PyTuple_SET_ITEM(__pyx_t_3, 4, __pyx_kp_u_values);

    /* "nodes_def.pyx":1268
 *         cdef int scissor_i
 *         if len(scissor) != 4:
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (             # <<<<<<<<<<<<<<
 *                             "scissor", 4, len(scissor)))
 *         for scissor_i in range(4):
 */
    __pyx_t_5 = __Pyx_PyUnicode_Join(__pyx_t_3, 5, __pyx_t_1, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1268, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1268, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 1268, __pyx_L1_error)

    /* "nodes_def.pyx":1267
 *         cdef float[4] scissor_c
 *         cdef int scissor_i
 *         if len(scissor) != 4:             # <<<<<<<<<<<<<<
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (
 *                             "scissor", 4, len(scissor)))
 */
  }

  /* "nodes_def.pyx":1270
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (
 *                             "scissor", 4, len(scissor)))
 *         for scissor_i in range(4):             # <<<<<<<<<<<<<<
 *             scissor_c[scissor_i] = scissor[scissor_i]
 * 
 */
  for (__pyx_t_7 = 0; __pyx_t_7 < 4; __pyx_t_7+=1) {
    __pyx_v_scissor_i = __pyx_t_7;

    /* "nodes_def.pyx":1271
 *                             "scissor", 4, len(scissor)))
 *         for scissor_i in range(4):
 *             scissor_c[scissor_i] = scissor[scissor_i]             # <<<<<<<<<<<<<<
 * 
 *         return ngl_node_param_set(self.ctx, "scissor", scissor_c)
 */
    __pyx_t_3 = __Pyx_GetItemInt_Tuple(__pyx_v_scissor, __pyx_v_scissor_i, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1271, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_8 = __pyx_PyFloat_AsFloat(__pyx_t_3); if (unlikely((__pyx_t_8 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1271, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    (__pyx_v_scissor_c[__pyx_v_scissor_i]) = __pyx_t_8;
  }

  /* "nodes_def.pyx":1273
 *             scissor_c[scissor_i] = scissor[scissor_i]
 * 
 *         return ngl_node_param_set(self.ctx, "scissor", scissor_c)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"scissor"), __pyx_v_scissor_c)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1273, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":1264
 *         return ngl_node_param_set(self.ctx, "scissor_test", scissor_test)
 * 
 *     def set_scissor(self, *scissor):             # <<<<<<<<<<<<<<
 *         cdef float[4] scissor_c
 *         cdef int scissor_i
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pynodegl.GraphicConfig.set_scissor", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_13GraphicConfig_49__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pynodegl_13GraphicConfig_49__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_13GraphicConfig_48__reduce_cython__(((struct __pyx_obj_8pynodegl_GraphicConfig *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_13GraphicConfig_48__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_GraphicConfig *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__114, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.GraphicConfig.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_13GraphicConfig_51__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8pynodegl_13GraphicConfig_51__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_13GraphicConfig_50__setstate_cython__(((struct __pyx_obj_8pynodegl_GraphicConfig *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_13GraphicConfig_50__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_GraphicConfig *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__115, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.GraphicConfig.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":1278
 * cdef class Group(_Node):
 * 
 *     def __init__(self, children=None, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_GROUP)
 */

/* Python wrapper */
static int __pyx_pw_8pynodegl_5Group_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pynodegl_5Group_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_children = 0;
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  __pyx_v_kwargs = PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return -1;
  __Pyx_GOTREF(__pyx_v_kwargs);
  if (PyTuple_GET_SIZE(__pyx_args) > 1) {
    __pyx_v_args = PyTuple_GetSlice(__pyx_args, 1, PyTuple_GET_SIZE(__pyx_args));
    if (unlikely(!__pyx_v_args)) {
      __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
      __Pyx_RefNannyFinishContext();
      return -1;
    }
    __Pyx_GOTREF(__pyx_v_args);
  } else {
    __pyx_v_args = __pyx_empty_tuple; __Pyx_INCREF(__pyx_empty_tuple);
  }
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_children,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        default:
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_children);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t used_pos_args = (pos_args < 1) ? pos_args : 1;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_kwargs, values, used_pos_args, "__init__") < 0)) __PYX_ERR(0, 1278, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        default:
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
      }
    }
    __pyx_v_children = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_args); __pyx_v_args = 0;
  __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
  __Pyx_AddTraceback("pynodegl.Group.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pynodegl_5Group___init__(((struct __pyx_obj_8pynodegl_Group *)__pyx_v_self), __pyx_v_children, __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pynodegl_5Group___init__(struct __pyx_obj_8pynodegl_Group *__pyx_v_self, PyObject *__pyx_v_children, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "nodes_def.pyx":1279
 * 
 *     def __init__(self, children=None, *args, **kwargs):
 *         assert self.ctx is NULL             # <<<<<<<<<<<<<<
 *         self.ctx = ngl_node_create(NGL_NODE_GROUP)
 *         if self.ctx is NULL:
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!((__pyx_v_self->__pyx_base.ctx == NULL) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 1279, __pyx_L1_error)
    }
  }
  #endif

  /* "nodes_def.pyx":1280
 *     def __init__(self, children=None, *args, **kwargs):
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_GROUP)             # <<<<<<<<<<<<<<
 *         if self.ctx is NULL:
 *             raise MemoryError()
 */
  __pyx_v_self->__pyx_base.ctx = ngl_node_create(NGL_NODE_GROUP);

  /* "nodes_def.pyx":1281
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_GROUP)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         _Node._init_params(self, *args, **kwargs)
 */
  __pyx_t_1 = ((__pyx_v_self->__pyx_base.ctx == NULL) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "nodes_def.pyx":1282
 *         self.ctx = ngl_node_create(NGL_NODE_GROUP)
 *         if self.ctx is NULL:
 *             raise MemoryError()             # <<<<<<<<<<<<<<
 *         _Node._init_params(self, *args, **kwargs)
 * 
 */
    PyErr_NoMemory(); __PYX_ERR(0, 1282, __pyx_L1_error)

    /* "nodes_def.pyx":1281
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_GROUP)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         _Node._init_params(self, *args, **kwargs)
 */
  }

  /* "nodes_def.pyx":1283
 *         if self.ctx is NULL:
 *             raise MemoryError()
 *         _Node._init_params(self, *args, **kwargs)             # <<<<<<<<<<<<<<
 * 
 *         if children is not None:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_8pynodegl__Node), __pyx_n_s_init_params); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1283, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1283, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_v_self));
  __pyx_t_4 = PyNumber_Add(__pyx_t_3, __pyx_v_args); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1283, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, __pyx_v_kwargs); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1283, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "nodes_def.pyx":1285
 *         _Node._init_params(self, *args, **kwargs)
 * 
 *         if children is not None:             # <<<<<<<<<<<<<<
 *             self.add_children(*children)
 * 
 */
  __pyx_t_1 = (__pyx_v_children != Py_None);
  __pyx_t_5 = (__pyx_t_1 != 0);
  if (__pyx_t_5) {

    /* "nodes_def.pyx":1286
 * 
 *         if children is not None:
 *             self.add_children(*children)             # <<<<<<<<<<<<<<
 * 
 *     def add_children(self, *children):
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_add_children); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1286, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PySequence_Tuple(__pyx_v_children); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1286, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1286, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "nodes_def.pyx":1285
 *         _Node._init_params(self, *args, **kwargs)
 * 
 *         if children is not None:             # <<<<<<<<<<<<<<
 *             self.add_children(*children)
 * 
 */
  }

  /* "nodes_def.pyx":1278
 * cdef class Group(_Node):
 * 
 *     def __init__(self, children=None, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_GROUP)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pynodegl.Group.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":1288
 *             self.add_children(*children)
 * 
 *     def add_children(self, *children):             # <<<<<<<<<<<<<<
 *         return self._add_nodelist("children", *children)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_5Group_3add_children(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_8pynodegl_5Group_3add_children(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_children = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_children (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "add_children", 0))) return NULL;
  __Pyx_INCREF(__pyx_args);
  __pyx_v_children = __pyx_args;
  __pyx_r = __pyx_pf_8pynodegl_5Group_2add_children(((struct __pyx_obj_8pynodegl_Group *)__pyx_v_self), __pyx_v_children);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_children);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_5Group_2add_children(struct __pyx_obj_8pynodegl_Group *__pyx_v_self, PyObject *__pyx_v_children) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("add_children", 0);

  /* "nodes_def.pyx":1289
 * 
 *     def add_children(self, *children):
 *         return self._add_nodelist("children", *children)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_add_nodelist); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1289, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyNumber_Add(__pyx_tuple__116, __pyx_v_children); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1289, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1289, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":1288
 *             self.add_children(*children)
 * 
 *     def add_children(self, *children):             # <<<<<<<<<<<<<<
 *         return self._add_nodelist("children", *children)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pynodegl.Group.add_children", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_5Group_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pynodegl_5Group_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_5Group_4__reduce_cython__(((struct __pyx_obj_8pynodegl_Group *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_5Group_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_Group *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__117, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.Group.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_5Group_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8pynodegl_5Group_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_5Group_6__setstate_cython__(((struct __pyx_obj_8pynodegl_Group *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_5Group_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_Group *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__118, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.Group.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":1294
 * cdef class HUD(_Node):
 * 
 *     def __init__(self, _Node child, measure_window=None, refresh_rate=None, export_filename=None, bg_color=None, aspect_ratio=None, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         assert child is not None
 * 
 */

/* Python wrapper */
static int __pyx_pw_8pynodegl_3HUD_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pynodegl_3HUD_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pynodegl__Node *__pyx_v_child = 0;
  PyObject *__pyx_v_measure_window = 0;
  PyObject *__pyx_v_refresh_rate = 0;
  PyObject *__pyx_v_export_filename = 0;
  PyObject *__pyx_v_bg_color = 0;
  PyObject *__pyx_v_aspect_ratio = 0;
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  __pyx_v_kwargs = PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return -1;
  __Pyx_GOTREF(__pyx_v_kwargs);
  if (PyTuple_GET_SIZE(__pyx_args) > 6) {
    __pyx_v_args = PyTuple_GetSlice(__pyx_args, 6, PyTuple_GET_SIZE(__pyx_args));
    if (unlikely(!__pyx_v_args)) {
      __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
      __Pyx_RefNannyFinishContext();
      return -1;
    }
    __Pyx_GOTREF(__pyx_v_args);
  } else {
    __pyx_v_args = __pyx_empty_tuple; __Pyx_INCREF(__pyx_empty_tuple);
  }
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_child,&__pyx_n_s_measure_window,&__pyx_n_s_refresh_rate,&__pyx_n_s_export_filename,&__pyx_n_s_bg_color,&__pyx_n_s_aspect_ratio,0};
    PyObject* values[6] = {0,0,0,0,0,0};
    values[1] = ((PyObject *)Py_None);
    values[2] = ((PyObject *)Py_None);
    values[3] = ((PyObject *)Py_None);
    values[4] = ((PyObject *)Py_None);
    values[5] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        default:
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_child)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_measure_window);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_refresh_rate);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_export_filename);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_bg_color);
          if (value) { values[4] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_aspect_ratio);
          if (value) { values[5] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t used_pos_args = (pos_args < 6) ? pos_args : 6;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_kwargs, values, used_pos_args, "__init__") < 0)) __PYX_ERR(0, 1294, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        default:
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        case  0:
        goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_child = ((struct __pyx_obj_8pynodegl__Node *)values[0]);
    __pyx_v_measure_window = values[1];
    __pyx_v_refresh_rate = values[2];
    __pyx_v_export_filename = values[3];
    __pyx_v_bg_color = values[4];
    __pyx_v_aspect_ratio = values[5];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 1, 6, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1294, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_args); __pyx_v_args = 0;
  __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
  __Pyx_AddTraceback("pynodegl.HUD.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_child), __pyx_ptype_8pynodegl__Node, 1, "child", 0))) __PYX_ERR(0, 1294, __pyx_L1_error)
  __pyx_r = __pyx_pf_8pynodegl_3HUD___init__(((struct __pyx_obj_8pynodegl_HUD *)__pyx_v_self), __pyx_v_child, __pyx_v_measure_window, __pyx_v_refresh_rate, __pyx_v_export_filename, __pyx_v_bg_color, __pyx_v_aspect_ratio, __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pynodegl_3HUD___init__(struct __pyx_obj_8pynodegl_HUD *__pyx_v_self, struct __pyx_obj_8pynodegl__Node *__pyx_v_child, PyObject *__pyx_v_measure_window, PyObject *__pyx_v_refresh_rate, PyObject *__pyx_v_export_filename, PyObject *__pyx_v_bg_color, PyObject *__pyx_v_aspect_ratio, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "nodes_def.pyx":1295
 * 
 *     def __init__(self, _Node child, measure_window=None, refresh_rate=None, export_filename=None, bg_color=None, aspect_ratio=None, *args, **kwargs):
 *         assert child is not None             # <<<<<<<<<<<<<<
 * 
 *         assert self.ctx is NULL
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = (((PyObject *)__pyx_v_child) != Py_None);
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 1295, __pyx_L1_error)
    }
  }
  #endif

  /* "nodes_def.pyx":1297
 *         assert child is not None
 * 
 *         assert self.ctx is NULL             # <<<<<<<<<<<<<<
 *         self.ctx = ngl_node_create(NGL_NODE_HUD, child.ctx)
 *         if self.ctx is NULL:
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!((__pyx_v_self->__pyx_base.ctx == NULL) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 1297, __pyx_L1_error)
    }
  }
  #endif

  /* "nodes_def.pyx":1298
 * 
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_HUD, child.ctx)             # <<<<<<<<<<<<<<
 *         if self.ctx is NULL:
 *             raise MemoryError()
 */
  __pyx_v_self->__pyx_base.ctx = ngl_node_create(NGL_NODE_HUD, __pyx_v_child->ctx);

  /* "nodes_def.pyx":1299
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_HUD, child.ctx)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         _Node._init_params(self, *args, **kwargs)
 */
  __pyx_t_1 = ((__pyx_v_self->__pyx_base.ctx == NULL) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "nodes_def.pyx":1300
 *         self.ctx = ngl_node_create(NGL_NODE_HUD, child.ctx)
 *         if self.ctx is NULL:
 *             raise MemoryError()             # <<<<<<<<<<<<<<
 *         _Node._init_params(self, *args, **kwargs)
 * 
 */
    PyErr_NoMemory(); __PYX_ERR(0, 1300, __pyx_L1_error)

    /* "nodes_def.pyx":1299
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_HUD, child.ctx)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         _Node._init_params(self, *args, **kwargs)
 */
  }

  /* "nodes_def.pyx":1301
 *         if self.ctx is NULL:
 *             raise MemoryError()
 *         _Node._init_params(self, *args, **kwargs)             # <<<<<<<<<<<<<<
 * 
 *         if measure_window is not None:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_8pynodegl__Node), __pyx_n_s_init_params); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1301, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1301, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_v_self));
  __pyx_t_4 = PyNumber_Add(__pyx_t_3, __pyx_v_args); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1301, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, __pyx_v_kwargs); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1301, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "nodes_def.pyx":1303
 *         _Node._init_params(self, *args, **kwargs)
 * 
 *         if measure_window is not None:             # <<<<<<<<<<<<<<
 *             self.set_measure_window(measure_window)
 *         if refresh_rate is not None:
 */
  __pyx_t_1 = (__pyx_v_measure_window != Py_None);
  __pyx_t_5 = (__pyx_t_1 != 0);
  if (__pyx_t_5) {

    /* "nodes_def.pyx":1304
 * 
 *         if measure_window is not None:
 *             self.set_measure_window(measure_window)             # <<<<<<<<<<<<<<
 *         if refresh_rate is not None:
 *             self.set_refresh_rate(refresh_rate)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_measure_window); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1304, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_2, __pyx_v_measure_window) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_measure_window);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1304, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "nodes_def.pyx":1303
 *         _Node._init_params(self, *args, **kwargs)
 * 
 *         if measure_window is not None:             # <<<<<<<<<<<<<<
 *             self.set_measure_window(measure_window)
 *         if refresh_rate is not None:
 */
  }

  /* "nodes_def.pyx":1305
 *         if measure_window is not None:
 *             self.set_measure_window(measure_window)
 *         if refresh_rate is not None:             # <<<<<<<<<<<<<<
 *             self.set_refresh_rate(refresh_rate)
 *         if export_filename is not None:
 */
  __pyx_t_5 = (__pyx_v_refresh_rate != Py_None);
  __pyx_t_1 = (__pyx_t_5 != 0);
  if (__pyx_t_1) {

    /* "nodes_def.pyx":1306
 *             self.set_measure_window(measure_window)
 *         if refresh_rate is not None:
 *             self.set_refresh_rate(refresh_rate)             # <<<<<<<<<<<<<<
 *         if export_filename is not None:
 *             self.set_export_filename(export_filename)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_refresh_rate); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1306, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_2, __pyx_v_refresh_rate) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_refresh_rate);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1306, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "nodes_def.pyx":1305
 *         if measure_window is not None:
 *             self.set_measure_window(measure_window)
 *         if refresh_rate is not None:             # <<<<<<<<<<<<<<
 *             self.set_refresh_rate(refresh_rate)
 *         if export_filename is not None:
 */
  }

  /* "nodes_def.pyx":1307
 *         if refresh_rate is not None:
 *             self.set_refresh_rate(refresh_rate)
 *         if export_filename is not None:             # <<<<<<<<<<<<<<
 *             self.set_export_filename(export_filename)
 *         if bg_color is not None:
 */
  __pyx_t_1 = (__pyx_v_export_filename != Py_None);
  __pyx_t_5 = (__pyx_t_1 != 0);
  if (__pyx_t_5) {

    /* "nodes_def.pyx":1308
 *             self.set_refresh_rate(refresh_rate)
 *         if export_filename is not None:
 *             self.set_export_filename(export_filename)             # <<<<<<<<<<<<<<
 *         if bg_color is not None:
 *             self.set_bg_color(*bg_color)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_export_filename); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1308, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_2, __pyx_v_export_filename) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_export_filename);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1308, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "nodes_def.pyx":1307
 *         if refresh_rate is not None:
 *             self.set_refresh_rate(refresh_rate)
 *         if export_filename is not None:             # <<<<<<<<<<<<<<
 *             self.set_export_filename(export_filename)
 *         if bg_color is not None:
 */
  }

  /* "nodes_def.pyx":1309
 *         if export_filename is not None:
 *             self.set_export_filename(export_filename)
 *         if bg_color is not None:             # <<<<<<<<<<<<<<
 *             self.set_bg_color(*bg_color)
 *         if aspect_ratio is not None:
 */
  __pyx_t_5 = (__pyx_v_bg_color != Py_None);
  __pyx_t_1 = (__pyx_t_5 != 0);
  if (__pyx_t_1) {

    /* "nodes_def.pyx":1310
 *             self.set_export_filename(export_filename)
 *         if bg_color is not None:
 *             self.set_bg_color(*bg_color)             # <<<<<<<<<<<<<<
 *         if aspect_ratio is not None:
 *             self.set_aspect_ratio(aspect_ratio)
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_bg_color); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1310, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PySequence_Tuple(__pyx_v_bg_color); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1310, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1310, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "nodes_def.pyx":1309
 *         if export_filename is not None:
 *             self.set_export_filename(export_filename)
 *         if bg_color is not None:             # <<<<<<<<<<<<<<
 *             self.set_bg_color(*bg_color)
 *         if aspect_ratio is not None:
 */
  }

  /* "nodes_def.pyx":1311
 *         if bg_color is not None:
 *             self.set_bg_color(*bg_color)
 *         if aspect_ratio is not None:             # <<<<<<<<<<<<<<
 *             self.set_aspect_ratio(aspect_ratio)
 * 
 */
  __pyx_t_1 = (__pyx_v_aspect_ratio != Py_None);
  __pyx_t_5 = (__pyx_t_1 != 0);
  if (__pyx_t_5) {

    /* "nodes_def.pyx":1312
 *             self.set_bg_color(*bg_color)
 *         if aspect_ratio is not None:
 *             self.set_aspect_ratio(aspect_ratio)             # <<<<<<<<<<<<<<
 * 
 *     def set_measure_window(self, int measure_window):
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_aspect_ratio); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1312, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_2 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_3, __pyx_v_aspect_ratio) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_aspect_ratio);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1312, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "nodes_def.pyx":1311
 *         if bg_color is not None:
 *             self.set_bg_color(*bg_color)
 *         if aspect_ratio is not None:             # <<<<<<<<<<<<<<
 *             self.set_aspect_ratio(aspect_ratio)
 * 
 */
  }

  /* "nodes_def.pyx":1294
 * cdef class HUD(_Node):
 * 
 *     def __init__(self, _Node child, measure_window=None, refresh_rate=None, export_filename=None, bg_color=None, aspect_ratio=None, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         assert child is not None
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pynodegl.HUD.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":1314
 *             self.set_aspect_ratio(aspect_ratio)
 * 
 *     def set_measure_window(self, int measure_window):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "measure_window", measure_window)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_3HUD_3set_measure_window(PyObject *__pyx_v_self, PyObject *__pyx_arg_measure_window); /*proto*/
static PyObject *__pyx_pw_8pynodegl_3HUD_3set_measure_window(PyObject *__pyx_v_self, PyObject *__pyx_arg_measure_window) {
  int __pyx_v_measure_window;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_measure_window (wrapper)", 0);
  assert(__pyx_arg_measure_window); {
    __pyx_v_measure_window = __Pyx_PyInt_As_int(__pyx_arg_measure_window); if (unlikely((__pyx_v_measure_window == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1314, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pynodegl.HUD.set_measure_window", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pynodegl_3HUD_2set_measure_window(((struct __pyx_obj_8pynodegl_HUD *)__pyx_v_self), ((int)__pyx_v_measure_window));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_3HUD_2set_measure_window(struct __pyx_obj_8pynodegl_HUD *__pyx_v_self, int __pyx_v_measure_window) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("set_measure_window", 0);

  /* "nodes_def.pyx":1315
 * 
 *     def set_measure_window(self, int measure_window):
 *         return ngl_node_param_set(self.ctx, "measure_window", measure_window)             # <<<<<<<<<<<<<<
 * 
 *     def set_refresh_rate(self, tuple refresh_rate):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"measure_window"), __pyx_v_measure_window)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1315, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":1314
 *             self.set_aspect_ratio(aspect_ratio)
 * 
 *     def set_measure_window(self, int measure_window):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "measure_window", measure_window)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.HUD.set_measure_window", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":1317
 *         return ngl_node_param_set(self.ctx, "measure_window", measure_window)
 * 
 *     def set_refresh_rate(self, tuple refresh_rate):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx,
 *                                   "refresh_rate",
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_3HUD_5set_refresh_rate(PyObject *__pyx_v_self, PyObject *__pyx_v_refresh_rate); /*proto*/
static PyObject *__pyx_pw_8pynodegl_3HUD_5set_refresh_rate(PyObject *__pyx_v_self, PyObject *__pyx_v_refresh_rate) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_refresh_rate (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_refresh_rate), (&PyTuple_Type), 1, "refresh_rate", 1))) __PYX_ERR(0, 1317, __pyx_L1_error)
  __pyx_r = __pyx_pf_8pynodegl_3HUD_4set_refresh_rate(((struct __pyx_obj_8pynodegl_HUD *)__pyx_v_self), ((PyObject*)__pyx_v_refresh_rate));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_3HUD_4set_refresh_rate(struct __pyx_obj_8pynodegl_HUD *__pyx_v_self, PyObject *__pyx_v_refresh_rate) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  __Pyx_RefNannySetupContext("set_refresh_rate", 0);

  /* "nodes_def.pyx":1318
 * 
 *     def set_refresh_rate(self, tuple refresh_rate):
 *         return ngl_node_param_set(self.ctx,             # <<<<<<<<<<<<<<
 *                                   "refresh_rate",
 *                                   <int>refresh_rate[0],
 */
  __Pyx_XDECREF(__pyx_r);

  /* "nodes_def.pyx":1320
 *         return ngl_node_param_set(self.ctx,
 *                                   "refresh_rate",
 *                                   <int>refresh_rate[0],             # <<<<<<<<<<<<<<
 *                                   <int>refresh_rate[1]);
 * 
 */
  if (unlikely(__pyx_v_refresh_rate == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 1320, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v_refresh_rate, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1320, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1320, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "nodes_def.pyx":1321
 *                                   "refresh_rate",
 *                                   <int>refresh_rate[0],
 *                                   <int>refresh_rate[1]);             # <<<<<<<<<<<<<<
 * 
 *     def set_export_filename(self, const char * export_filename):
 */
  if (unlikely(__pyx_v_refresh_rate == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 1321, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v_refresh_rate, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1321, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1321, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "nodes_def.pyx":1318
 * 
 *     def set_refresh_rate(self, tuple refresh_rate):
 *         return ngl_node_param_set(self.ctx,             # <<<<<<<<<<<<<<
 *                                   "refresh_rate",
 *                                   <int>refresh_rate[0],
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"refresh_rate"), ((int)__pyx_t_2), ((int)__pyx_t_3))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1318, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":1317
 *         return ngl_node_param_set(self.ctx, "measure_window", measure_window)
 * 
 *     def set_refresh_rate(self, tuple refresh_rate):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx,
 *                                   "refresh_rate",
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.HUD.set_refresh_rate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":1323
 *                                   <int>refresh_rate[1]);
 * 
 *     def set_export_filename(self, const char * export_filename):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "export_filename", export_filename)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_3HUD_7set_export_filename(PyObject *__pyx_v_self, PyObject *__pyx_arg_export_filename); /*proto*/
static PyObject *__pyx_pw_8pynodegl_3HUD_7set_export_filename(PyObject *__pyx_v_self, PyObject *__pyx_arg_export_filename) {
  char const *__pyx_v_export_filename;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_export_filename (wrapper)", 0);
  assert(__pyx_arg_export_filename); {
    __pyx_v_export_filename = __Pyx_PyObject_AsString(__pyx_arg_export_filename); if (unlikely((!__pyx_v_export_filename) && PyErr_Occurred())) __PYX_ERR(0, 1323, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pynodegl.HUD.set_export_filename", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pynodegl_3HUD_6set_export_filename(((struct __pyx_obj_8pynodegl_HUD *)__pyx_v_self), ((char const *)__pyx_v_export_filename));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_3HUD_6set_export_filename(struct __pyx_obj_8pynodegl_HUD *__pyx_v_self, char const *__pyx_v_export_filename) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("set_export_filename", 0);

  /* "nodes_def.pyx":1324
 * 
 *     def set_export_filename(self, const char * export_filename):
 *         return ngl_node_param_set(self.ctx, "export_filename", export_filename)             # <<<<<<<<<<<<<<
 * 
 *     def set_bg_color(self, *bg_color):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"export_filename"), __pyx_v_export_filename)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1324, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":1323
 *                                   <int>refresh_rate[1]);
 * 
 *     def set_export_filename(self, const char * export_filename):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "export_filename", export_filename)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.HUD.set_export_filename", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":1326
 *         return ngl_node_param_set(self.ctx, "export_filename", export_filename)
 * 
 *     def set_bg_color(self, *bg_color):             # <<<<<<<<<<<<<<
 *         cdef float[4] bg_color_c
 *         cdef int bg_color_i
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_3HUD_9set_bg_color(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_8pynodegl_3HUD_9set_bg_color(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_bg_color = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_bg_color (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "set_bg_color", 0))) return NULL;
  __Pyx_INCREF(__pyx_args);
  __pyx_v_bg_color = __pyx_args;
  __pyx_r = __pyx_pf_8pynodegl_3HUD_8set_bg_color(((struct __pyx_obj_8pynodegl_HUD *)__pyx_v_self), __pyx_v_bg_color);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_bg_color);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_3HUD_8set_bg_color(struct __pyx_obj_8pynodegl_HUD *__pyx_v_self, PyObject *__pyx_v_bg_color) {
  float __pyx_v_bg_color_c[4];
  int __pyx_v_bg_color_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  Py_UCS4 __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  int __pyx_t_7;
  float __pyx_t_8;
  __Pyx_RefNannySetupContext("set_bg_color", 0);

  /* "nodes_def.pyx":1329
 *         cdef float[4] bg_color_c
 *         cdef int bg_color_i
 *         if len(bg_color) != 4:             # <<<<<<<<<<<<<<
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (
 *                             "bg_color", 4, len(bg_color)))
 */
  __pyx_t_1 = PyTuple_GET_SIZE(__pyx_v_bg_color); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1329, __pyx_L1_error)
  __pyx_t_2 = ((__pyx_t_1 != 4) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "nodes_def.pyx":1330
 *         cdef int bg_color_i
 *         if len(bg_color) != 4:
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (             # <<<<<<<<<<<<<<
 *                             "bg_color", 4, len(bg_color)))
 *         for bg_color_i in range(4):
 */
    __pyx_t_3 = PyTuple_New(5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1330, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = 0;
    __pyx_t_4 = 127;
    __Pyx_INCREF(__pyx_kp_u_bg_color_parameter_is_expected_t);
    __pyx_t_1 += 40;
    __Pyx_GIVEREF(__pyx_kp_u_bg_color_parameter_is_expected_t);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_kp_u_bg_color_parameter_is_expected_t);

    /* "nodes_def.pyx":1331
 *         if len(bg_color) != 4:
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (
 *                             "bg_color", 4, len(bg_color)))             # <<<<<<<<<<<<<<
 *         for bg_color_i in range(4):
 *             bg_color_c[bg_color_i] = bg_color[bg_color_i]
 */
    __pyx_t_5 = __Pyx_PyUnicode_From_long(4, 0, ' ', 'd'); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1331, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_INCREF(__pyx_kp_u_but_got);
    __pyx_t_1 += 9;
    __Pyx_GIVEREF(__pyx_kp_u_but_got);
    PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_kp_u_but_got);
    __pyx_t_6 = PyTuple_GET_SIZE(__pyx_v_bg_color); if (unlikely(__pyx_t_6 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1331, __pyx_L1_error)
    __pyx_t_5 = __Pyx_PyUnicode_From_Py_ssize_t(__pyx_t_6, 0, ' ', 'd'); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1331, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_3, 3, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_INCREF(__pyx_kp_u_values);
    __pyx_t_1 += 7;
    __Pyx_GIVEREF(__pyx_kp_u_values);
    PyTuple_SET_ITEM(__pyx_t_3, 4, __pyx_kp_u_values);

    /* "nodes_def.pyx":1330
 *         cdef int bg_color_i
 *         if len(bg_color) != 4:
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (             # <<<<<<<<<<<<<<
 *                             "bg_color", 4, len(bg_color)))
 *         for bg_color_i in range(4):
 */
    __pyx_t_5 = __Pyx_PyUnicode_Join(__pyx_t_3, 5, __pyx_t_1, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1330, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1330, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 1330, __pyx_L1_error)

    /* "nodes_def.pyx":1329
 *         cdef float[4] bg_color_c
 *         cdef int bg_color_i
 *         if len(bg_color) != 4:             # <<<<<<<<<<<<<<
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (
 *                             "bg_color", 4, len(bg_color)))
 */
  }

  /* "nodes_def.pyx":1332
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (
 *                             "bg_color", 4, len(bg_color)))
 *         for bg_color_i in range(4):             # <<<<<<<<<<<<<<
 *             bg_color_c[bg_color_i] = bg_color[bg_color_i]
 * 
 */
  for (__pyx_t_7 = 0; __pyx_t_7 < 4; __pyx_t_7+=1) {
    __pyx_v_bg_color_i = __pyx_t_7;

    /* "nodes_def.pyx":1333
 *                             "bg_color", 4, len(bg_color)))
 *         for bg_color_i in range(4):
 *             bg_color_c[bg_color_i] = bg_color[bg_color_i]             # <<<<<<<<<<<<<<
 * 
 *         return ngl_node_param_set(self.ctx, "bg_color", bg_color_c)
 */
    __pyx_t_3 = __Pyx_GetItemInt_Tuple(__pyx_v_bg_color, __pyx_v_bg_color_i, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1333, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_8 = __pyx_PyFloat_AsFloat(__pyx_t_3); if (unlikely((__pyx_t_8 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1333, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    (__pyx_v_bg_color_c[__pyx_v_bg_color_i]) = __pyx_t_8;
  }

  /* "nodes_def.pyx":1335
 *             bg_color_c[bg_color_i] = bg_color[bg_color_i]
 * 
 *         return ngl_node_param_set(self.ctx, "bg_color", bg_color_c)             # <<<<<<<<<<<<<<
 * 
 *     def set_aspect_ratio(self, tuple aspect_ratio):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"bg_color"), __pyx_v_bg_color_c)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1335, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":1326
 *         return ngl_node_param_set(self.ctx, "export_filename", export_filename)
 * 
 *     def set_bg_color(self, *bg_color):             # <<<<<<<<<<<<<<
 *         cdef float[4] bg_color_c
 *         cdef int bg_color_i
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pynodegl.HUD.set_bg_color", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":1337
 *         return ngl_node_param_set(self.ctx, "bg_color", bg_color_c)
 * 
 *     def set_aspect_ratio(self, tuple aspect_ratio):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx,
 *                                   "aspect_ratio",
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_3HUD_11set_aspect_ratio(PyObject *__pyx_v_self, PyObject *__pyx_v_aspect_ratio); /*proto*/
static PyObject *__pyx_pw_8pynodegl_3HUD_11set_aspect_ratio(PyObject *__pyx_v_self, PyObject *__pyx_v_aspect_ratio) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_aspect_ratio (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_aspect_ratio), (&PyTuple_Type), 1, "aspect_ratio", 1))) __PYX_ERR(0, 1337, __pyx_L1_error)
  __pyx_r = __pyx_pf_8pynodegl_3HUD_10set_aspect_ratio(((struct __pyx_obj_8pynodegl_HUD *)__pyx_v_self), ((PyObject*)__pyx_v_aspect_ratio));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_3HUD_10set_aspect_ratio(struct __pyx_obj_8pynodegl_HUD *__pyx_v_self, PyObject *__pyx_v_aspect_ratio) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  __Pyx_RefNannySetupContext("set_aspect_ratio", 0);

  /* "nodes_def.pyx":1338
 * 
 *     def set_aspect_ratio(self, tuple aspect_ratio):
 *         return ngl_node_param_set(self.ctx,             # <<<<<<<<<<<<<<
 *                                   "aspect_ratio",
 *                                   <int>aspect_ratio[0],
 */
  __Pyx_XDECREF(__pyx_r);

  /* "nodes_def.pyx":1340
 *         return ngl_node_param_set(self.ctx,
 *                                   "aspect_ratio",
 *                                   <int>aspect_ratio[0],             # <<<<<<<<<<<<<<
 *                                   <int>aspect_ratio[1]);
 * 
 */
  if (unlikely(__pyx_v_aspect_ratio == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 1340, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v_aspect_ratio, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1340, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1340, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "nodes_def.pyx":1341
 *                                   "aspect_ratio",
 *                                   <int>aspect_ratio[0],
 *                                   <int>aspect_ratio[1]);             # <<<<<<<<<<<<<<
 * 
 * 
 */
  if (unlikely(__pyx_v_aspect_ratio == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 1341, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v_aspect_ratio, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1341, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1341, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "nodes_def.pyx":1338
 * 
 *     def set_aspect_ratio(self, tuple aspect_ratio):
 *         return ngl_node_param_set(self.ctx,             # <<<<<<<<<<<<<<
 *                                   "aspect_ratio",
 *                                   <int>aspect_ratio[0],
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"aspect_ratio"), ((int)__pyx_t_2), ((int)__pyx_t_3))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1338, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":1337
 *         return ngl_node_param_set(self.ctx, "bg_color", bg_color_c)
 * 
 *     def set_aspect_ratio(self, tuple aspect_ratio):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx,
 *                                   "aspect_ratio",
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.HUD.set_aspect_ratio", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_3HUD_13__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pynodegl_3HUD_13__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_3HUD_12__reduce_cython__(((struct __pyx_obj_8pynodegl_HUD *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_3HUD_12__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_HUD *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__119, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.HUD.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_3HUD_15__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8pynodegl_3HUD_15__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_3HUD_14__setstate_cython__(((struct __pyx_obj_8pynodegl_HUD *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_3HUD_14__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_HUD *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__120, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.HUD.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":1346
 * cdef class Identity(_Node):
 * 
 *     def __init__(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_IDENTITY)
 */

/* Python wrapper */
static int __pyx_pw_8pynodegl_8Identity_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pynodegl_8Identity_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 1))) return -1;
  if (unlikely(__pyx_kwds)) {
    __pyx_v_kwargs = PyDict_Copy(__pyx_kwds); if (unlikely(!__pyx_v_kwargs)) return -1;
    __Pyx_GOTREF(__pyx_v_kwargs);
  } else {
    __pyx_v_kwargs = NULL;
  }
  __Pyx_INCREF(__pyx_args);
  __pyx_v_args = __pyx_args;
  __pyx_r = __pyx_pf_8pynodegl_8Identity___init__(((struct __pyx_obj_8pynodegl_Identity *)__pyx_v_self), __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pynodegl_8Identity___init__(struct __pyx_obj_8pynodegl_Identity *__pyx_v_self, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "nodes_def.pyx":1347
 * 
 *     def __init__(self, *args, **kwargs):
 *         assert self.ctx is NULL             # <<<<<<<<<<<<<<
 *         self.ctx = ngl_node_create(NGL_NODE_IDENTITY)
 *         if self.ctx is NULL:
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!((__pyx_v_self->__pyx_base.ctx == NULL) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 1347, __pyx_L1_error)
    }
  }
  #endif

  /* "nodes_def.pyx":1348
 *     def __init__(self, *args, **kwargs):
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_IDENTITY)             # <<<<<<<<<<<<<<
 *         if self.ctx is NULL:
 *             raise MemoryError()
 */
  __pyx_v_self->__pyx_base.ctx = ngl_node_create(NGL_NODE_IDENTITY);

  /* "nodes_def.pyx":1349
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_IDENTITY)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         _Node._init_params(self, *args, **kwargs)
 */
  __pyx_t_1 = ((__pyx_v_self->__pyx_base.ctx == NULL) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "nodes_def.pyx":1350
 *         self.ctx = ngl_node_create(NGL_NODE_IDENTITY)
 *         if self.ctx is NULL:
 *             raise MemoryError()             # <<<<<<<<<<<<<<
 *         _Node._init_params(self, *args, **kwargs)
 * 
 */
    PyErr_NoMemory(); __PYX_ERR(0, 1350, __pyx_L1_error)

    /* "nodes_def.pyx":1349
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_IDENTITY)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         _Node._init_params(self, *args, **kwargs)
 */
  }

  /* "nodes_def.pyx":1351
 *         if self.ctx is NULL:
 *             raise MemoryError()
 *         _Node._init_params(self, *args, **kwargs)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_8pynodegl__Node), __pyx_n_s_init_params); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1351, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1351, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_v_self));
  __pyx_t_4 = PyNumber_Add(__pyx_t_3, __pyx_v_args); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1351, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, __pyx_v_kwargs); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1351, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "nodes_def.pyx":1346
 * cdef class Identity(_Node):
 * 
 *     def __init__(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_IDENTITY)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pynodegl.Identity.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_8Identity_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pynodegl_8Identity_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_8Identity_2__reduce_cython__(((struct __pyx_obj_8pynodegl_Identity *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_8Identity_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_Identity *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__121, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.Identity.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_8Identity_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8pynodegl_8Identity_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_8Identity_4__setstate_cython__(((struct __pyx_obj_8pynodegl_Identity *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_8Identity_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_Identity *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__122, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.Identity.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":1357
 * cdef class Media(_Node):
 * 
 *     def __init__(self, const char *filename, sxplayer_min_level=None, time_anim=None, audio_tex=None, max_nb_packets=None, max_nb_frames=None, max_nb_sink=None, max_pixels=None, stream_idx=None, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_MEDIA, filename)
 */

/* Python wrapper */
static int __pyx_pw_8pynodegl_5Media_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pynodegl_5Media_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  char const *__pyx_v_filename;
  PyObject *__pyx_v_sxplayer_min_level = 0;
  PyObject *__pyx_v_time_anim = 0;
  PyObject *__pyx_v_audio_tex = 0;
  PyObject *__pyx_v_max_nb_packets = 0;
  PyObject *__pyx_v_max_nb_frames = 0;
  PyObject *__pyx_v_max_nb_sink = 0;
  PyObject *__pyx_v_max_pixels = 0;
  PyObject *__pyx_v_stream_idx = 0;
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  __pyx_v_kwargs = PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return -1;
  __Pyx_GOTREF(__pyx_v_kwargs);
  if (PyTuple_GET_SIZE(__pyx_args) > 9) {
    __pyx_v_args = PyTuple_GetSlice(__pyx_args, 9, PyTuple_GET_SIZE(__pyx_args));
    if (unlikely(!__pyx_v_args)) {
      __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
      __Pyx_RefNannyFinishContext();
      return -1;
    }
    __Pyx_GOTREF(__pyx_v_args);
  } else {
    __pyx_v_args = __pyx_empty_tuple; __Pyx_INCREF(__pyx_empty_tuple);
  }
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_filename,&__pyx_n_s_sxplayer_min_level,&__pyx_n_s_time_anim,&__pyx_n_s_audio_tex,&__pyx_n_s_max_nb_packets,&__pyx_n_s_max_nb_frames,&__pyx_n_s_max_nb_sink,&__pyx_n_s_max_pixels,&__pyx_n_s_stream_idx,0};
    PyObject* values[9] = {0,0,0,0,0,0,0,0,0};
    values[1] = ((PyObject *)Py_None);
    values[2] = ((PyObject *)Py_None);
    values[3] = ((PyObject *)Py_None);
    values[4] = ((PyObject *)Py_None);
    values[5] = ((PyObject *)Py_None);
    values[6] = ((PyObject *)Py_None);
    values[7] = ((PyObject *)Py_None);
    values[8] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        default:
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_filename)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_sxplayer_min_level);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_time_anim);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_audio_tex);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_max_nb_packets);
          if (value) { values[4] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_max_nb_frames);
          if (value) { values[5] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_max_nb_sink);
          if (value) { values[6] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_max_pixels);
          if (value) { values[7] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_stream_idx);
          if (value) { values[8] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t used_pos_args = (pos_args < 9) ? pos_args : 9;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_kwargs, values, used_pos_args, "__init__") < 0)) __PYX_ERR(0, 1357, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        default:
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        case  0:
        goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_filename = __Pyx_PyObject_AsString(values[0]); if (unlikely((!__pyx_v_filename) && PyErr_Occurred())) __PYX_ERR(0, 1357, __pyx_L3_error)
    __pyx_v_sxplayer_min_level = values[1];
    __pyx_v_time_anim = values[2];
    __pyx_v_audio_tex = values[3];
    __pyx_v_max_nb_packets = values[4];
    __pyx_v_max_nb_frames = values[5];
    __pyx_v_max_nb_sink = values[6];
    __pyx_v_max_pixels = values[7];
    __pyx_v_stream_idx = values[8];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 1, 9, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1357, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_args); __pyx_v_args = 0;
  __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
  __Pyx_AddTraceback("pynodegl.Media.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pynodegl_5Media___init__(((struct __pyx_obj_8pynodegl_Media *)__pyx_v_self), __pyx_v_filename, __pyx_v_sxplayer_min_level, __pyx_v_time_anim, __pyx_v_audio_tex, __pyx_v_max_nb_packets, __pyx_v_max_nb_frames, __pyx_v_max_nb_sink, __pyx_v_max_pixels, __pyx_v_stream_idx, __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pynodegl_5Media___init__(struct __pyx_obj_8pynodegl_Media *__pyx_v_self, char const *__pyx_v_filename, PyObject *__pyx_v_sxplayer_min_level, PyObject *__pyx_v_time_anim, PyObject *__pyx_v_audio_tex, PyObject *__pyx_v_max_nb_packets, PyObject *__pyx_v_max_nb_frames, PyObject *__pyx_v_max_nb_sink, PyObject *__pyx_v_max_pixels, PyObject *__pyx_v_stream_idx, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "nodes_def.pyx":1358
 * 
 *     def __init__(self, const char *filename, sxplayer_min_level=None, time_anim=None, audio_tex=None, max_nb_packets=None, max_nb_frames=None, max_nb_sink=None, max_pixels=None, stream_idx=None, *args, **kwargs):
 *         assert self.ctx is NULL             # <<<<<<<<<<<<<<
 *         self.ctx = ngl_node_create(NGL_NODE_MEDIA, filename)
 *         if self.ctx is NULL:
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!((__pyx_v_self->__pyx_base.ctx == NULL) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 1358, __pyx_L1_error)
    }
  }
  #endif

  /* "nodes_def.pyx":1359
 *     def __init__(self, const char *filename, sxplayer_min_level=None, time_anim=None, audio_tex=None, max_nb_packets=None, max_nb_frames=None, max_nb_sink=None, max_pixels=None, stream_idx=None, *args, **kwargs):
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_MEDIA, filename)             # <<<<<<<<<<<<<<
 *         if self.ctx is NULL:
 *             raise MemoryError()
 */
  __pyx_v_self->__pyx_base.ctx = ngl_node_create(NGL_NODE_MEDIA, __pyx_v_filename);

  /* "nodes_def.pyx":1360
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_MEDIA, filename)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         _Node._init_params(self, *args, **kwargs)
 */
  __pyx_t_1 = ((__pyx_v_self->__pyx_base.ctx == NULL) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "nodes_def.pyx":1361
 *         self.ctx = ngl_node_create(NGL_NODE_MEDIA, filename)
 *         if self.ctx is NULL:
 *             raise MemoryError()             # <<<<<<<<<<<<<<
 *         _Node._init_params(self, *args, **kwargs)
 * 
 */
    PyErr_NoMemory(); __PYX_ERR(0, 1361, __pyx_L1_error)

    /* "nodes_def.pyx":1360
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_MEDIA, filename)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         _Node._init_params(self, *args, **kwargs)
 */
  }

  /* "nodes_def.pyx":1362
 *         if self.ctx is NULL:
 *             raise MemoryError()
 *         _Node._init_params(self, *args, **kwargs)             # <<<<<<<<<<<<<<
 * 
 *         if sxplayer_min_level is not None:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_8pynodegl__Node), __pyx_n_s_init_params); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1362, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1362, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_v_self));
  __pyx_t_4 = PyNumber_Add(__pyx_t_3, __pyx_v_args); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1362, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, __pyx_v_kwargs); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1362, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "nodes_def.pyx":1364
 *         _Node._init_params(self, *args, **kwargs)
 * 
 *         if sxplayer_min_level is not None:             # <<<<<<<<<<<<<<
 *             self.set_sxplayer_min_level(sxplayer_min_level)
 *         if time_anim is not None:
 */
  __pyx_t_1 = (__pyx_v_sxplayer_min_level != Py_None);
  __pyx_t_5 = (__pyx_t_1 != 0);
  if (__pyx_t_5) {

    /* "nodes_def.pyx":1365
 * 
 *         if sxplayer_min_level is not None:
 *             self.set_sxplayer_min_level(sxplayer_min_level)             # <<<<<<<<<<<<<<
 *         if time_anim is not None:
 *             self.set_time_anim(time_anim)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_sxplayer_min_level); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1365, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_2, __pyx_v_sxplayer_min_level) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_sxplayer_min_level);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1365, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "nodes_def.pyx":1364
 *         _Node._init_params(self, *args, **kwargs)
 * 
 *         if sxplayer_min_level is not None:             # <<<<<<<<<<<<<<
 *             self.set_sxplayer_min_level(sxplayer_min_level)
 *         if time_anim is not None:
 */
  }

  /* "nodes_def.pyx":1366
 *         if sxplayer_min_level is not None:
 *             self.set_sxplayer_min_level(sxplayer_min_level)
 *         if time_anim is not None:             # <<<<<<<<<<<<<<
 *             self.set_time_anim(time_anim)
 *         if audio_tex is not None:
 */
  __pyx_t_5 = (__pyx_v_time_anim != Py_None);
  __pyx_t_1 = (__pyx_t_5 != 0);
  if (__pyx_t_1) {

    /* "nodes_def.pyx":1367
 *             self.set_sxplayer_min_level(sxplayer_min_level)
 *         if time_anim is not None:
 *             self.set_time_anim(time_anim)             # <<<<<<<<<<<<<<
 *         if audio_tex is not None:
 *             self.set_audio_tex(audio_tex)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_time_anim); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1367, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_2, __pyx_v_time_anim) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_time_anim);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1367, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "nodes_def.pyx":1366
 *         if sxplayer_min_level is not None:
 *             self.set_sxplayer_min_level(sxplayer_min_level)
 *         if time_anim is not None:             # <<<<<<<<<<<<<<
 *             self.set_time_anim(time_anim)
 *         if audio_tex is not None:
 */
  }

  /* "nodes_def.pyx":1368
 *         if time_anim is not None:
 *             self.set_time_anim(time_anim)
 *         if audio_tex is not None:             # <<<<<<<<<<<<<<
 *             self.set_audio_tex(audio_tex)
 *         if max_nb_packets is not None:
 */
  __pyx_t_1 = (__pyx_v_audio_tex != Py_None);
  __pyx_t_5 = (__pyx_t_1 != 0);
  if (__pyx_t_5) {

    /* "nodes_def.pyx":1369
 *             self.set_time_anim(time_anim)
 *         if audio_tex is not None:
 *             self.set_audio_tex(audio_tex)             # <<<<<<<<<<<<<<
 *         if max_nb_packets is not None:
 *             self.set_max_nb_packets(max_nb_packets)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_audio_tex); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1369, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_2, __pyx_v_audio_tex) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_audio_tex);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1369, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "nodes_def.pyx":1368
 *         if time_anim is not None:
 *             self.set_time_anim(time_anim)
 *         if audio_tex is not None:             # <<<<<<<<<<<<<<
 *             self.set_audio_tex(audio_tex)
 *         if max_nb_packets is not None:
 */
  }

  /* "nodes_def.pyx":1370
 *         if audio_tex is not None:
 *             self.set_audio_tex(audio_tex)
 *         if max_nb_packets is not None:             # <<<<<<<<<<<<<<
 *             self.set_max_nb_packets(max_nb_packets)
 *         if max_nb_frames is not None:
 */
  __pyx_t_5 = (__pyx_v_max_nb_packets != Py_None);
  __pyx_t_1 = (__pyx_t_5 != 0);
  if (__pyx_t_1) {

    /* "nodes_def.pyx":1371
 *             self.set_audio_tex(audio_tex)
 *         if max_nb_packets is not None:
 *             self.set_max_nb_packets(max_nb_packets)             # <<<<<<<<<<<<<<
 *         if max_nb_frames is not None:
 *             self.set_max_nb_frames(max_nb_frames)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_max_nb_packets); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1371, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_2, __pyx_v_max_nb_packets) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_max_nb_packets);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1371, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "nodes_def.pyx":1370
 *         if audio_tex is not None:
 *             self.set_audio_tex(audio_tex)
 *         if max_nb_packets is not None:             # <<<<<<<<<<<<<<
 *             self.set_max_nb_packets(max_nb_packets)
 *         if max_nb_frames is not None:
 */
  }

  /* "nodes_def.pyx":1372
 *         if max_nb_packets is not None:
 *             self.set_max_nb_packets(max_nb_packets)
 *         if max_nb_frames is not None:             # <<<<<<<<<<<<<<
 *             self.set_max_nb_frames(max_nb_frames)
 *         if max_nb_sink is not None:
 */
  __pyx_t_1 = (__pyx_v_max_nb_frames != Py_None);
  __pyx_t_5 = (__pyx_t_1 != 0);
  if (__pyx_t_5) {

    /* "nodes_def.pyx":1373
 *             self.set_max_nb_packets(max_nb_packets)
 *         if max_nb_frames is not None:
 *             self.set_max_nb_frames(max_nb_frames)             # <<<<<<<<<<<<<<
 *         if max_nb_sink is not None:
 *             self.set_max_nb_sink(max_nb_sink)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_max_nb_frames); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1373, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_2, __pyx_v_max_nb_frames) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_max_nb_frames);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1373, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "nodes_def.pyx":1372
 *         if max_nb_packets is not None:
 *             self.set_max_nb_packets(max_nb_packets)
 *         if max_nb_frames is not None:             # <<<<<<<<<<<<<<
 *             self.set_max_nb_frames(max_nb_frames)
 *         if max_nb_sink is not None:
 */
  }

  /* "nodes_def.pyx":1374
 *         if max_nb_frames is not None:
 *             self.set_max_nb_frames(max_nb_frames)
 *         if max_nb_sink is not None:             # <<<<<<<<<<<<<<
 *             self.set_max_nb_sink(max_nb_sink)
 *         if max_pixels is not None:
 */
  __pyx_t_5 = (__pyx_v_max_nb_sink != Py_None);
  __pyx_t_1 = (__pyx_t_5 != 0);
  if (__pyx_t_1) {

    /* "nodes_def.pyx":1375
 *             self.set_max_nb_frames(max_nb_frames)
 *         if max_nb_sink is not None:
 *             self.set_max_nb_sink(max_nb_sink)             # <<<<<<<<<<<<<<
 *         if max_pixels is not None:
 *             self.set_max_pixels(max_pixels)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_max_nb_sink); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1375, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_2, __pyx_v_max_nb_sink) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_max_nb_sink);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1375, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "nodes_def.pyx":1374
 *         if max_nb_frames is not None:
 *             self.set_max_nb_frames(max_nb_frames)
 *         if max_nb_sink is not None:             # <<<<<<<<<<<<<<
 *             self.set_max_nb_sink(max_nb_sink)
 *         if max_pixels is not None:
 */
  }

  /* "nodes_def.pyx":1376
 *         if max_nb_sink is not None:
 *             self.set_max_nb_sink(max_nb_sink)
 *         if max_pixels is not None:             # <<<<<<<<<<<<<<
 *             self.set_max_pixels(max_pixels)
 *         if stream_idx is not None:
 */
  __pyx_t_1 = (__pyx_v_max_pixels != Py_None);
  __pyx_t_5 = (__pyx_t_1 != 0);
  if (__pyx_t_5) {

    /* "nodes_def.pyx":1377
 *             self.set_max_nb_sink(max_nb_sink)
 *         if max_pixels is not None:
 *             self.set_max_pixels(max_pixels)             # <<<<<<<<<<<<<<
 *         if stream_idx is not None:
 *             self.set_stream_idx(stream_idx)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_max_pixels); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1377, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_2, __pyx_v_max_pixels) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_max_pixels);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1377, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "nodes_def.pyx":1376
 *         if max_nb_sink is not None:
 *             self.set_max_nb_sink(max_nb_sink)
 *         if max_pixels is not None:             # <<<<<<<<<<<<<<
 *             self.set_max_pixels(max_pixels)
 *         if stream_idx is not None:
 */
  }

  /* "nodes_def.pyx":1378
 *         if max_pixels is not None:
 *             self.set_max_pixels(max_pixels)
 *         if stream_idx is not None:             # <<<<<<<<<<<<<<
 *             self.set_stream_idx(stream_idx)
 * 
 */
  __pyx_t_5 = (__pyx_v_stream_idx != Py_None);
  __pyx_t_1 = (__pyx_t_5 != 0);
  if (__pyx_t_1) {

    /* "nodes_def.pyx":1379
 *             self.set_max_pixels(max_pixels)
 *         if stream_idx is not None:
 *             self.set_stream_idx(stream_idx)             # <<<<<<<<<<<<<<
 * 
 *     def set_sxplayer_min_level(self, const char * sxplayer_min_level):
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_stream_idx); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1379, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_2, __pyx_v_stream_idx) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_stream_idx);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1379, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "nodes_def.pyx":1378
 *         if max_pixels is not None:
 *             self.set_max_pixels(max_pixels)
 *         if stream_idx is not None:             # <<<<<<<<<<<<<<
 *             self.set_stream_idx(stream_idx)
 * 
 */
  }

  /* "nodes_def.pyx":1357
 * cdef class Media(_Node):
 * 
 *     def __init__(self, const char *filename, sxplayer_min_level=None, time_anim=None, audio_tex=None, max_nb_packets=None, max_nb_frames=None, max_nb_sink=None, max_pixels=None, stream_idx=None, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_MEDIA, filename)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pynodegl.Media.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":1381
 *             self.set_stream_idx(stream_idx)
 * 
 *     def set_sxplayer_min_level(self, const char * sxplayer_min_level):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "sxplayer_min_level", sxplayer_min_level)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_5Media_3set_sxplayer_min_level(PyObject *__pyx_v_self, PyObject *__pyx_arg_sxplayer_min_level); /*proto*/
static PyObject *__pyx_pw_8pynodegl_5Media_3set_sxplayer_min_level(PyObject *__pyx_v_self, PyObject *__pyx_arg_sxplayer_min_level) {
  char const *__pyx_v_sxplayer_min_level;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_sxplayer_min_level (wrapper)", 0);
  assert(__pyx_arg_sxplayer_min_level); {
    __pyx_v_sxplayer_min_level = __Pyx_PyObject_AsString(__pyx_arg_sxplayer_min_level); if (unlikely((!__pyx_v_sxplayer_min_level) && PyErr_Occurred())) __PYX_ERR(0, 1381, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pynodegl.Media.set_sxplayer_min_level", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pynodegl_5Media_2set_sxplayer_min_level(((struct __pyx_obj_8pynodegl_Media *)__pyx_v_self), ((char const *)__pyx_v_sxplayer_min_level));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_5Media_2set_sxplayer_min_level(struct __pyx_obj_8pynodegl_Media *__pyx_v_self, char const *__pyx_v_sxplayer_min_level) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("set_sxplayer_min_level", 0);

  /* "nodes_def.pyx":1382
 * 
 *     def set_sxplayer_min_level(self, const char * sxplayer_min_level):
 *         return ngl_node_param_set(self.ctx, "sxplayer_min_level", sxplayer_min_level)             # <<<<<<<<<<<<<<
 * 
 *     def set_time_anim(self, _Node time_anim):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"sxplayer_min_level"), __pyx_v_sxplayer_min_level)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1382, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":1381
 *             self.set_stream_idx(stream_idx)
 * 
 *     def set_sxplayer_min_level(self, const char * sxplayer_min_level):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "sxplayer_min_level", sxplayer_min_level)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.Media.set_sxplayer_min_level", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":1384
 *         return ngl_node_param_set(self.ctx, "sxplayer_min_level", sxplayer_min_level)
 * 
 *     def set_time_anim(self, _Node time_anim):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "time_anim", time_anim.ctx)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_5Media_5set_time_anim(PyObject *__pyx_v_self, PyObject *__pyx_v_time_anim); /*proto*/
static PyObject *__pyx_pw_8pynodegl_5Media_5set_time_anim(PyObject *__pyx_v_self, PyObject *__pyx_v_time_anim) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_time_anim (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_time_anim), __pyx_ptype_8pynodegl__Node, 1, "time_anim", 0))) __PYX_ERR(0, 1384, __pyx_L1_error)
  __pyx_r = __pyx_pf_8pynodegl_5Media_4set_time_anim(((struct __pyx_obj_8pynodegl_Media *)__pyx_v_self), ((struct __pyx_obj_8pynodegl__Node *)__pyx_v_time_anim));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_5Media_4set_time_anim(struct __pyx_obj_8pynodegl_Media *__pyx_v_self, struct __pyx_obj_8pynodegl__Node *__pyx_v_time_anim) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("set_time_anim", 0);

  /* "nodes_def.pyx":1385
 * 
 *     def set_time_anim(self, _Node time_anim):
 *         return ngl_node_param_set(self.ctx, "time_anim", time_anim.ctx)             # <<<<<<<<<<<<<<
 * 
 *     def set_audio_tex(self, bint audio_tex):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"time_anim"), __pyx_v_time_anim->ctx)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1385, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":1384
 *         return ngl_node_param_set(self.ctx, "sxplayer_min_level", sxplayer_min_level)
 * 
 *     def set_time_anim(self, _Node time_anim):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "time_anim", time_anim.ctx)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.Media.set_time_anim", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":1387
 *         return ngl_node_param_set(self.ctx, "time_anim", time_anim.ctx)
 * 
 *     def set_audio_tex(self, bint audio_tex):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "audio_tex", audio_tex)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_5Media_7set_audio_tex(PyObject *__pyx_v_self, PyObject *__pyx_arg_audio_tex); /*proto*/
static PyObject *__pyx_pw_8pynodegl_5Media_7set_audio_tex(PyObject *__pyx_v_self, PyObject *__pyx_arg_audio_tex) {
  int __pyx_v_audio_tex;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_audio_tex (wrapper)", 0);
  assert(__pyx_arg_audio_tex); {
    __pyx_v_audio_tex = __Pyx_PyObject_IsTrue(__pyx_arg_audio_tex); if (unlikely((__pyx_v_audio_tex == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1387, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pynodegl.Media.set_audio_tex", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pynodegl_5Media_6set_audio_tex(((struct __pyx_obj_8pynodegl_Media *)__pyx_v_self), ((int)__pyx_v_audio_tex));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_5Media_6set_audio_tex(struct __pyx_obj_8pynodegl_Media *__pyx_v_self, int __pyx_v_audio_tex) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("set_audio_tex", 0);

  /* "nodes_def.pyx":1388
 * 
 *     def set_audio_tex(self, bint audio_tex):
 *         return ngl_node_param_set(self.ctx, "audio_tex", audio_tex)             # <<<<<<<<<<<<<<
 * 
 *     def set_max_nb_packets(self, int max_nb_packets):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"audio_tex"), __pyx_v_audio_tex)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1388, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":1387
 *         return ngl_node_param_set(self.ctx, "time_anim", time_anim.ctx)
 * 
 *     def set_audio_tex(self, bint audio_tex):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "audio_tex", audio_tex)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.Media.set_audio_tex", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":1390
 *         return ngl_node_param_set(self.ctx, "audio_tex", audio_tex)
 * 
 *     def set_max_nb_packets(self, int max_nb_packets):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "max_nb_packets", max_nb_packets)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_5Media_9set_max_nb_packets(PyObject *__pyx_v_self, PyObject *__pyx_arg_max_nb_packets); /*proto*/
static PyObject *__pyx_pw_8pynodegl_5Media_9set_max_nb_packets(PyObject *__pyx_v_self, PyObject *__pyx_arg_max_nb_packets) {
  int __pyx_v_max_nb_packets;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_max_nb_packets (wrapper)", 0);
  assert(__pyx_arg_max_nb_packets); {
    __pyx_v_max_nb_packets = __Pyx_PyInt_As_int(__pyx_arg_max_nb_packets); if (unlikely((__pyx_v_max_nb_packets == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1390, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pynodegl.Media.set_max_nb_packets", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pynodegl_5Media_8set_max_nb_packets(((struct __pyx_obj_8pynodegl_Media *)__pyx_v_self), ((int)__pyx_v_max_nb_packets));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_5Media_8set_max_nb_packets(struct __pyx_obj_8pynodegl_Media *__pyx_v_self, int __pyx_v_max_nb_packets) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("set_max_nb_packets", 0);

  /* "nodes_def.pyx":1391
 * 
 *     def set_max_nb_packets(self, int max_nb_packets):
 *         return ngl_node_param_set(self.ctx, "max_nb_packets", max_nb_packets)             # <<<<<<<<<<<<<<
 * 
 *     def set_max_nb_frames(self, int max_nb_frames):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"max_nb_packets"), __pyx_v_max_nb_packets)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1391, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":1390
 *         return ngl_node_param_set(self.ctx, "audio_tex", audio_tex)
 * 
 *     def set_max_nb_packets(self, int max_nb_packets):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "max_nb_packets", max_nb_packets)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.Media.set_max_nb_packets", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":1393
 *         return ngl_node_param_set(self.ctx, "max_nb_packets", max_nb_packets)
 * 
 *     def set_max_nb_frames(self, int max_nb_frames):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "max_nb_frames", max_nb_frames)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_5Media_11set_max_nb_frames(PyObject *__pyx_v_self, PyObject *__pyx_arg_max_nb_frames); /*proto*/
static PyObject *__pyx_pw_8pynodegl_5Media_11set_max_nb_frames(PyObject *__pyx_v_self, PyObject *__pyx_arg_max_nb_frames) {
  int __pyx_v_max_nb_frames;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_max_nb_frames (wrapper)", 0);
  assert(__pyx_arg_max_nb_frames); {
    __pyx_v_max_nb_frames = __Pyx_PyInt_As_int(__pyx_arg_max_nb_frames); if (unlikely((__pyx_v_max_nb_frames == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1393, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pynodegl.Media.set_max_nb_frames", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pynodegl_5Media_10set_max_nb_frames(((struct __pyx_obj_8pynodegl_Media *)__pyx_v_self), ((int)__pyx_v_max_nb_frames));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_5Media_10set_max_nb_frames(struct __pyx_obj_8pynodegl_Media *__pyx_v_self, int __pyx_v_max_nb_frames) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("set_max_nb_frames", 0);

  /* "nodes_def.pyx":1394
 * 
 *     def set_max_nb_frames(self, int max_nb_frames):
 *         return ngl_node_param_set(self.ctx, "max_nb_frames", max_nb_frames)             # <<<<<<<<<<<<<<
 * 
 *     def set_max_nb_sink(self, int max_nb_sink):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"max_nb_frames"), __pyx_v_max_nb_frames)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1394, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":1393
 *         return ngl_node_param_set(self.ctx, "max_nb_packets", max_nb_packets)
 * 
 *     def set_max_nb_frames(self, int max_nb_frames):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "max_nb_frames", max_nb_frames)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.Media.set_max_nb_frames", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":1396
 *         return ngl_node_param_set(self.ctx, "max_nb_frames", max_nb_frames)
 * 
 *     def set_max_nb_sink(self, int max_nb_sink):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "max_nb_sink", max_nb_sink)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_5Media_13set_max_nb_sink(PyObject *__pyx_v_self, PyObject *__pyx_arg_max_nb_sink); /*proto*/
static PyObject *__pyx_pw_8pynodegl_5Media_13set_max_nb_sink(PyObject *__pyx_v_self, PyObject *__pyx_arg_max_nb_sink) {
  int __pyx_v_max_nb_sink;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_max_nb_sink (wrapper)", 0);
  assert(__pyx_arg_max_nb_sink); {
    __pyx_v_max_nb_sink = __Pyx_PyInt_As_int(__pyx_arg_max_nb_sink); if (unlikely((__pyx_v_max_nb_sink == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1396, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pynodegl.Media.set_max_nb_sink", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pynodegl_5Media_12set_max_nb_sink(((struct __pyx_obj_8pynodegl_Media *)__pyx_v_self), ((int)__pyx_v_max_nb_sink));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_5Media_12set_max_nb_sink(struct __pyx_obj_8pynodegl_Media *__pyx_v_self, int __pyx_v_max_nb_sink) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("set_max_nb_sink", 0);

  /* "nodes_def.pyx":1397
 * 
 *     def set_max_nb_sink(self, int max_nb_sink):
 *         return ngl_node_param_set(self.ctx, "max_nb_sink", max_nb_sink)             # <<<<<<<<<<<<<<
 * 
 *     def set_max_pixels(self, int max_pixels):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"max_nb_sink"), __pyx_v_max_nb_sink)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1397, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":1396
 *         return ngl_node_param_set(self.ctx, "max_nb_frames", max_nb_frames)
 * 
 *     def set_max_nb_sink(self, int max_nb_sink):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "max_nb_sink", max_nb_sink)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.Media.set_max_nb_sink", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":1399
 *         return ngl_node_param_set(self.ctx, "max_nb_sink", max_nb_sink)
 * 
 *     def set_max_pixels(self, int max_pixels):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "max_pixels", max_pixels)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_5Media_15set_max_pixels(PyObject *__pyx_v_self, PyObject *__pyx_arg_max_pixels); /*proto*/
static PyObject *__pyx_pw_8pynodegl_5Media_15set_max_pixels(PyObject *__pyx_v_self, PyObject *__pyx_arg_max_pixels) {
  int __pyx_v_max_pixels;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_max_pixels (wrapper)", 0);
  assert(__pyx_arg_max_pixels); {
    __pyx_v_max_pixels = __Pyx_PyInt_As_int(__pyx_arg_max_pixels); if (unlikely((__pyx_v_max_pixels == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1399, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pynodegl.Media.set_max_pixels", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pynodegl_5Media_14set_max_pixels(((struct __pyx_obj_8pynodegl_Media *)__pyx_v_self), ((int)__pyx_v_max_pixels));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_5Media_14set_max_pixels(struct __pyx_obj_8pynodegl_Media *__pyx_v_self, int __pyx_v_max_pixels) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("set_max_pixels", 0);

  /* "nodes_def.pyx":1400
 * 
 *     def set_max_pixels(self, int max_pixels):
 *         return ngl_node_param_set(self.ctx, "max_pixels", max_pixels)             # <<<<<<<<<<<<<<
 * 
 *     def set_stream_idx(self, int stream_idx):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"max_pixels"), __pyx_v_max_pixels)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1400, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":1399
 *         return ngl_node_param_set(self.ctx, "max_nb_sink", max_nb_sink)
 * 
 *     def set_max_pixels(self, int max_pixels):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "max_pixels", max_pixels)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.Media.set_max_pixels", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":1402
 *         return ngl_node_param_set(self.ctx, "max_pixels", max_pixels)
 * 
 *     def set_stream_idx(self, int stream_idx):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "stream_idx", stream_idx)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_5Media_17set_stream_idx(PyObject *__pyx_v_self, PyObject *__pyx_arg_stream_idx); /*proto*/
static PyObject *__pyx_pw_8pynodegl_5Media_17set_stream_idx(PyObject *__pyx_v_self, PyObject *__pyx_arg_stream_idx) {
  int __pyx_v_stream_idx;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_stream_idx (wrapper)", 0);
  assert(__pyx_arg_stream_idx); {
    __pyx_v_stream_idx = __Pyx_PyInt_As_int(__pyx_arg_stream_idx); if (unlikely((__pyx_v_stream_idx == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1402, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pynodegl.Media.set_stream_idx", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pynodegl_5Media_16set_stream_idx(((struct __pyx_obj_8pynodegl_Media *)__pyx_v_self), ((int)__pyx_v_stream_idx));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_5Media_16set_stream_idx(struct __pyx_obj_8pynodegl_Media *__pyx_v_self, int __pyx_v_stream_idx) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("set_stream_idx", 0);

  /* "nodes_def.pyx":1403
 * 
 *     def set_stream_idx(self, int stream_idx):
 *         return ngl_node_param_set(self.ctx, "stream_idx", stream_idx)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"stream_idx"), __pyx_v_stream_idx)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1403, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":1402
 *         return ngl_node_param_set(self.ctx, "max_pixels", max_pixels)
 * 
 *     def set_stream_idx(self, int stream_idx):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "stream_idx", stream_idx)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.Media.set_stream_idx", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_5Media_19__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pynodegl_5Media_19__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_5Media_18__reduce_cython__(((struct __pyx_obj_8pynodegl_Media *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_5Media_18__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_Media *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__123, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.Media.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_5Media_21__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8pynodegl_5Media_21__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_5Media_20__setstate_cython__(((struct __pyx_obj_8pynodegl_Media *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_5Media_20__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_Media *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__124, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.Media.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":1408
 * cdef class Program(_Node):
 * 
 *     def __init__(self, vertex='default.vert', fragment='default.frag', *args, **kwargs):             # <<<<<<<<<<<<<<
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_PROGRAM)
 */

/* Python wrapper */
static int __pyx_pw_8pynodegl_7Program_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pynodegl_7Program_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_vertex = 0;
  PyObject *__pyx_v_fragment = 0;
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  __pyx_v_kwargs = PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return -1;
  __Pyx_GOTREF(__pyx_v_kwargs);
  if (PyTuple_GET_SIZE(__pyx_args) > 2) {
    __pyx_v_args = PyTuple_GetSlice(__pyx_args, 2, PyTuple_GET_SIZE(__pyx_args));
    if (unlikely(!__pyx_v_args)) {
      __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
      __Pyx_RefNannyFinishContext();
      return -1;
    }
    __Pyx_GOTREF(__pyx_v_args);
  } else {
    __pyx_v_args = __pyx_empty_tuple; __Pyx_INCREF(__pyx_empty_tuple);
  }
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_vertex,&__pyx_n_s_fragment,0};
    PyObject* values[2] = {0,0};
    values[0] = ((PyObject *)__pyx_kp_u_default_vert);
    values[1] = ((PyObject *)__pyx_kp_u_default_frag);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        default:
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_vertex);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_fragment);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t used_pos_args = (pos_args < 2) ? pos_args : 2;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_kwargs, values, used_pos_args, "__init__") < 0)) __PYX_ERR(0, 1408, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        default:
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
      }
    }
    __pyx_v_vertex = values[0];
    __pyx_v_fragment = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_args); __pyx_v_args = 0;
  __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
  __Pyx_AddTraceback("pynodegl.Program.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pynodegl_7Program___init__(((struct __pyx_obj_8pynodegl_Program *)__pyx_v_self), __pyx_v_vertex, __pyx_v_fragment, __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pynodegl_7Program___init__(struct __pyx_obj_8pynodegl_Program *__pyx_v_self, PyObject *__pyx_v_vertex, PyObject *__pyx_v_fragment, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "nodes_def.pyx":1409
 * 
 *     def __init__(self, vertex='default.vert', fragment='default.frag', *args, **kwargs):
 *         assert self.ctx is NULL             # <<<<<<<<<<<<<<
 *         self.ctx = ngl_node_create(NGL_NODE_PROGRAM)
 *         if self.ctx is NULL:
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!((__pyx_v_self->__pyx_base.ctx == NULL) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 1409, __pyx_L1_error)
    }
  }
  #endif

  /* "nodes_def.pyx":1410
 *     def __init__(self, vertex='default.vert', fragment='default.frag', *args, **kwargs):
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_PROGRAM)             # <<<<<<<<<<<<<<
 *         if self.ctx is NULL:
 *             raise MemoryError()
 */
  __pyx_v_self->__pyx_base.ctx = ngl_node_create(NGL_NODE_PROGRAM);

  /* "nodes_def.pyx":1411
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_PROGRAM)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         _Node._init_params(self, *args, **kwargs)
 */
  __pyx_t_1 = ((__pyx_v_self->__pyx_base.ctx == NULL) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "nodes_def.pyx":1412
 *         self.ctx = ngl_node_create(NGL_NODE_PROGRAM)
 *         if self.ctx is NULL:
 *             raise MemoryError()             # <<<<<<<<<<<<<<
 *         _Node._init_params(self, *args, **kwargs)
 * 
 */
    PyErr_NoMemory(); __PYX_ERR(0, 1412, __pyx_L1_error)

    /* "nodes_def.pyx":1411
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_PROGRAM)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         _Node._init_params(self, *args, **kwargs)
 */
  }

  /* "nodes_def.pyx":1413
 *         if self.ctx is NULL:
 *             raise MemoryError()
 *         _Node._init_params(self, *args, **kwargs)             # <<<<<<<<<<<<<<
 * 
 *         if vertex is not None:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_8pynodegl__Node), __pyx_n_s_init_params); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1413, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1413, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_v_self));
  __pyx_t_4 = PyNumber_Add(__pyx_t_3, __pyx_v_args); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1413, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, __pyx_v_kwargs); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1413, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "nodes_def.pyx":1415
 *         _Node._init_params(self, *args, **kwargs)
 * 
 *         if vertex is not None:             # <<<<<<<<<<<<<<
 *             self.set_vertex(vertex)
 *         if fragment is not None:
 */
  __pyx_t_1 = (__pyx_v_vertex != Py_None);
  __pyx_t_5 = (__pyx_t_1 != 0);
  if (__pyx_t_5) {

    /* "nodes_def.pyx":1416
 * 
 *         if vertex is not None:
 *             self.set_vertex(vertex)             # <<<<<<<<<<<<<<
 *         if fragment is not None:
 *             self.set_fragment(fragment)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_vertex); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1416, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_2, __pyx_v_vertex) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_vertex);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1416, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "nodes_def.pyx":1415
 *         _Node._init_params(self, *args, **kwargs)
 * 
 *         if vertex is not None:             # <<<<<<<<<<<<<<
 *             self.set_vertex(vertex)
 *         if fragment is not None:
 */
  }

  /* "nodes_def.pyx":1417
 *         if vertex is not None:
 *             self.set_vertex(vertex)
 *         if fragment is not None:             # <<<<<<<<<<<<<<
 *             self.set_fragment(fragment)
 * 
 */
  __pyx_t_5 = (__pyx_v_fragment != Py_None);
  __pyx_t_1 = (__pyx_t_5 != 0);
  if (__pyx_t_1) {

    /* "nodes_def.pyx":1418
 *             self.set_vertex(vertex)
 *         if fragment is not None:
 *             self.set_fragment(fragment)             # <<<<<<<<<<<<<<
 * 
 *     def set_vertex(self, const char * vertex):
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_fragment); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1418, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_2, __pyx_v_fragment) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_fragment);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1418, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "nodes_def.pyx":1417
 *         if vertex is not None:
 *             self.set_vertex(vertex)
 *         if fragment is not None:             # <<<<<<<<<<<<<<
 *             self.set_fragment(fragment)
 * 
 */
  }

  /* "nodes_def.pyx":1408
 * cdef class Program(_Node):
 * 
 *     def __init__(self, vertex='default.vert', fragment='default.frag', *args, **kwargs):             # <<<<<<<<<<<<<<
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_PROGRAM)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pynodegl.Program.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":1420
 *             self.set_fragment(fragment)
 * 
 *     def set_vertex(self, const char * vertex):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "vertex", vertex)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_7Program_3set_vertex(PyObject *__pyx_v_self, PyObject *__pyx_arg_vertex); /*proto*/
static PyObject *__pyx_pw_8pynodegl_7Program_3set_vertex(PyObject *__pyx_v_self, PyObject *__pyx_arg_vertex) {
  char const *__pyx_v_vertex;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_vertex (wrapper)", 0);
  assert(__pyx_arg_vertex); {
    __pyx_v_vertex = __Pyx_PyObject_AsString(__pyx_arg_vertex); if (unlikely((!__pyx_v_vertex) && PyErr_Occurred())) __PYX_ERR(0, 1420, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pynodegl.Program.set_vertex", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pynodegl_7Program_2set_vertex(((struct __pyx_obj_8pynodegl_Program *)__pyx_v_self), ((char const *)__pyx_v_vertex));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_7Program_2set_vertex(struct __pyx_obj_8pynodegl_Program *__pyx_v_self, char const *__pyx_v_vertex) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("set_vertex", 0);

  /* "nodes_def.pyx":1421
 * 
 *     def set_vertex(self, const char * vertex):
 *         return ngl_node_param_set(self.ctx, "vertex", vertex)             # <<<<<<<<<<<<<<
 * 
 *     def set_fragment(self, const char * fragment):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"vertex"), __pyx_v_vertex)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1421, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":1420
 *             self.set_fragment(fragment)
 * 
 *     def set_vertex(self, const char * vertex):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "vertex", vertex)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.Program.set_vertex", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":1423
 *         return ngl_node_param_set(self.ctx, "vertex", vertex)
 * 
 *     def set_fragment(self, const char * fragment):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "fragment", fragment)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_7Program_5set_fragment(PyObject *__pyx_v_self, PyObject *__pyx_arg_fragment); /*proto*/
static PyObject *__pyx_pw_8pynodegl_7Program_5set_fragment(PyObject *__pyx_v_self, PyObject *__pyx_arg_fragment) {
  char const *__pyx_v_fragment;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_fragment (wrapper)", 0);
  assert(__pyx_arg_fragment); {
    __pyx_v_fragment = __Pyx_PyObject_AsString(__pyx_arg_fragment); if (unlikely((!__pyx_v_fragment) && PyErr_Occurred())) __PYX_ERR(0, 1423, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pynodegl.Program.set_fragment", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pynodegl_7Program_4set_fragment(((struct __pyx_obj_8pynodegl_Program *)__pyx_v_self), ((char const *)__pyx_v_fragment));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_7Program_4set_fragment(struct __pyx_obj_8pynodegl_Program *__pyx_v_self, char const *__pyx_v_fragment) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("set_fragment", 0);

  /* "nodes_def.pyx":1424
 * 
 *     def set_fragment(self, const char * fragment):
 *         return ngl_node_param_set(self.ctx, "fragment", fragment)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"fragment"), __pyx_v_fragment)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1424, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":1423
 *         return ngl_node_param_set(self.ctx, "vertex", vertex)
 * 
 *     def set_fragment(self, const char * fragment):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "fragment", fragment)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.Program.set_fragment", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_7Program_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pynodegl_7Program_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_7Program_6__reduce_cython__(((struct __pyx_obj_8pynodegl_Program *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_7Program_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_Program *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__125, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.Program.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_7Program_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8pynodegl_7Program_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_7Program_8__setstate_cython__(((struct __pyx_obj_8pynodegl_Program *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_7Program_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_Program *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__126, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.Program.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":1429
 * cdef class Quad(_Node):
 * 
 *     def __init__(self, corner=None, width=None, height=None, uv_corner=None, uv_width=None, uv_height=None, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_QUAD)
 */

/* Python wrapper */
static int __pyx_pw_8pynodegl_4Quad_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pynodegl_4Quad_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_corner = 0;
  PyObject *__pyx_v_width = 0;
  PyObject *__pyx_v_height = 0;
  PyObject *__pyx_v_uv_corner = 0;
  PyObject *__pyx_v_uv_width = 0;
  PyObject *__pyx_v_uv_height = 0;
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  __pyx_v_kwargs = PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return -1;
  __Pyx_GOTREF(__pyx_v_kwargs);
  if (PyTuple_GET_SIZE(__pyx_args) > 6) {
    __pyx_v_args = PyTuple_GetSlice(__pyx_args, 6, PyTuple_GET_SIZE(__pyx_args));
    if (unlikely(!__pyx_v_args)) {
      __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
      __Pyx_RefNannyFinishContext();
      return -1;
    }
    __Pyx_GOTREF(__pyx_v_args);
  } else {
    __pyx_v_args = __pyx_empty_tuple; __Pyx_INCREF(__pyx_empty_tuple);
  }
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_corner,&__pyx_n_s_width,&__pyx_n_s_height,&__pyx_n_s_uv_corner,&__pyx_n_s_uv_width,&__pyx_n_s_uv_height,0};
    PyObject* values[6] = {0,0,0,0,0,0};
    values[0] = ((PyObject *)Py_None);
    values[1] = ((PyObject *)Py_None);
    values[2] = ((PyObject *)Py_None);
    values[3] = ((PyObject *)Py_None);
    values[4] = ((PyObject *)Py_None);
    values[5] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        default:
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_corner);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_width);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_height);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_uv_corner);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_uv_width);
          if (value) { values[4] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_uv_height);
          if (value) { values[5] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t used_pos_args = (pos_args < 6) ? pos_args : 6;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_kwargs, values, used_pos_args, "__init__") < 0)) __PYX_ERR(0, 1429, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        default:
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
      }
    }
    __pyx_v_corner = values[0];
    __pyx_v_width = values[1];
    __pyx_v_height = values[2];
    __pyx_v_uv_corner = values[3];
    __pyx_v_uv_width = values[4];
    __pyx_v_uv_height = values[5];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_args); __pyx_v_args = 0;
  __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
  __Pyx_AddTraceback("pynodegl.Quad.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pynodegl_4Quad___init__(((struct __pyx_obj_8pynodegl_Quad *)__pyx_v_self), __pyx_v_corner, __pyx_v_width, __pyx_v_height, __pyx_v_uv_corner, __pyx_v_uv_width, __pyx_v_uv_height, __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pynodegl_4Quad___init__(struct __pyx_obj_8pynodegl_Quad *__pyx_v_self, PyObject *__pyx_v_corner, PyObject *__pyx_v_width, PyObject *__pyx_v_height, PyObject *__pyx_v_uv_corner, PyObject *__pyx_v_uv_width, PyObject *__pyx_v_uv_height, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "nodes_def.pyx":1430
 * 
 *     def __init__(self, corner=None, width=None, height=None, uv_corner=None, uv_width=None, uv_height=None, *args, **kwargs):
 *         assert self.ctx is NULL             # <<<<<<<<<<<<<<
 *         self.ctx = ngl_node_create(NGL_NODE_QUAD)
 *         if self.ctx is NULL:
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!((__pyx_v_self->__pyx_base.ctx == NULL) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 1430, __pyx_L1_error)
    }
  }
  #endif

  /* "nodes_def.pyx":1431
 *     def __init__(self, corner=None, width=None, height=None, uv_corner=None, uv_width=None, uv_height=None, *args, **kwargs):
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_QUAD)             # <<<<<<<<<<<<<<
 *         if self.ctx is NULL:
 *             raise MemoryError()
 */
  __pyx_v_self->__pyx_base.ctx = ngl_node_create(NGL_NODE_QUAD);

  /* "nodes_def.pyx":1432
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_QUAD)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         _Node._init_params(self, *args, **kwargs)
 */
  __pyx_t_1 = ((__pyx_v_self->__pyx_base.ctx == NULL) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "nodes_def.pyx":1433
 *         self.ctx = ngl_node_create(NGL_NODE_QUAD)
 *         if self.ctx is NULL:
 *             raise MemoryError()             # <<<<<<<<<<<<<<
 *         _Node._init_params(self, *args, **kwargs)
 * 
 */
    PyErr_NoMemory(); __PYX_ERR(0, 1433, __pyx_L1_error)

    /* "nodes_def.pyx":1432
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_QUAD)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         _Node._init_params(self, *args, **kwargs)
 */
  }

  /* "nodes_def.pyx":1434
 *         if self.ctx is NULL:
 *             raise MemoryError()
 *         _Node._init_params(self, *args, **kwargs)             # <<<<<<<<<<<<<<
 * 
 *         if corner is not None:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_8pynodegl__Node), __pyx_n_s_init_params); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1434, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1434, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_v_self));
  __pyx_t_4 = PyNumber_Add(__pyx_t_3, __pyx_v_args); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1434, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, __pyx_v_kwargs); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1434, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "nodes_def.pyx":1436
 *         _Node._init_params(self, *args, **kwargs)
 * 
 *         if corner is not None:             # <<<<<<<<<<<<<<
 *             self.set_corner(*corner)
 *         if width is not None:
 */
  __pyx_t_1 = (__pyx_v_corner != Py_None);
  __pyx_t_5 = (__pyx_t_1 != 0);
  if (__pyx_t_5) {

    /* "nodes_def.pyx":1437
 * 
 *         if corner is not None:
 *             self.set_corner(*corner)             # <<<<<<<<<<<<<<
 *         if width is not None:
 *             self.set_width(*width)
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_corner); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1437, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PySequence_Tuple(__pyx_v_corner); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1437, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1437, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "nodes_def.pyx":1436
 *         _Node._init_params(self, *args, **kwargs)
 * 
 *         if corner is not None:             # <<<<<<<<<<<<<<
 *             self.set_corner(*corner)
 *         if width is not None:
 */
  }

  /* "nodes_def.pyx":1438
 *         if corner is not None:
 *             self.set_corner(*corner)
 *         if width is not None:             # <<<<<<<<<<<<<<
 *             self.set_width(*width)
 *         if height is not None:
 */
  __pyx_t_5 = (__pyx_v_width != Py_None);
  __pyx_t_1 = (__pyx_t_5 != 0);
  if (__pyx_t_1) {

    /* "nodes_def.pyx":1439
 *             self.set_corner(*corner)
 *         if width is not None:
 *             self.set_width(*width)             # <<<<<<<<<<<<<<
 *         if height is not None:
 *             self.set_height(*height)
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_width); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1439, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PySequence_Tuple(__pyx_v_width); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1439, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1439, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "nodes_def.pyx":1438
 *         if corner is not None:
 *             self.set_corner(*corner)
 *         if width is not None:             # <<<<<<<<<<<<<<
 *             self.set_width(*width)
 *         if height is not None:
 */
  }

  /* "nodes_def.pyx":1440
 *         if width is not None:
 *             self.set_width(*width)
 *         if height is not None:             # <<<<<<<<<<<<<<
 *             self.set_height(*height)
 *         if uv_corner is not None:
 */
  __pyx_t_1 = (__pyx_v_height != Py_None);
  __pyx_t_5 = (__pyx_t_1 != 0);
  if (__pyx_t_5) {

    /* "nodes_def.pyx":1441
 *             self.set_width(*width)
 *         if height is not None:
 *             self.set_height(*height)             # <<<<<<<<<<<<<<
 *         if uv_corner is not None:
 *             self.set_uv_corner(*uv_corner)
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_height); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1441, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PySequence_Tuple(__pyx_v_height); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1441, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1441, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "nodes_def.pyx":1440
 *         if width is not None:
 *             self.set_width(*width)
 *         if height is not None:             # <<<<<<<<<<<<<<
 *             self.set_height(*height)
 *         if uv_corner is not None:
 */
  }

  /* "nodes_def.pyx":1442
 *         if height is not None:
 *             self.set_height(*height)
 *         if uv_corner is not None:             # <<<<<<<<<<<<<<
 *             self.set_uv_corner(*uv_corner)
 *         if uv_width is not None:
 */
  __pyx_t_5 = (__pyx_v_uv_corner != Py_None);
  __pyx_t_1 = (__pyx_t_5 != 0);
  if (__pyx_t_1) {

    /* "nodes_def.pyx":1443
 *             self.set_height(*height)
 *         if uv_corner is not None:
 *             self.set_uv_corner(*uv_corner)             # <<<<<<<<<<<<<<
 *         if uv_width is not None:
 *             self.set_uv_width(*uv_width)
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_uv_corner); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1443, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PySequence_Tuple(__pyx_v_uv_corner); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1443, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1443, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "nodes_def.pyx":1442
 *         if height is not None:
 *             self.set_height(*height)
 *         if uv_corner is not None:             # <<<<<<<<<<<<<<
 *             self.set_uv_corner(*uv_corner)
 *         if uv_width is not None:
 */
  }

  /* "nodes_def.pyx":1444
 *         if uv_corner is not None:
 *             self.set_uv_corner(*uv_corner)
 *         if uv_width is not None:             # <<<<<<<<<<<<<<
 *             self.set_uv_width(*uv_width)
 *         if uv_height is not None:
 */
  __pyx_t_1 = (__pyx_v_uv_width != Py_None);
  __pyx_t_5 = (__pyx_t_1 != 0);
  if (__pyx_t_5) {

    /* "nodes_def.pyx":1445
 *             self.set_uv_corner(*uv_corner)
 *         if uv_width is not None:
 *             self.set_uv_width(*uv_width)             # <<<<<<<<<<<<<<
 *         if uv_height is not None:
 *             self.set_uv_height(*uv_height)
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_uv_width); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1445, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PySequence_Tuple(__pyx_v_uv_width); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1445, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1445, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "nodes_def.pyx":1444
 *         if uv_corner is not None:
 *             self.set_uv_corner(*uv_corner)
 *         if uv_width is not None:             # <<<<<<<<<<<<<<
 *             self.set_uv_width(*uv_width)
 *         if uv_height is not None:
 */
  }

  /* "nodes_def.pyx":1446
 *         if uv_width is not None:
 *             self.set_uv_width(*uv_width)
 *         if uv_height is not None:             # <<<<<<<<<<<<<<
 *             self.set_uv_height(*uv_height)
 * 
 */
  __pyx_t_5 = (__pyx_v_uv_height != Py_None);
  __pyx_t_1 = (__pyx_t_5 != 0);
  if (__pyx_t_1) {

    /* "nodes_def.pyx":1447
 *             self.set_uv_width(*uv_width)
 *         if uv_height is not None:
 *             self.set_uv_height(*uv_height)             # <<<<<<<<<<<<<<
 * 
 *     def set_corner(self, *corner):
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_uv_height); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1447, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PySequence_Tuple(__pyx_v_uv_height); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1447, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1447, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "nodes_def.pyx":1446
 *         if uv_width is not None:
 *             self.set_uv_width(*uv_width)
 *         if uv_height is not None:             # <<<<<<<<<<<<<<
 *             self.set_uv_height(*uv_height)
 * 
 */
  }

  /* "nodes_def.pyx":1429
 * cdef class Quad(_Node):
 * 
 *     def __init__(self, corner=None, width=None, height=None, uv_corner=None, uv_width=None, uv_height=None, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_QUAD)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pynodegl.Quad.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":1449
 *             self.set_uv_height(*uv_height)
 * 
 *     def set_corner(self, *corner):             # <<<<<<<<<<<<<<
 *         cdef float[3] corner_c
 *         cdef int corner_i
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_4Quad_3set_corner(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_8pynodegl_4Quad_3set_corner(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_corner = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_corner (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "set_corner", 0))) return NULL;
  __Pyx_INCREF(__pyx_args);
  __pyx_v_corner = __pyx_args;
  __pyx_r = __pyx_pf_8pynodegl_4Quad_2set_corner(((struct __pyx_obj_8pynodegl_Quad *)__pyx_v_self), __pyx_v_corner);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_corner);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_4Quad_2set_corner(struct __pyx_obj_8pynodegl_Quad *__pyx_v_self, PyObject *__pyx_v_corner) {
  float __pyx_v_corner_c[3];
  int __pyx_v_corner_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  Py_UCS4 __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  int __pyx_t_7;
  float __pyx_t_8;
  __Pyx_RefNannySetupContext("set_corner", 0);

  /* "nodes_def.pyx":1452
 *         cdef float[3] corner_c
 *         cdef int corner_i
 *         if len(corner) != 3:             # <<<<<<<<<<<<<<
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (
 *                             "corner", 3, len(corner)))
 */
  __pyx_t_1 = PyTuple_GET_SIZE(__pyx_v_corner); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1452, __pyx_L1_error)
  __pyx_t_2 = ((__pyx_t_1 != 3) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "nodes_def.pyx":1453
 *         cdef int corner_i
 *         if len(corner) != 3:
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (             # <<<<<<<<<<<<<<
 *                             "corner", 3, len(corner)))
 *         for corner_i in range(3):
 */
    __pyx_t_3 = PyTuple_New(5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1453, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = 0;
    __pyx_t_4 = 127;
    __Pyx_INCREF(__pyx_kp_u_corner_parameter_is_expected_to);
    __pyx_t_1 += 38;
    __Pyx_GIVEREF(__pyx_kp_u_corner_parameter_is_expected_to);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_kp_u_corner_parameter_is_expected_to);

    /* "nodes_def.pyx":1454
 *         if len(corner) != 3:
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (
 *                             "corner", 3, len(corner)))             # <<<<<<<<<<<<<<
 *         for corner_i in range(3):
 *             corner_c[corner_i] = corner[corner_i]
 */
    __pyx_t_5 = __Pyx_PyUnicode_From_long(3, 0, ' ', 'd'); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1454, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_INCREF(__pyx_kp_u_but_got);
    __pyx_t_1 += 9;
    __Pyx_GIVEREF(__pyx_kp_u_but_got);
    PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_kp_u_but_got);
    __pyx_t_6 = PyTuple_GET_SIZE(__pyx_v_corner); if (unlikely(__pyx_t_6 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1454, __pyx_L1_error)
    __pyx_t_5 = __Pyx_PyUnicode_From_Py_ssize_t(__pyx_t_6, 0, ' ', 'd'); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1454, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_3, 3, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_INCREF(__pyx_kp_u_values);
    __pyx_t_1 += 7;
    __Pyx_GIVEREF(__pyx_kp_u_values);
    PyTuple_SET_ITEM(__pyx_t_3, 4, __pyx_kp_u_values);

    /* "nodes_def.pyx":1453
 *         cdef int corner_i
 *         if len(corner) != 3:
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (             # <<<<<<<<<<<<<<
 *                             "corner", 3, len(corner)))
 *         for corner_i in range(3):
 */
    __pyx_t_5 = __Pyx_PyUnicode_Join(__pyx_t_3, 5, __pyx_t_1, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1453, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1453, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 1453, __pyx_L1_error)

    /* "nodes_def.pyx":1452
 *         cdef float[3] corner_c
 *         cdef int corner_i
 *         if len(corner) != 3:             # <<<<<<<<<<<<<<
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (
 *                             "corner", 3, len(corner)))
 */
  }

  /* "nodes_def.pyx":1455
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (
 *                             "corner", 3, len(corner)))
 *         for corner_i in range(3):             # <<<<<<<<<<<<<<
 *             corner_c[corner_i] = corner[corner_i]
 * 
 */
  for (__pyx_t_7 = 0; __pyx_t_7 < 3; __pyx_t_7+=1) {
    __pyx_v_corner_i = __pyx_t_7;

    /* "nodes_def.pyx":1456
 *                             "corner", 3, len(corner)))
 *         for corner_i in range(3):
 *             corner_c[corner_i] = corner[corner_i]             # <<<<<<<<<<<<<<
 * 
 *         return ngl_node_param_set(self.ctx, "corner", corner_c)
 */
    __pyx_t_3 = __Pyx_GetItemInt_Tuple(__pyx_v_corner, __pyx_v_corner_i, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1456, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_8 = __pyx_PyFloat_AsFloat(__pyx_t_3); if (unlikely((__pyx_t_8 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1456, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    (__pyx_v_corner_c[__pyx_v_corner_i]) = __pyx_t_8;
  }

  /* "nodes_def.pyx":1458
 *             corner_c[corner_i] = corner[corner_i]
 * 
 *         return ngl_node_param_set(self.ctx, "corner", corner_c)             # <<<<<<<<<<<<<<
 * 
 *     def set_width(self, *width):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"corner"), __pyx_v_corner_c)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1458, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":1449
 *             self.set_uv_height(*uv_height)
 * 
 *     def set_corner(self, *corner):             # <<<<<<<<<<<<<<
 *         cdef float[3] corner_c
 *         cdef int corner_i
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pynodegl.Quad.set_corner", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":1460
 *         return ngl_node_param_set(self.ctx, "corner", corner_c)
 * 
 *     def set_width(self, *width):             # <<<<<<<<<<<<<<
 *         cdef float[3] width_c
 *         cdef int width_i
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_4Quad_5set_width(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_8pynodegl_4Quad_5set_width(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_width = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_width (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "set_width", 0))) return NULL;
  __Pyx_INCREF(__pyx_args);
  __pyx_v_width = __pyx_args;
  __pyx_r = __pyx_pf_8pynodegl_4Quad_4set_width(((struct __pyx_obj_8pynodegl_Quad *)__pyx_v_self), __pyx_v_width);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_width);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_4Quad_4set_width(struct __pyx_obj_8pynodegl_Quad *__pyx_v_self, PyObject *__pyx_v_width) {
  float __pyx_v_width_c[3];
  int __pyx_v_width_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  Py_UCS4 __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  int __pyx_t_7;
  float __pyx_t_8;
  __Pyx_RefNannySetupContext("set_width", 0);

  /* "nodes_def.pyx":1463
 *         cdef float[3] width_c
 *         cdef int width_i
 *         if len(width) != 3:             # <<<<<<<<<<<<<<
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (
 *                             "width", 3, len(width)))
 */
  __pyx_t_1 = PyTuple_GET_SIZE(__pyx_v_width); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1463, __pyx_L1_error)
  __pyx_t_2 = ((__pyx_t_1 != 3) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "nodes_def.pyx":1464
 *         cdef int width_i
 *         if len(width) != 3:
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (             # <<<<<<<<<<<<<<
 *                             "width", 3, len(width)))
 *         for width_i in range(3):
 */
    __pyx_t_3 = PyTuple_New(5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1464, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = 0;
    __pyx_t_4 = 127;
    __Pyx_INCREF(__pyx_kp_u_width_parameter_is_expected_to_b);
    __pyx_t_1 += 37;
    __Pyx_GIVEREF(__pyx_kp_u_width_parameter_is_expected_to_b);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_kp_u_width_parameter_is_expected_to_b);

    /* "nodes_def.pyx":1465
 *         if len(width) != 3:
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (
 *                             "width", 3, len(width)))             # <<<<<<<<<<<<<<
 *         for width_i in range(3):
 *             width_c[width_i] = width[width_i]
 */
    __pyx_t_5 = __Pyx_PyUnicode_From_long(3, 0, ' ', 'd'); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1465, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_INCREF(__pyx_kp_u_but_got);
    __pyx_t_1 += 9;
    __Pyx_GIVEREF(__pyx_kp_u_but_got);
    PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_kp_u_but_got);
    __pyx_t_6 = PyTuple_GET_SIZE(__pyx_v_width); if (unlikely(__pyx_t_6 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1465, __pyx_L1_error)
    __pyx_t_5 = __Pyx_PyUnicode_From_Py_ssize_t(__pyx_t_6, 0, ' ', 'd'); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1465, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_3, 3, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_INCREF(__pyx_kp_u_values);
    __pyx_t_1 += 7;
    __Pyx_GIVEREF(__pyx_kp_u_values);
    PyTuple_SET_ITEM(__pyx_t_3, 4, __pyx_kp_u_values);

    /* "nodes_def.pyx":1464
 *         cdef int width_i
 *         if len(width) != 3:
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (             # <<<<<<<<<<<<<<
 *                             "width", 3, len(width)))
 *         for width_i in range(3):
 */
    __pyx_t_5 = __Pyx_PyUnicode_Join(__pyx_t_3, 5, __pyx_t_1, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1464, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1464, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 1464, __pyx_L1_error)

    /* "nodes_def.pyx":1463
 *         cdef float[3] width_c
 *         cdef int width_i
 *         if len(width) != 3:             # <<<<<<<<<<<<<<
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (
 *                             "width", 3, len(width)))
 */
  }

  /* "nodes_def.pyx":1466
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (
 *                             "width", 3, len(width)))
 *         for width_i in range(3):             # <<<<<<<<<<<<<<
 *             width_c[width_i] = width[width_i]
 * 
 */
  for (__pyx_t_7 = 0; __pyx_t_7 < 3; __pyx_t_7+=1) {
    __pyx_v_width_i = __pyx_t_7;

    /* "nodes_def.pyx":1467
 *                             "width", 3, len(width)))
 *         for width_i in range(3):
 *             width_c[width_i] = width[width_i]             # <<<<<<<<<<<<<<
 * 
 *         return ngl_node_param_set(self.ctx, "width", width_c)
 */
    __pyx_t_3 = __Pyx_GetItemInt_Tuple(__pyx_v_width, __pyx_v_width_i, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1467, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_8 = __pyx_PyFloat_AsFloat(__pyx_t_3); if (unlikely((__pyx_t_8 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1467, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    (__pyx_v_width_c[__pyx_v_width_i]) = __pyx_t_8;
  }

  /* "nodes_def.pyx":1469
 *             width_c[width_i] = width[width_i]
 * 
 *         return ngl_node_param_set(self.ctx, "width", width_c)             # <<<<<<<<<<<<<<
 * 
 *     def set_height(self, *height):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"width"), __pyx_v_width_c)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1469, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":1460
 *         return ngl_node_param_set(self.ctx, "corner", corner_c)
 * 
 *     def set_width(self, *width):             # <<<<<<<<<<<<<<
 *         cdef float[3] width_c
 *         cdef int width_i
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pynodegl.Quad.set_width", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":1471
 *         return ngl_node_param_set(self.ctx, "width", width_c)
 * 
 *     def set_height(self, *height):             # <<<<<<<<<<<<<<
 *         cdef float[3] height_c
 *         cdef int height_i
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_4Quad_7set_height(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_8pynodegl_4Quad_7set_height(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_height = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_height (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "set_height", 0))) return NULL;
  __Pyx_INCREF(__pyx_args);
  __pyx_v_height = __pyx_args;
  __pyx_r = __pyx_pf_8pynodegl_4Quad_6set_height(((struct __pyx_obj_8pynodegl_Quad *)__pyx_v_self), __pyx_v_height);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_height);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_4Quad_6set_height(struct __pyx_obj_8pynodegl_Quad *__pyx_v_self, PyObject *__pyx_v_height) {
  float __pyx_v_height_c[3];
  int __pyx_v_height_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  Py_UCS4 __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  int __pyx_t_7;
  float __pyx_t_8;
  __Pyx_RefNannySetupContext("set_height", 0);

  /* "nodes_def.pyx":1474
 *         cdef float[3] height_c
 *         cdef int height_i
 *         if len(height) != 3:             # <<<<<<<<<<<<<<
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (
 *                             "height", 3, len(height)))
 */
  __pyx_t_1 = PyTuple_GET_SIZE(__pyx_v_height); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1474, __pyx_L1_error)
  __pyx_t_2 = ((__pyx_t_1 != 3) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "nodes_def.pyx":1475
 *         cdef int height_i
 *         if len(height) != 3:
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (             # <<<<<<<<<<<<<<
 *                             "height", 3, len(height)))
 *         for height_i in range(3):
 */
    __pyx_t_3 = PyTuple_New(5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1475, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = 0;
    __pyx_t_4 = 127;
    __Pyx_INCREF(__pyx_kp_u_height_parameter_is_expected_to);
    __pyx_t_1 += 38;
    __Pyx_GIVEREF(__pyx_kp_u_height_parameter_is_expected_to);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_kp_u_height_parameter_is_expected_to);

    /* "nodes_def.pyx":1476
 *         if len(height) != 3:
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (
 *                             "height", 3, len(height)))             # <<<<<<<<<<<<<<
 *         for height_i in range(3):
 *             height_c[height_i] = height[height_i]
 */
    __pyx_t_5 = __Pyx_PyUnicode_From_long(3, 0, ' ', 'd'); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1476, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_INCREF(__pyx_kp_u_but_got);
    __pyx_t_1 += 9;
    __Pyx_GIVEREF(__pyx_kp_u_but_got);
    PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_kp_u_but_got);
    __pyx_t_6 = PyTuple_GET_SIZE(__pyx_v_height); if (unlikely(__pyx_t_6 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1476, __pyx_L1_error)
    __pyx_t_5 = __Pyx_PyUnicode_From_Py_ssize_t(__pyx_t_6, 0, ' ', 'd'); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1476, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_3, 3, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_INCREF(__pyx_kp_u_values);
    __pyx_t_1 += 7;
    __Pyx_GIVEREF(__pyx_kp_u_values);
    PyTuple_SET_ITEM(__pyx_t_3, 4, __pyx_kp_u_values);

    /* "nodes_def.pyx":1475
 *         cdef int height_i
 *         if len(height) != 3:
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (             # <<<<<<<<<<<<<<
 *                             "height", 3, len(height)))
 *         for height_i in range(3):
 */
    __pyx_t_5 = __Pyx_PyUnicode_Join(__pyx_t_3, 5, __pyx_t_1, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1475, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1475, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 1475, __pyx_L1_error)

    /* "nodes_def.pyx":1474
 *         cdef float[3] height_c
 *         cdef int height_i
 *         if len(height) != 3:             # <<<<<<<<<<<<<<
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (
 *                             "height", 3, len(height)))
 */
  }

  /* "nodes_def.pyx":1477
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (
 *                             "height", 3, len(height)))
 *         for height_i in range(3):             # <<<<<<<<<<<<<<
 *             height_c[height_i] = height[height_i]
 * 
 */
  for (__pyx_t_7 = 0; __pyx_t_7 < 3; __pyx_t_7+=1) {
    __pyx_v_height_i = __pyx_t_7;

    /* "nodes_def.pyx":1478
 *                             "height", 3, len(height)))
 *         for height_i in range(3):
 *             height_c[height_i] = height[height_i]             # <<<<<<<<<<<<<<
 * 
 *         return ngl_node_param_set(self.ctx, "height", height_c)
 */
    __pyx_t_3 = __Pyx_GetItemInt_Tuple(__pyx_v_height, __pyx_v_height_i, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1478, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_8 = __pyx_PyFloat_AsFloat(__pyx_t_3); if (unlikely((__pyx_t_8 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1478, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    (__pyx_v_height_c[__pyx_v_height_i]) = __pyx_t_8;
  }

  /* "nodes_def.pyx":1480
 *             height_c[height_i] = height[height_i]
 * 
 *         return ngl_node_param_set(self.ctx, "height", height_c)             # <<<<<<<<<<<<<<
 * 
 *     def set_uv_corner(self, *uv_corner):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"height"), __pyx_v_height_c)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1480, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":1471
 *         return ngl_node_param_set(self.ctx, "width", width_c)
 * 
 *     def set_height(self, *height):             # <<<<<<<<<<<<<<
 *         cdef float[3] height_c
 *         cdef int height_i
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pynodegl.Quad.set_height", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":1482
 *         return ngl_node_param_set(self.ctx, "height", height_c)
 * 
 *     def set_uv_corner(self, *uv_corner):             # <<<<<<<<<<<<<<
 *         cdef float[2] uv_corner_c
 *         cdef int uv_corner_i
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_4Quad_9set_uv_corner(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_8pynodegl_4Quad_9set_uv_corner(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_uv_corner = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_uv_corner (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "set_uv_corner", 0))) return NULL;
  __Pyx_INCREF(__pyx_args);
  __pyx_v_uv_corner = __pyx_args;
  __pyx_r = __pyx_pf_8pynodegl_4Quad_8set_uv_corner(((struct __pyx_obj_8pynodegl_Quad *)__pyx_v_self), __pyx_v_uv_corner);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_uv_corner);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_4Quad_8set_uv_corner(struct __pyx_obj_8pynodegl_Quad *__pyx_v_self, PyObject *__pyx_v_uv_corner) {
  float __pyx_v_uv_corner_c[2];
  int __pyx_v_uv_corner_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  Py_UCS4 __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  int __pyx_t_7;
  float __pyx_t_8;
  __Pyx_RefNannySetupContext("set_uv_corner", 0);

  /* "nodes_def.pyx":1485
 *         cdef float[2] uv_corner_c
 *         cdef int uv_corner_i
 *         if len(uv_corner) != 2:             # <<<<<<<<<<<<<<
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (
 *                             "uv_corner", 2, len(uv_corner)))
 */
  __pyx_t_1 = PyTuple_GET_SIZE(__pyx_v_uv_corner); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1485, __pyx_L1_error)
  __pyx_t_2 = ((__pyx_t_1 != 2) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "nodes_def.pyx":1486
 *         cdef int uv_corner_i
 *         if len(uv_corner) != 2:
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (             # <<<<<<<<<<<<<<
 *                             "uv_corner", 2, len(uv_corner)))
 *         for uv_corner_i in range(2):
 */
    __pyx_t_3 = PyTuple_New(5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1486, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = 0;
    __pyx_t_4 = 127;
    __Pyx_INCREF(__pyx_kp_u_uv_corner_parameter_is_expected);
    __pyx_t_1 += 41;
    __Pyx_GIVEREF(__pyx_kp_u_uv_corner_parameter_is_expected);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_kp_u_uv_corner_parameter_is_expected);

    /* "nodes_def.pyx":1487
 *         if len(uv_corner) != 2:
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (
 *                             "uv_corner", 2, len(uv_corner)))             # <<<<<<<<<<<<<<
 *         for uv_corner_i in range(2):
 *             uv_corner_c[uv_corner_i] = uv_corner[uv_corner_i]
 */
    __pyx_t_5 = __Pyx_PyUnicode_From_long(2, 0, ' ', 'd'); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1487, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_INCREF(__pyx_kp_u_but_got);
    __pyx_t_1 += 9;
    __Pyx_GIVEREF(__pyx_kp_u_but_got);
    PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_kp_u_but_got);
    __pyx_t_6 = PyTuple_GET_SIZE(__pyx_v_uv_corner); if (unlikely(__pyx_t_6 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1487, __pyx_L1_error)
    __pyx_t_5 = __Pyx_PyUnicode_From_Py_ssize_t(__pyx_t_6, 0, ' ', 'd'); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1487, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_3, 3, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_INCREF(__pyx_kp_u_values);
    __pyx_t_1 += 7;
    __Pyx_GIVEREF(__pyx_kp_u_values);
    PyTuple_SET_ITEM(__pyx_t_3, 4, __pyx_kp_u_values);

    /* "nodes_def.pyx":1486
 *         cdef int uv_corner_i
 *         if len(uv_corner) != 2:
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (             # <<<<<<<<<<<<<<
 *                             "uv_corner", 2, len(uv_corner)))
 *         for uv_corner_i in range(2):
 */
    __pyx_t_5 = __Pyx_PyUnicode_Join(__pyx_t_3, 5, __pyx_t_1, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1486, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1486, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 1486, __pyx_L1_error)

    /* "nodes_def.pyx":1485
 *         cdef float[2] uv_corner_c
 *         cdef int uv_corner_i
 *         if len(uv_corner) != 2:             # <<<<<<<<<<<<<<
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (
 *                             "uv_corner", 2, len(uv_corner)))
 */
  }

  /* "nodes_def.pyx":1488
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (
 *                             "uv_corner", 2, len(uv_corner)))
 *         for uv_corner_i in range(2):             # <<<<<<<<<<<<<<
 *             uv_corner_c[uv_corner_i] = uv_corner[uv_corner_i]
 * 
 */
  for (__pyx_t_7 = 0; __pyx_t_7 < 2; __pyx_t_7+=1) {
    __pyx_v_uv_corner_i = __pyx_t_7;

    /* "nodes_def.pyx":1489
 *                             "uv_corner", 2, len(uv_corner)))
 *         for uv_corner_i in range(2):
 *             uv_corner_c[uv_corner_i] = uv_corner[uv_corner_i]             # <<<<<<<<<<<<<<
 * 
 *         return ngl_node_param_set(self.ctx, "uv_corner", uv_corner_c)
 */
    __pyx_t_3 = __Pyx_GetItemInt_Tuple(__pyx_v_uv_corner, __pyx_v_uv_corner_i, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1489, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_8 = __pyx_PyFloat_AsFloat(__pyx_t_3); if (unlikely((__pyx_t_8 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1489, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    (__pyx_v_uv_corner_c[__pyx_v_uv_corner_i]) = __pyx_t_8;
  }

  /* "nodes_def.pyx":1491
 *             uv_corner_c[uv_corner_i] = uv_corner[uv_corner_i]
 * 
 *         return ngl_node_param_set(self.ctx, "uv_corner", uv_corner_c)             # <<<<<<<<<<<<<<
 * 
 *     def set_uv_width(self, *uv_width):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"uv_corner"), __pyx_v_uv_corner_c)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1491, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":1482
 *         return ngl_node_param_set(self.ctx, "height", height_c)
 * 
 *     def set_uv_corner(self, *uv_corner):             # <<<<<<<<<<<<<<
 *         cdef float[2] uv_corner_c
 *         cdef int uv_corner_i
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pynodegl.Quad.set_uv_corner", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":1493
 *         return ngl_node_param_set(self.ctx, "uv_corner", uv_corner_c)
 * 
 *     def set_uv_width(self, *uv_width):             # <<<<<<<<<<<<<<
 *         cdef float[2] uv_width_c
 *         cdef int uv_width_i
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_4Quad_11set_uv_width(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_8pynodegl_4Quad_11set_uv_width(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_uv_width = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_uv_width (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "set_uv_width", 0))) return NULL;
  __Pyx_INCREF(__pyx_args);
  __pyx_v_uv_width = __pyx_args;
  __pyx_r = __pyx_pf_8pynodegl_4Quad_10set_uv_width(((struct __pyx_obj_8pynodegl_Quad *)__pyx_v_self), __pyx_v_uv_width);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_uv_width);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_4Quad_10set_uv_width(struct __pyx_obj_8pynodegl_Quad *__pyx_v_self, PyObject *__pyx_v_uv_width) {
  float __pyx_v_uv_width_c[2];
  int __pyx_v_uv_width_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  Py_UCS4 __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  int __pyx_t_7;
  float __pyx_t_8;
  __Pyx_RefNannySetupContext("set_uv_width", 0);

  /* "nodes_def.pyx":1496
 *         cdef float[2] uv_width_c
 *         cdef int uv_width_i
 *         if len(uv_width) != 2:             # <<<<<<<<<<<<<<
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (
 *                             "uv_width", 2, len(uv_width)))
 */
  __pyx_t_1 = PyTuple_GET_SIZE(__pyx_v_uv_width); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1496, __pyx_L1_error)
  __pyx_t_2 = ((__pyx_t_1 != 2) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "nodes_def.pyx":1497
 *         cdef int uv_width_i
 *         if len(uv_width) != 2:
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (             # <<<<<<<<<<<<<<
 *                             "uv_width", 2, len(uv_width)))
 *         for uv_width_i in range(2):
 */
    __pyx_t_3 = PyTuple_New(5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1497, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = 0;
    __pyx_t_4 = 127;
    __Pyx_INCREF(__pyx_kp_u_uv_width_parameter_is_expected_t);
    __pyx_t_1 += 40;
    __Pyx_GIVEREF(__pyx_kp_u_uv_width_parameter_is_expected_t);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_kp_u_uv_width_parameter_is_expected_t);

    /* "nodes_def.pyx":1498
 *         if len(uv_width) != 2:
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (
 *                             "uv_width", 2, len(uv_width)))             # <<<<<<<<<<<<<<
 *         for uv_width_i in range(2):
 *             uv_width_c[uv_width_i] = uv_width[uv_width_i]
 */
    __pyx_t_5 = __Pyx_PyUnicode_From_long(2, 0, ' ', 'd'); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1498, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_INCREF(__pyx_kp_u_but_got);
    __pyx_t_1 += 9;
    __Pyx_GIVEREF(__pyx_kp_u_but_got);
    PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_kp_u_but_got);
    __pyx_t_6 = PyTuple_GET_SIZE(__pyx_v_uv_width); if (unlikely(__pyx_t_6 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1498, __pyx_L1_error)
    __pyx_t_5 = __Pyx_PyUnicode_From_Py_ssize_t(__pyx_t_6, 0, ' ', 'd'); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1498, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_3, 3, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_INCREF(__pyx_kp_u_values);
    __pyx_t_1 += 7;
    __Pyx_GIVEREF(__pyx_kp_u_values);
    PyTuple_SET_ITEM(__pyx_t_3, 4, __pyx_kp_u_values);

    /* "nodes_def.pyx":1497
 *         cdef int uv_width_i
 *         if len(uv_width) != 2:
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (             # <<<<<<<<<<<<<<
 *                             "uv_width", 2, len(uv_width)))
 *         for uv_width_i in range(2):
 */
    __pyx_t_5 = __Pyx_PyUnicode_Join(__pyx_t_3, 5, __pyx_t_1, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1497, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1497, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 1497, __pyx_L1_error)

    /* "nodes_def.pyx":1496
 *         cdef float[2] uv_width_c
 *         cdef int uv_width_i
 *         if len(uv_width) != 2:             # <<<<<<<<<<<<<<
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (
 *                             "uv_width", 2, len(uv_width)))
 */
  }

  /* "nodes_def.pyx":1499
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (
 *                             "uv_width", 2, len(uv_width)))
 *         for uv_width_i in range(2):             # <<<<<<<<<<<<<<
 *             uv_width_c[uv_width_i] = uv_width[uv_width_i]
 * 
 */
  for (__pyx_t_7 = 0; __pyx_t_7 < 2; __pyx_t_7+=1) {
    __pyx_v_uv_width_i = __pyx_t_7;

    /* "nodes_def.pyx":1500
 *                             "uv_width", 2, len(uv_width)))
 *         for uv_width_i in range(2):
 *             uv_width_c[uv_width_i] = uv_width[uv_width_i]             # <<<<<<<<<<<<<<
 * 
 *         return ngl_node_param_set(self.ctx, "uv_width", uv_width_c)
 */
    __pyx_t_3 = __Pyx_GetItemInt_Tuple(__pyx_v_uv_width, __pyx_v_uv_width_i, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1500, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_8 = __pyx_PyFloat_AsFloat(__pyx_t_3); if (unlikely((__pyx_t_8 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1500, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    (__pyx_v_uv_width_c[__pyx_v_uv_width_i]) = __pyx_t_8;
  }

  /* "nodes_def.pyx":1502
 *             uv_width_c[uv_width_i] = uv_width[uv_width_i]
 * 
 *         return ngl_node_param_set(self.ctx, "uv_width", uv_width_c)             # <<<<<<<<<<<<<<
 * 
 *     def set_uv_height(self, *uv_height):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"uv_width"), __pyx_v_uv_width_c)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1502, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":1493
 *         return ngl_node_param_set(self.ctx, "uv_corner", uv_corner_c)
 * 
 *     def set_uv_width(self, *uv_width):             # <<<<<<<<<<<<<<
 *         cdef float[2] uv_width_c
 *         cdef int uv_width_i
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pynodegl.Quad.set_uv_width", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":1504
 *         return ngl_node_param_set(self.ctx, "uv_width", uv_width_c)
 * 
 *     def set_uv_height(self, *uv_height):             # <<<<<<<<<<<<<<
 *         cdef float[2] uv_height_c
 *         cdef int uv_height_i
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_4Quad_13set_uv_height(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_8pynodegl_4Quad_13set_uv_height(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_uv_height = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_uv_height (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "set_uv_height", 0))) return NULL;
  __Pyx_INCREF(__pyx_args);
  __pyx_v_uv_height = __pyx_args;
  __pyx_r = __pyx_pf_8pynodegl_4Quad_12set_uv_height(((struct __pyx_obj_8pynodegl_Quad *)__pyx_v_self), __pyx_v_uv_height);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_uv_height);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_4Quad_12set_uv_height(struct __pyx_obj_8pynodegl_Quad *__pyx_v_self, PyObject *__pyx_v_uv_height) {
  float __pyx_v_uv_height_c[2];
  int __pyx_v_uv_height_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  Py_UCS4 __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  int __pyx_t_7;
  float __pyx_t_8;
  __Pyx_RefNannySetupContext("set_uv_height", 0);

  /* "nodes_def.pyx":1507
 *         cdef float[2] uv_height_c
 *         cdef int uv_height_i
 *         if len(uv_height) != 2:             # <<<<<<<<<<<<<<
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (
 *                             "uv_height", 2, len(uv_height)))
 */
  __pyx_t_1 = PyTuple_GET_SIZE(__pyx_v_uv_height); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1507, __pyx_L1_error)
  __pyx_t_2 = ((__pyx_t_1 != 2) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "nodes_def.pyx":1508
 *         cdef int uv_height_i
 *         if len(uv_height) != 2:
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (             # <<<<<<<<<<<<<<
 *                             "uv_height", 2, len(uv_height)))
 *         for uv_height_i in range(2):
 */
    __pyx_t_3 = PyTuple_New(5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1508, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = 0;
    __pyx_t_4 = 127;
    __Pyx_INCREF(__pyx_kp_u_uv_height_parameter_is_expected);
    __pyx_t_1 += 41;
    __Pyx_GIVEREF(__pyx_kp_u_uv_height_parameter_is_expected);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_kp_u_uv_height_parameter_is_expected);

    /* "nodes_def.pyx":1509
 *         if len(uv_height) != 2:
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (
 *                             "uv_height", 2, len(uv_height)))             # <<<<<<<<<<<<<<
 *         for uv_height_i in range(2):
 *             uv_height_c[uv_height_i] = uv_height[uv_height_i]
 */
    __pyx_t_5 = __Pyx_PyUnicode_From_long(2, 0, ' ', 'd'); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1509, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_INCREF(__pyx_kp_u_but_got);
    __pyx_t_1 += 9;
    __Pyx_GIVEREF(__pyx_kp_u_but_got);
    PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_kp_u_but_got);
    __pyx_t_6 = PyTuple_GET_SIZE(__pyx_v_uv_height); if (unlikely(__pyx_t_6 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1509, __pyx_L1_error)
    __pyx_t_5 = __Pyx_PyUnicode_From_Py_ssize_t(__pyx_t_6, 0, ' ', 'd'); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1509, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_3, 3, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_INCREF(__pyx_kp_u_values);
    __pyx_t_1 += 7;
    __Pyx_GIVEREF(__pyx_kp_u_values);
    PyTuple_SET_ITEM(__pyx_t_3, 4, __pyx_kp_u_values);

    /* "nodes_def.pyx":1508
 *         cdef int uv_height_i
 *         if len(uv_height) != 2:
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (             # <<<<<<<<<<<<<<
 *                             "uv_height", 2, len(uv_height)))
 *         for uv_height_i in range(2):
 */
    __pyx_t_5 = __Pyx_PyUnicode_Join(__pyx_t_3, 5, __pyx_t_1, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1508, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1508, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 1508, __pyx_L1_error)

    /* "nodes_def.pyx":1507
 *         cdef float[2] uv_height_c
 *         cdef int uv_height_i
 *         if len(uv_height) != 2:             # <<<<<<<<<<<<<<
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (
 *                             "uv_height", 2, len(uv_height)))
 */
  }

  /* "nodes_def.pyx":1510
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (
 *                             "uv_height", 2, len(uv_height)))
 *         for uv_height_i in range(2):             # <<<<<<<<<<<<<<
 *             uv_height_c[uv_height_i] = uv_height[uv_height_i]
 * 
 */
  for (__pyx_t_7 = 0; __pyx_t_7 < 2; __pyx_t_7+=1) {
    __pyx_v_uv_height_i = __pyx_t_7;

    /* "nodes_def.pyx":1511
 *                             "uv_height", 2, len(uv_height)))
 *         for uv_height_i in range(2):
 *             uv_height_c[uv_height_i] = uv_height[uv_height_i]             # <<<<<<<<<<<<<<
 * 
 *         return ngl_node_param_set(self.ctx, "uv_height", uv_height_c)
 */
    __pyx_t_3 = __Pyx_GetItemInt_Tuple(__pyx_v_uv_height, __pyx_v_uv_height_i, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1511, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_8 = __pyx_PyFloat_AsFloat(__pyx_t_3); if (unlikely((__pyx_t_8 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1511, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    (__pyx_v_uv_height_c[__pyx_v_uv_height_i]) = __pyx_t_8;
  }

  /* "nodes_def.pyx":1513
 *             uv_height_c[uv_height_i] = uv_height[uv_height_i]
 * 
 *         return ngl_node_param_set(self.ctx, "uv_height", uv_height_c)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"uv_height"), __pyx_v_uv_height_c)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1513, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":1504
 *         return ngl_node_param_set(self.ctx, "uv_width", uv_width_c)
 * 
 *     def set_uv_height(self, *uv_height):             # <<<<<<<<<<<<<<
 *         cdef float[2] uv_height_c
 *         cdef int uv_height_i
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pynodegl.Quad.set_uv_height", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_4Quad_15__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pynodegl_4Quad_15__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_4Quad_14__reduce_cython__(((struct __pyx_obj_8pynodegl_Quad *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_4Quad_14__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_Quad *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__127, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.Quad.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_4Quad_17__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8pynodegl_4Quad_17__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_4Quad_16__setstate_cython__(((struct __pyx_obj_8pynodegl_Quad *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_4Quad_16__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_Quad *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__128, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.Quad.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":1518
 * cdef class Render(_Node):
 * 
 *     def __init__(self, _Node geometry, program=None, textures=None, uniforms=None, blocks=None, attributes=None, instance_attributes=None, nb_instances=None, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         assert geometry is not None
 * 
 */

/* Python wrapper */
static int __pyx_pw_8pynodegl_6Render_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pynodegl_6Render_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pynodegl__Node *__pyx_v_geometry = 0;
  PyObject *__pyx_v_program = 0;
  PyObject *__pyx_v_textures = 0;
  PyObject *__pyx_v_uniforms = 0;
  PyObject *__pyx_v_blocks = 0;
  PyObject *__pyx_v_attributes = 0;
  PyObject *__pyx_v_instance_attributes = 0;
  PyObject *__pyx_v_nb_instances = 0;
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  __pyx_v_kwargs = PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return -1;
  __Pyx_GOTREF(__pyx_v_kwargs);
  if (PyTuple_GET_SIZE(__pyx_args) > 8) {
    __pyx_v_args = PyTuple_GetSlice(__pyx_args, 8, PyTuple_GET_SIZE(__pyx_args));
    if (unlikely(!__pyx_v_args)) {
      __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
      __Pyx_RefNannyFinishContext();
      return -1;
    }
    __Pyx_GOTREF(__pyx_v_args);
  } else {
    __pyx_v_args = __pyx_empty_tuple; __Pyx_INCREF(__pyx_empty_tuple);
  }
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_geometry,&__pyx_n_s_program,&__pyx_n_s_textures,&__pyx_n_s_uniforms,&__pyx_n_s_blocks,&__pyx_n_s_attributes,&__pyx_n_s_instance_attributes,&__pyx_n_s_nb_instances,0};
    PyObject* values[8] = {0,0,0,0,0,0,0,0};
    values[1] = ((PyObject *)Py_None);
    values[2] = ((PyObject *)Py_None);
    values[3] = ((PyObject *)Py_None);
    values[4] = ((PyObject *)Py_None);
    values[5] = ((PyObject *)Py_None);
    values[6] = ((PyObject *)Py_None);
    values[7] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        default:
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_geometry)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_program);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_textures);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_uniforms);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_blocks);
          if (value) { values[4] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_attributes);
          if (value) { values[5] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_instance_attributes);
          if (value) { values[6] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_nb_instances);
          if (value) { values[7] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t used_pos_args = (pos_args < 8) ? pos_args : 8;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_kwargs, values, used_pos_args, "__init__") < 0)) __PYX_ERR(0, 1518, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        default:
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        case  0:
        goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_geometry = ((struct __pyx_obj_8pynodegl__Node *)values[0]);
    __pyx_v_program = values[1];
    __pyx_v_textures = values[2];
    __pyx_v_uniforms = values[3];
    __pyx_v_blocks = values[4];
    __pyx_v_attributes = values[5];
    __pyx_v_instance_attributes = values[6];
    __pyx_v_nb_instances = values[7];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 1, 8, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1518, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_args); __pyx_v_args = 0;
  __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
  __Pyx_AddTraceback("pynodegl.Render.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_geometry), __pyx_ptype_8pynodegl__Node, 1, "geometry", 0))) __PYX_ERR(0, 1518, __pyx_L1_error)
  __pyx_r = __pyx_pf_8pynodegl_6Render___init__(((struct __pyx_obj_8pynodegl_Render *)__pyx_v_self), __pyx_v_geometry, __pyx_v_program, __pyx_v_textures, __pyx_v_uniforms, __pyx_v_blocks, __pyx_v_attributes, __pyx_v_instance_attributes, __pyx_v_nb_instances, __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pynodegl_6Render___init__(struct __pyx_obj_8pynodegl_Render *__pyx_v_self, struct __pyx_obj_8pynodegl__Node *__pyx_v_geometry, PyObject *__pyx_v_program, PyObject *__pyx_v_textures, PyObject *__pyx_v_uniforms, PyObject *__pyx_v_blocks, PyObject *__pyx_v_attributes, PyObject *__pyx_v_instance_attributes, PyObject *__pyx_v_nb_instances, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "nodes_def.pyx":1519
 * 
 *     def __init__(self, _Node geometry, program=None, textures=None, uniforms=None, blocks=None, attributes=None, instance_attributes=None, nb_instances=None, *args, **kwargs):
 *         assert geometry is not None             # <<<<<<<<<<<<<<
 * 
 *         assert self.ctx is NULL
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = (((PyObject *)__pyx_v_geometry) != Py_None);
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 1519, __pyx_L1_error)
    }
  }
  #endif

  /* "nodes_def.pyx":1521
 *         assert geometry is not None
 * 
 *         assert self.ctx is NULL             # <<<<<<<<<<<<<<
 *         self.ctx = ngl_node_create(NGL_NODE_RENDER, geometry.ctx)
 *         if self.ctx is NULL:
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!((__pyx_v_self->__pyx_base.ctx == NULL) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 1521, __pyx_L1_error)
    }
  }
  #endif

  /* "nodes_def.pyx":1522
 * 
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_RENDER, geometry.ctx)             # <<<<<<<<<<<<<<
 *         if self.ctx is NULL:
 *             raise MemoryError()
 */
  __pyx_v_self->__pyx_base.ctx = ngl_node_create(NGL_NODE_RENDER, __pyx_v_geometry->ctx);

  /* "nodes_def.pyx":1523
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_RENDER, geometry.ctx)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         _Node._init_params(self, *args, **kwargs)
 */
  __pyx_t_1 = ((__pyx_v_self->__pyx_base.ctx == NULL) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "nodes_def.pyx":1524
 *         self.ctx = ngl_node_create(NGL_NODE_RENDER, geometry.ctx)
 *         if self.ctx is NULL:
 *             raise MemoryError()             # <<<<<<<<<<<<<<
 *         _Node._init_params(self, *args, **kwargs)
 * 
 */
    PyErr_NoMemory(); __PYX_ERR(0, 1524, __pyx_L1_error)

    /* "nodes_def.pyx":1523
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_RENDER, geometry.ctx)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         _Node._init_params(self, *args, **kwargs)
 */
  }

  /* "nodes_def.pyx":1525
 *         if self.ctx is NULL:
 *             raise MemoryError()
 *         _Node._init_params(self, *args, **kwargs)             # <<<<<<<<<<<<<<
 * 
 *         if program is not None:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_8pynodegl__Node), __pyx_n_s_init_params); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1525, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1525, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_v_self));
  __pyx_t_4 = PyNumber_Add(__pyx_t_3, __pyx_v_args); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1525, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, __pyx_v_kwargs); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1525, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "nodes_def.pyx":1527
 *         _Node._init_params(self, *args, **kwargs)
 * 
 *         if program is not None:             # <<<<<<<<<<<<<<
 *             self.set_program(program)
 *         if textures is not None:
 */
  __pyx_t_1 = (__pyx_v_program != Py_None);
  __pyx_t_5 = (__pyx_t_1 != 0);
  if (__pyx_t_5) {

    /* "nodes_def.pyx":1528
 * 
 *         if program is not None:
 *             self.set_program(program)             # <<<<<<<<<<<<<<
 *         if textures is not None:
 *             self.update_textures(textures)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_program); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1528, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_2, __pyx_v_program) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_program);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1528, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "nodes_def.pyx":1527
 *         _Node._init_params(self, *args, **kwargs)
 * 
 *         if program is not None:             # <<<<<<<<<<<<<<
 *             self.set_program(program)
 *         if textures is not None:
 */
  }

  /* "nodes_def.pyx":1529
 *         if program is not None:
 *             self.set_program(program)
 *         if textures is not None:             # <<<<<<<<<<<<<<
 *             self.update_textures(textures)
 *         if uniforms is not None:
 */
  __pyx_t_5 = (__pyx_v_textures != Py_None);
  __pyx_t_1 = (__pyx_t_5 != 0);
  if (__pyx_t_1) {

    /* "nodes_def.pyx":1530
 *             self.set_program(program)
 *         if textures is not None:
 *             self.update_textures(textures)             # <<<<<<<<<<<<<<
 *         if uniforms is not None:
 *             self.update_uniforms(uniforms)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_update_textures); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1530, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_2, __pyx_v_textures) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_textures);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1530, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "nodes_def.pyx":1529
 *         if program is not None:
 *             self.set_program(program)
 *         if textures is not None:             # <<<<<<<<<<<<<<
 *             self.update_textures(textures)
 *         if uniforms is not None:
 */
  }

  /* "nodes_def.pyx":1531
 *         if textures is not None:
 *             self.update_textures(textures)
 *         if uniforms is not None:             # <<<<<<<<<<<<<<
 *             self.update_uniforms(uniforms)
 *         if blocks is not None:
 */
  __pyx_t_1 = (__pyx_v_uniforms != Py_None);
  __pyx_t_5 = (__pyx_t_1 != 0);
  if (__pyx_t_5) {

    /* "nodes_def.pyx":1532
 *             self.update_textures(textures)
 *         if uniforms is not None:
 *             self.update_uniforms(uniforms)             # <<<<<<<<<<<<<<
 *         if blocks is not None:
 *             self.update_blocks(blocks)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_update_uniforms); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1532, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_2, __pyx_v_uniforms) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_uniforms);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1532, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "nodes_def.pyx":1531
 *         if textures is not None:
 *             self.update_textures(textures)
 *         if uniforms is not None:             # <<<<<<<<<<<<<<
 *             self.update_uniforms(uniforms)
 *         if blocks is not None:
 */
  }

  /* "nodes_def.pyx":1533
 *         if uniforms is not None:
 *             self.update_uniforms(uniforms)
 *         if blocks is not None:             # <<<<<<<<<<<<<<
 *             self.update_blocks(blocks)
 *         if attributes is not None:
 */
  __pyx_t_5 = (__pyx_v_blocks != Py_None);
  __pyx_t_1 = (__pyx_t_5 != 0);
  if (__pyx_t_1) {

    /* "nodes_def.pyx":1534
 *             self.update_uniforms(uniforms)
 *         if blocks is not None:
 *             self.update_blocks(blocks)             # <<<<<<<<<<<<<<
 *         if attributes is not None:
 *             self.update_attributes(attributes)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_update_blocks); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1534, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_2, __pyx_v_blocks) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_blocks);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1534, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "nodes_def.pyx":1533
 *         if uniforms is not None:
 *             self.update_uniforms(uniforms)
 *         if blocks is not None:             # <<<<<<<<<<<<<<
 *             self.update_blocks(blocks)
 *         if attributes is not None:
 */
  }

  /* "nodes_def.pyx":1535
 *         if blocks is not None:
 *             self.update_blocks(blocks)
 *         if attributes is not None:             # <<<<<<<<<<<<<<
 *             self.update_attributes(attributes)
 *         if instance_attributes is not None:
 */
  __pyx_t_1 = (__pyx_v_attributes != Py_None);
  __pyx_t_5 = (__pyx_t_1 != 0);
  if (__pyx_t_5) {

    /* "nodes_def.pyx":1536
 *             self.update_blocks(blocks)
 *         if attributes is not None:
 *             self.update_attributes(attributes)             # <<<<<<<<<<<<<<
 *         if instance_attributes is not None:
 *             self.update_instance_attributes(instance_attributes)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_update_attributes); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1536, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_2, __pyx_v_attributes) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_attributes);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1536, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "nodes_def.pyx":1535
 *         if blocks is not None:
 *             self.update_blocks(blocks)
 *         if attributes is not None:             # <<<<<<<<<<<<<<
 *             self.update_attributes(attributes)
 *         if instance_attributes is not None:
 */
  }

  /* "nodes_def.pyx":1537
 *         if attributes is not None:
 *             self.update_attributes(attributes)
 *         if instance_attributes is not None:             # <<<<<<<<<<<<<<
 *             self.update_instance_attributes(instance_attributes)
 *         if nb_instances is not None:
 */
  __pyx_t_5 = (__pyx_v_instance_attributes != Py_None);
  __pyx_t_1 = (__pyx_t_5 != 0);
  if (__pyx_t_1) {

    /* "nodes_def.pyx":1538
 *             self.update_attributes(attributes)
 *         if instance_attributes is not None:
 *             self.update_instance_attributes(instance_attributes)             # <<<<<<<<<<<<<<
 *         if nb_instances is not None:
 *             self.set_nb_instances(nb_instances)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_update_instance_attributes); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1538, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_2, __pyx_v_instance_attributes) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_instance_attributes);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1538, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "nodes_def.pyx":1537
 *         if attributes is not None:
 *             self.update_attributes(attributes)
 *         if instance_attributes is not None:             # <<<<<<<<<<<<<<
 *             self.update_instance_attributes(instance_attributes)
 *         if nb_instances is not None:
 */
  }

  /* "nodes_def.pyx":1539
 *         if instance_attributes is not None:
 *             self.update_instance_attributes(instance_attributes)
 *         if nb_instances is not None:             # <<<<<<<<<<<<<<
 *             self.set_nb_instances(nb_instances)
 * 
 */
  __pyx_t_1 = (__pyx_v_nb_instances != Py_None);
  __pyx_t_5 = (__pyx_t_1 != 0);
  if (__pyx_t_5) {

    /* "nodes_def.pyx":1540
 *             self.update_instance_attributes(instance_attributes)
 *         if nb_instances is not None:
 *             self.set_nb_instances(nb_instances)             # <<<<<<<<<<<<<<
 * 
 *     def set_program(self, _Node program):
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_nb_instances); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1540, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_2, __pyx_v_nb_instances) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_nb_instances);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1540, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "nodes_def.pyx":1539
 *         if instance_attributes is not None:
 *             self.update_instance_attributes(instance_attributes)
 *         if nb_instances is not None:             # <<<<<<<<<<<<<<
 *             self.set_nb_instances(nb_instances)
 * 
 */
  }

  /* "nodes_def.pyx":1518
 * cdef class Render(_Node):
 * 
 *     def __init__(self, _Node geometry, program=None, textures=None, uniforms=None, blocks=None, attributes=None, instance_attributes=None, nb_instances=None, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         assert geometry is not None
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pynodegl.Render.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":1542
 *             self.set_nb_instances(nb_instances)
 * 
 *     def set_program(self, _Node program):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "program", program.ctx)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_6Render_3set_program(PyObject *__pyx_v_self, PyObject *__pyx_v_program); /*proto*/
static PyObject *__pyx_pw_8pynodegl_6Render_3set_program(PyObject *__pyx_v_self, PyObject *__pyx_v_program) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_program (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_program), __pyx_ptype_8pynodegl__Node, 1, "program", 0))) __PYX_ERR(0, 1542, __pyx_L1_error)
  __pyx_r = __pyx_pf_8pynodegl_6Render_2set_program(((struct __pyx_obj_8pynodegl_Render *)__pyx_v_self), ((struct __pyx_obj_8pynodegl__Node *)__pyx_v_program));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_6Render_2set_program(struct __pyx_obj_8pynodegl_Render *__pyx_v_self, struct __pyx_obj_8pynodegl__Node *__pyx_v_program) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("set_program", 0);

  /* "nodes_def.pyx":1543
 * 
 *     def set_program(self, _Node program):
 *         return ngl_node_param_set(self.ctx, "program", program.ctx)             # <<<<<<<<<<<<<<
 * 
 *     def update_textures(self, arg=None, **kwargs):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"program"), __pyx_v_program->ctx)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1543, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":1542
 *             self.set_nb_instances(nb_instances)
 * 
 *     def set_program(self, _Node program):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "program", program.ctx)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.Render.set_program", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":1545
 *         return ngl_node_param_set(self.ctx, "program", program.ctx)
 * 
 *     def update_textures(self, arg=None, **kwargs):             # <<<<<<<<<<<<<<
 *         return self._update_dict("textures", arg, **kwargs)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_6Render_5update_textures(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_8pynodegl_6Render_5update_textures(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_arg = 0;
  PyObject *__pyx_v_kwargs = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("update_textures (wrapper)", 0);
  __pyx_v_kwargs = PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return NULL;
  __Pyx_GOTREF(__pyx_v_kwargs);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_arg,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_arg);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_kwargs, values, pos_args, "update_textures") < 0)) __PYX_ERR(0, 1545, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_arg = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("update_textures", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1545, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
  __Pyx_AddTraceback("pynodegl.Render.update_textures", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pynodegl_6Render_4update_textures(((struct __pyx_obj_8pynodegl_Render *)__pyx_v_self), __pyx_v_arg, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_6Render_4update_textures(struct __pyx_obj_8pynodegl_Render *__pyx_v_self, PyObject *__pyx_v_arg, PyObject *__pyx_v_kwargs) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("update_textures", 0);

  /* "nodes_def.pyx":1546
 * 
 *     def update_textures(self, arg=None, **kwargs):
 *         return self._update_dict("textures", arg, **kwargs)             # <<<<<<<<<<<<<<
 * 
 *     def update_uniforms(self, arg=None, **kwargs):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_update_dict); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1546, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1546, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_u_textures);
  __Pyx_GIVEREF(__pyx_n_u_textures);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_n_u_textures);
  __Pyx_INCREF(__pyx_v_arg);
  __Pyx_GIVEREF(__pyx_v_arg);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_arg);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, __pyx_v_kwargs); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1546, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":1545
 *         return ngl_node_param_set(self.ctx, "program", program.ctx)
 * 
 *     def update_textures(self, arg=None, **kwargs):             # <<<<<<<<<<<<<<
 *         return self._update_dict("textures", arg, **kwargs)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pynodegl.Render.update_textures", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":1548
 *         return self._update_dict("textures", arg, **kwargs)
 * 
 *     def update_uniforms(self, arg=None, **kwargs):             # <<<<<<<<<<<<<<
 *         return self._update_dict("uniforms", arg, **kwargs)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_6Render_7update_uniforms(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_8pynodegl_6Render_7update_uniforms(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_arg = 0;
  PyObject *__pyx_v_kwargs = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("update_uniforms (wrapper)", 0);
  __pyx_v_kwargs = PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return NULL;
  __Pyx_GOTREF(__pyx_v_kwargs);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_arg,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_arg);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_kwargs, values, pos_args, "update_uniforms") < 0)) __PYX_ERR(0, 1548, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_arg = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("update_uniforms", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1548, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
  __Pyx_AddTraceback("pynodegl.Render.update_uniforms", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pynodegl_6Render_6update_uniforms(((struct __pyx_obj_8pynodegl_Render *)__pyx_v_self), __pyx_v_arg, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_6Render_6update_uniforms(struct __pyx_obj_8pynodegl_Render *__pyx_v_self, PyObject *__pyx_v_arg, PyObject *__pyx_v_kwargs) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("update_uniforms", 0);

  /* "nodes_def.pyx":1549
 * 
 *     def update_uniforms(self, arg=None, **kwargs):
 *         return self._update_dict("uniforms", arg, **kwargs)             # <<<<<<<<<<<<<<
 * 
 *     def update_blocks(self, arg=None, **kwargs):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_update_dict); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1549, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1549, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_u_uniforms);
  __Pyx_GIVEREF(__pyx_n_u_uniforms);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_n_u_uniforms);
  __Pyx_INCREF(__pyx_v_arg);
  __Pyx_GIVEREF(__pyx_v_arg);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_arg);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, __pyx_v_kwargs); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1549, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":1548
 *         return self._update_dict("textures", arg, **kwargs)
 * 
 *     def update_uniforms(self, arg=None, **kwargs):             # <<<<<<<<<<<<<<
 *         return self._update_dict("uniforms", arg, **kwargs)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pynodegl.Render.update_uniforms", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":1551
 *         return self._update_dict("uniforms", arg, **kwargs)
 * 
 *     def update_blocks(self, arg=None, **kwargs):             # <<<<<<<<<<<<<<
 *         return self._update_dict("blocks", arg, **kwargs)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_6Render_9update_blocks(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_8pynodegl_6Render_9update_blocks(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_arg = 0;
  PyObject *__pyx_v_kwargs = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("update_blocks (wrapper)", 0);
  __pyx_v_kwargs = PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return NULL;
  __Pyx_GOTREF(__pyx_v_kwargs);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_arg,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_arg);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_kwargs, values, pos_args, "update_blocks") < 0)) __PYX_ERR(0, 1551, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_arg = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("update_blocks", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1551, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
  __Pyx_AddTraceback("pynodegl.Render.update_blocks", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pynodegl_6Render_8update_blocks(((struct __pyx_obj_8pynodegl_Render *)__pyx_v_self), __pyx_v_arg, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_6Render_8update_blocks(struct __pyx_obj_8pynodegl_Render *__pyx_v_self, PyObject *__pyx_v_arg, PyObject *__pyx_v_kwargs) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("update_blocks", 0);

  /* "nodes_def.pyx":1552
 * 
 *     def update_blocks(self, arg=None, **kwargs):
 *         return self._update_dict("blocks", arg, **kwargs)             # <<<<<<<<<<<<<<
 * 
 *     def update_attributes(self, arg=None, **kwargs):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_update_dict); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1552, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1552, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_u_blocks);
  __Pyx_GIVEREF(__pyx_n_u_blocks);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_n_u_blocks);
  __Pyx_INCREF(__pyx_v_arg);
  __Pyx_GIVEREF(__pyx_v_arg);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_arg);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, __pyx_v_kwargs); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1552, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":1551
 *         return self._update_dict("uniforms", arg, **kwargs)
 * 
 *     def update_blocks(self, arg=None, **kwargs):             # <<<<<<<<<<<<<<
 *         return self._update_dict("blocks", arg, **kwargs)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pynodegl.Render.update_blocks", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":1554
 *         return self._update_dict("blocks", arg, **kwargs)
 * 
 *     def update_attributes(self, arg=None, **kwargs):             # <<<<<<<<<<<<<<
 *         return self._update_dict("attributes", arg, **kwargs)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_6Render_11update_attributes(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_8pynodegl_6Render_11update_attributes(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_arg = 0;
  PyObject *__pyx_v_kwargs = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("update_attributes (wrapper)", 0);
  __pyx_v_kwargs = PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return NULL;
  __Pyx_GOTREF(__pyx_v_kwargs);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_arg,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_arg);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_kwargs, values, pos_args, "update_attributes") < 0)) __PYX_ERR(0, 1554, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_arg = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("update_attributes", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1554, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
  __Pyx_AddTraceback("pynodegl.Render.update_attributes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pynodegl_6Render_10update_attributes(((struct __pyx_obj_8pynodegl_Render *)__pyx_v_self), __pyx_v_arg, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_6Render_10update_attributes(struct __pyx_obj_8pynodegl_Render *__pyx_v_self, PyObject *__pyx_v_arg, PyObject *__pyx_v_kwargs) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("update_attributes", 0);

  /* "nodes_def.pyx":1555
 * 
 *     def update_attributes(self, arg=None, **kwargs):
 *         return self._update_dict("attributes", arg, **kwargs)             # <<<<<<<<<<<<<<
 * 
 *     def update_instance_attributes(self, arg=None, **kwargs):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_update_dict); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1555, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1555, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_u_attributes);
  __Pyx_GIVEREF(__pyx_n_u_attributes);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_n_u_attributes);
  __Pyx_INCREF(__pyx_v_arg);
  __Pyx_GIVEREF(__pyx_v_arg);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_arg);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, __pyx_v_kwargs); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1555, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":1554
 *         return self._update_dict("blocks", arg, **kwargs)
 * 
 *     def update_attributes(self, arg=None, **kwargs):             # <<<<<<<<<<<<<<
 *         return self._update_dict("attributes", arg, **kwargs)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pynodegl.Render.update_attributes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":1557
 *         return self._update_dict("attributes", arg, **kwargs)
 * 
 *     def update_instance_attributes(self, arg=None, **kwargs):             # <<<<<<<<<<<<<<
 *         return self._update_dict("instance_attributes", arg, **kwargs)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_6Render_13update_instance_attributes(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_8pynodegl_6Render_13update_instance_attributes(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_arg = 0;
  PyObject *__pyx_v_kwargs = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("update_instance_attributes (wrapper)", 0);
  __pyx_v_kwargs = PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return NULL;
  __Pyx_GOTREF(__pyx_v_kwargs);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_arg,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_arg);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_kwargs, values, pos_args, "update_instance_attributes") < 0)) __PYX_ERR(0, 1557, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_arg = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("update_instance_attributes", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1557, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
  __Pyx_AddTraceback("pynodegl.Render.update_instance_attributes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pynodegl_6Render_12update_instance_attributes(((struct __pyx_obj_8pynodegl_Render *)__pyx_v_self), __pyx_v_arg, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_6Render_12update_instance_attributes(struct __pyx_obj_8pynodegl_Render *__pyx_v_self, PyObject *__pyx_v_arg, PyObject *__pyx_v_kwargs) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("update_instance_attributes", 0);

  /* "nodes_def.pyx":1558
 * 
 *     def update_instance_attributes(self, arg=None, **kwargs):
 *         return self._update_dict("instance_attributes", arg, **kwargs)             # <<<<<<<<<<<<<<
 * 
 *     def set_nb_instances(self, int nb_instances):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_update_dict); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1558, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1558, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_u_instance_attributes);
  __Pyx_GIVEREF(__pyx_n_u_instance_attributes);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_n_u_instance_attributes);
  __Pyx_INCREF(__pyx_v_arg);
  __Pyx_GIVEREF(__pyx_v_arg);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_arg);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, __pyx_v_kwargs); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1558, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":1557
 *         return self._update_dict("attributes", arg, **kwargs)
 * 
 *     def update_instance_attributes(self, arg=None, **kwargs):             # <<<<<<<<<<<<<<
 *         return self._update_dict("instance_attributes", arg, **kwargs)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pynodegl.Render.update_instance_attributes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":1560
 *         return self._update_dict("instance_attributes", arg, **kwargs)
 * 
 *     def set_nb_instances(self, int nb_instances):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "nb_instances", nb_instances)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_6Render_15set_nb_instances(PyObject *__pyx_v_self, PyObject *__pyx_arg_nb_instances); /*proto*/
static PyObject *__pyx_pw_8pynodegl_6Render_15set_nb_instances(PyObject *__pyx_v_self, PyObject *__pyx_arg_nb_instances) {
  int __pyx_v_nb_instances;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_nb_instances (wrapper)", 0);
  assert(__pyx_arg_nb_instances); {
    __pyx_v_nb_instances = __Pyx_PyInt_As_int(__pyx_arg_nb_instances); if (unlikely((__pyx_v_nb_instances == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1560, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pynodegl.Render.set_nb_instances", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pynodegl_6Render_14set_nb_instances(((struct __pyx_obj_8pynodegl_Render *)__pyx_v_self), ((int)__pyx_v_nb_instances));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_6Render_14set_nb_instances(struct __pyx_obj_8pynodegl_Render *__pyx_v_self, int __pyx_v_nb_instances) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("set_nb_instances", 0);

  /* "nodes_def.pyx":1561
 * 
 *     def set_nb_instances(self, int nb_instances):
 *         return ngl_node_param_set(self.ctx, "nb_instances", nb_instances)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"nb_instances"), __pyx_v_nb_instances)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1561, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":1560
 *         return self._update_dict("instance_attributes", arg, **kwargs)
 * 
 *     def set_nb_instances(self, int nb_instances):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "nb_instances", nb_instances)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.Render.set_nb_instances", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_6Render_17__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pynodegl_6Render_17__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_6Render_16__reduce_cython__(((struct __pyx_obj_8pynodegl_Render *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_6Render_16__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_Render *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__129, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.Render.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_6Render_19__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8pynodegl_6Render_19__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_6Render_18__setstate_cython__(((struct __pyx_obj_8pynodegl_Render *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_6Render_18__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_Render *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__130, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.Render.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":1566
 * cdef class RenderToTexture(_Node):
 * 
 *     def __init__(self, _Node child, color_textures=None, depth_texture=None, samples=None, clear_color=None, features=None, vflip=None, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         assert child is not None
 * 
 */

/* Python wrapper */
static int __pyx_pw_8pynodegl_15RenderToTexture_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pynodegl_15RenderToTexture_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pynodegl__Node *__pyx_v_child = 0;
  PyObject *__pyx_v_color_textures = 0;
  PyObject *__pyx_v_depth_texture = 0;
  PyObject *__pyx_v_samples = 0;
  PyObject *__pyx_v_clear_color = 0;
  PyObject *__pyx_v_features = 0;
  PyObject *__pyx_v_vflip = 0;
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  __pyx_v_kwargs = PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return -1;
  __Pyx_GOTREF(__pyx_v_kwargs);
  if (PyTuple_GET_SIZE(__pyx_args) > 7) {
    __pyx_v_args = PyTuple_GetSlice(__pyx_args, 7, PyTuple_GET_SIZE(__pyx_args));
    if (unlikely(!__pyx_v_args)) {
      __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
      __Pyx_RefNannyFinishContext();
      return -1;
    }
    __Pyx_GOTREF(__pyx_v_args);
  } else {
    __pyx_v_args = __pyx_empty_tuple; __Pyx_INCREF(__pyx_empty_tuple);
  }
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_child,&__pyx_n_s_color_textures,&__pyx_n_s_depth_texture,&__pyx_n_s_samples,&__pyx_n_s_clear_color,&__pyx_n_s_features,&__pyx_n_s_vflip,0};
    PyObject* values[7] = {0,0,0,0,0,0,0};
    values[1] = ((PyObject *)Py_None);
    values[2] = ((PyObject *)Py_None);
    values[3] = ((PyObject *)Py_None);
    values[4] = ((PyObject *)Py_None);
    values[5] = ((PyObject *)Py_None);
    values[6] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        default:
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_child)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_color_textures);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_depth_texture);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_samples);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_clear_color);
          if (value) { values[4] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_features);
          if (value) { values[5] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_vflip);
          if (value) { values[6] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t used_pos_args = (pos_args < 7) ? pos_args : 7;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_kwargs, values, used_pos_args, "__init__") < 0)) __PYX_ERR(0, 1566, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        default:
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        case  0:
        goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_child = ((struct __pyx_obj_8pynodegl__Node *)values[0]);
    __pyx_v_color_textures = values[1];
    __pyx_v_depth_texture = values[2];
    __pyx_v_samples = values[3];
    __pyx_v_clear_color = values[4];
    __pyx_v_features = values[5];
    __pyx_v_vflip = values[6];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 1, 7, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1566, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_args); __pyx_v_args = 0;
  __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
  __Pyx_AddTraceback("pynodegl.RenderToTexture.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_child), __pyx_ptype_8pynodegl__Node, 1, "child", 0))) __PYX_ERR(0, 1566, __pyx_L1_error)
  __pyx_r = __pyx_pf_8pynodegl_15RenderToTexture___init__(((struct __pyx_obj_8pynodegl_RenderToTexture *)__pyx_v_self), __pyx_v_child, __pyx_v_color_textures, __pyx_v_depth_texture, __pyx_v_samples, __pyx_v_clear_color, __pyx_v_features, __pyx_v_vflip, __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pynodegl_15RenderToTexture___init__(struct __pyx_obj_8pynodegl_RenderToTexture *__pyx_v_self, struct __pyx_obj_8pynodegl__Node *__pyx_v_child, PyObject *__pyx_v_color_textures, PyObject *__pyx_v_depth_texture, PyObject *__pyx_v_samples, PyObject *__pyx_v_clear_color, PyObject *__pyx_v_features, PyObject *__pyx_v_vflip, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "nodes_def.pyx":1567
 * 
 *     def __init__(self, _Node child, color_textures=None, depth_texture=None, samples=None, clear_color=None, features=None, vflip=None, *args, **kwargs):
 *         assert child is not None             # <<<<<<<<<<<<<<
 * 
 *         assert self.ctx is NULL
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = (((PyObject *)__pyx_v_child) != Py_None);
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 1567, __pyx_L1_error)
    }
  }
  #endif

  /* "nodes_def.pyx":1569
 *         assert child is not None
 * 
 *         assert self.ctx is NULL             # <<<<<<<<<<<<<<
 *         self.ctx = ngl_node_create(NGL_NODE_RENDERTOTEXTURE, child.ctx)
 *         if self.ctx is NULL:
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!((__pyx_v_self->__pyx_base.ctx == NULL) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 1569, __pyx_L1_error)
    }
  }
  #endif

  /* "nodes_def.pyx":1570
 * 
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_RENDERTOTEXTURE, child.ctx)             # <<<<<<<<<<<<<<
 *         if self.ctx is NULL:
 *             raise MemoryError()
 */
  __pyx_v_self->__pyx_base.ctx = ngl_node_create(NGL_NODE_RENDERTOTEXTURE, __pyx_v_child->ctx);

  /* "nodes_def.pyx":1571
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_RENDERTOTEXTURE, child.ctx)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         _Node._init_params(self, *args, **kwargs)
 */
  __pyx_t_1 = ((__pyx_v_self->__pyx_base.ctx == NULL) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "nodes_def.pyx":1572
 *         self.ctx = ngl_node_create(NGL_NODE_RENDERTOTEXTURE, child.ctx)
 *         if self.ctx is NULL:
 *             raise MemoryError()             # <<<<<<<<<<<<<<
 *         _Node._init_params(self, *args, **kwargs)
 * 
 */
    PyErr_NoMemory(); __PYX_ERR(0, 1572, __pyx_L1_error)

    /* "nodes_def.pyx":1571
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_RENDERTOTEXTURE, child.ctx)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         _Node._init_params(self, *args, **kwargs)
 */
  }

  /* "nodes_def.pyx":1573
 *         if self.ctx is NULL:
 *             raise MemoryError()
 *         _Node._init_params(self, *args, **kwargs)             # <<<<<<<<<<<<<<
 * 
 *         if color_textures is not None:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_8pynodegl__Node), __pyx_n_s_init_params); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1573, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1573, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_v_self));
  __pyx_t_4 = PyNumber_Add(__pyx_t_3, __pyx_v_args); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1573, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, __pyx_v_kwargs); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1573, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "nodes_def.pyx":1575
 *         _Node._init_params(self, *args, **kwargs)
 * 
 *         if color_textures is not None:             # <<<<<<<<<<<<<<
 *             self.add_color_textures(*color_textures)
 *         if depth_texture is not None:
 */
  __pyx_t_1 = (__pyx_v_color_textures != Py_None);
  __pyx_t_5 = (__pyx_t_1 != 0);
  if (__pyx_t_5) {

    /* "nodes_def.pyx":1576
 * 
 *         if color_textures is not None:
 *             self.add_color_textures(*color_textures)             # <<<<<<<<<<<<<<
 *         if depth_texture is not None:
 *             self.set_depth_texture(depth_texture)
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_add_color_textures); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1576, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PySequence_Tuple(__pyx_v_color_textures); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1576, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1576, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "nodes_def.pyx":1575
 *         _Node._init_params(self, *args, **kwargs)
 * 
 *         if color_textures is not None:             # <<<<<<<<<<<<<<
 *             self.add_color_textures(*color_textures)
 *         if depth_texture is not None:
 */
  }

  /* "nodes_def.pyx":1577
 *         if color_textures is not None:
 *             self.add_color_textures(*color_textures)
 *         if depth_texture is not None:             # <<<<<<<<<<<<<<
 *             self.set_depth_texture(depth_texture)
 *         if samples is not None:
 */
  __pyx_t_5 = (__pyx_v_depth_texture != Py_None);
  __pyx_t_1 = (__pyx_t_5 != 0);
  if (__pyx_t_1) {

    /* "nodes_def.pyx":1578
 *             self.add_color_textures(*color_textures)
 *         if depth_texture is not None:
 *             self.set_depth_texture(depth_texture)             # <<<<<<<<<<<<<<
 *         if samples is not None:
 *             self.set_samples(samples)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_depth_texture); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1578, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_2 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_3, __pyx_v_depth_texture) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_depth_texture);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1578, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "nodes_def.pyx":1577
 *         if color_textures is not None:
 *             self.add_color_textures(*color_textures)
 *         if depth_texture is not None:             # <<<<<<<<<<<<<<
 *             self.set_depth_texture(depth_texture)
 *         if samples is not None:
 */
  }

  /* "nodes_def.pyx":1579
 *         if depth_texture is not None:
 *             self.set_depth_texture(depth_texture)
 *         if samples is not None:             # <<<<<<<<<<<<<<
 *             self.set_samples(samples)
 *         if clear_color is not None:
 */
  __pyx_t_1 = (__pyx_v_samples != Py_None);
  __pyx_t_5 = (__pyx_t_1 != 0);
  if (__pyx_t_5) {

    /* "nodes_def.pyx":1580
 *             self.set_depth_texture(depth_texture)
 *         if samples is not None:
 *             self.set_samples(samples)             # <<<<<<<<<<<<<<
 *         if clear_color is not None:
 *             self.set_clear_color(*clear_color)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_samples); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1580, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_2 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_3, __pyx_v_samples) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_samples);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1580, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "nodes_def.pyx":1579
 *         if depth_texture is not None:
 *             self.set_depth_texture(depth_texture)
 *         if samples is not None:             # <<<<<<<<<<<<<<
 *             self.set_samples(samples)
 *         if clear_color is not None:
 */
  }

  /* "nodes_def.pyx":1581
 *         if samples is not None:
 *             self.set_samples(samples)
 *         if clear_color is not None:             # <<<<<<<<<<<<<<
 *             self.set_clear_color(*clear_color)
 *         if features is not None:
 */
  __pyx_t_5 = (__pyx_v_clear_color != Py_None);
  __pyx_t_1 = (__pyx_t_5 != 0);
  if (__pyx_t_1) {

    /* "nodes_def.pyx":1582
 *             self.set_samples(samples)
 *         if clear_color is not None:
 *             self.set_clear_color(*clear_color)             # <<<<<<<<<<<<<<
 *         if features is not None:
 *             self.set_features(features)
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_clear_color); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1582, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PySequence_Tuple(__pyx_v_clear_color); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1582, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1582, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "nodes_def.pyx":1581
 *         if samples is not None:
 *             self.set_samples(samples)
 *         if clear_color is not None:             # <<<<<<<<<<<<<<
 *             self.set_clear_color(*clear_color)
 *         if features is not None:
 */
  }

  /* "nodes_def.pyx":1583
 *         if clear_color is not None:
 *             self.set_clear_color(*clear_color)
 *         if features is not None:             # <<<<<<<<<<<<<<
 *             self.set_features(features)
 *         if vflip is not None:
 */
  __pyx_t_1 = (__pyx_v_features != Py_None);
  __pyx_t_5 = (__pyx_t_1 != 0);
  if (__pyx_t_5) {

    /* "nodes_def.pyx":1584
 *             self.set_clear_color(*clear_color)
 *         if features is not None:
 *             self.set_features(features)             # <<<<<<<<<<<<<<
 *         if vflip is not None:
 *             self.set_vflip(vflip)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_features); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1584, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_2, __pyx_v_features) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_features);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1584, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "nodes_def.pyx":1583
 *         if clear_color is not None:
 *             self.set_clear_color(*clear_color)
 *         if features is not None:             # <<<<<<<<<<<<<<
 *             self.set_features(features)
 *         if vflip is not None:
 */
  }

  /* "nodes_def.pyx":1585
 *         if features is not None:
 *             self.set_features(features)
 *         if vflip is not None:             # <<<<<<<<<<<<<<
 *             self.set_vflip(vflip)
 * 
 */
  __pyx_t_5 = (__pyx_v_vflip != Py_None);
  __pyx_t_1 = (__pyx_t_5 != 0);
  if (__pyx_t_1) {

    /* "nodes_def.pyx":1586
 *             self.set_features(features)
 *         if vflip is not None:
 *             self.set_vflip(vflip)             # <<<<<<<<<<<<<<
 * 
 *     def add_color_textures(self, *color_textures):
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_vflip); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1586, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_2, __pyx_v_vflip) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_vflip);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1586, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "nodes_def.pyx":1585
 *         if features is not None:
 *             self.set_features(features)
 *         if vflip is not None:             # <<<<<<<<<<<<<<
 *             self.set_vflip(vflip)
 * 
 */
  }

  /* "nodes_def.pyx":1566
 * cdef class RenderToTexture(_Node):
 * 
 *     def __init__(self, _Node child, color_textures=None, depth_texture=None, samples=None, clear_color=None, features=None, vflip=None, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         assert child is not None
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pynodegl.RenderToTexture.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":1588
 *             self.set_vflip(vflip)
 * 
 *     def add_color_textures(self, *color_textures):             # <<<<<<<<<<<<<<
 *         return self._add_nodelist("color_textures", *color_textures)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_15RenderToTexture_3add_color_textures(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_8pynodegl_15RenderToTexture_3add_color_textures(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_color_textures = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_color_textures (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "add_color_textures", 0))) return NULL;
  __Pyx_INCREF(__pyx_args);
  __pyx_v_color_textures = __pyx_args;
  __pyx_r = __pyx_pf_8pynodegl_15RenderToTexture_2add_color_textures(((struct __pyx_obj_8pynodegl_RenderToTexture *)__pyx_v_self), __pyx_v_color_textures);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_color_textures);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_15RenderToTexture_2add_color_textures(struct __pyx_obj_8pynodegl_RenderToTexture *__pyx_v_self, PyObject *__pyx_v_color_textures) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("add_color_textures", 0);

  /* "nodes_def.pyx":1589
 * 
 *     def add_color_textures(self, *color_textures):
 *         return self._add_nodelist("color_textures", *color_textures)             # <<<<<<<<<<<<<<
 * 
 *     def set_depth_texture(self, _Node depth_texture):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_add_nodelist); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1589, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyNumber_Add(__pyx_tuple__131, __pyx_v_color_textures); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1589, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1589, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":1588
 *             self.set_vflip(vflip)
 * 
 *     def add_color_textures(self, *color_textures):             # <<<<<<<<<<<<<<
 *         return self._add_nodelist("color_textures", *color_textures)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pynodegl.RenderToTexture.add_color_textures", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":1591
 *         return self._add_nodelist("color_textures", *color_textures)
 * 
 *     def set_depth_texture(self, _Node depth_texture):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "depth_texture", depth_texture.ctx)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_15RenderToTexture_5set_depth_texture(PyObject *__pyx_v_self, PyObject *__pyx_v_depth_texture); /*proto*/
static PyObject *__pyx_pw_8pynodegl_15RenderToTexture_5set_depth_texture(PyObject *__pyx_v_self, PyObject *__pyx_v_depth_texture) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_depth_texture (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_depth_texture), __pyx_ptype_8pynodegl__Node, 1, "depth_texture", 0))) __PYX_ERR(0, 1591, __pyx_L1_error)
  __pyx_r = __pyx_pf_8pynodegl_15RenderToTexture_4set_depth_texture(((struct __pyx_obj_8pynodegl_RenderToTexture *)__pyx_v_self), ((struct __pyx_obj_8pynodegl__Node *)__pyx_v_depth_texture));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_15RenderToTexture_4set_depth_texture(struct __pyx_obj_8pynodegl_RenderToTexture *__pyx_v_self, struct __pyx_obj_8pynodegl__Node *__pyx_v_depth_texture) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("set_depth_texture", 0);

  /* "nodes_def.pyx":1592
 * 
 *     def set_depth_texture(self, _Node depth_texture):
 *         return ngl_node_param_set(self.ctx, "depth_texture", depth_texture.ctx)             # <<<<<<<<<<<<<<
 * 
 *     def set_samples(self, int samples):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"depth_texture"), __pyx_v_depth_texture->ctx)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1592, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":1591
 *         return self._add_nodelist("color_textures", *color_textures)
 * 
 *     def set_depth_texture(self, _Node depth_texture):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "depth_texture", depth_texture.ctx)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.RenderToTexture.set_depth_texture", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":1594
 *         return ngl_node_param_set(self.ctx, "depth_texture", depth_texture.ctx)
 * 
 *     def set_samples(self, int samples):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "samples", samples)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_15RenderToTexture_7set_samples(PyObject *__pyx_v_self, PyObject *__pyx_arg_samples); /*proto*/
static PyObject *__pyx_pw_8pynodegl_15RenderToTexture_7set_samples(PyObject *__pyx_v_self, PyObject *__pyx_arg_samples) {
  int __pyx_v_samples;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_samples (wrapper)", 0);
  assert(__pyx_arg_samples); {
    __pyx_v_samples = __Pyx_PyInt_As_int(__pyx_arg_samples); if (unlikely((__pyx_v_samples == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1594, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pynodegl.RenderToTexture.set_samples", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pynodegl_15RenderToTexture_6set_samples(((struct __pyx_obj_8pynodegl_RenderToTexture *)__pyx_v_self), ((int)__pyx_v_samples));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_15RenderToTexture_6set_samples(struct __pyx_obj_8pynodegl_RenderToTexture *__pyx_v_self, int __pyx_v_samples) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("set_samples", 0);

  /* "nodes_def.pyx":1595
 * 
 *     def set_samples(self, int samples):
 *         return ngl_node_param_set(self.ctx, "samples", samples)             # <<<<<<<<<<<<<<
 * 
 *     def set_clear_color(self, *clear_color):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"samples"), __pyx_v_samples)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1595, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":1594
 *         return ngl_node_param_set(self.ctx, "depth_texture", depth_texture.ctx)
 * 
 *     def set_samples(self, int samples):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "samples", samples)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.RenderToTexture.set_samples", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":1597
 *         return ngl_node_param_set(self.ctx, "samples", samples)
 * 
 *     def set_clear_color(self, *clear_color):             # <<<<<<<<<<<<<<
 *         cdef float[4] clear_color_c
 *         cdef int clear_color_i
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_15RenderToTexture_9set_clear_color(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_8pynodegl_15RenderToTexture_9set_clear_color(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_clear_color = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_clear_color (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "set_clear_color", 0))) return NULL;
  __Pyx_INCREF(__pyx_args);
  __pyx_v_clear_color = __pyx_args;
  __pyx_r = __pyx_pf_8pynodegl_15RenderToTexture_8set_clear_color(((struct __pyx_obj_8pynodegl_RenderToTexture *)__pyx_v_self), __pyx_v_clear_color);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_clear_color);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_15RenderToTexture_8set_clear_color(struct __pyx_obj_8pynodegl_RenderToTexture *__pyx_v_self, PyObject *__pyx_v_clear_color) {
  float __pyx_v_clear_color_c[4];
  int __pyx_v_clear_color_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  Py_UCS4 __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  int __pyx_t_7;
  float __pyx_t_8;
  __Pyx_RefNannySetupContext("set_clear_color", 0);

  /* "nodes_def.pyx":1600
 *         cdef float[4] clear_color_c
 *         cdef int clear_color_i
 *         if len(clear_color) != 4:             # <<<<<<<<<<<<<<
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (
 *                             "clear_color", 4, len(clear_color)))
 */
  __pyx_t_1 = PyTuple_GET_SIZE(__pyx_v_clear_color); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1600, __pyx_L1_error)
  __pyx_t_2 = ((__pyx_t_1 != 4) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "nodes_def.pyx":1601
 *         cdef int clear_color_i
 *         if len(clear_color) != 4:
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (             # <<<<<<<<<<<<<<
 *                             "clear_color", 4, len(clear_color)))
 *         for clear_color_i in range(4):
 */
    __pyx_t_3 = PyTuple_New(5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1601, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = 0;
    __pyx_t_4 = 127;
    __Pyx_INCREF(__pyx_kp_u_clear_color_parameter_is_expecte);
    __pyx_t_1 += 43;
    __Pyx_GIVEREF(__pyx_kp_u_clear_color_parameter_is_expecte);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_kp_u_clear_color_parameter_is_expecte);

    /* "nodes_def.pyx":1602
 *         if len(clear_color) != 4:
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (
 *                             "clear_color", 4, len(clear_color)))             # <<<<<<<<<<<<<<
 *         for clear_color_i in range(4):
 *             clear_color_c[clear_color_i] = clear_color[clear_color_i]
 */
    __pyx_t_5 = __Pyx_PyUnicode_From_long(4, 0, ' ', 'd'); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1602, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_INCREF(__pyx_kp_u_but_got);
    __pyx_t_1 += 9;
    __Pyx_GIVEREF(__pyx_kp_u_but_got);
    PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_kp_u_but_got);
    __pyx_t_6 = PyTuple_GET_SIZE(__pyx_v_clear_color); if (unlikely(__pyx_t_6 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1602, __pyx_L1_error)
    __pyx_t_5 = __Pyx_PyUnicode_From_Py_ssize_t(__pyx_t_6, 0, ' ', 'd'); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1602, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_3, 3, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_INCREF(__pyx_kp_u_values);
    __pyx_t_1 += 7;
    __Pyx_GIVEREF(__pyx_kp_u_values);
    PyTuple_SET_ITEM(__pyx_t_3, 4, __pyx_kp_u_values);

    /* "nodes_def.pyx":1601
 *         cdef int clear_color_i
 *         if len(clear_color) != 4:
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (             # <<<<<<<<<<<<<<
 *                             "clear_color", 4, len(clear_color)))
 *         for clear_color_i in range(4):
 */
    __pyx_t_5 = __Pyx_PyUnicode_Join(__pyx_t_3, 5, __pyx_t_1, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1601, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1601, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 1601, __pyx_L1_error)

    /* "nodes_def.pyx":1600
 *         cdef float[4] clear_color_c
 *         cdef int clear_color_i
 *         if len(clear_color) != 4:             # <<<<<<<<<<<<<<
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (
 *                             "clear_color", 4, len(clear_color)))
 */
  }

  /* "nodes_def.pyx":1603
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (
 *                             "clear_color", 4, len(clear_color)))
 *         for clear_color_i in range(4):             # <<<<<<<<<<<<<<
 *             clear_color_c[clear_color_i] = clear_color[clear_color_i]
 * 
 */
  for (__pyx_t_7 = 0; __pyx_t_7 < 4; __pyx_t_7+=1) {
    __pyx_v_clear_color_i = __pyx_t_7;

    /* "nodes_def.pyx":1604
 *                             "clear_color", 4, len(clear_color)))
 *         for clear_color_i in range(4):
 *             clear_color_c[clear_color_i] = clear_color[clear_color_i]             # <<<<<<<<<<<<<<
 * 
 *         return ngl_node_param_set(self.ctx, "clear_color", clear_color_c)
 */
    __pyx_t_3 = __Pyx_GetItemInt_Tuple(__pyx_v_clear_color, __pyx_v_clear_color_i, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1604, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_8 = __pyx_PyFloat_AsFloat(__pyx_t_3); if (unlikely((__pyx_t_8 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1604, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    (__pyx_v_clear_color_c[__pyx_v_clear_color_i]) = __pyx_t_8;
  }

  /* "nodes_def.pyx":1606
 *             clear_color_c[clear_color_i] = clear_color[clear_color_i]
 * 
 *         return ngl_node_param_set(self.ctx, "clear_color", clear_color_c)             # <<<<<<<<<<<<<<
 * 
 *     def set_features(self, const char * features):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"clear_color"), __pyx_v_clear_color_c)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1606, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":1597
 *         return ngl_node_param_set(self.ctx, "samples", samples)
 * 
 *     def set_clear_color(self, *clear_color):             # <<<<<<<<<<<<<<
 *         cdef float[4] clear_color_c
 *         cdef int clear_color_i
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pynodegl.RenderToTexture.set_clear_color", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":1608
 *         return ngl_node_param_set(self.ctx, "clear_color", clear_color_c)
 * 
 *     def set_features(self, const char * features):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "features", features)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_15RenderToTexture_11set_features(PyObject *__pyx_v_self, PyObject *__pyx_arg_features); /*proto*/
static PyObject *__pyx_pw_8pynodegl_15RenderToTexture_11set_features(PyObject *__pyx_v_self, PyObject *__pyx_arg_features) {
  char const *__pyx_v_features;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_features (wrapper)", 0);
  assert(__pyx_arg_features); {
    __pyx_v_features = __Pyx_PyObject_AsString(__pyx_arg_features); if (unlikely((!__pyx_v_features) && PyErr_Occurred())) __PYX_ERR(0, 1608, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pynodegl.RenderToTexture.set_features", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pynodegl_15RenderToTexture_10set_features(((struct __pyx_obj_8pynodegl_RenderToTexture *)__pyx_v_self), ((char const *)__pyx_v_features));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_15RenderToTexture_10set_features(struct __pyx_obj_8pynodegl_RenderToTexture *__pyx_v_self, char const *__pyx_v_features) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("set_features", 0);

  /* "nodes_def.pyx":1609
 * 
 *     def set_features(self, const char * features):
 *         return ngl_node_param_set(self.ctx, "features", features)             # <<<<<<<<<<<<<<
 * 
 *     def set_vflip(self, bint vflip):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"features"), __pyx_v_features)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1609, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":1608
 *         return ngl_node_param_set(self.ctx, "clear_color", clear_color_c)
 * 
 *     def set_features(self, const char * features):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "features", features)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.RenderToTexture.set_features", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":1611
 *         return ngl_node_param_set(self.ctx, "features", features)
 * 
 *     def set_vflip(self, bint vflip):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "vflip", vflip)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_15RenderToTexture_13set_vflip(PyObject *__pyx_v_self, PyObject *__pyx_arg_vflip); /*proto*/
static PyObject *__pyx_pw_8pynodegl_15RenderToTexture_13set_vflip(PyObject *__pyx_v_self, PyObject *__pyx_arg_vflip) {
  int __pyx_v_vflip;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_vflip (wrapper)", 0);
  assert(__pyx_arg_vflip); {
    __pyx_v_vflip = __Pyx_PyObject_IsTrue(__pyx_arg_vflip); if (unlikely((__pyx_v_vflip == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1611, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pynodegl.RenderToTexture.set_vflip", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pynodegl_15RenderToTexture_12set_vflip(((struct __pyx_obj_8pynodegl_RenderToTexture *)__pyx_v_self), ((int)__pyx_v_vflip));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_15RenderToTexture_12set_vflip(struct __pyx_obj_8pynodegl_RenderToTexture *__pyx_v_self, int __pyx_v_vflip) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("set_vflip", 0);

  /* "nodes_def.pyx":1612
 * 
 *     def set_vflip(self, bint vflip):
 *         return ngl_node_param_set(self.ctx, "vflip", vflip)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"vflip"), __pyx_v_vflip)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1612, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":1611
 *         return ngl_node_param_set(self.ctx, "features", features)
 * 
 *     def set_vflip(self, bint vflip):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "vflip", vflip)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.RenderToTexture.set_vflip", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_15RenderToTexture_15__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pynodegl_15RenderToTexture_15__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_15RenderToTexture_14__reduce_cython__(((struct __pyx_obj_8pynodegl_RenderToTexture *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_15RenderToTexture_14__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_RenderToTexture *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__132, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.RenderToTexture.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_15RenderToTexture_17__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8pynodegl_15RenderToTexture_17__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_15RenderToTexture_16__setstate_cython__(((struct __pyx_obj_8pynodegl_RenderToTexture *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_15RenderToTexture_16__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_RenderToTexture *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__133, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.RenderToTexture.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":1617
 * cdef class Rotate(_Node):
 * 
 *     def __init__(self, _Node child, angle=None, axis=None, anchor=None, anim=None, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         assert child is not None
 * 
 */

/* Python wrapper */
static int __pyx_pw_8pynodegl_6Rotate_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pynodegl_6Rotate_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pynodegl__Node *__pyx_v_child = 0;
  PyObject *__pyx_v_angle = 0;
  PyObject *__pyx_v_axis = 0;
  PyObject *__pyx_v_anchor = 0;
  PyObject *__pyx_v_anim = 0;
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  __pyx_v_kwargs = PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return -1;
  __Pyx_GOTREF(__pyx_v_kwargs);
  if (PyTuple_GET_SIZE(__pyx_args) > 5) {
    __pyx_v_args = PyTuple_GetSlice(__pyx_args, 5, PyTuple_GET_SIZE(__pyx_args));
    if (unlikely(!__pyx_v_args)) {
      __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
      __Pyx_RefNannyFinishContext();
      return -1;
    }
    __Pyx_GOTREF(__pyx_v_args);
  } else {
    __pyx_v_args = __pyx_empty_tuple; __Pyx_INCREF(__pyx_empty_tuple);
  }
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_child,&__pyx_n_s_angle,&__pyx_n_s_axis,&__pyx_n_s_anchor,&__pyx_n_s_anim,0};
    PyObject* values[5] = {0,0,0,0,0};
    values[1] = ((PyObject *)Py_None);
    values[2] = ((PyObject *)Py_None);
    values[3] = ((PyObject *)Py_None);
    values[4] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        default:
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_child)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_angle);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_axis);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_anchor);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_anim);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t used_pos_args = (pos_args < 5) ? pos_args : 5;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_kwargs, values, used_pos_args, "__init__") < 0)) __PYX_ERR(0, 1617, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        default:
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        case  0:
        goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_child = ((struct __pyx_obj_8pynodegl__Node *)values[0]);
    __pyx_v_angle = values[1];
    __pyx_v_axis = values[2];
    __pyx_v_anchor = values[3];
    __pyx_v_anim = values[4];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 1, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1617, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_args); __pyx_v_args = 0;
  __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
  __Pyx_AddTraceback("pynodegl.Rotate.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_child), __pyx_ptype_8pynodegl__Node, 1, "child", 0))) __PYX_ERR(0, 1617, __pyx_L1_error)
  __pyx_r = __pyx_pf_8pynodegl_6Rotate___init__(((struct __pyx_obj_8pynodegl_Rotate *)__pyx_v_self), __pyx_v_child, __pyx_v_angle, __pyx_v_axis, __pyx_v_anchor, __pyx_v_anim, __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pynodegl_6Rotate___init__(struct __pyx_obj_8pynodegl_Rotate *__pyx_v_self, struct __pyx_obj_8pynodegl__Node *__pyx_v_child, PyObject *__pyx_v_angle, PyObject *__pyx_v_axis, PyObject *__pyx_v_anchor, PyObject *__pyx_v_anim, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "nodes_def.pyx":1618
 * 
 *     def __init__(self, _Node child, angle=None, axis=None, anchor=None, anim=None, *args, **kwargs):
 *         assert child is not None             # <<<<<<<<<<<<<<
 * 
 *         assert self.ctx is NULL
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = (((PyObject *)__pyx_v_child) != Py_None);
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 1618, __pyx_L1_error)
    }
  }
  #endif

  /* "nodes_def.pyx":1620
 *         assert child is not None
 * 
 *         assert self.ctx is NULL             # <<<<<<<<<<<<<<
 *         self.ctx = ngl_node_create(NGL_NODE_ROTATE, child.ctx)
 *         if self.ctx is NULL:
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!((__pyx_v_self->__pyx_base.ctx == NULL) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 1620, __pyx_L1_error)
    }
  }
  #endif

  /* "nodes_def.pyx":1621
 * 
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_ROTATE, child.ctx)             # <<<<<<<<<<<<<<
 *         if self.ctx is NULL:
 *             raise MemoryError()
 */
  __pyx_v_self->__pyx_base.ctx = ngl_node_create(NGL_NODE_ROTATE, __pyx_v_child->ctx);

  /* "nodes_def.pyx":1622
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_ROTATE, child.ctx)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         _Node._init_params(self, *args, **kwargs)
 */
  __pyx_t_1 = ((__pyx_v_self->__pyx_base.ctx == NULL) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "nodes_def.pyx":1623
 *         self.ctx = ngl_node_create(NGL_NODE_ROTATE, child.ctx)
 *         if self.ctx is NULL:
 *             raise MemoryError()             # <<<<<<<<<<<<<<
 *         _Node._init_params(self, *args, **kwargs)
 * 
 */
    PyErr_NoMemory(); __PYX_ERR(0, 1623, __pyx_L1_error)

    /* "nodes_def.pyx":1622
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_ROTATE, child.ctx)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         _Node._init_params(self, *args, **kwargs)
 */
  }

  /* "nodes_def.pyx":1624
 *         if self.ctx is NULL:
 *             raise MemoryError()
 *         _Node._init_params(self, *args, **kwargs)             # <<<<<<<<<<<<<<
 * 
 *         if angle is not None:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_8pynodegl__Node), __pyx_n_s_init_params); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1624, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1624, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_v_self));
  __pyx_t_4 = PyNumber_Add(__pyx_t_3, __pyx_v_args); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1624, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, __pyx_v_kwargs); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1624, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "nodes_def.pyx":1626
 *         _Node._init_params(self, *args, **kwargs)
 * 
 *         if angle is not None:             # <<<<<<<<<<<<<<
 *             self.set_angle(angle)
 *         if axis is not None:
 */
  __pyx_t_1 = (__pyx_v_angle != Py_None);
  __pyx_t_5 = (__pyx_t_1 != 0);
  if (__pyx_t_5) {

    /* "nodes_def.pyx":1627
 * 
 *         if angle is not None:
 *             self.set_angle(angle)             # <<<<<<<<<<<<<<
 *         if axis is not None:
 *             self.set_axis(*axis)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_angle); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1627, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_2, __pyx_v_angle) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_angle);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1627, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "nodes_def.pyx":1626
 *         _Node._init_params(self, *args, **kwargs)
 * 
 *         if angle is not None:             # <<<<<<<<<<<<<<
 *             self.set_angle(angle)
 *         if axis is not None:
 */
  }

  /* "nodes_def.pyx":1628
 *         if angle is not None:
 *             self.set_angle(angle)
 *         if axis is not None:             # <<<<<<<<<<<<<<
 *             self.set_axis(*axis)
 *         if anchor is not None:
 */
  __pyx_t_5 = (__pyx_v_axis != Py_None);
  __pyx_t_1 = (__pyx_t_5 != 0);
  if (__pyx_t_1) {

    /* "nodes_def.pyx":1629
 *             self.set_angle(angle)
 *         if axis is not None:
 *             self.set_axis(*axis)             # <<<<<<<<<<<<<<
 *         if anchor is not None:
 *             self.set_anchor(*anchor)
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_axis); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1629, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PySequence_Tuple(__pyx_v_axis); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1629, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1629, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "nodes_def.pyx":1628
 *         if angle is not None:
 *             self.set_angle(angle)
 *         if axis is not None:             # <<<<<<<<<<<<<<
 *             self.set_axis(*axis)
 *         if anchor is not None:
 */
  }

  /* "nodes_def.pyx":1630
 *         if axis is not None:
 *             self.set_axis(*axis)
 *         if anchor is not None:             # <<<<<<<<<<<<<<
 *             self.set_anchor(*anchor)
 *         if anim is not None:
 */
  __pyx_t_1 = (__pyx_v_anchor != Py_None);
  __pyx_t_5 = (__pyx_t_1 != 0);
  if (__pyx_t_5) {

    /* "nodes_def.pyx":1631
 *             self.set_axis(*axis)
 *         if anchor is not None:
 *             self.set_anchor(*anchor)             # <<<<<<<<<<<<<<
 *         if anim is not None:
 *             self.set_anim(anim)
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_anchor); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1631, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PySequence_Tuple(__pyx_v_anchor); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1631, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1631, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "nodes_def.pyx":1630
 *         if axis is not None:
 *             self.set_axis(*axis)
 *         if anchor is not None:             # <<<<<<<<<<<<<<
 *             self.set_anchor(*anchor)
 *         if anim is not None:
 */
  }

  /* "nodes_def.pyx":1632
 *         if anchor is not None:
 *             self.set_anchor(*anchor)
 *         if anim is not None:             # <<<<<<<<<<<<<<
 *             self.set_anim(anim)
 * 
 */
  __pyx_t_5 = (__pyx_v_anim != Py_None);
  __pyx_t_1 = (__pyx_t_5 != 0);
  if (__pyx_t_1) {

    /* "nodes_def.pyx":1633
 *             self.set_anchor(*anchor)
 *         if anim is not None:
 *             self.set_anim(anim)             # <<<<<<<<<<<<<<
 * 
 *     def set_angle(self, double angle):
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_anim); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1633, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_2, __pyx_v_anim) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_anim);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1633, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "nodes_def.pyx":1632
 *         if anchor is not None:
 *             self.set_anchor(*anchor)
 *         if anim is not None:             # <<<<<<<<<<<<<<
 *             self.set_anim(anim)
 * 
 */
  }

  /* "nodes_def.pyx":1617
 * cdef class Rotate(_Node):
 * 
 *     def __init__(self, _Node child, angle=None, axis=None, anchor=None, anim=None, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         assert child is not None
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pynodegl.Rotate.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":1635
 *             self.set_anim(anim)
 * 
 *     def set_angle(self, double angle):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "angle", angle)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_6Rotate_3set_angle(PyObject *__pyx_v_self, PyObject *__pyx_arg_angle); /*proto*/
static PyObject *__pyx_pw_8pynodegl_6Rotate_3set_angle(PyObject *__pyx_v_self, PyObject *__pyx_arg_angle) {
  double __pyx_v_angle;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_angle (wrapper)", 0);
  assert(__pyx_arg_angle); {
    __pyx_v_angle = __pyx_PyFloat_AsDouble(__pyx_arg_angle); if (unlikely((__pyx_v_angle == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1635, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pynodegl.Rotate.set_angle", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pynodegl_6Rotate_2set_angle(((struct __pyx_obj_8pynodegl_Rotate *)__pyx_v_self), ((double)__pyx_v_angle));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_6Rotate_2set_angle(struct __pyx_obj_8pynodegl_Rotate *__pyx_v_self, double __pyx_v_angle) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("set_angle", 0);

  /* "nodes_def.pyx":1636
 * 
 *     def set_angle(self, double angle):
 *         return ngl_node_param_set(self.ctx, "angle", angle)             # <<<<<<<<<<<<<<
 * 
 *     def set_axis(self, *axis):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"angle"), __pyx_v_angle)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1636, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":1635
 *             self.set_anim(anim)
 * 
 *     def set_angle(self, double angle):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "angle", angle)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.Rotate.set_angle", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":1638
 *         return ngl_node_param_set(self.ctx, "angle", angle)
 * 
 *     def set_axis(self, *axis):             # <<<<<<<<<<<<<<
 *         cdef float[3] axis_c
 *         cdef int axis_i
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_6Rotate_5set_axis(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_8pynodegl_6Rotate_5set_axis(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_axis = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_axis (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "set_axis", 0))) return NULL;
  __Pyx_INCREF(__pyx_args);
  __pyx_v_axis = __pyx_args;
  __pyx_r = __pyx_pf_8pynodegl_6Rotate_4set_axis(((struct __pyx_obj_8pynodegl_Rotate *)__pyx_v_self), __pyx_v_axis);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_axis);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_6Rotate_4set_axis(struct __pyx_obj_8pynodegl_Rotate *__pyx_v_self, PyObject *__pyx_v_axis) {
  float __pyx_v_axis_c[3];
  int __pyx_v_axis_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  Py_UCS4 __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  int __pyx_t_7;
  float __pyx_t_8;
  __Pyx_RefNannySetupContext("set_axis", 0);

  /* "nodes_def.pyx":1641
 *         cdef float[3] axis_c
 *         cdef int axis_i
 *         if len(axis) != 3:             # <<<<<<<<<<<<<<
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (
 *                             "axis", 3, len(axis)))
 */
  __pyx_t_1 = PyTuple_GET_SIZE(__pyx_v_axis); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1641, __pyx_L1_error)
  __pyx_t_2 = ((__pyx_t_1 != 3) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "nodes_def.pyx":1642
 *         cdef int axis_i
 *         if len(axis) != 3:
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (             # <<<<<<<<<<<<<<
 *                             "axis", 3, len(axis)))
 *         for axis_i in range(3):
 */
    __pyx_t_3 = PyTuple_New(5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1642, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = 0;
    __pyx_t_4 = 127;
    __Pyx_INCREF(__pyx_kp_u_axis_parameter_is_expected_to_be);
    __pyx_t_1 += 36;
    __Pyx_GIVEREF(__pyx_kp_u_axis_parameter_is_expected_to_be);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_kp_u_axis_parameter_is_expected_to_be);

    /* "nodes_def.pyx":1643
 *         if len(axis) != 3:
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (
 *                             "axis", 3, len(axis)))             # <<<<<<<<<<<<<<
 *         for axis_i in range(3):
 *             axis_c[axis_i] = axis[axis_i]
 */
    __pyx_t_5 = __Pyx_PyUnicode_From_long(3, 0, ' ', 'd'); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1643, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_INCREF(__pyx_kp_u_but_got);
    __pyx_t_1 += 9;
    __Pyx_GIVEREF(__pyx_kp_u_but_got);
    PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_kp_u_but_got);
    __pyx_t_6 = PyTuple_GET_SIZE(__pyx_v_axis); if (unlikely(__pyx_t_6 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1643, __pyx_L1_error)
    __pyx_t_5 = __Pyx_PyUnicode_From_Py_ssize_t(__pyx_t_6, 0, ' ', 'd'); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1643, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_3, 3, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_INCREF(__pyx_kp_u_values);
    __pyx_t_1 += 7;
    __Pyx_GIVEREF(__pyx_kp_u_values);
    PyTuple_SET_ITEM(__pyx_t_3, 4, __pyx_kp_u_values);

    /* "nodes_def.pyx":1642
 *         cdef int axis_i
 *         if len(axis) != 3:
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (             # <<<<<<<<<<<<<<
 *                             "axis", 3, len(axis)))
 *         for axis_i in range(3):
 */
    __pyx_t_5 = __Pyx_PyUnicode_Join(__pyx_t_3, 5, __pyx_t_1, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1642, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1642, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 1642, __pyx_L1_error)

    /* "nodes_def.pyx":1641
 *         cdef float[3] axis_c
 *         cdef int axis_i
 *         if len(axis) != 3:             # <<<<<<<<<<<<<<
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (
 *                             "axis", 3, len(axis)))
 */
  }

  /* "nodes_def.pyx":1644
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (
 *                             "axis", 3, len(axis)))
 *         for axis_i in range(3):             # <<<<<<<<<<<<<<
 *             axis_c[axis_i] = axis[axis_i]
 * 
 */
  for (__pyx_t_7 = 0; __pyx_t_7 < 3; __pyx_t_7+=1) {
    __pyx_v_axis_i = __pyx_t_7;

    /* "nodes_def.pyx":1645
 *                             "axis", 3, len(axis)))
 *         for axis_i in range(3):
 *             axis_c[axis_i] = axis[axis_i]             # <<<<<<<<<<<<<<
 * 
 *         return ngl_node_param_set(self.ctx, "axis", axis_c)
 */
    __pyx_t_3 = __Pyx_GetItemInt_Tuple(__pyx_v_axis, __pyx_v_axis_i, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1645, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_8 = __pyx_PyFloat_AsFloat(__pyx_t_3); if (unlikely((__pyx_t_8 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1645, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    (__pyx_v_axis_c[__pyx_v_axis_i]) = __pyx_t_8;
  }

  /* "nodes_def.pyx":1647
 *             axis_c[axis_i] = axis[axis_i]
 * 
 *         return ngl_node_param_set(self.ctx, "axis", axis_c)             # <<<<<<<<<<<<<<
 * 
 *     def set_anchor(self, *anchor):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"axis"), __pyx_v_axis_c)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1647, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":1638
 *         return ngl_node_param_set(self.ctx, "angle", angle)
 * 
 *     def set_axis(self, *axis):             # <<<<<<<<<<<<<<
 *         cdef float[3] axis_c
 *         cdef int axis_i
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pynodegl.Rotate.set_axis", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":1649
 *         return ngl_node_param_set(self.ctx, "axis", axis_c)
 * 
 *     def set_anchor(self, *anchor):             # <<<<<<<<<<<<<<
 *         cdef float[3] anchor_c
 *         cdef int anchor_i
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_6Rotate_7set_anchor(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_8pynodegl_6Rotate_7set_anchor(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_anchor = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_anchor (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "set_anchor", 0))) return NULL;
  __Pyx_INCREF(__pyx_args);
  __pyx_v_anchor = __pyx_args;
  __pyx_r = __pyx_pf_8pynodegl_6Rotate_6set_anchor(((struct __pyx_obj_8pynodegl_Rotate *)__pyx_v_self), __pyx_v_anchor);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_anchor);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_6Rotate_6set_anchor(struct __pyx_obj_8pynodegl_Rotate *__pyx_v_self, PyObject *__pyx_v_anchor) {
  float __pyx_v_anchor_c[3];
  int __pyx_v_anchor_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  Py_UCS4 __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  int __pyx_t_7;
  float __pyx_t_8;
  __Pyx_RefNannySetupContext("set_anchor", 0);

  /* "nodes_def.pyx":1652
 *         cdef float[3] anchor_c
 *         cdef int anchor_i
 *         if len(anchor) != 3:             # <<<<<<<<<<<<<<
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (
 *                             "anchor", 3, len(anchor)))
 */
  __pyx_t_1 = PyTuple_GET_SIZE(__pyx_v_anchor); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1652, __pyx_L1_error)
  __pyx_t_2 = ((__pyx_t_1 != 3) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "nodes_def.pyx":1653
 *         cdef int anchor_i
 *         if len(anchor) != 3:
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (             # <<<<<<<<<<<<<<
 *                             "anchor", 3, len(anchor)))
 *         for anchor_i in range(3):
 */
    __pyx_t_3 = PyTuple_New(5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1653, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = 0;
    __pyx_t_4 = 127;
    __Pyx_INCREF(__pyx_kp_u_anchor_parameter_is_expected_to);
    __pyx_t_1 += 38;
    __Pyx_GIVEREF(__pyx_kp_u_anchor_parameter_is_expected_to);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_kp_u_anchor_parameter_is_expected_to);

    /* "nodes_def.pyx":1654
 *         if len(anchor) != 3:
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (
 *                             "anchor", 3, len(anchor)))             # <<<<<<<<<<<<<<
 *         for anchor_i in range(3):
 *             anchor_c[anchor_i] = anchor[anchor_i]
 */
    __pyx_t_5 = __Pyx_PyUnicode_From_long(3, 0, ' ', 'd'); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1654, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_INCREF(__pyx_kp_u_but_got);
    __pyx_t_1 += 9;
    __Pyx_GIVEREF(__pyx_kp_u_but_got);
    PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_kp_u_but_got);
    __pyx_t_6 = PyTuple_GET_SIZE(__pyx_v_anchor); if (unlikely(__pyx_t_6 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1654, __pyx_L1_error)
    __pyx_t_5 = __Pyx_PyUnicode_From_Py_ssize_t(__pyx_t_6, 0, ' ', 'd'); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1654, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_3, 3, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_INCREF(__pyx_kp_u_values);
    __pyx_t_1 += 7;
    __Pyx_GIVEREF(__pyx_kp_u_values);
    PyTuple_SET_ITEM(__pyx_t_3, 4, __pyx_kp_u_values);

    /* "nodes_def.pyx":1653
 *         cdef int anchor_i
 *         if len(anchor) != 3:
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (             # <<<<<<<<<<<<<<
 *                             "anchor", 3, len(anchor)))
 *         for anchor_i in range(3):
 */
    __pyx_t_5 = __Pyx_PyUnicode_Join(__pyx_t_3, 5, __pyx_t_1, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1653, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1653, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 1653, __pyx_L1_error)

    /* "nodes_def.pyx":1652
 *         cdef float[3] anchor_c
 *         cdef int anchor_i
 *         if len(anchor) != 3:             # <<<<<<<<<<<<<<
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (
 *                             "anchor", 3, len(anchor)))
 */
  }

  /* "nodes_def.pyx":1655
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (
 *                             "anchor", 3, len(anchor)))
 *         for anchor_i in range(3):             # <<<<<<<<<<<<<<
 *             anchor_c[anchor_i] = anchor[anchor_i]
 * 
 */
  for (__pyx_t_7 = 0; __pyx_t_7 < 3; __pyx_t_7+=1) {
    __pyx_v_anchor_i = __pyx_t_7;

    /* "nodes_def.pyx":1656
 *                             "anchor", 3, len(anchor)))
 *         for anchor_i in range(3):
 *             anchor_c[anchor_i] = anchor[anchor_i]             # <<<<<<<<<<<<<<
 * 
 *         return ngl_node_param_set(self.ctx, "anchor", anchor_c)
 */
    __pyx_t_3 = __Pyx_GetItemInt_Tuple(__pyx_v_anchor, __pyx_v_anchor_i, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1656, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_8 = __pyx_PyFloat_AsFloat(__pyx_t_3); if (unlikely((__pyx_t_8 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1656, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    (__pyx_v_anchor_c[__pyx_v_anchor_i]) = __pyx_t_8;
  }

  /* "nodes_def.pyx":1658
 *             anchor_c[anchor_i] = anchor[anchor_i]
 * 
 *         return ngl_node_param_set(self.ctx, "anchor", anchor_c)             # <<<<<<<<<<<<<<
 * 
 *     def set_anim(self, _Node anim):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"anchor"), __pyx_v_anchor_c)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1658, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":1649
 *         return ngl_node_param_set(self.ctx, "axis", axis_c)
 * 
 *     def set_anchor(self, *anchor):             # <<<<<<<<<<<<<<
 *         cdef float[3] anchor_c
 *         cdef int anchor_i
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pynodegl.Rotate.set_anchor", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":1660
 *         return ngl_node_param_set(self.ctx, "anchor", anchor_c)
 * 
 *     def set_anim(self, _Node anim):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "anim", anim.ctx)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_6Rotate_9set_anim(PyObject *__pyx_v_self, PyObject *__pyx_v_anim); /*proto*/
static PyObject *__pyx_pw_8pynodegl_6Rotate_9set_anim(PyObject *__pyx_v_self, PyObject *__pyx_v_anim) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_anim (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_anim), __pyx_ptype_8pynodegl__Node, 1, "anim", 0))) __PYX_ERR(0, 1660, __pyx_L1_error)
  __pyx_r = __pyx_pf_8pynodegl_6Rotate_8set_anim(((struct __pyx_obj_8pynodegl_Rotate *)__pyx_v_self), ((struct __pyx_obj_8pynodegl__Node *)__pyx_v_anim));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_6Rotate_8set_anim(struct __pyx_obj_8pynodegl_Rotate *__pyx_v_self, struct __pyx_obj_8pynodegl__Node *__pyx_v_anim) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("set_anim", 0);

  /* "nodes_def.pyx":1661
 * 
 *     def set_anim(self, _Node anim):
 *         return ngl_node_param_set(self.ctx, "anim", anim.ctx)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"anim"), __pyx_v_anim->ctx)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1661, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":1660
 *         return ngl_node_param_set(self.ctx, "anchor", anchor_c)
 * 
 *     def set_anim(self, _Node anim):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "anim", anim.ctx)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.Rotate.set_anim", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_6Rotate_11__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pynodegl_6Rotate_11__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_6Rotate_10__reduce_cython__(((struct __pyx_obj_8pynodegl_Rotate *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_6Rotate_10__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_Rotate *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__134, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.Rotate.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_6Rotate_13__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8pynodegl_6Rotate_13__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_6Rotate_12__setstate_cython__(((struct __pyx_obj_8pynodegl_Rotate *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_6Rotate_12__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_Rotate *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__135, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.Rotate.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":1666
 * cdef class RotateQuat(_Node):
 * 
 *     def __init__(self, _Node child, quat=None, anchor=None, anim=None, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         assert child is not None
 * 
 */

/* Python wrapper */
static int __pyx_pw_8pynodegl_10RotateQuat_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pynodegl_10RotateQuat_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pynodegl__Node *__pyx_v_child = 0;
  PyObject *__pyx_v_quat = 0;
  PyObject *__pyx_v_anchor = 0;
  PyObject *__pyx_v_anim = 0;
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  __pyx_v_kwargs = PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return -1;
  __Pyx_GOTREF(__pyx_v_kwargs);
  if (PyTuple_GET_SIZE(__pyx_args) > 4) {
    __pyx_v_args = PyTuple_GetSlice(__pyx_args, 4, PyTuple_GET_SIZE(__pyx_args));
    if (unlikely(!__pyx_v_args)) {
      __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
      __Pyx_RefNannyFinishContext();
      return -1;
    }
    __Pyx_GOTREF(__pyx_v_args);
  } else {
    __pyx_v_args = __pyx_empty_tuple; __Pyx_INCREF(__pyx_empty_tuple);
  }
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_child,&__pyx_n_s_quat,&__pyx_n_s_anchor,&__pyx_n_s_anim,0};
    PyObject* values[4] = {0,0,0,0};
    values[1] = ((PyObject *)Py_None);
    values[2] = ((PyObject *)Py_None);
    values[3] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        default:
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_child)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_quat);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_anchor);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_anim);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t used_pos_args = (pos_args < 4) ? pos_args : 4;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_kwargs, values, used_pos_args, "__init__") < 0)) __PYX_ERR(0, 1666, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        default:
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        case  0:
        goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_child = ((struct __pyx_obj_8pynodegl__Node *)values[0]);
    __pyx_v_quat = values[1];
    __pyx_v_anchor = values[2];
    __pyx_v_anim = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 1, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1666, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_args); __pyx_v_args = 0;
  __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
  __Pyx_AddTraceback("pynodegl.RotateQuat.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_child), __pyx_ptype_8pynodegl__Node, 1, "child", 0))) __PYX_ERR(0, 1666, __pyx_L1_error)
  __pyx_r = __pyx_pf_8pynodegl_10RotateQuat___init__(((struct __pyx_obj_8pynodegl_RotateQuat *)__pyx_v_self), __pyx_v_child, __pyx_v_quat, __pyx_v_anchor, __pyx_v_anim, __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pynodegl_10RotateQuat___init__(struct __pyx_obj_8pynodegl_RotateQuat *__pyx_v_self, struct __pyx_obj_8pynodegl__Node *__pyx_v_child, PyObject *__pyx_v_quat, PyObject *__pyx_v_anchor, PyObject *__pyx_v_anim, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "nodes_def.pyx":1667
 * 
 *     def __init__(self, _Node child, quat=None, anchor=None, anim=None, *args, **kwargs):
 *         assert child is not None             # <<<<<<<<<<<<<<
 * 
 *         assert self.ctx is NULL
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = (((PyObject *)__pyx_v_child) != Py_None);
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 1667, __pyx_L1_error)
    }
  }
  #endif

  /* "nodes_def.pyx":1669
 *         assert child is not None
 * 
 *         assert self.ctx is NULL             # <<<<<<<<<<<<<<
 *         self.ctx = ngl_node_create(NGL_NODE_ROTATEQUAT, child.ctx)
 *         if self.ctx is NULL:
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!((__pyx_v_self->__pyx_base.ctx == NULL) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 1669, __pyx_L1_error)
    }
  }
  #endif

  /* "nodes_def.pyx":1670
 * 
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_ROTATEQUAT, child.ctx)             # <<<<<<<<<<<<<<
 *         if self.ctx is NULL:
 *             raise MemoryError()
 */
  __pyx_v_self->__pyx_base.ctx = ngl_node_create(NGL_NODE_ROTATEQUAT, __pyx_v_child->ctx);

  /* "nodes_def.pyx":1671
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_ROTATEQUAT, child.ctx)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         _Node._init_params(self, *args, **kwargs)
 */
  __pyx_t_1 = ((__pyx_v_self->__pyx_base.ctx == NULL) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "nodes_def.pyx":1672
 *         self.ctx = ngl_node_create(NGL_NODE_ROTATEQUAT, child.ctx)
 *         if self.ctx is NULL:
 *             raise MemoryError()             # <<<<<<<<<<<<<<
 *         _Node._init_params(self, *args, **kwargs)
 * 
 */
    PyErr_NoMemory(); __PYX_ERR(0, 1672, __pyx_L1_error)

    /* "nodes_def.pyx":1671
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_ROTATEQUAT, child.ctx)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         _Node._init_params(self, *args, **kwargs)
 */
  }

  /* "nodes_def.pyx":1673
 *         if self.ctx is NULL:
 *             raise MemoryError()
 *         _Node._init_params(self, *args, **kwargs)             # <<<<<<<<<<<<<<
 * 
 *         if quat is not None:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_8pynodegl__Node), __pyx_n_s_init_params); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1673, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1673, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_v_self));
  __pyx_t_4 = PyNumber_Add(__pyx_t_3, __pyx_v_args); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1673, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, __pyx_v_kwargs); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1673, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "nodes_def.pyx":1675
 *         _Node._init_params(self, *args, **kwargs)
 * 
 *         if quat is not None:             # <<<<<<<<<<<<<<
 *             self.set_quat(*quat)
 *         if anchor is not None:
 */
  __pyx_t_1 = (__pyx_v_quat != Py_None);
  __pyx_t_5 = (__pyx_t_1 != 0);
  if (__pyx_t_5) {

    /* "nodes_def.pyx":1676
 * 
 *         if quat is not None:
 *             self.set_quat(*quat)             # <<<<<<<<<<<<<<
 *         if anchor is not None:
 *             self.set_anchor(*anchor)
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_quat); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1676, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PySequence_Tuple(__pyx_v_quat); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1676, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1676, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "nodes_def.pyx":1675
 *         _Node._init_params(self, *args, **kwargs)
 * 
 *         if quat is not None:             # <<<<<<<<<<<<<<
 *             self.set_quat(*quat)
 *         if anchor is not None:
 */
  }

  /* "nodes_def.pyx":1677
 *         if quat is not None:
 *             self.set_quat(*quat)
 *         if anchor is not None:             # <<<<<<<<<<<<<<
 *             self.set_anchor(*anchor)
 *         if anim is not None:
 */
  __pyx_t_5 = (__pyx_v_anchor != Py_None);
  __pyx_t_1 = (__pyx_t_5 != 0);
  if (__pyx_t_1) {

    /* "nodes_def.pyx":1678
 *             self.set_quat(*quat)
 *         if anchor is not None:
 *             self.set_anchor(*anchor)             # <<<<<<<<<<<<<<
 *         if anim is not None:
 *             self.set_anim(anim)
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_anchor); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1678, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PySequence_Tuple(__pyx_v_anchor); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1678, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1678, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "nodes_def.pyx":1677
 *         if quat is not None:
 *             self.set_quat(*quat)
 *         if anchor is not None:             # <<<<<<<<<<<<<<
 *             self.set_anchor(*anchor)
 *         if anim is not None:
 */
  }

  /* "nodes_def.pyx":1679
 *         if anchor is not None:
 *             self.set_anchor(*anchor)
 *         if anim is not None:             # <<<<<<<<<<<<<<
 *             self.set_anim(anim)
 * 
 */
  __pyx_t_1 = (__pyx_v_anim != Py_None);
  __pyx_t_5 = (__pyx_t_1 != 0);
  if (__pyx_t_5) {

    /* "nodes_def.pyx":1680
 *             self.set_anchor(*anchor)
 *         if anim is not None:
 *             self.set_anim(anim)             # <<<<<<<<<<<<<<
 * 
 *     def set_quat(self, *quat):
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_anim); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1680, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_2, __pyx_v_anim) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_anim);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1680, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "nodes_def.pyx":1679
 *         if anchor is not None:
 *             self.set_anchor(*anchor)
 *         if anim is not None:             # <<<<<<<<<<<<<<
 *             self.set_anim(anim)
 * 
 */
  }

  /* "nodes_def.pyx":1666
 * cdef class RotateQuat(_Node):
 * 
 *     def __init__(self, _Node child, quat=None, anchor=None, anim=None, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         assert child is not None
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pynodegl.RotateQuat.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":1682
 *             self.set_anim(anim)
 * 
 *     def set_quat(self, *quat):             # <<<<<<<<<<<<<<
 *         cdef float[4] quat_c
 *         cdef int quat_i
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_10RotateQuat_3set_quat(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_8pynodegl_10RotateQuat_3set_quat(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_quat = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_quat (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "set_quat", 0))) return NULL;
  __Pyx_INCREF(__pyx_args);
  __pyx_v_quat = __pyx_args;
  __pyx_r = __pyx_pf_8pynodegl_10RotateQuat_2set_quat(((struct __pyx_obj_8pynodegl_RotateQuat *)__pyx_v_self), __pyx_v_quat);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_quat);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_10RotateQuat_2set_quat(struct __pyx_obj_8pynodegl_RotateQuat *__pyx_v_self, PyObject *__pyx_v_quat) {
  float __pyx_v_quat_c[4];
  int __pyx_v_quat_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  Py_UCS4 __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  int __pyx_t_7;
  float __pyx_t_8;
  __Pyx_RefNannySetupContext("set_quat", 0);

  /* "nodes_def.pyx":1685
 *         cdef float[4] quat_c
 *         cdef int quat_i
 *         if len(quat) != 4:             # <<<<<<<<<<<<<<
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (
 *                             "quat", 4, len(quat)))
 */
  __pyx_t_1 = PyTuple_GET_SIZE(__pyx_v_quat); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1685, __pyx_L1_error)
  __pyx_t_2 = ((__pyx_t_1 != 4) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "nodes_def.pyx":1686
 *         cdef int quat_i
 *         if len(quat) != 4:
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (             # <<<<<<<<<<<<<<
 *                             "quat", 4, len(quat)))
 *         for quat_i in range(4):
 */
    __pyx_t_3 = PyTuple_New(5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1686, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = 0;
    __pyx_t_4 = 127;
    __Pyx_INCREF(__pyx_kp_u_quat_parameter_is_expected_to_be);
    __pyx_t_1 += 36;
    __Pyx_GIVEREF(__pyx_kp_u_quat_parameter_is_expected_to_be);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_kp_u_quat_parameter_is_expected_to_be);

    /* "nodes_def.pyx":1687
 *         if len(quat) != 4:
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (
 *                             "quat", 4, len(quat)))             # <<<<<<<<<<<<<<
 *         for quat_i in range(4):
 *             quat_c[quat_i] = quat[quat_i]
 */
    __pyx_t_5 = __Pyx_PyUnicode_From_long(4, 0, ' ', 'd'); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1687, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_INCREF(__pyx_kp_u_but_got);
    __pyx_t_1 += 9;
    __Pyx_GIVEREF(__pyx_kp_u_but_got);
    PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_kp_u_but_got);
    __pyx_t_6 = PyTuple_GET_SIZE(__pyx_v_quat); if (unlikely(__pyx_t_6 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1687, __pyx_L1_error)
    __pyx_t_5 = __Pyx_PyUnicode_From_Py_ssize_t(__pyx_t_6, 0, ' ', 'd'); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1687, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_3, 3, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_INCREF(__pyx_kp_u_values);
    __pyx_t_1 += 7;
    __Pyx_GIVEREF(__pyx_kp_u_values);
    PyTuple_SET_ITEM(__pyx_t_3, 4, __pyx_kp_u_values);

    /* "nodes_def.pyx":1686
 *         cdef int quat_i
 *         if len(quat) != 4:
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (             # <<<<<<<<<<<<<<
 *                             "quat", 4, len(quat)))
 *         for quat_i in range(4):
 */
    __pyx_t_5 = __Pyx_PyUnicode_Join(__pyx_t_3, 5, __pyx_t_1, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1686, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1686, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 1686, __pyx_L1_error)

    /* "nodes_def.pyx":1685
 *         cdef float[4] quat_c
 *         cdef int quat_i
 *         if len(quat) != 4:             # <<<<<<<<<<<<<<
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (
 *                             "quat", 4, len(quat)))
 */
  }

  /* "nodes_def.pyx":1688
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (
 *                             "quat", 4, len(quat)))
 *         for quat_i in range(4):             # <<<<<<<<<<<<<<
 *             quat_c[quat_i] = quat[quat_i]
 * 
 */
  for (__pyx_t_7 = 0; __pyx_t_7 < 4; __pyx_t_7+=1) {
    __pyx_v_quat_i = __pyx_t_7;

    /* "nodes_def.pyx":1689
 *                             "quat", 4, len(quat)))
 *         for quat_i in range(4):
 *             quat_c[quat_i] = quat[quat_i]             # <<<<<<<<<<<<<<
 * 
 *         return ngl_node_param_set(self.ctx, "quat", quat_c)
 */
    __pyx_t_3 = __Pyx_GetItemInt_Tuple(__pyx_v_quat, __pyx_v_quat_i, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1689, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_8 = __pyx_PyFloat_AsFloat(__pyx_t_3); if (unlikely((__pyx_t_8 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1689, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    (__pyx_v_quat_c[__pyx_v_quat_i]) = __pyx_t_8;
  }

  /* "nodes_def.pyx":1691
 *             quat_c[quat_i] = quat[quat_i]
 * 
 *         return ngl_node_param_set(self.ctx, "quat", quat_c)             # <<<<<<<<<<<<<<
 * 
 *     def set_anchor(self, *anchor):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"quat"), __pyx_v_quat_c)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1691, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":1682
 *             self.set_anim(anim)
 * 
 *     def set_quat(self, *quat):             # <<<<<<<<<<<<<<
 *         cdef float[4] quat_c
 *         cdef int quat_i
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pynodegl.RotateQuat.set_quat", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":1693
 *         return ngl_node_param_set(self.ctx, "quat", quat_c)
 * 
 *     def set_anchor(self, *anchor):             # <<<<<<<<<<<<<<
 *         cdef float[3] anchor_c
 *         cdef int anchor_i
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_10RotateQuat_5set_anchor(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_8pynodegl_10RotateQuat_5set_anchor(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_anchor = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_anchor (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "set_anchor", 0))) return NULL;
  __Pyx_INCREF(__pyx_args);
  __pyx_v_anchor = __pyx_args;
  __pyx_r = __pyx_pf_8pynodegl_10RotateQuat_4set_anchor(((struct __pyx_obj_8pynodegl_RotateQuat *)__pyx_v_self), __pyx_v_anchor);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_anchor);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_10RotateQuat_4set_anchor(struct __pyx_obj_8pynodegl_RotateQuat *__pyx_v_self, PyObject *__pyx_v_anchor) {
  float __pyx_v_anchor_c[3];
  int __pyx_v_anchor_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  Py_UCS4 __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  int __pyx_t_7;
  float __pyx_t_8;
  __Pyx_RefNannySetupContext("set_anchor", 0);

  /* "nodes_def.pyx":1696
 *         cdef float[3] anchor_c
 *         cdef int anchor_i
 *         if len(anchor) != 3:             # <<<<<<<<<<<<<<
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (
 *                             "anchor", 3, len(anchor)))
 */
  __pyx_t_1 = PyTuple_GET_SIZE(__pyx_v_anchor); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1696, __pyx_L1_error)
  __pyx_t_2 = ((__pyx_t_1 != 3) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "nodes_def.pyx":1697
 *         cdef int anchor_i
 *         if len(anchor) != 3:
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (             # <<<<<<<<<<<<<<
 *                             "anchor", 3, len(anchor)))
 *         for anchor_i in range(3):
 */
    __pyx_t_3 = PyTuple_New(5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1697, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = 0;
    __pyx_t_4 = 127;
    __Pyx_INCREF(__pyx_kp_u_anchor_parameter_is_expected_to);
    __pyx_t_1 += 38;
    __Pyx_GIVEREF(__pyx_kp_u_anchor_parameter_is_expected_to);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_kp_u_anchor_parameter_is_expected_to);

    /* "nodes_def.pyx":1698
 *         if len(anchor) != 3:
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (
 *                             "anchor", 3, len(anchor)))             # <<<<<<<<<<<<<<
 *         for anchor_i in range(3):
 *             anchor_c[anchor_i] = anchor[anchor_i]
 */
    __pyx_t_5 = __Pyx_PyUnicode_From_long(3, 0, ' ', 'd'); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1698, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_INCREF(__pyx_kp_u_but_got);
    __pyx_t_1 += 9;
    __Pyx_GIVEREF(__pyx_kp_u_but_got);
    PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_kp_u_but_got);
    __pyx_t_6 = PyTuple_GET_SIZE(__pyx_v_anchor); if (unlikely(__pyx_t_6 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1698, __pyx_L1_error)
    __pyx_t_5 = __Pyx_PyUnicode_From_Py_ssize_t(__pyx_t_6, 0, ' ', 'd'); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1698, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_3, 3, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_INCREF(__pyx_kp_u_values);
    __pyx_t_1 += 7;
    __Pyx_GIVEREF(__pyx_kp_u_values);
    PyTuple_SET_ITEM(__pyx_t_3, 4, __pyx_kp_u_values);

    /* "nodes_def.pyx":1697
 *         cdef int anchor_i
 *         if len(anchor) != 3:
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (             # <<<<<<<<<<<<<<
 *                             "anchor", 3, len(anchor)))
 *         for anchor_i in range(3):
 */
    __pyx_t_5 = __Pyx_PyUnicode_Join(__pyx_t_3, 5, __pyx_t_1, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1697, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1697, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 1697, __pyx_L1_error)

    /* "nodes_def.pyx":1696
 *         cdef float[3] anchor_c
 *         cdef int anchor_i
 *         if len(anchor) != 3:             # <<<<<<<<<<<<<<
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (
 *                             "anchor", 3, len(anchor)))
 */
  }

  /* "nodes_def.pyx":1699
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (
 *                             "anchor", 3, len(anchor)))
 *         for anchor_i in range(3):             # <<<<<<<<<<<<<<
 *             anchor_c[anchor_i] = anchor[anchor_i]
 * 
 */
  for (__pyx_t_7 = 0; __pyx_t_7 < 3; __pyx_t_7+=1) {
    __pyx_v_anchor_i = __pyx_t_7;

    /* "nodes_def.pyx":1700
 *                             "anchor", 3, len(anchor)))
 *         for anchor_i in range(3):
 *             anchor_c[anchor_i] = anchor[anchor_i]             # <<<<<<<<<<<<<<
 * 
 *         return ngl_node_param_set(self.ctx, "anchor", anchor_c)
 */
    __pyx_t_3 = __Pyx_GetItemInt_Tuple(__pyx_v_anchor, __pyx_v_anchor_i, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1700, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_8 = __pyx_PyFloat_AsFloat(__pyx_t_3); if (unlikely((__pyx_t_8 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1700, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    (__pyx_v_anchor_c[__pyx_v_anchor_i]) = __pyx_t_8;
  }

  /* "nodes_def.pyx":1702
 *             anchor_c[anchor_i] = anchor[anchor_i]
 * 
 *         return ngl_node_param_set(self.ctx, "anchor", anchor_c)             # <<<<<<<<<<<<<<
 * 
 *     def set_anim(self, _Node anim):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"anchor"), __pyx_v_anchor_c)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1702, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":1693
 *         return ngl_node_param_set(self.ctx, "quat", quat_c)
 * 
 *     def set_anchor(self, *anchor):             # <<<<<<<<<<<<<<
 *         cdef float[3] anchor_c
 *         cdef int anchor_i
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pynodegl.RotateQuat.set_anchor", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":1704
 *         return ngl_node_param_set(self.ctx, "anchor", anchor_c)
 * 
 *     def set_anim(self, _Node anim):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "anim", anim.ctx)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_10RotateQuat_7set_anim(PyObject *__pyx_v_self, PyObject *__pyx_v_anim); /*proto*/
static PyObject *__pyx_pw_8pynodegl_10RotateQuat_7set_anim(PyObject *__pyx_v_self, PyObject *__pyx_v_anim) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_anim (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_anim), __pyx_ptype_8pynodegl__Node, 1, "anim", 0))) __PYX_ERR(0, 1704, __pyx_L1_error)
  __pyx_r = __pyx_pf_8pynodegl_10RotateQuat_6set_anim(((struct __pyx_obj_8pynodegl_RotateQuat *)__pyx_v_self), ((struct __pyx_obj_8pynodegl__Node *)__pyx_v_anim));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_10RotateQuat_6set_anim(struct __pyx_obj_8pynodegl_RotateQuat *__pyx_v_self, struct __pyx_obj_8pynodegl__Node *__pyx_v_anim) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("set_anim", 0);

  /* "nodes_def.pyx":1705
 * 
 *     def set_anim(self, _Node anim):
 *         return ngl_node_param_set(self.ctx, "anim", anim.ctx)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"anim"), __pyx_v_anim->ctx)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1705, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":1704
 *         return ngl_node_param_set(self.ctx, "anchor", anchor_c)
 * 
 *     def set_anim(self, _Node anim):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "anim", anim.ctx)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.RotateQuat.set_anim", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_10RotateQuat_9__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pynodegl_10RotateQuat_9__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_10RotateQuat_8__reduce_cython__(((struct __pyx_obj_8pynodegl_RotateQuat *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_10RotateQuat_8__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_RotateQuat *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__136, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.RotateQuat.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_10RotateQuat_11__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8pynodegl_10RotateQuat_11__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_10RotateQuat_10__setstate_cython__(((struct __pyx_obj_8pynodegl_RotateQuat *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_10RotateQuat_10__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_RotateQuat *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__137, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.RotateQuat.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":1710
 * cdef class Scale(_Node):
 * 
 *     def __init__(self, _Node child, factors=None, anchor=None, anim=None, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         assert child is not None
 * 
 */

/* Python wrapper */
static int __pyx_pw_8pynodegl_5Scale_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pynodegl_5Scale_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pynodegl__Node *__pyx_v_child = 0;
  PyObject *__pyx_v_factors = 0;
  PyObject *__pyx_v_anchor = 0;
  PyObject *__pyx_v_anim = 0;
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  __pyx_v_kwargs = PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return -1;
  __Pyx_GOTREF(__pyx_v_kwargs);
  if (PyTuple_GET_SIZE(__pyx_args) > 4) {
    __pyx_v_args = PyTuple_GetSlice(__pyx_args, 4, PyTuple_GET_SIZE(__pyx_args));
    if (unlikely(!__pyx_v_args)) {
      __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
      __Pyx_RefNannyFinishContext();
      return -1;
    }
    __Pyx_GOTREF(__pyx_v_args);
  } else {
    __pyx_v_args = __pyx_empty_tuple; __Pyx_INCREF(__pyx_empty_tuple);
  }
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_child,&__pyx_n_s_factors,&__pyx_n_s_anchor,&__pyx_n_s_anim,0};
    PyObject* values[4] = {0,0,0,0};
    values[1] = ((PyObject *)Py_None);
    values[2] = ((PyObject *)Py_None);
    values[3] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        default:
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_child)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_factors);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_anchor);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_anim);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t used_pos_args = (pos_args < 4) ? pos_args : 4;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_kwargs, values, used_pos_args, "__init__") < 0)) __PYX_ERR(0, 1710, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        default:
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        case  0:
        goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_child = ((struct __pyx_obj_8pynodegl__Node *)values[0]);
    __pyx_v_factors = values[1];
    __pyx_v_anchor = values[2];
    __pyx_v_anim = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 1, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1710, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_args); __pyx_v_args = 0;
  __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
  __Pyx_AddTraceback("pynodegl.Scale.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_child), __pyx_ptype_8pynodegl__Node, 1, "child", 0))) __PYX_ERR(0, 1710, __pyx_L1_error)
  __pyx_r = __pyx_pf_8pynodegl_5Scale___init__(((struct __pyx_obj_8pynodegl_Scale *)__pyx_v_self), __pyx_v_child, __pyx_v_factors, __pyx_v_anchor, __pyx_v_anim, __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pynodegl_5Scale___init__(struct __pyx_obj_8pynodegl_Scale *__pyx_v_self, struct __pyx_obj_8pynodegl__Node *__pyx_v_child, PyObject *__pyx_v_factors, PyObject *__pyx_v_anchor, PyObject *__pyx_v_anim, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "nodes_def.pyx":1711
 * 
 *     def __init__(self, _Node child, factors=None, anchor=None, anim=None, *args, **kwargs):
 *         assert child is not None             # <<<<<<<<<<<<<<
 * 
 *         assert self.ctx is NULL
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = (((PyObject *)__pyx_v_child) != Py_None);
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 1711, __pyx_L1_error)
    }
  }
  #endif

  /* "nodes_def.pyx":1713
 *         assert child is not None
 * 
 *         assert self.ctx is NULL             # <<<<<<<<<<<<<<
 *         self.ctx = ngl_node_create(NGL_NODE_SCALE, child.ctx)
 *         if self.ctx is NULL:
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!((__pyx_v_self->__pyx_base.ctx == NULL) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 1713, __pyx_L1_error)
    }
  }
  #endif

  /* "nodes_def.pyx":1714
 * 
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_SCALE, child.ctx)             # <<<<<<<<<<<<<<
 *         if self.ctx is NULL:
 *             raise MemoryError()
 */
  __pyx_v_self->__pyx_base.ctx = ngl_node_create(NGL_NODE_SCALE, __pyx_v_child->ctx);

  /* "nodes_def.pyx":1715
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_SCALE, child.ctx)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         _Node._init_params(self, *args, **kwargs)
 */
  __pyx_t_1 = ((__pyx_v_self->__pyx_base.ctx == NULL) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "nodes_def.pyx":1716
 *         self.ctx = ngl_node_create(NGL_NODE_SCALE, child.ctx)
 *         if self.ctx is NULL:
 *             raise MemoryError()             # <<<<<<<<<<<<<<
 *         _Node._init_params(self, *args, **kwargs)
 * 
 */
    PyErr_NoMemory(); __PYX_ERR(0, 1716, __pyx_L1_error)

    /* "nodes_def.pyx":1715
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_SCALE, child.ctx)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         _Node._init_params(self, *args, **kwargs)
 */
  }

  /* "nodes_def.pyx":1717
 *         if self.ctx is NULL:
 *             raise MemoryError()
 *         _Node._init_params(self, *args, **kwargs)             # <<<<<<<<<<<<<<
 * 
 *         if factors is not None:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_8pynodegl__Node), __pyx_n_s_init_params); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1717, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1717, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_v_self));
  __pyx_t_4 = PyNumber_Add(__pyx_t_3, __pyx_v_args); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1717, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, __pyx_v_kwargs); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1717, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "nodes_def.pyx":1719
 *         _Node._init_params(self, *args, **kwargs)
 * 
 *         if factors is not None:             # <<<<<<<<<<<<<<
 *             self.set_factors(*factors)
 *         if anchor is not None:
 */
  __pyx_t_1 = (__pyx_v_factors != Py_None);
  __pyx_t_5 = (__pyx_t_1 != 0);
  if (__pyx_t_5) {

    /* "nodes_def.pyx":1720
 * 
 *         if factors is not None:
 *             self.set_factors(*factors)             # <<<<<<<<<<<<<<
 *         if anchor is not None:
 *             self.set_anchor(*anchor)
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_factors); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1720, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PySequence_Tuple(__pyx_v_factors); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1720, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1720, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "nodes_def.pyx":1719
 *         _Node._init_params(self, *args, **kwargs)
 * 
 *         if factors is not None:             # <<<<<<<<<<<<<<
 *             self.set_factors(*factors)
 *         if anchor is not None:
 */
  }

  /* "nodes_def.pyx":1721
 *         if factors is not None:
 *             self.set_factors(*factors)
 *         if anchor is not None:             # <<<<<<<<<<<<<<
 *             self.set_anchor(*anchor)
 *         if anim is not None:
 */
  __pyx_t_5 = (__pyx_v_anchor != Py_None);
  __pyx_t_1 = (__pyx_t_5 != 0);
  if (__pyx_t_1) {

    /* "nodes_def.pyx":1722
 *             self.set_factors(*factors)
 *         if anchor is not None:
 *             self.set_anchor(*anchor)             # <<<<<<<<<<<<<<
 *         if anim is not None:
 *             self.set_anim(anim)
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_anchor); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1722, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PySequence_Tuple(__pyx_v_anchor); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1722, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1722, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "nodes_def.pyx":1721
 *         if factors is not None:
 *             self.set_factors(*factors)
 *         if anchor is not None:             # <<<<<<<<<<<<<<
 *             self.set_anchor(*anchor)
 *         if anim is not None:
 */
  }

  /* "nodes_def.pyx":1723
 *         if anchor is not None:
 *             self.set_anchor(*anchor)
 *         if anim is not None:             # <<<<<<<<<<<<<<
 *             self.set_anim(anim)
 * 
 */
  __pyx_t_1 = (__pyx_v_anim != Py_None);
  __pyx_t_5 = (__pyx_t_1 != 0);
  if (__pyx_t_5) {

    /* "nodes_def.pyx":1724
 *             self.set_anchor(*anchor)
 *         if anim is not None:
 *             self.set_anim(anim)             # <<<<<<<<<<<<<<
 * 
 *     def set_factors(self, *factors):
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_anim); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1724, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_2, __pyx_v_anim) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_anim);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1724, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "nodes_def.pyx":1723
 *         if anchor is not None:
 *             self.set_anchor(*anchor)
 *         if anim is not None:             # <<<<<<<<<<<<<<
 *             self.set_anim(anim)
 * 
 */
  }

  /* "nodes_def.pyx":1710
 * cdef class Scale(_Node):
 * 
 *     def __init__(self, _Node child, factors=None, anchor=None, anim=None, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         assert child is not None
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pynodegl.Scale.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":1726
 *             self.set_anim(anim)
 * 
 *     def set_factors(self, *factors):             # <<<<<<<<<<<<<<
 *         cdef float[3] factors_c
 *         cdef int factors_i
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_5Scale_3set_factors(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_8pynodegl_5Scale_3set_factors(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_factors = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_factors (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "set_factors", 0))) return NULL;
  __Pyx_INCREF(__pyx_args);
  __pyx_v_factors = __pyx_args;
  __pyx_r = __pyx_pf_8pynodegl_5Scale_2set_factors(((struct __pyx_obj_8pynodegl_Scale *)__pyx_v_self), __pyx_v_factors);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_factors);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_5Scale_2set_factors(struct __pyx_obj_8pynodegl_Scale *__pyx_v_self, PyObject *__pyx_v_factors) {
  float __pyx_v_factors_c[3];
  int __pyx_v_factors_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  Py_UCS4 __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  int __pyx_t_7;
  float __pyx_t_8;
  __Pyx_RefNannySetupContext("set_factors", 0);

  /* "nodes_def.pyx":1729
 *         cdef float[3] factors_c
 *         cdef int factors_i
 *         if len(factors) != 3:             # <<<<<<<<<<<<<<
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (
 *                             "factors", 3, len(factors)))
 */
  __pyx_t_1 = PyTuple_GET_SIZE(__pyx_v_factors); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1729, __pyx_L1_error)
  __pyx_t_2 = ((__pyx_t_1 != 3) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "nodes_def.pyx":1730
 *         cdef int factors_i
 *         if len(factors) != 3:
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (             # <<<<<<<<<<<<<<
 *                             "factors", 3, len(factors)))
 *         for factors_i in range(3):
 */
    __pyx_t_3 = PyTuple_New(5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1730, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = 0;
    __pyx_t_4 = 127;
    __Pyx_INCREF(__pyx_kp_u_factors_parameter_is_expected_to);
    __pyx_t_1 += 39;
    __Pyx_GIVEREF(__pyx_kp_u_factors_parameter_is_expected_to);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_kp_u_factors_parameter_is_expected_to);

    /* "nodes_def.pyx":1731
 *         if len(factors) != 3:
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (
 *                             "factors", 3, len(factors)))             # <<<<<<<<<<<<<<
 *         for factors_i in range(3):
 *             factors_c[factors_i] = factors[factors_i]
 */
    __pyx_t_5 = __Pyx_PyUnicode_From_long(3, 0, ' ', 'd'); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1731, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_INCREF(__pyx_kp_u_but_got);
    __pyx_t_1 += 9;
    __Pyx_GIVEREF(__pyx_kp_u_but_got);
    PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_kp_u_but_got);
    __pyx_t_6 = PyTuple_GET_SIZE(__pyx_v_factors); if (unlikely(__pyx_t_6 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1731, __pyx_L1_error)
    __pyx_t_5 = __Pyx_PyUnicode_From_Py_ssize_t(__pyx_t_6, 0, ' ', 'd'); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1731, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_3, 3, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_INCREF(__pyx_kp_u_values);
    __pyx_t_1 += 7;
    __Pyx_GIVEREF(__pyx_kp_u_values);
    PyTuple_SET_ITEM(__pyx_t_3, 4, __pyx_kp_u_values);

    /* "nodes_def.pyx":1730
 *         cdef int factors_i
 *         if len(factors) != 3:
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (             # <<<<<<<<<<<<<<
 *                             "factors", 3, len(factors)))
 *         for factors_i in range(3):
 */
    __pyx_t_5 = __Pyx_PyUnicode_Join(__pyx_t_3, 5, __pyx_t_1, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1730, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1730, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 1730, __pyx_L1_error)

    /* "nodes_def.pyx":1729
 *         cdef float[3] factors_c
 *         cdef int factors_i
 *         if len(factors) != 3:             # <<<<<<<<<<<<<<
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (
 *                             "factors", 3, len(factors)))
 */
  }

  /* "nodes_def.pyx":1732
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (
 *                             "factors", 3, len(factors)))
 *         for factors_i in range(3):             # <<<<<<<<<<<<<<
 *             factors_c[factors_i] = factors[factors_i]
 * 
 */
  for (__pyx_t_7 = 0; __pyx_t_7 < 3; __pyx_t_7+=1) {
    __pyx_v_factors_i = __pyx_t_7;

    /* "nodes_def.pyx":1733
 *                             "factors", 3, len(factors)))
 *         for factors_i in range(3):
 *             factors_c[factors_i] = factors[factors_i]             # <<<<<<<<<<<<<<
 * 
 *         return ngl_node_param_set(self.ctx, "factors", factors_c)
 */
    __pyx_t_3 = __Pyx_GetItemInt_Tuple(__pyx_v_factors, __pyx_v_factors_i, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1733, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_8 = __pyx_PyFloat_AsFloat(__pyx_t_3); if (unlikely((__pyx_t_8 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1733, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    (__pyx_v_factors_c[__pyx_v_factors_i]) = __pyx_t_8;
  }

  /* "nodes_def.pyx":1735
 *             factors_c[factors_i] = factors[factors_i]
 * 
 *         return ngl_node_param_set(self.ctx, "factors", factors_c)             # <<<<<<<<<<<<<<
 * 
 *     def set_anchor(self, *anchor):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"factors"), __pyx_v_factors_c)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1735, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":1726
 *             self.set_anim(anim)
 * 
 *     def set_factors(self, *factors):             # <<<<<<<<<<<<<<
 *         cdef float[3] factors_c
 *         cdef int factors_i
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pynodegl.Scale.set_factors", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":1737
 *         return ngl_node_param_set(self.ctx, "factors", factors_c)
 * 
 *     def set_anchor(self, *anchor):             # <<<<<<<<<<<<<<
 *         cdef float[3] anchor_c
 *         cdef int anchor_i
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_5Scale_5set_anchor(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_8pynodegl_5Scale_5set_anchor(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_anchor = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_anchor (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "set_anchor", 0))) return NULL;
  __Pyx_INCREF(__pyx_args);
  __pyx_v_anchor = __pyx_args;
  __pyx_r = __pyx_pf_8pynodegl_5Scale_4set_anchor(((struct __pyx_obj_8pynodegl_Scale *)__pyx_v_self), __pyx_v_anchor);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_anchor);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_5Scale_4set_anchor(struct __pyx_obj_8pynodegl_Scale *__pyx_v_self, PyObject *__pyx_v_anchor) {
  float __pyx_v_anchor_c[3];
  int __pyx_v_anchor_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  Py_UCS4 __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  int __pyx_t_7;
  float __pyx_t_8;
  __Pyx_RefNannySetupContext("set_anchor", 0);

  /* "nodes_def.pyx":1740
 *         cdef float[3] anchor_c
 *         cdef int anchor_i
 *         if len(anchor) != 3:             # <<<<<<<<<<<<<<
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (
 *                             "anchor", 3, len(anchor)))
 */
  __pyx_t_1 = PyTuple_GET_SIZE(__pyx_v_anchor); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1740, __pyx_L1_error)
  __pyx_t_2 = ((__pyx_t_1 != 3) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "nodes_def.pyx":1741
 *         cdef int anchor_i
 *         if len(anchor) != 3:
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (             # <<<<<<<<<<<<<<
 *                             "anchor", 3, len(anchor)))
 *         for anchor_i in range(3):
 */
    __pyx_t_3 = PyTuple_New(5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1741, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = 0;
    __pyx_t_4 = 127;
    __Pyx_INCREF(__pyx_kp_u_anchor_parameter_is_expected_to);
    __pyx_t_1 += 38;
    __Pyx_GIVEREF(__pyx_kp_u_anchor_parameter_is_expected_to);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_kp_u_anchor_parameter_is_expected_to);

    /* "nodes_def.pyx":1742
 *         if len(anchor) != 3:
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (
 *                             "anchor", 3, len(anchor)))             # <<<<<<<<<<<<<<
 *         for anchor_i in range(3):
 *             anchor_c[anchor_i] = anchor[anchor_i]
 */
    __pyx_t_5 = __Pyx_PyUnicode_From_long(3, 0, ' ', 'd'); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1742, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_INCREF(__pyx_kp_u_but_got);
    __pyx_t_1 += 9;
    __Pyx_GIVEREF(__pyx_kp_u_but_got);
    PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_kp_u_but_got);
    __pyx_t_6 = PyTuple_GET_SIZE(__pyx_v_anchor); if (unlikely(__pyx_t_6 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1742, __pyx_L1_error)
    __pyx_t_5 = __Pyx_PyUnicode_From_Py_ssize_t(__pyx_t_6, 0, ' ', 'd'); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1742, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_3, 3, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_INCREF(__pyx_kp_u_values);
    __pyx_t_1 += 7;
    __Pyx_GIVEREF(__pyx_kp_u_values);
    PyTuple_SET_ITEM(__pyx_t_3, 4, __pyx_kp_u_values);

    /* "nodes_def.pyx":1741
 *         cdef int anchor_i
 *         if len(anchor) != 3:
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (             # <<<<<<<<<<<<<<
 *                             "anchor", 3, len(anchor)))
 *         for anchor_i in range(3):
 */
    __pyx_t_5 = __Pyx_PyUnicode_Join(__pyx_t_3, 5, __pyx_t_1, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1741, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1741, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 1741, __pyx_L1_error)

    /* "nodes_def.pyx":1740
 *         cdef float[3] anchor_c
 *         cdef int anchor_i
 *         if len(anchor) != 3:             # <<<<<<<<<<<<<<
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (
 *                             "anchor", 3, len(anchor)))
 */
  }

  /* "nodes_def.pyx":1743
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (
 *                             "anchor", 3, len(anchor)))
 *         for anchor_i in range(3):             # <<<<<<<<<<<<<<
 *             anchor_c[anchor_i] = anchor[anchor_i]
 * 
 */
  for (__pyx_t_7 = 0; __pyx_t_7 < 3; __pyx_t_7+=1) {
    __pyx_v_anchor_i = __pyx_t_7;

    /* "nodes_def.pyx":1744
 *                             "anchor", 3, len(anchor)))
 *         for anchor_i in range(3):
 *             anchor_c[anchor_i] = anchor[anchor_i]             # <<<<<<<<<<<<<<
 * 
 *         return ngl_node_param_set(self.ctx, "anchor", anchor_c)
 */
    __pyx_t_3 = __Pyx_GetItemInt_Tuple(__pyx_v_anchor, __pyx_v_anchor_i, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1744, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_8 = __pyx_PyFloat_AsFloat(__pyx_t_3); if (unlikely((__pyx_t_8 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1744, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    (__pyx_v_anchor_c[__pyx_v_anchor_i]) = __pyx_t_8;
  }

  /* "nodes_def.pyx":1746
 *             anchor_c[anchor_i] = anchor[anchor_i]
 * 
 *         return ngl_node_param_set(self.ctx, "anchor", anchor_c)             # <<<<<<<<<<<<<<
 * 
 *     def set_anim(self, _Node anim):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"anchor"), __pyx_v_anchor_c)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1746, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":1737
 *         return ngl_node_param_set(self.ctx, "factors", factors_c)
 * 
 *     def set_anchor(self, *anchor):             # <<<<<<<<<<<<<<
 *         cdef float[3] anchor_c
 *         cdef int anchor_i
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pynodegl.Scale.set_anchor", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":1748
 *         return ngl_node_param_set(self.ctx, "anchor", anchor_c)
 * 
 *     def set_anim(self, _Node anim):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "anim", anim.ctx)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_5Scale_7set_anim(PyObject *__pyx_v_self, PyObject *__pyx_v_anim); /*proto*/
static PyObject *__pyx_pw_8pynodegl_5Scale_7set_anim(PyObject *__pyx_v_self, PyObject *__pyx_v_anim) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_anim (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_anim), __pyx_ptype_8pynodegl__Node, 1, "anim", 0))) __PYX_ERR(0, 1748, __pyx_L1_error)
  __pyx_r = __pyx_pf_8pynodegl_5Scale_6set_anim(((struct __pyx_obj_8pynodegl_Scale *)__pyx_v_self), ((struct __pyx_obj_8pynodegl__Node *)__pyx_v_anim));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_5Scale_6set_anim(struct __pyx_obj_8pynodegl_Scale *__pyx_v_self, struct __pyx_obj_8pynodegl__Node *__pyx_v_anim) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("set_anim", 0);

  /* "nodes_def.pyx":1749
 * 
 *     def set_anim(self, _Node anim):
 *         return ngl_node_param_set(self.ctx, "anim", anim.ctx)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"anim"), __pyx_v_anim->ctx)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1749, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":1748
 *         return ngl_node_param_set(self.ctx, "anchor", anchor_c)
 * 
 *     def set_anim(self, _Node anim):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "anim", anim.ctx)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.Scale.set_anim", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_5Scale_9__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pynodegl_5Scale_9__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_5Scale_8__reduce_cython__(((struct __pyx_obj_8pynodegl_Scale *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_5Scale_8__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_Scale *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__138, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.Scale.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_5Scale_11__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8pynodegl_5Scale_11__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_5Scale_10__setstate_cython__(((struct __pyx_obj_8pynodegl_Scale *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_5Scale_10__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_Scale *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__139, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.Scale.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":1754
 * cdef class Text(_Node):
 * 
 *     def __init__(self, const char *text, fg_color=None, bg_color=None, box_corner=None, box_width=None, box_height=None, padding=None, font_scale=None, valign=None, halign=None, aspect_ratio=None, min_filter=None, mag_filter=None, mipmap_filter=None, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_TEXT, text)
 */

/* Python wrapper */
static int __pyx_pw_8pynodegl_4Text_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pynodegl_4Text_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  char const *__pyx_v_text;
  PyObject *__pyx_v_fg_color = 0;
  PyObject *__pyx_v_bg_color = 0;
  PyObject *__pyx_v_box_corner = 0;
  PyObject *__pyx_v_box_width = 0;
  PyObject *__pyx_v_box_height = 0;
  PyObject *__pyx_v_padding = 0;
  PyObject *__pyx_v_font_scale = 0;
  PyObject *__pyx_v_valign = 0;
  PyObject *__pyx_v_halign = 0;
  PyObject *__pyx_v_aspect_ratio = 0;
  PyObject *__pyx_v_min_filter = 0;
  PyObject *__pyx_v_mag_filter = 0;
  PyObject *__pyx_v_mipmap_filter = 0;
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  __pyx_v_kwargs = PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return -1;
  __Pyx_GOTREF(__pyx_v_kwargs);
  if (PyTuple_GET_SIZE(__pyx_args) > 14) {
    __pyx_v_args = PyTuple_GetSlice(__pyx_args, 14, PyTuple_GET_SIZE(__pyx_args));
    if (unlikely(!__pyx_v_args)) {
      __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
      __Pyx_RefNannyFinishContext();
      return -1;
    }
    __Pyx_GOTREF(__pyx_v_args);
  } else {
    __pyx_v_args = __pyx_empty_tuple; __Pyx_INCREF(__pyx_empty_tuple);
  }
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_text,&__pyx_n_s_fg_color,&__pyx_n_s_bg_color,&__pyx_n_s_box_corner,&__pyx_n_s_box_width,&__pyx_n_s_box_height,&__pyx_n_s_padding,&__pyx_n_s_font_scale,&__pyx_n_s_valign,&__pyx_n_s_halign,&__pyx_n_s_aspect_ratio,&__pyx_n_s_min_filter,&__pyx_n_s_mag_filter,&__pyx_n_s_mipmap_filter,0};
    PyObject* values[14] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    values[1] = ((PyObject *)Py_None);
    values[2] = ((PyObject *)Py_None);
    values[3] = ((PyObject *)Py_None);
    values[4] = ((PyObject *)Py_None);
    values[5] = ((PyObject *)Py_None);
    values[6] = ((PyObject *)Py_None);
    values[7] = ((PyObject *)Py_None);
    values[8] = ((PyObject *)Py_None);
    values[9] = ((PyObject *)Py_None);
    values[10] = ((PyObject *)Py_None);
    values[11] = ((PyObject *)Py_None);
    values[12] = ((PyObject *)Py_None);
    values[13] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        default:
        case 14: values[13] = PyTuple_GET_ITEM(__pyx_args, 13);
        CYTHON_FALLTHROUGH;
        case 13: values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
        CYTHON_FALLTHROUGH;
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        CYTHON_FALLTHROUGH;
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        CYTHON_FALLTHROUGH;
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_text)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_fg_color);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_bg_color);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_box_corner);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_box_width);
          if (value) { values[4] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_box_height);
          if (value) { values[5] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_padding);
          if (value) { values[6] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_font_scale);
          if (value) { values[7] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_valign);
          if (value) { values[8] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  9:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_halign);
          if (value) { values[9] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case 10:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_aspect_ratio);
          if (value) { values[10] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case 11:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_min_filter);
          if (value) { values[11] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case 12:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_mag_filter);
          if (value) { values[12] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case 13:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_mipmap_filter);
          if (value) { values[13] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t used_pos_args = (pos_args < 14) ? pos_args : 14;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_kwargs, values, used_pos_args, "__init__") < 0)) __PYX_ERR(0, 1754, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        default:
        case 14: values[13] = PyTuple_GET_ITEM(__pyx_args, 13);
        CYTHON_FALLTHROUGH;
        case 13: values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
        CYTHON_FALLTHROUGH;
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        CYTHON_FALLTHROUGH;
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        CYTHON_FALLTHROUGH;
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        case  0:
        goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_text = __Pyx_PyObject_AsString(values[0]); if (unlikely((!__pyx_v_text) && PyErr_Occurred())) __PYX_ERR(0, 1754, __pyx_L3_error)
    __pyx_v_fg_color = values[1];
    __pyx_v_bg_color = values[2];
    __pyx_v_box_corner = values[3];
    __pyx_v_box_width = values[4];
    __pyx_v_box_height = values[5];
    __pyx_v_padding = values[6];
    __pyx_v_font_scale = values[7];
    __pyx_v_valign = values[8];
    __pyx_v_halign = values[9];
    __pyx_v_aspect_ratio = values[10];
    __pyx_v_min_filter = values[11];
    __pyx_v_mag_filter = values[12];
    __pyx_v_mipmap_filter = values[13];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 1, 14, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1754, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_args); __pyx_v_args = 0;
  __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
  __Pyx_AddTraceback("pynodegl.Text.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pynodegl_4Text___init__(((struct __pyx_obj_8pynodegl_Text *)__pyx_v_self), __pyx_v_text, __pyx_v_fg_color, __pyx_v_bg_color, __pyx_v_box_corner, __pyx_v_box_width, __pyx_v_box_height, __pyx_v_padding, __pyx_v_font_scale, __pyx_v_valign, __pyx_v_halign, __pyx_v_aspect_ratio, __pyx_v_min_filter, __pyx_v_mag_filter, __pyx_v_mipmap_filter, __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pynodegl_4Text___init__(struct __pyx_obj_8pynodegl_Text *__pyx_v_self, char const *__pyx_v_text, PyObject *__pyx_v_fg_color, PyObject *__pyx_v_bg_color, PyObject *__pyx_v_box_corner, PyObject *__pyx_v_box_width, PyObject *__pyx_v_box_height, PyObject *__pyx_v_padding, PyObject *__pyx_v_font_scale, PyObject *__pyx_v_valign, PyObject *__pyx_v_halign, PyObject *__pyx_v_aspect_ratio, PyObject *__pyx_v_min_filter, PyObject *__pyx_v_mag_filter, PyObject *__pyx_v_mipmap_filter, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "nodes_def.pyx":1755
 * 
 *     def __init__(self, const char *text, fg_color=None, bg_color=None, box_corner=None, box_width=None, box_height=None, padding=None, font_scale=None, valign=None, halign=None, aspect_ratio=None, min_filter=None, mag_filter=None, mipmap_filter=None, *args, **kwargs):
 *         assert self.ctx is NULL             # <<<<<<<<<<<<<<
 *         self.ctx = ngl_node_create(NGL_NODE_TEXT, text)
 *         if self.ctx is NULL:
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!((__pyx_v_self->__pyx_base.ctx == NULL) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 1755, __pyx_L1_error)
    }
  }
  #endif

  /* "nodes_def.pyx":1756
 *     def __init__(self, const char *text, fg_color=None, bg_color=None, box_corner=None, box_width=None, box_height=None, padding=None, font_scale=None, valign=None, halign=None, aspect_ratio=None, min_filter=None, mag_filter=None, mipmap_filter=None, *args, **kwargs):
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_TEXT, text)             # <<<<<<<<<<<<<<
 *         if self.ctx is NULL:
 *             raise MemoryError()
 */
  __pyx_v_self->__pyx_base.ctx = ngl_node_create(NGL_NODE_TEXT, __pyx_v_text);

  /* "nodes_def.pyx":1757
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_TEXT, text)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         _Node._init_params(self, *args, **kwargs)
 */
  __pyx_t_1 = ((__pyx_v_self->__pyx_base.ctx == NULL) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "nodes_def.pyx":1758
 *         self.ctx = ngl_node_create(NGL_NODE_TEXT, text)
 *         if self.ctx is NULL:
 *             raise MemoryError()             # <<<<<<<<<<<<<<
 *         _Node._init_params(self, *args, **kwargs)
 * 
 */
    PyErr_NoMemory(); __PYX_ERR(0, 1758, __pyx_L1_error)

    /* "nodes_def.pyx":1757
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_TEXT, text)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         _Node._init_params(self, *args, **kwargs)
 */
  }

  /* "nodes_def.pyx":1759
 *         if self.ctx is NULL:
 *             raise MemoryError()
 *         _Node._init_params(self, *args, **kwargs)             # <<<<<<<<<<<<<<
 * 
 *         if fg_color is not None:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_8pynodegl__Node), __pyx_n_s_init_params); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1759, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1759, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_v_self));
  __pyx_t_4 = PyNumber_Add(__pyx_t_3, __pyx_v_args); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1759, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, __pyx_v_kwargs); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1759, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "nodes_def.pyx":1761
 *         _Node._init_params(self, *args, **kwargs)
 * 
 *         if fg_color is not None:             # <<<<<<<<<<<<<<
 *             self.set_fg_color(*fg_color)
 *         if bg_color is not None:
 */
  __pyx_t_1 = (__pyx_v_fg_color != Py_None);
  __pyx_t_5 = (__pyx_t_1 != 0);
  if (__pyx_t_5) {

    /* "nodes_def.pyx":1762
 * 
 *         if fg_color is not None:
 *             self.set_fg_color(*fg_color)             # <<<<<<<<<<<<<<
 *         if bg_color is not None:
 *             self.set_bg_color(*bg_color)
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_fg_color); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1762, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PySequence_Tuple(__pyx_v_fg_color); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1762, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1762, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "nodes_def.pyx":1761
 *         _Node._init_params(self, *args, **kwargs)
 * 
 *         if fg_color is not None:             # <<<<<<<<<<<<<<
 *             self.set_fg_color(*fg_color)
 *         if bg_color is not None:
 */
  }

  /* "nodes_def.pyx":1763
 *         if fg_color is not None:
 *             self.set_fg_color(*fg_color)
 *         if bg_color is not None:             # <<<<<<<<<<<<<<
 *             self.set_bg_color(*bg_color)
 *         if box_corner is not None:
 */
  __pyx_t_5 = (__pyx_v_bg_color != Py_None);
  __pyx_t_1 = (__pyx_t_5 != 0);
  if (__pyx_t_1) {

    /* "nodes_def.pyx":1764
 *             self.set_fg_color(*fg_color)
 *         if bg_color is not None:
 *             self.set_bg_color(*bg_color)             # <<<<<<<<<<<<<<
 *         if box_corner is not None:
 *             self.set_box_corner(*box_corner)
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_bg_color); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1764, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PySequence_Tuple(__pyx_v_bg_color); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1764, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1764, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "nodes_def.pyx":1763
 *         if fg_color is not None:
 *             self.set_fg_color(*fg_color)
 *         if bg_color is not None:             # <<<<<<<<<<<<<<
 *             self.set_bg_color(*bg_color)
 *         if box_corner is not None:
 */
  }

  /* "nodes_def.pyx":1765
 *         if bg_color is not None:
 *             self.set_bg_color(*bg_color)
 *         if box_corner is not None:             # <<<<<<<<<<<<<<
 *             self.set_box_corner(*box_corner)
 *         if box_width is not None:
 */
  __pyx_t_1 = (__pyx_v_box_corner != Py_None);
  __pyx_t_5 = (__pyx_t_1 != 0);
  if (__pyx_t_5) {

    /* "nodes_def.pyx":1766
 *             self.set_bg_color(*bg_color)
 *         if box_corner is not None:
 *             self.set_box_corner(*box_corner)             # <<<<<<<<<<<<<<
 *         if box_width is not None:
 *             self.set_box_width(*box_width)
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_box_corner); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1766, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PySequence_Tuple(__pyx_v_box_corner); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1766, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1766, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "nodes_def.pyx":1765
 *         if bg_color is not None:
 *             self.set_bg_color(*bg_color)
 *         if box_corner is not None:             # <<<<<<<<<<<<<<
 *             self.set_box_corner(*box_corner)
 *         if box_width is not None:
 */
  }

  /* "nodes_def.pyx":1767
 *         if box_corner is not None:
 *             self.set_box_corner(*box_corner)
 *         if box_width is not None:             # <<<<<<<<<<<<<<
 *             self.set_box_width(*box_width)
 *         if box_height is not None:
 */
  __pyx_t_5 = (__pyx_v_box_width != Py_None);
  __pyx_t_1 = (__pyx_t_5 != 0);
  if (__pyx_t_1) {

    /* "nodes_def.pyx":1768
 *             self.set_box_corner(*box_corner)
 *         if box_width is not None:
 *             self.set_box_width(*box_width)             # <<<<<<<<<<<<<<
 *         if box_height is not None:
 *             self.set_box_height(*box_height)
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_box_width); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1768, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PySequence_Tuple(__pyx_v_box_width); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1768, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1768, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "nodes_def.pyx":1767
 *         if box_corner is not None:
 *             self.set_box_corner(*box_corner)
 *         if box_width is not None:             # <<<<<<<<<<<<<<
 *             self.set_box_width(*box_width)
 *         if box_height is not None:
 */
  }

  /* "nodes_def.pyx":1769
 *         if box_width is not None:
 *             self.set_box_width(*box_width)
 *         if box_height is not None:             # <<<<<<<<<<<<<<
 *             self.set_box_height(*box_height)
 *         if padding is not None:
 */
  __pyx_t_1 = (__pyx_v_box_height != Py_None);
  __pyx_t_5 = (__pyx_t_1 != 0);
  if (__pyx_t_5) {

    /* "nodes_def.pyx":1770
 *             self.set_box_width(*box_width)
 *         if box_height is not None:
 *             self.set_box_height(*box_height)             # <<<<<<<<<<<<<<
 *         if padding is not None:
 *             self.set_padding(padding)
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_box_height); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1770, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PySequence_Tuple(__pyx_v_box_height); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1770, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1770, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "nodes_def.pyx":1769
 *         if box_width is not None:
 *             self.set_box_width(*box_width)
 *         if box_height is not None:             # <<<<<<<<<<<<<<
 *             self.set_box_height(*box_height)
 *         if padding is not None:
 */
  }

  /* "nodes_def.pyx":1771
 *         if box_height is not None:
 *             self.set_box_height(*box_height)
 *         if padding is not None:             # <<<<<<<<<<<<<<
 *             self.set_padding(padding)
 *         if font_scale is not None:
 */
  __pyx_t_5 = (__pyx_v_padding != Py_None);
  __pyx_t_1 = (__pyx_t_5 != 0);
  if (__pyx_t_1) {

    /* "nodes_def.pyx":1772
 *             self.set_box_height(*box_height)
 *         if padding is not None:
 *             self.set_padding(padding)             # <<<<<<<<<<<<<<
 *         if font_scale is not None:
 *             self.set_font_scale(font_scale)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_padding); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1772, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_2 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_3, __pyx_v_padding) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_padding);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1772, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "nodes_def.pyx":1771
 *         if box_height is not None:
 *             self.set_box_height(*box_height)
 *         if padding is not None:             # <<<<<<<<<<<<<<
 *             self.set_padding(padding)
 *         if font_scale is not None:
 */
  }

  /* "nodes_def.pyx":1773
 *         if padding is not None:
 *             self.set_padding(padding)
 *         if font_scale is not None:             # <<<<<<<<<<<<<<
 *             self.set_font_scale(font_scale)
 *         if valign is not None:
 */
  __pyx_t_1 = (__pyx_v_font_scale != Py_None);
  __pyx_t_5 = (__pyx_t_1 != 0);
  if (__pyx_t_5) {

    /* "nodes_def.pyx":1774
 *             self.set_padding(padding)
 *         if font_scale is not None:
 *             self.set_font_scale(font_scale)             # <<<<<<<<<<<<<<
 *         if valign is not None:
 *             self.set_valign(valign)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_font_scale); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1774, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_2 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_3, __pyx_v_font_scale) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_font_scale);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1774, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "nodes_def.pyx":1773
 *         if padding is not None:
 *             self.set_padding(padding)
 *         if font_scale is not None:             # <<<<<<<<<<<<<<
 *             self.set_font_scale(font_scale)
 *         if valign is not None:
 */
  }

  /* "nodes_def.pyx":1775
 *         if font_scale is not None:
 *             self.set_font_scale(font_scale)
 *         if valign is not None:             # <<<<<<<<<<<<<<
 *             self.set_valign(valign)
 *         if halign is not None:
 */
  __pyx_t_5 = (__pyx_v_valign != Py_None);
  __pyx_t_1 = (__pyx_t_5 != 0);
  if (__pyx_t_1) {

    /* "nodes_def.pyx":1776
 *             self.set_font_scale(font_scale)
 *         if valign is not None:
 *             self.set_valign(valign)             # <<<<<<<<<<<<<<
 *         if halign is not None:
 *             self.set_halign(halign)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_valign); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1776, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_2 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_3, __pyx_v_valign) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_valign);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1776, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "nodes_def.pyx":1775
 *         if font_scale is not None:
 *             self.set_font_scale(font_scale)
 *         if valign is not None:             # <<<<<<<<<<<<<<
 *             self.set_valign(valign)
 *         if halign is not None:
 */
  }

  /* "nodes_def.pyx":1777
 *         if valign is not None:
 *             self.set_valign(valign)
 *         if halign is not None:             # <<<<<<<<<<<<<<
 *             self.set_halign(halign)
 *         if aspect_ratio is not None:
 */
  __pyx_t_1 = (__pyx_v_halign != Py_None);
  __pyx_t_5 = (__pyx_t_1 != 0);
  if (__pyx_t_5) {

    /* "nodes_def.pyx":1778
 *             self.set_valign(valign)
 *         if halign is not None:
 *             self.set_halign(halign)             # <<<<<<<<<<<<<<
 *         if aspect_ratio is not None:
 *             self.set_aspect_ratio(aspect_ratio)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_halign); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1778, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_2 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_3, __pyx_v_halign) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_halign);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1778, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "nodes_def.pyx":1777
 *         if valign is not None:
 *             self.set_valign(valign)
 *         if halign is not None:             # <<<<<<<<<<<<<<
 *             self.set_halign(halign)
 *         if aspect_ratio is not None:
 */
  }

  /* "nodes_def.pyx":1779
 *         if halign is not None:
 *             self.set_halign(halign)
 *         if aspect_ratio is not None:             # <<<<<<<<<<<<<<
 *             self.set_aspect_ratio(aspect_ratio)
 *         if min_filter is not None:
 */
  __pyx_t_5 = (__pyx_v_aspect_ratio != Py_None);
  __pyx_t_1 = (__pyx_t_5 != 0);
  if (__pyx_t_1) {

    /* "nodes_def.pyx":1780
 *             self.set_halign(halign)
 *         if aspect_ratio is not None:
 *             self.set_aspect_ratio(aspect_ratio)             # <<<<<<<<<<<<<<
 *         if min_filter is not None:
 *             self.set_min_filter(min_filter)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_aspect_ratio); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1780, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_2 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_3, __pyx_v_aspect_ratio) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_aspect_ratio);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1780, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "nodes_def.pyx":1779
 *         if halign is not None:
 *             self.set_halign(halign)
 *         if aspect_ratio is not None:             # <<<<<<<<<<<<<<
 *             self.set_aspect_ratio(aspect_ratio)
 *         if min_filter is not None:
 */
  }

  /* "nodes_def.pyx":1781
 *         if aspect_ratio is not None:
 *             self.set_aspect_ratio(aspect_ratio)
 *         if min_filter is not None:             # <<<<<<<<<<<<<<
 *             self.set_min_filter(min_filter)
 *         if mag_filter is not None:
 */
  __pyx_t_1 = (__pyx_v_min_filter != Py_None);
  __pyx_t_5 = (__pyx_t_1 != 0);
  if (__pyx_t_5) {

    /* "nodes_def.pyx":1782
 *             self.set_aspect_ratio(aspect_ratio)
 *         if min_filter is not None:
 *             self.set_min_filter(min_filter)             # <<<<<<<<<<<<<<
 *         if mag_filter is not None:
 *             self.set_mag_filter(mag_filter)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_min_filter); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1782, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_2 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_3, __pyx_v_min_filter) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_min_filter);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1782, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "nodes_def.pyx":1781
 *         if aspect_ratio is not None:
 *             self.set_aspect_ratio(aspect_ratio)
 *         if min_filter is not None:             # <<<<<<<<<<<<<<
 *             self.set_min_filter(min_filter)
 *         if mag_filter is not None:
 */
  }

  /* "nodes_def.pyx":1783
 *         if min_filter is not None:
 *             self.set_min_filter(min_filter)
 *         if mag_filter is not None:             # <<<<<<<<<<<<<<
 *             self.set_mag_filter(mag_filter)
 *         if mipmap_filter is not None:
 */
  __pyx_t_5 = (__pyx_v_mag_filter != Py_None);
  __pyx_t_1 = (__pyx_t_5 != 0);
  if (__pyx_t_1) {

    /* "nodes_def.pyx":1784
 *             self.set_min_filter(min_filter)
 *         if mag_filter is not None:
 *             self.set_mag_filter(mag_filter)             # <<<<<<<<<<<<<<
 *         if mipmap_filter is not None:
 *             self.set_mipmap_filter(mipmap_filter)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_mag_filter); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1784, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_2 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_3, __pyx_v_mag_filter) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_mag_filter);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1784, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "nodes_def.pyx":1783
 *         if min_filter is not None:
 *             self.set_min_filter(min_filter)
 *         if mag_filter is not None:             # <<<<<<<<<<<<<<
 *             self.set_mag_filter(mag_filter)
 *         if mipmap_filter is not None:
 */
  }

  /* "nodes_def.pyx":1785
 *         if mag_filter is not None:
 *             self.set_mag_filter(mag_filter)
 *         if mipmap_filter is not None:             # <<<<<<<<<<<<<<
 *             self.set_mipmap_filter(mipmap_filter)
 * 
 */
  __pyx_t_1 = (__pyx_v_mipmap_filter != Py_None);
  __pyx_t_5 = (__pyx_t_1 != 0);
  if (__pyx_t_5) {

    /* "nodes_def.pyx":1786
 *             self.set_mag_filter(mag_filter)
 *         if mipmap_filter is not None:
 *             self.set_mipmap_filter(mipmap_filter)             # <<<<<<<<<<<<<<
 * 
 *     def set_fg_color(self, *fg_color):
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_mipmap_filter); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1786, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_2 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_3, __pyx_v_mipmap_filter) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_mipmap_filter);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1786, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "nodes_def.pyx":1785
 *         if mag_filter is not None:
 *             self.set_mag_filter(mag_filter)
 *         if mipmap_filter is not None:             # <<<<<<<<<<<<<<
 *             self.set_mipmap_filter(mipmap_filter)
 * 
 */
  }

  /* "nodes_def.pyx":1754
 * cdef class Text(_Node):
 * 
 *     def __init__(self, const char *text, fg_color=None, bg_color=None, box_corner=None, box_width=None, box_height=None, padding=None, font_scale=None, valign=None, halign=None, aspect_ratio=None, min_filter=None, mag_filter=None, mipmap_filter=None, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_TEXT, text)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pynodegl.Text.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":1788
 *             self.set_mipmap_filter(mipmap_filter)
 * 
 *     def set_fg_color(self, *fg_color):             # <<<<<<<<<<<<<<
 *         cdef float[4] fg_color_c
 *         cdef int fg_color_i
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_4Text_3set_fg_color(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_8pynodegl_4Text_3set_fg_color(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_fg_color = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_fg_color (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "set_fg_color", 0))) return NULL;
  __Pyx_INCREF(__pyx_args);
  __pyx_v_fg_color = __pyx_args;
  __pyx_r = __pyx_pf_8pynodegl_4Text_2set_fg_color(((struct __pyx_obj_8pynodegl_Text *)__pyx_v_self), __pyx_v_fg_color);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_fg_color);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_4Text_2set_fg_color(struct __pyx_obj_8pynodegl_Text *__pyx_v_self, PyObject *__pyx_v_fg_color) {
  float __pyx_v_fg_color_c[4];
  int __pyx_v_fg_color_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  Py_UCS4 __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  int __pyx_t_7;
  float __pyx_t_8;
  __Pyx_RefNannySetupContext("set_fg_color", 0);

  /* "nodes_def.pyx":1791
 *         cdef float[4] fg_color_c
 *         cdef int fg_color_i
 *         if len(fg_color) != 4:             # <<<<<<<<<<<<<<
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (
 *                             "fg_color", 4, len(fg_color)))
 */
  __pyx_t_1 = PyTuple_GET_SIZE(__pyx_v_fg_color); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1791, __pyx_L1_error)
  __pyx_t_2 = ((__pyx_t_1 != 4) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "nodes_def.pyx":1792
 *         cdef int fg_color_i
 *         if len(fg_color) != 4:
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (             # <<<<<<<<<<<<<<
 *                             "fg_color", 4, len(fg_color)))
 *         for fg_color_i in range(4):
 */
    __pyx_t_3 = PyTuple_New(5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1792, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = 0;
    __pyx_t_4 = 127;
    __Pyx_INCREF(__pyx_kp_u_fg_color_parameter_is_expected_t);
    __pyx_t_1 += 40;
    __Pyx_GIVEREF(__pyx_kp_u_fg_color_parameter_is_expected_t);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_kp_u_fg_color_parameter_is_expected_t);

    /* "nodes_def.pyx":1793
 *         if len(fg_color) != 4:
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (
 *                             "fg_color", 4, len(fg_color)))             # <<<<<<<<<<<<<<
 *         for fg_color_i in range(4):
 *             fg_color_c[fg_color_i] = fg_color[fg_color_i]
 */
    __pyx_t_5 = __Pyx_PyUnicode_From_long(4, 0, ' ', 'd'); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1793, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_INCREF(__pyx_kp_u_but_got);
    __pyx_t_1 += 9;
    __Pyx_GIVEREF(__pyx_kp_u_but_got);
    PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_kp_u_but_got);
    __pyx_t_6 = PyTuple_GET_SIZE(__pyx_v_fg_color); if (unlikely(__pyx_t_6 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1793, __pyx_L1_error)
    __pyx_t_5 = __Pyx_PyUnicode_From_Py_ssize_t(__pyx_t_6, 0, ' ', 'd'); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1793, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_3, 3, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_INCREF(__pyx_kp_u_values);
    __pyx_t_1 += 7;
    __Pyx_GIVEREF(__pyx_kp_u_values);
    PyTuple_SET_ITEM(__pyx_t_3, 4, __pyx_kp_u_values);

    /* "nodes_def.pyx":1792
 *         cdef int fg_color_i
 *         if len(fg_color) != 4:
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (             # <<<<<<<<<<<<<<
 *                             "fg_color", 4, len(fg_color)))
 *         for fg_color_i in range(4):
 */
    __pyx_t_5 = __Pyx_PyUnicode_Join(__pyx_t_3, 5, __pyx_t_1, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1792, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1792, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 1792, __pyx_L1_error)

    /* "nodes_def.pyx":1791
 *         cdef float[4] fg_color_c
 *         cdef int fg_color_i
 *         if len(fg_color) != 4:             # <<<<<<<<<<<<<<
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (
 *                             "fg_color", 4, len(fg_color)))
 */
  }

  /* "nodes_def.pyx":1794
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (
 *                             "fg_color", 4, len(fg_color)))
 *         for fg_color_i in range(4):             # <<<<<<<<<<<<<<
 *             fg_color_c[fg_color_i] = fg_color[fg_color_i]
 * 
 */
  for (__pyx_t_7 = 0; __pyx_t_7 < 4; __pyx_t_7+=1) {
    __pyx_v_fg_color_i = __pyx_t_7;

    /* "nodes_def.pyx":1795
 *                             "fg_color", 4, len(fg_color)))
 *         for fg_color_i in range(4):
 *             fg_color_c[fg_color_i] = fg_color[fg_color_i]             # <<<<<<<<<<<<<<
 * 
 *         return ngl_node_param_set(self.ctx, "fg_color", fg_color_c)
 */
    __pyx_t_3 = __Pyx_GetItemInt_Tuple(__pyx_v_fg_color, __pyx_v_fg_color_i, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1795, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_8 = __pyx_PyFloat_AsFloat(__pyx_t_3); if (unlikely((__pyx_t_8 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1795, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    (__pyx_v_fg_color_c[__pyx_v_fg_color_i]) = __pyx_t_8;
  }

  /* "nodes_def.pyx":1797
 *             fg_color_c[fg_color_i] = fg_color[fg_color_i]
 * 
 *         return ngl_node_param_set(self.ctx, "fg_color", fg_color_c)             # <<<<<<<<<<<<<<
 * 
 *     def set_bg_color(self, *bg_color):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"fg_color"), __pyx_v_fg_color_c)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1797, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":1788
 *             self.set_mipmap_filter(mipmap_filter)
 * 
 *     def set_fg_color(self, *fg_color):             # <<<<<<<<<<<<<<
 *         cdef float[4] fg_color_c
 *         cdef int fg_color_i
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pynodegl.Text.set_fg_color", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":1799
 *         return ngl_node_param_set(self.ctx, "fg_color", fg_color_c)
 * 
 *     def set_bg_color(self, *bg_color):             # <<<<<<<<<<<<<<
 *         cdef float[4] bg_color_c
 *         cdef int bg_color_i
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_4Text_5set_bg_color(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_8pynodegl_4Text_5set_bg_color(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_bg_color = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_bg_color (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "set_bg_color", 0))) return NULL;
  __Pyx_INCREF(__pyx_args);
  __pyx_v_bg_color = __pyx_args;
  __pyx_r = __pyx_pf_8pynodegl_4Text_4set_bg_color(((struct __pyx_obj_8pynodegl_Text *)__pyx_v_self), __pyx_v_bg_color);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_bg_color);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_4Text_4set_bg_color(struct __pyx_obj_8pynodegl_Text *__pyx_v_self, PyObject *__pyx_v_bg_color) {
  float __pyx_v_bg_color_c[4];
  int __pyx_v_bg_color_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  Py_UCS4 __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  int __pyx_t_7;
  float __pyx_t_8;
  __Pyx_RefNannySetupContext("set_bg_color", 0);

  /* "nodes_def.pyx":1802
 *         cdef float[4] bg_color_c
 *         cdef int bg_color_i
 *         if len(bg_color) != 4:             # <<<<<<<<<<<<<<
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (
 *                             "bg_color", 4, len(bg_color)))
 */
  __pyx_t_1 = PyTuple_GET_SIZE(__pyx_v_bg_color); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1802, __pyx_L1_error)
  __pyx_t_2 = ((__pyx_t_1 != 4) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "nodes_def.pyx":1803
 *         cdef int bg_color_i
 *         if len(bg_color) != 4:
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (             # <<<<<<<<<<<<<<
 *                             "bg_color", 4, len(bg_color)))
 *         for bg_color_i in range(4):
 */
    __pyx_t_3 = PyTuple_New(5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1803, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = 0;
    __pyx_t_4 = 127;
    __Pyx_INCREF(__pyx_kp_u_bg_color_parameter_is_expected_t);
    __pyx_t_1 += 40;
    __Pyx_GIVEREF(__pyx_kp_u_bg_color_parameter_is_expected_t);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_kp_u_bg_color_parameter_is_expected_t);

    /* "nodes_def.pyx":1804
 *         if len(bg_color) != 4:
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (
 *                             "bg_color", 4, len(bg_color)))             # <<<<<<<<<<<<<<
 *         for bg_color_i in range(4):
 *             bg_color_c[bg_color_i] = bg_color[bg_color_i]
 */
    __pyx_t_5 = __Pyx_PyUnicode_From_long(4, 0, ' ', 'd'); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1804, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_INCREF(__pyx_kp_u_but_got);
    __pyx_t_1 += 9;
    __Pyx_GIVEREF(__pyx_kp_u_but_got);
    PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_kp_u_but_got);
    __pyx_t_6 = PyTuple_GET_SIZE(__pyx_v_bg_color); if (unlikely(__pyx_t_6 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1804, __pyx_L1_error)
    __pyx_t_5 = __Pyx_PyUnicode_From_Py_ssize_t(__pyx_t_6, 0, ' ', 'd'); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1804, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_3, 3, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_INCREF(__pyx_kp_u_values);
    __pyx_t_1 += 7;
    __Pyx_GIVEREF(__pyx_kp_u_values);
    PyTuple_SET_ITEM(__pyx_t_3, 4, __pyx_kp_u_values);

    /* "nodes_def.pyx":1803
 *         cdef int bg_color_i
 *         if len(bg_color) != 4:
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (             # <<<<<<<<<<<<<<
 *                             "bg_color", 4, len(bg_color)))
 *         for bg_color_i in range(4):
 */
    __pyx_t_5 = __Pyx_PyUnicode_Join(__pyx_t_3, 5, __pyx_t_1, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1803, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1803, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 1803, __pyx_L1_error)

    /* "nodes_def.pyx":1802
 *         cdef float[4] bg_color_c
 *         cdef int bg_color_i
 *         if len(bg_color) != 4:             # <<<<<<<<<<<<<<
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (
 *                             "bg_color", 4, len(bg_color)))
 */
  }

  /* "nodes_def.pyx":1805
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (
 *                             "bg_color", 4, len(bg_color)))
 *         for bg_color_i in range(4):             # <<<<<<<<<<<<<<
 *             bg_color_c[bg_color_i] = bg_color[bg_color_i]
 * 
 */
  for (__pyx_t_7 = 0; __pyx_t_7 < 4; __pyx_t_7+=1) {
    __pyx_v_bg_color_i = __pyx_t_7;

    /* "nodes_def.pyx":1806
 *                             "bg_color", 4, len(bg_color)))
 *         for bg_color_i in range(4):
 *             bg_color_c[bg_color_i] = bg_color[bg_color_i]             # <<<<<<<<<<<<<<
 * 
 *         return ngl_node_param_set(self.ctx, "bg_color", bg_color_c)
 */
    __pyx_t_3 = __Pyx_GetItemInt_Tuple(__pyx_v_bg_color, __pyx_v_bg_color_i, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1806, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_8 = __pyx_PyFloat_AsFloat(__pyx_t_3); if (unlikely((__pyx_t_8 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1806, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    (__pyx_v_bg_color_c[__pyx_v_bg_color_i]) = __pyx_t_8;
  }

  /* "nodes_def.pyx":1808
 *             bg_color_c[bg_color_i] = bg_color[bg_color_i]
 * 
 *         return ngl_node_param_set(self.ctx, "bg_color", bg_color_c)             # <<<<<<<<<<<<<<
 * 
 *     def set_box_corner(self, *box_corner):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"bg_color"), __pyx_v_bg_color_c)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1808, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":1799
 *         return ngl_node_param_set(self.ctx, "fg_color", fg_color_c)
 * 
 *     def set_bg_color(self, *bg_color):             # <<<<<<<<<<<<<<
 *         cdef float[4] bg_color_c
 *         cdef int bg_color_i
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pynodegl.Text.set_bg_color", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":1810
 *         return ngl_node_param_set(self.ctx, "bg_color", bg_color_c)
 * 
 *     def set_box_corner(self, *box_corner):             # <<<<<<<<<<<<<<
 *         cdef float[3] box_corner_c
 *         cdef int box_corner_i
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_4Text_7set_box_corner(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_8pynodegl_4Text_7set_box_corner(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_box_corner = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_box_corner (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "set_box_corner", 0))) return NULL;
  __Pyx_INCREF(__pyx_args);
  __pyx_v_box_corner = __pyx_args;
  __pyx_r = __pyx_pf_8pynodegl_4Text_6set_box_corner(((struct __pyx_obj_8pynodegl_Text *)__pyx_v_self), __pyx_v_box_corner);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_box_corner);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_4Text_6set_box_corner(struct __pyx_obj_8pynodegl_Text *__pyx_v_self, PyObject *__pyx_v_box_corner) {
  float __pyx_v_box_corner_c[3];
  int __pyx_v_box_corner_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  Py_UCS4 __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  int __pyx_t_7;
  float __pyx_t_8;
  __Pyx_RefNannySetupContext("set_box_corner", 0);

  /* "nodes_def.pyx":1813
 *         cdef float[3] box_corner_c
 *         cdef int box_corner_i
 *         if len(box_corner) != 3:             # <<<<<<<<<<<<<<
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (
 *                             "box_corner", 3, len(box_corner)))
 */
  __pyx_t_1 = PyTuple_GET_SIZE(__pyx_v_box_corner); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1813, __pyx_L1_error)
  __pyx_t_2 = ((__pyx_t_1 != 3) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "nodes_def.pyx":1814
 *         cdef int box_corner_i
 *         if len(box_corner) != 3:
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (             # <<<<<<<<<<<<<<
 *                             "box_corner", 3, len(box_corner)))
 *         for box_corner_i in range(3):
 */
    __pyx_t_3 = PyTuple_New(5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1814, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = 0;
    __pyx_t_4 = 127;
    __Pyx_INCREF(__pyx_kp_u_box_corner_parameter_is_expected);
    __pyx_t_1 += 42;
    __Pyx_GIVEREF(__pyx_kp_u_box_corner_parameter_is_expected);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_kp_u_box_corner_parameter_is_expected);

    /* "nodes_def.pyx":1815
 *         if len(box_corner) != 3:
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (
 *                             "box_corner", 3, len(box_corner)))             # <<<<<<<<<<<<<<
 *         for box_corner_i in range(3):
 *             box_corner_c[box_corner_i] = box_corner[box_corner_i]
 */
    __pyx_t_5 = __Pyx_PyUnicode_From_long(3, 0, ' ', 'd'); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1815, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_INCREF(__pyx_kp_u_but_got);
    __pyx_t_1 += 9;
    __Pyx_GIVEREF(__pyx_kp_u_but_got);
    PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_kp_u_but_got);
    __pyx_t_6 = PyTuple_GET_SIZE(__pyx_v_box_corner); if (unlikely(__pyx_t_6 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1815, __pyx_L1_error)
    __pyx_t_5 = __Pyx_PyUnicode_From_Py_ssize_t(__pyx_t_6, 0, ' ', 'd'); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1815, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_3, 3, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_INCREF(__pyx_kp_u_values);
    __pyx_t_1 += 7;
    __Pyx_GIVEREF(__pyx_kp_u_values);
    PyTuple_SET_ITEM(__pyx_t_3, 4, __pyx_kp_u_values);

    /* "nodes_def.pyx":1814
 *         cdef int box_corner_i
 *         if len(box_corner) != 3:
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (             # <<<<<<<<<<<<<<
 *                             "box_corner", 3, len(box_corner)))
 *         for box_corner_i in range(3):
 */
    __pyx_t_5 = __Pyx_PyUnicode_Join(__pyx_t_3, 5, __pyx_t_1, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1814, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1814, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 1814, __pyx_L1_error)

    /* "nodes_def.pyx":1813
 *         cdef float[3] box_corner_c
 *         cdef int box_corner_i
 *         if len(box_corner) != 3:             # <<<<<<<<<<<<<<
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (
 *                             "box_corner", 3, len(box_corner)))
 */
  }

  /* "nodes_def.pyx":1816
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (
 *                             "box_corner", 3, len(box_corner)))
 *         for box_corner_i in range(3):             # <<<<<<<<<<<<<<
 *             box_corner_c[box_corner_i] = box_corner[box_corner_i]
 * 
 */
  for (__pyx_t_7 = 0; __pyx_t_7 < 3; __pyx_t_7+=1) {
    __pyx_v_box_corner_i = __pyx_t_7;

    /* "nodes_def.pyx":1817
 *                             "box_corner", 3, len(box_corner)))
 *         for box_corner_i in range(3):
 *             box_corner_c[box_corner_i] = box_corner[box_corner_i]             # <<<<<<<<<<<<<<
 * 
 *         return ngl_node_param_set(self.ctx, "box_corner", box_corner_c)
 */
    __pyx_t_3 = __Pyx_GetItemInt_Tuple(__pyx_v_box_corner, __pyx_v_box_corner_i, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1817, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_8 = __pyx_PyFloat_AsFloat(__pyx_t_3); if (unlikely((__pyx_t_8 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1817, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    (__pyx_v_box_corner_c[__pyx_v_box_corner_i]) = __pyx_t_8;
  }

  /* "nodes_def.pyx":1819
 *             box_corner_c[box_corner_i] = box_corner[box_corner_i]
 * 
 *         return ngl_node_param_set(self.ctx, "box_corner", box_corner_c)             # <<<<<<<<<<<<<<
 * 
 *     def set_box_width(self, *box_width):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"box_corner"), __pyx_v_box_corner_c)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1819, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":1810
 *         return ngl_node_param_set(self.ctx, "bg_color", bg_color_c)
 * 
 *     def set_box_corner(self, *box_corner):             # <<<<<<<<<<<<<<
 *         cdef float[3] box_corner_c
 *         cdef int box_corner_i
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pynodegl.Text.set_box_corner", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":1821
 *         return ngl_node_param_set(self.ctx, "box_corner", box_corner_c)
 * 
 *     def set_box_width(self, *box_width):             # <<<<<<<<<<<<<<
 *         cdef float[3] box_width_c
 *         cdef int box_width_i
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_4Text_9set_box_width(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_8pynodegl_4Text_9set_box_width(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_box_width = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_box_width (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "set_box_width", 0))) return NULL;
  __Pyx_INCREF(__pyx_args);
  __pyx_v_box_width = __pyx_args;
  __pyx_r = __pyx_pf_8pynodegl_4Text_8set_box_width(((struct __pyx_obj_8pynodegl_Text *)__pyx_v_self), __pyx_v_box_width);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_box_width);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_4Text_8set_box_width(struct __pyx_obj_8pynodegl_Text *__pyx_v_self, PyObject *__pyx_v_box_width) {
  float __pyx_v_box_width_c[3];
  int __pyx_v_box_width_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  Py_UCS4 __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  int __pyx_t_7;
  float __pyx_t_8;
  __Pyx_RefNannySetupContext("set_box_width", 0);

  /* "nodes_def.pyx":1824
 *         cdef float[3] box_width_c
 *         cdef int box_width_i
 *         if len(box_width) != 3:             # <<<<<<<<<<<<<<
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (
 *                             "box_width", 3, len(box_width)))
 */
  __pyx_t_1 = PyTuple_GET_SIZE(__pyx_v_box_width); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1824, __pyx_L1_error)
  __pyx_t_2 = ((__pyx_t_1 != 3) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "nodes_def.pyx":1825
 *         cdef int box_width_i
 *         if len(box_width) != 3:
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (             # <<<<<<<<<<<<<<
 *                             "box_width", 3, len(box_width)))
 *         for box_width_i in range(3):
 */
    __pyx_t_3 = PyTuple_New(5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1825, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = 0;
    __pyx_t_4 = 127;
    __Pyx_INCREF(__pyx_kp_u_box_width_parameter_is_expected);
    __pyx_t_1 += 41;
    __Pyx_GIVEREF(__pyx_kp_u_box_width_parameter_is_expected);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_kp_u_box_width_parameter_is_expected);

    /* "nodes_def.pyx":1826
 *         if len(box_width) != 3:
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (
 *                             "box_width", 3, len(box_width)))             # <<<<<<<<<<<<<<
 *         for box_width_i in range(3):
 *             box_width_c[box_width_i] = box_width[box_width_i]
 */
    __pyx_t_5 = __Pyx_PyUnicode_From_long(3, 0, ' ', 'd'); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1826, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_INCREF(__pyx_kp_u_but_got);
    __pyx_t_1 += 9;
    __Pyx_GIVEREF(__pyx_kp_u_but_got);
    PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_kp_u_but_got);
    __pyx_t_6 = PyTuple_GET_SIZE(__pyx_v_box_width); if (unlikely(__pyx_t_6 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1826, __pyx_L1_error)
    __pyx_t_5 = __Pyx_PyUnicode_From_Py_ssize_t(__pyx_t_6, 0, ' ', 'd'); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1826, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_3, 3, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_INCREF(__pyx_kp_u_values);
    __pyx_t_1 += 7;
    __Pyx_GIVEREF(__pyx_kp_u_values);
    PyTuple_SET_ITEM(__pyx_t_3, 4, __pyx_kp_u_values);

    /* "nodes_def.pyx":1825
 *         cdef int box_width_i
 *         if len(box_width) != 3:
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (             # <<<<<<<<<<<<<<
 *                             "box_width", 3, len(box_width)))
 *         for box_width_i in range(3):
 */
    __pyx_t_5 = __Pyx_PyUnicode_Join(__pyx_t_3, 5, __pyx_t_1, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1825, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1825, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 1825, __pyx_L1_error)

    /* "nodes_def.pyx":1824
 *         cdef float[3] box_width_c
 *         cdef int box_width_i
 *         if len(box_width) != 3:             # <<<<<<<<<<<<<<
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (
 *                             "box_width", 3, len(box_width)))
 */
  }

  /* "nodes_def.pyx":1827
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (
 *                             "box_width", 3, len(box_width)))
 *         for box_width_i in range(3):             # <<<<<<<<<<<<<<
 *             box_width_c[box_width_i] = box_width[box_width_i]
 * 
 */
  for (__pyx_t_7 = 0; __pyx_t_7 < 3; __pyx_t_7+=1) {
    __pyx_v_box_width_i = __pyx_t_7;

    /* "nodes_def.pyx":1828
 *                             "box_width", 3, len(box_width)))
 *         for box_width_i in range(3):
 *             box_width_c[box_width_i] = box_width[box_width_i]             # <<<<<<<<<<<<<<
 * 
 *         return ngl_node_param_set(self.ctx, "box_width", box_width_c)
 */
    __pyx_t_3 = __Pyx_GetItemInt_Tuple(__pyx_v_box_width, __pyx_v_box_width_i, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1828, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_8 = __pyx_PyFloat_AsFloat(__pyx_t_3); if (unlikely((__pyx_t_8 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1828, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    (__pyx_v_box_width_c[__pyx_v_box_width_i]) = __pyx_t_8;
  }

  /* "nodes_def.pyx":1830
 *             box_width_c[box_width_i] = box_width[box_width_i]
 * 
 *         return ngl_node_param_set(self.ctx, "box_width", box_width_c)             # <<<<<<<<<<<<<<
 * 
 *     def set_box_height(self, *box_height):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"box_width"), __pyx_v_box_width_c)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1830, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":1821
 *         return ngl_node_param_set(self.ctx, "box_corner", box_corner_c)
 * 
 *     def set_box_width(self, *box_width):             # <<<<<<<<<<<<<<
 *         cdef float[3] box_width_c
 *         cdef int box_width_i
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pynodegl.Text.set_box_width", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":1832
 *         return ngl_node_param_set(self.ctx, "box_width", box_width_c)
 * 
 *     def set_box_height(self, *box_height):             # <<<<<<<<<<<<<<
 *         cdef float[3] box_height_c
 *         cdef int box_height_i
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_4Text_11set_box_height(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_8pynodegl_4Text_11set_box_height(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_box_height = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_box_height (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "set_box_height", 0))) return NULL;
  __Pyx_INCREF(__pyx_args);
  __pyx_v_box_height = __pyx_args;
  __pyx_r = __pyx_pf_8pynodegl_4Text_10set_box_height(((struct __pyx_obj_8pynodegl_Text *)__pyx_v_self), __pyx_v_box_height);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_box_height);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_4Text_10set_box_height(struct __pyx_obj_8pynodegl_Text *__pyx_v_self, PyObject *__pyx_v_box_height) {
  float __pyx_v_box_height_c[3];
  int __pyx_v_box_height_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  Py_UCS4 __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  int __pyx_t_7;
  float __pyx_t_8;
  __Pyx_RefNannySetupContext("set_box_height", 0);

  /* "nodes_def.pyx":1835
 *         cdef float[3] box_height_c
 *         cdef int box_height_i
 *         if len(box_height) != 3:             # <<<<<<<<<<<<<<
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (
 *                             "box_height", 3, len(box_height)))
 */
  __pyx_t_1 = PyTuple_GET_SIZE(__pyx_v_box_height); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1835, __pyx_L1_error)
  __pyx_t_2 = ((__pyx_t_1 != 3) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "nodes_def.pyx":1836
 *         cdef int box_height_i
 *         if len(box_height) != 3:
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (             # <<<<<<<<<<<<<<
 *                             "box_height", 3, len(box_height)))
 *         for box_height_i in range(3):
 */
    __pyx_t_3 = PyTuple_New(5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1836, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = 0;
    __pyx_t_4 = 127;
    __Pyx_INCREF(__pyx_kp_u_box_height_parameter_is_expected);
    __pyx_t_1 += 42;
    __Pyx_GIVEREF(__pyx_kp_u_box_height_parameter_is_expected);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_kp_u_box_height_parameter_is_expected);

    /* "nodes_def.pyx":1837
 *         if len(box_height) != 3:
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (
 *                             "box_height", 3, len(box_height)))             # <<<<<<<<<<<<<<
 *         for box_height_i in range(3):
 *             box_height_c[box_height_i] = box_height[box_height_i]
 */
    __pyx_t_5 = __Pyx_PyUnicode_From_long(3, 0, ' ', 'd'); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1837, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_INCREF(__pyx_kp_u_but_got);
    __pyx_t_1 += 9;
    __Pyx_GIVEREF(__pyx_kp_u_but_got);
    PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_kp_u_but_got);
    __pyx_t_6 = PyTuple_GET_SIZE(__pyx_v_box_height); if (unlikely(__pyx_t_6 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1837, __pyx_L1_error)
    __pyx_t_5 = __Pyx_PyUnicode_From_Py_ssize_t(__pyx_t_6, 0, ' ', 'd'); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1837, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_3, 3, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_INCREF(__pyx_kp_u_values);
    __pyx_t_1 += 7;
    __Pyx_GIVEREF(__pyx_kp_u_values);
    PyTuple_SET_ITEM(__pyx_t_3, 4, __pyx_kp_u_values);

    /* "nodes_def.pyx":1836
 *         cdef int box_height_i
 *         if len(box_height) != 3:
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (             # <<<<<<<<<<<<<<
 *                             "box_height", 3, len(box_height)))
 *         for box_height_i in range(3):
 */
    __pyx_t_5 = __Pyx_PyUnicode_Join(__pyx_t_3, 5, __pyx_t_1, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1836, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1836, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 1836, __pyx_L1_error)

    /* "nodes_def.pyx":1835
 *         cdef float[3] box_height_c
 *         cdef int box_height_i
 *         if len(box_height) != 3:             # <<<<<<<<<<<<<<
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (
 *                             "box_height", 3, len(box_height)))
 */
  }

  /* "nodes_def.pyx":1838
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (
 *                             "box_height", 3, len(box_height)))
 *         for box_height_i in range(3):             # <<<<<<<<<<<<<<
 *             box_height_c[box_height_i] = box_height[box_height_i]
 * 
 */
  for (__pyx_t_7 = 0; __pyx_t_7 < 3; __pyx_t_7+=1) {
    __pyx_v_box_height_i = __pyx_t_7;

    /* "nodes_def.pyx":1839
 *                             "box_height", 3, len(box_height)))
 *         for box_height_i in range(3):
 *             box_height_c[box_height_i] = box_height[box_height_i]             # <<<<<<<<<<<<<<
 * 
 *         return ngl_node_param_set(self.ctx, "box_height", box_height_c)
 */
    __pyx_t_3 = __Pyx_GetItemInt_Tuple(__pyx_v_box_height, __pyx_v_box_height_i, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1839, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_8 = __pyx_PyFloat_AsFloat(__pyx_t_3); if (unlikely((__pyx_t_8 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1839, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    (__pyx_v_box_height_c[__pyx_v_box_height_i]) = __pyx_t_8;
  }

  /* "nodes_def.pyx":1841
 *             box_height_c[box_height_i] = box_height[box_height_i]
 * 
 *         return ngl_node_param_set(self.ctx, "box_height", box_height_c)             # <<<<<<<<<<<<<<
 * 
 *     def set_padding(self, int padding):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"box_height"), __pyx_v_box_height_c)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1841, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":1832
 *         return ngl_node_param_set(self.ctx, "box_width", box_width_c)
 * 
 *     def set_box_height(self, *box_height):             # <<<<<<<<<<<<<<
 *         cdef float[3] box_height_c
 *         cdef int box_height_i
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pynodegl.Text.set_box_height", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":1843
 *         return ngl_node_param_set(self.ctx, "box_height", box_height_c)
 * 
 *     def set_padding(self, int padding):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "padding", padding)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_4Text_13set_padding(PyObject *__pyx_v_self, PyObject *__pyx_arg_padding); /*proto*/
static PyObject *__pyx_pw_8pynodegl_4Text_13set_padding(PyObject *__pyx_v_self, PyObject *__pyx_arg_padding) {
  int __pyx_v_padding;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_padding (wrapper)", 0);
  assert(__pyx_arg_padding); {
    __pyx_v_padding = __Pyx_PyInt_As_int(__pyx_arg_padding); if (unlikely((__pyx_v_padding == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1843, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pynodegl.Text.set_padding", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pynodegl_4Text_12set_padding(((struct __pyx_obj_8pynodegl_Text *)__pyx_v_self), ((int)__pyx_v_padding));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_4Text_12set_padding(struct __pyx_obj_8pynodegl_Text *__pyx_v_self, int __pyx_v_padding) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("set_padding", 0);

  /* "nodes_def.pyx":1844
 * 
 *     def set_padding(self, int padding):
 *         return ngl_node_param_set(self.ctx, "padding", padding)             # <<<<<<<<<<<<<<
 * 
 *     def set_font_scale(self, double font_scale):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"padding"), __pyx_v_padding)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1844, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":1843
 *         return ngl_node_param_set(self.ctx, "box_height", box_height_c)
 * 
 *     def set_padding(self, int padding):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "padding", padding)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.Text.set_padding", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":1846
 *         return ngl_node_param_set(self.ctx, "padding", padding)
 * 
 *     def set_font_scale(self, double font_scale):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "font_scale", font_scale)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_4Text_15set_font_scale(PyObject *__pyx_v_self, PyObject *__pyx_arg_font_scale); /*proto*/
static PyObject *__pyx_pw_8pynodegl_4Text_15set_font_scale(PyObject *__pyx_v_self, PyObject *__pyx_arg_font_scale) {
  double __pyx_v_font_scale;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_font_scale (wrapper)", 0);
  assert(__pyx_arg_font_scale); {
    __pyx_v_font_scale = __pyx_PyFloat_AsDouble(__pyx_arg_font_scale); if (unlikely((__pyx_v_font_scale == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1846, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pynodegl.Text.set_font_scale", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pynodegl_4Text_14set_font_scale(((struct __pyx_obj_8pynodegl_Text *)__pyx_v_self), ((double)__pyx_v_font_scale));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_4Text_14set_font_scale(struct __pyx_obj_8pynodegl_Text *__pyx_v_self, double __pyx_v_font_scale) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("set_font_scale", 0);

  /* "nodes_def.pyx":1847
 * 
 *     def set_font_scale(self, double font_scale):
 *         return ngl_node_param_set(self.ctx, "font_scale", font_scale)             # <<<<<<<<<<<<<<
 * 
 *     def set_valign(self, const char * valign):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"font_scale"), __pyx_v_font_scale)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1847, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":1846
 *         return ngl_node_param_set(self.ctx, "padding", padding)
 * 
 *     def set_font_scale(self, double font_scale):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "font_scale", font_scale)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.Text.set_font_scale", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":1849
 *         return ngl_node_param_set(self.ctx, "font_scale", font_scale)
 * 
 *     def set_valign(self, const char * valign):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "valign", valign)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_4Text_17set_valign(PyObject *__pyx_v_self, PyObject *__pyx_arg_valign); /*proto*/
static PyObject *__pyx_pw_8pynodegl_4Text_17set_valign(PyObject *__pyx_v_self, PyObject *__pyx_arg_valign) {
  char const *__pyx_v_valign;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_valign (wrapper)", 0);
  assert(__pyx_arg_valign); {
    __pyx_v_valign = __Pyx_PyObject_AsString(__pyx_arg_valign); if (unlikely((!__pyx_v_valign) && PyErr_Occurred())) __PYX_ERR(0, 1849, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pynodegl.Text.set_valign", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pynodegl_4Text_16set_valign(((struct __pyx_obj_8pynodegl_Text *)__pyx_v_self), ((char const *)__pyx_v_valign));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_4Text_16set_valign(struct __pyx_obj_8pynodegl_Text *__pyx_v_self, char const *__pyx_v_valign) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("set_valign", 0);

  /* "nodes_def.pyx":1850
 * 
 *     def set_valign(self, const char * valign):
 *         return ngl_node_param_set(self.ctx, "valign", valign)             # <<<<<<<<<<<<<<
 * 
 *     def set_halign(self, const char * halign):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"valign"), __pyx_v_valign)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1850, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":1849
 *         return ngl_node_param_set(self.ctx, "font_scale", font_scale)
 * 
 *     def set_valign(self, const char * valign):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "valign", valign)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.Text.set_valign", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":1852
 *         return ngl_node_param_set(self.ctx, "valign", valign)
 * 
 *     def set_halign(self, const char * halign):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "halign", halign)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_4Text_19set_halign(PyObject *__pyx_v_self, PyObject *__pyx_arg_halign); /*proto*/
static PyObject *__pyx_pw_8pynodegl_4Text_19set_halign(PyObject *__pyx_v_self, PyObject *__pyx_arg_halign) {
  char const *__pyx_v_halign;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_halign (wrapper)", 0);
  assert(__pyx_arg_halign); {
    __pyx_v_halign = __Pyx_PyObject_AsString(__pyx_arg_halign); if (unlikely((!__pyx_v_halign) && PyErr_Occurred())) __PYX_ERR(0, 1852, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pynodegl.Text.set_halign", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pynodegl_4Text_18set_halign(((struct __pyx_obj_8pynodegl_Text *)__pyx_v_self), ((char const *)__pyx_v_halign));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_4Text_18set_halign(struct __pyx_obj_8pynodegl_Text *__pyx_v_self, char const *__pyx_v_halign) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("set_halign", 0);

  /* "nodes_def.pyx":1853
 * 
 *     def set_halign(self, const char * halign):
 *         return ngl_node_param_set(self.ctx, "halign", halign)             # <<<<<<<<<<<<<<
 * 
 *     def set_aspect_ratio(self, tuple aspect_ratio):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"halign"), __pyx_v_halign)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1853, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":1852
 *         return ngl_node_param_set(self.ctx, "valign", valign)
 * 
 *     def set_halign(self, const char * halign):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "halign", halign)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.Text.set_halign", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":1855
 *         return ngl_node_param_set(self.ctx, "halign", halign)
 * 
 *     def set_aspect_ratio(self, tuple aspect_ratio):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx,
 *                                   "aspect_ratio",
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_4Text_21set_aspect_ratio(PyObject *__pyx_v_self, PyObject *__pyx_v_aspect_ratio); /*proto*/
static PyObject *__pyx_pw_8pynodegl_4Text_21set_aspect_ratio(PyObject *__pyx_v_self, PyObject *__pyx_v_aspect_ratio) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_aspect_ratio (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_aspect_ratio), (&PyTuple_Type), 1, "aspect_ratio", 1))) __PYX_ERR(0, 1855, __pyx_L1_error)
  __pyx_r = __pyx_pf_8pynodegl_4Text_20set_aspect_ratio(((struct __pyx_obj_8pynodegl_Text *)__pyx_v_self), ((PyObject*)__pyx_v_aspect_ratio));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_4Text_20set_aspect_ratio(struct __pyx_obj_8pynodegl_Text *__pyx_v_self, PyObject *__pyx_v_aspect_ratio) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  __Pyx_RefNannySetupContext("set_aspect_ratio", 0);

  /* "nodes_def.pyx":1856
 * 
 *     def set_aspect_ratio(self, tuple aspect_ratio):
 *         return ngl_node_param_set(self.ctx,             # <<<<<<<<<<<<<<
 *                                   "aspect_ratio",
 *                                   <int>aspect_ratio[0],
 */
  __Pyx_XDECREF(__pyx_r);

  /* "nodes_def.pyx":1858
 *         return ngl_node_param_set(self.ctx,
 *                                   "aspect_ratio",
 *                                   <int>aspect_ratio[0],             # <<<<<<<<<<<<<<
 *                                   <int>aspect_ratio[1]);
 * 
 */
  if (unlikely(__pyx_v_aspect_ratio == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 1858, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v_aspect_ratio, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1858, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1858, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "nodes_def.pyx":1859
 *                                   "aspect_ratio",
 *                                   <int>aspect_ratio[0],
 *                                   <int>aspect_ratio[1]);             # <<<<<<<<<<<<<<
 * 
 *     def set_min_filter(self, const char * min_filter):
 */
  if (unlikely(__pyx_v_aspect_ratio == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 1859, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v_aspect_ratio, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1859, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1859, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "nodes_def.pyx":1856
 * 
 *     def set_aspect_ratio(self, tuple aspect_ratio):
 *         return ngl_node_param_set(self.ctx,             # <<<<<<<<<<<<<<
 *                                   "aspect_ratio",
 *                                   <int>aspect_ratio[0],
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"aspect_ratio"), ((int)__pyx_t_2), ((int)__pyx_t_3))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1856, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":1855
 *         return ngl_node_param_set(self.ctx, "halign", halign)
 * 
 *     def set_aspect_ratio(self, tuple aspect_ratio):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx,
 *                                   "aspect_ratio",
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.Text.set_aspect_ratio", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":1861
 *                                   <int>aspect_ratio[1]);
 * 
 *     def set_min_filter(self, const char * min_filter):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "min_filter", min_filter)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_4Text_23set_min_filter(PyObject *__pyx_v_self, PyObject *__pyx_arg_min_filter); /*proto*/
static PyObject *__pyx_pw_8pynodegl_4Text_23set_min_filter(PyObject *__pyx_v_self, PyObject *__pyx_arg_min_filter) {
  char const *__pyx_v_min_filter;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_min_filter (wrapper)", 0);
  assert(__pyx_arg_min_filter); {
    __pyx_v_min_filter = __Pyx_PyObject_AsString(__pyx_arg_min_filter); if (unlikely((!__pyx_v_min_filter) && PyErr_Occurred())) __PYX_ERR(0, 1861, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pynodegl.Text.set_min_filter", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pynodegl_4Text_22set_min_filter(((struct __pyx_obj_8pynodegl_Text *)__pyx_v_self), ((char const *)__pyx_v_min_filter));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_4Text_22set_min_filter(struct __pyx_obj_8pynodegl_Text *__pyx_v_self, char const *__pyx_v_min_filter) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("set_min_filter", 0);

  /* "nodes_def.pyx":1862
 * 
 *     def set_min_filter(self, const char * min_filter):
 *         return ngl_node_param_set(self.ctx, "min_filter", min_filter)             # <<<<<<<<<<<<<<
 * 
 *     def set_mag_filter(self, const char * mag_filter):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"min_filter"), __pyx_v_min_filter)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1862, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":1861
 *                                   <int>aspect_ratio[1]);
 * 
 *     def set_min_filter(self, const char * min_filter):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "min_filter", min_filter)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.Text.set_min_filter", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":1864
 *         return ngl_node_param_set(self.ctx, "min_filter", min_filter)
 * 
 *     def set_mag_filter(self, const char * mag_filter):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "mag_filter", mag_filter)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_4Text_25set_mag_filter(PyObject *__pyx_v_self, PyObject *__pyx_arg_mag_filter); /*proto*/
static PyObject *__pyx_pw_8pynodegl_4Text_25set_mag_filter(PyObject *__pyx_v_self, PyObject *__pyx_arg_mag_filter) {
  char const *__pyx_v_mag_filter;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_mag_filter (wrapper)", 0);
  assert(__pyx_arg_mag_filter); {
    __pyx_v_mag_filter = __Pyx_PyObject_AsString(__pyx_arg_mag_filter); if (unlikely((!__pyx_v_mag_filter) && PyErr_Occurred())) __PYX_ERR(0, 1864, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pynodegl.Text.set_mag_filter", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pynodegl_4Text_24set_mag_filter(((struct __pyx_obj_8pynodegl_Text *)__pyx_v_self), ((char const *)__pyx_v_mag_filter));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_4Text_24set_mag_filter(struct __pyx_obj_8pynodegl_Text *__pyx_v_self, char const *__pyx_v_mag_filter) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("set_mag_filter", 0);

  /* "nodes_def.pyx":1865
 * 
 *     def set_mag_filter(self, const char * mag_filter):
 *         return ngl_node_param_set(self.ctx, "mag_filter", mag_filter)             # <<<<<<<<<<<<<<
 * 
 *     def set_mipmap_filter(self, const char * mipmap_filter):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"mag_filter"), __pyx_v_mag_filter)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1865, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":1864
 *         return ngl_node_param_set(self.ctx, "min_filter", min_filter)
 * 
 *     def set_mag_filter(self, const char * mag_filter):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "mag_filter", mag_filter)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.Text.set_mag_filter", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":1867
 *         return ngl_node_param_set(self.ctx, "mag_filter", mag_filter)
 * 
 *     def set_mipmap_filter(self, const char * mipmap_filter):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "mipmap_filter", mipmap_filter)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_4Text_27set_mipmap_filter(PyObject *__pyx_v_self, PyObject *__pyx_arg_mipmap_filter); /*proto*/
static PyObject *__pyx_pw_8pynodegl_4Text_27set_mipmap_filter(PyObject *__pyx_v_self, PyObject *__pyx_arg_mipmap_filter) {
  char const *__pyx_v_mipmap_filter;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_mipmap_filter (wrapper)", 0);
  assert(__pyx_arg_mipmap_filter); {
    __pyx_v_mipmap_filter = __Pyx_PyObject_AsString(__pyx_arg_mipmap_filter); if (unlikely((!__pyx_v_mipmap_filter) && PyErr_Occurred())) __PYX_ERR(0, 1867, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pynodegl.Text.set_mipmap_filter", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pynodegl_4Text_26set_mipmap_filter(((struct __pyx_obj_8pynodegl_Text *)__pyx_v_self), ((char const *)__pyx_v_mipmap_filter));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_4Text_26set_mipmap_filter(struct __pyx_obj_8pynodegl_Text *__pyx_v_self, char const *__pyx_v_mipmap_filter) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("set_mipmap_filter", 0);

  /* "nodes_def.pyx":1868
 * 
 *     def set_mipmap_filter(self, const char * mipmap_filter):
 *         return ngl_node_param_set(self.ctx, "mipmap_filter", mipmap_filter)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"mipmap_filter"), __pyx_v_mipmap_filter)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1868, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":1867
 *         return ngl_node_param_set(self.ctx, "mag_filter", mag_filter)
 * 
 *     def set_mipmap_filter(self, const char * mipmap_filter):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "mipmap_filter", mipmap_filter)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.Text.set_mipmap_filter", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_4Text_29__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pynodegl_4Text_29__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_4Text_28__reduce_cython__(((struct __pyx_obj_8pynodegl_Text *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_4Text_28__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_Text *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__140, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.Text.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_4Text_31__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8pynodegl_4Text_31__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_4Text_30__setstate_cython__(((struct __pyx_obj_8pynodegl_Text *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_4Text_30__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_Text *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__141, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.Text.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":1873
 * cdef class Texture2D(_Node):
 * 
 *     def __init__(self, format=None, width=None, height=None, min_filter=None, mag_filter=None, mipmap_filter=None, wrap_s=None, wrap_t=None, access=None, data_src=None, direct_rendering=None, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_TEXTURE2D)
 */

/* Python wrapper */
static int __pyx_pw_8pynodegl_9Texture2D_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pynodegl_9Texture2D_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_format = 0;
  PyObject *__pyx_v_width = 0;
  PyObject *__pyx_v_height = 0;
  PyObject *__pyx_v_min_filter = 0;
  PyObject *__pyx_v_mag_filter = 0;
  PyObject *__pyx_v_mipmap_filter = 0;
  PyObject *__pyx_v_wrap_s = 0;
  PyObject *__pyx_v_wrap_t = 0;
  PyObject *__pyx_v_access = 0;
  PyObject *__pyx_v_data_src = 0;
  PyObject *__pyx_v_direct_rendering = 0;
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  __pyx_v_kwargs = PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return -1;
  __Pyx_GOTREF(__pyx_v_kwargs);
  if (PyTuple_GET_SIZE(__pyx_args) > 11) {
    __pyx_v_args = PyTuple_GetSlice(__pyx_args, 11, PyTuple_GET_SIZE(__pyx_args));
    if (unlikely(!__pyx_v_args)) {
      __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
      __Pyx_RefNannyFinishContext();
      return -1;
    }
    __Pyx_GOTREF(__pyx_v_args);
  } else {
    __pyx_v_args = __pyx_empty_tuple; __Pyx_INCREF(__pyx_empty_tuple);
  }
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_format,&__pyx_n_s_width,&__pyx_n_s_height,&__pyx_n_s_min_filter,&__pyx_n_s_mag_filter,&__pyx_n_s_mipmap_filter,&__pyx_n_s_wrap_s,&__pyx_n_s_wrap_t,&__pyx_n_s_access,&__pyx_n_s_data_src,&__pyx_n_s_direct_rendering,0};
    PyObject* values[11] = {0,0,0,0,0,0,0,0,0,0,0};
    values[0] = ((PyObject *)Py_None);
    values[1] = ((PyObject *)Py_None);
    values[2] = ((PyObject *)Py_None);
    values[3] = ((PyObject *)Py_None);
    values[4] = ((PyObject *)Py_None);
    values[5] = ((PyObject *)Py_None);
    values[6] = ((PyObject *)Py_None);
    values[7] = ((PyObject *)Py_None);
    values[8] = ((PyObject *)Py_None);
    values[9] = ((PyObject *)Py_None);
    values[10] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        default:
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        CYTHON_FALLTHROUGH;
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_format);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_width);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_height);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_min_filter);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_mag_filter);
          if (value) { values[4] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_mipmap_filter);
          if (value) { values[5] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_wrap_s);
          if (value) { values[6] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_wrap_t);
          if (value) { values[7] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_access);
          if (value) { values[8] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  9:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_data_src);
          if (value) { values[9] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case 10:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_direct_rendering);
          if (value) { values[10] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t used_pos_args = (pos_args < 11) ? pos_args : 11;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_kwargs, values, used_pos_args, "__init__") < 0)) __PYX_ERR(0, 1873, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        default:
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        CYTHON_FALLTHROUGH;
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
      }
    }
    __pyx_v_format = values[0];
    __pyx_v_width = values[1];
    __pyx_v_height = values[2];
    __pyx_v_min_filter = values[3];
    __pyx_v_mag_filter = values[4];
    __pyx_v_mipmap_filter = values[5];
    __pyx_v_wrap_s = values[6];
    __pyx_v_wrap_t = values[7];
    __pyx_v_access = values[8];
    __pyx_v_data_src = values[9];
    __pyx_v_direct_rendering = values[10];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_args); __pyx_v_args = 0;
  __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
  __Pyx_AddTraceback("pynodegl.Texture2D.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pynodegl_9Texture2D___init__(((struct __pyx_obj_8pynodegl_Texture2D *)__pyx_v_self), __pyx_v_format, __pyx_v_width, __pyx_v_height, __pyx_v_min_filter, __pyx_v_mag_filter, __pyx_v_mipmap_filter, __pyx_v_wrap_s, __pyx_v_wrap_t, __pyx_v_access, __pyx_v_data_src, __pyx_v_direct_rendering, __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pynodegl_9Texture2D___init__(struct __pyx_obj_8pynodegl_Texture2D *__pyx_v_self, PyObject *__pyx_v_format, PyObject *__pyx_v_width, PyObject *__pyx_v_height, PyObject *__pyx_v_min_filter, PyObject *__pyx_v_mag_filter, PyObject *__pyx_v_mipmap_filter, PyObject *__pyx_v_wrap_s, PyObject *__pyx_v_wrap_t, PyObject *__pyx_v_access, PyObject *__pyx_v_data_src, PyObject *__pyx_v_direct_rendering, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "nodes_def.pyx":1874
 * 
 *     def __init__(self, format=None, width=None, height=None, min_filter=None, mag_filter=None, mipmap_filter=None, wrap_s=None, wrap_t=None, access=None, data_src=None, direct_rendering=None, *args, **kwargs):
 *         assert self.ctx is NULL             # <<<<<<<<<<<<<<
 *         self.ctx = ngl_node_create(NGL_NODE_TEXTURE2D)
 *         if self.ctx is NULL:
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!((__pyx_v_self->__pyx_base.ctx == NULL) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 1874, __pyx_L1_error)
    }
  }
  #endif

  /* "nodes_def.pyx":1875
 *     def __init__(self, format=None, width=None, height=None, min_filter=None, mag_filter=None, mipmap_filter=None, wrap_s=None, wrap_t=None, access=None, data_src=None, direct_rendering=None, *args, **kwargs):
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_TEXTURE2D)             # <<<<<<<<<<<<<<
 *         if self.ctx is NULL:
 *             raise MemoryError()
 */
  __pyx_v_self->__pyx_base.ctx = ngl_node_create(NGL_NODE_TEXTURE2D);

  /* "nodes_def.pyx":1876
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_TEXTURE2D)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         _Node._init_params(self, *args, **kwargs)
 */
  __pyx_t_1 = ((__pyx_v_self->__pyx_base.ctx == NULL) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "nodes_def.pyx":1877
 *         self.ctx = ngl_node_create(NGL_NODE_TEXTURE2D)
 *         if self.ctx is NULL:
 *             raise MemoryError()             # <<<<<<<<<<<<<<
 *         _Node._init_params(self, *args, **kwargs)
 * 
 */
    PyErr_NoMemory(); __PYX_ERR(0, 1877, __pyx_L1_error)

    /* "nodes_def.pyx":1876
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_TEXTURE2D)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         _Node._init_params(self, *args, **kwargs)
 */
  }

  /* "nodes_def.pyx":1878
 *         if self.ctx is NULL:
 *             raise MemoryError()
 *         _Node._init_params(self, *args, **kwargs)             # <<<<<<<<<<<<<<
 * 
 *         if format is not None:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_8pynodegl__Node), __pyx_n_s_init_params); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1878, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1878, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_v_self));
  __pyx_t_4 = PyNumber_Add(__pyx_t_3, __pyx_v_args); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1878, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, __pyx_v_kwargs); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1878, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "nodes_def.pyx":1880
 *         _Node._init_params(self, *args, **kwargs)
 * 
 *         if format is not None:             # <<<<<<<<<<<<<<
 *             self.set_format(format)
 *         if width is not None:
 */
  __pyx_t_1 = (__pyx_v_format != Py_None);
  __pyx_t_5 = (__pyx_t_1 != 0);
  if (__pyx_t_5) {

    /* "nodes_def.pyx":1881
 * 
 *         if format is not None:
 *             self.set_format(format)             # <<<<<<<<<<<<<<
 *         if width is not None:
 *             self.set_width(width)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_format); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1881, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_2, __pyx_v_format) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_format);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1881, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "nodes_def.pyx":1880
 *         _Node._init_params(self, *args, **kwargs)
 * 
 *         if format is not None:             # <<<<<<<<<<<<<<
 *             self.set_format(format)
 *         if width is not None:
 */
  }

  /* "nodes_def.pyx":1882
 *         if format is not None:
 *             self.set_format(format)
 *         if width is not None:             # <<<<<<<<<<<<<<
 *             self.set_width(width)
 *         if height is not None:
 */
  __pyx_t_5 = (__pyx_v_width != Py_None);
  __pyx_t_1 = (__pyx_t_5 != 0);
  if (__pyx_t_1) {

    /* "nodes_def.pyx":1883
 *             self.set_format(format)
 *         if width is not None:
 *             self.set_width(width)             # <<<<<<<<<<<<<<
 *         if height is not None:
 *             self.set_height(height)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_width); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1883, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_2, __pyx_v_width) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_width);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1883, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "nodes_def.pyx":1882
 *         if format is not None:
 *             self.set_format(format)
 *         if width is not None:             # <<<<<<<<<<<<<<
 *             self.set_width(width)
 *         if height is not None:
 */
  }

  /* "nodes_def.pyx":1884
 *         if width is not None:
 *             self.set_width(width)
 *         if height is not None:             # <<<<<<<<<<<<<<
 *             self.set_height(height)
 *         if min_filter is not None:
 */
  __pyx_t_1 = (__pyx_v_height != Py_None);
  __pyx_t_5 = (__pyx_t_1 != 0);
  if (__pyx_t_5) {

    /* "nodes_def.pyx":1885
 *             self.set_width(width)
 *         if height is not None:
 *             self.set_height(height)             # <<<<<<<<<<<<<<
 *         if min_filter is not None:
 *             self.set_min_filter(min_filter)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_height); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1885, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_2, __pyx_v_height) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_height);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1885, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "nodes_def.pyx":1884
 *         if width is not None:
 *             self.set_width(width)
 *         if height is not None:             # <<<<<<<<<<<<<<
 *             self.set_height(height)
 *         if min_filter is not None:
 */
  }

  /* "nodes_def.pyx":1886
 *         if height is not None:
 *             self.set_height(height)
 *         if min_filter is not None:             # <<<<<<<<<<<<<<
 *             self.set_min_filter(min_filter)
 *         if mag_filter is not None:
 */
  __pyx_t_5 = (__pyx_v_min_filter != Py_None);
  __pyx_t_1 = (__pyx_t_5 != 0);
  if (__pyx_t_1) {

    /* "nodes_def.pyx":1887
 *             self.set_height(height)
 *         if min_filter is not None:
 *             self.set_min_filter(min_filter)             # <<<<<<<<<<<<<<
 *         if mag_filter is not None:
 *             self.set_mag_filter(mag_filter)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_min_filter); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1887, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_2, __pyx_v_min_filter) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_min_filter);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1887, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "nodes_def.pyx":1886
 *         if height is not None:
 *             self.set_height(height)
 *         if min_filter is not None:             # <<<<<<<<<<<<<<
 *             self.set_min_filter(min_filter)
 *         if mag_filter is not None:
 */
  }

  /* "nodes_def.pyx":1888
 *         if min_filter is not None:
 *             self.set_min_filter(min_filter)
 *         if mag_filter is not None:             # <<<<<<<<<<<<<<
 *             self.set_mag_filter(mag_filter)
 *         if mipmap_filter is not None:
 */
  __pyx_t_1 = (__pyx_v_mag_filter != Py_None);
  __pyx_t_5 = (__pyx_t_1 != 0);
  if (__pyx_t_5) {

    /* "nodes_def.pyx":1889
 *             self.set_min_filter(min_filter)
 *         if mag_filter is not None:
 *             self.set_mag_filter(mag_filter)             # <<<<<<<<<<<<<<
 *         if mipmap_filter is not None:
 *             self.set_mipmap_filter(mipmap_filter)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_mag_filter); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1889, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_2, __pyx_v_mag_filter) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_mag_filter);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1889, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "nodes_def.pyx":1888
 *         if min_filter is not None:
 *             self.set_min_filter(min_filter)
 *         if mag_filter is not None:             # <<<<<<<<<<<<<<
 *             self.set_mag_filter(mag_filter)
 *         if mipmap_filter is not None:
 */
  }

  /* "nodes_def.pyx":1890
 *         if mag_filter is not None:
 *             self.set_mag_filter(mag_filter)
 *         if mipmap_filter is not None:             # <<<<<<<<<<<<<<
 *             self.set_mipmap_filter(mipmap_filter)
 *         if wrap_s is not None:
 */
  __pyx_t_5 = (__pyx_v_mipmap_filter != Py_None);
  __pyx_t_1 = (__pyx_t_5 != 0);
  if (__pyx_t_1) {

    /* "nodes_def.pyx":1891
 *             self.set_mag_filter(mag_filter)
 *         if mipmap_filter is not None:
 *             self.set_mipmap_filter(mipmap_filter)             # <<<<<<<<<<<<<<
 *         if wrap_s is not None:
 *             self.set_wrap_s(wrap_s)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_mipmap_filter); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1891, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_2, __pyx_v_mipmap_filter) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_mipmap_filter);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1891, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "nodes_def.pyx":1890
 *         if mag_filter is not None:
 *             self.set_mag_filter(mag_filter)
 *         if mipmap_filter is not None:             # <<<<<<<<<<<<<<
 *             self.set_mipmap_filter(mipmap_filter)
 *         if wrap_s is not None:
 */
  }

  /* "nodes_def.pyx":1892
 *         if mipmap_filter is not None:
 *             self.set_mipmap_filter(mipmap_filter)
 *         if wrap_s is not None:             # <<<<<<<<<<<<<<
 *             self.set_wrap_s(wrap_s)
 *         if wrap_t is not None:
 */
  __pyx_t_1 = (__pyx_v_wrap_s != Py_None);
  __pyx_t_5 = (__pyx_t_1 != 0);
  if (__pyx_t_5) {

    /* "nodes_def.pyx":1893
 *             self.set_mipmap_filter(mipmap_filter)
 *         if wrap_s is not None:
 *             self.set_wrap_s(wrap_s)             # <<<<<<<<<<<<<<
 *         if wrap_t is not None:
 *             self.set_wrap_t(wrap_t)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_wrap_s); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1893, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_2, __pyx_v_wrap_s) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_wrap_s);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1893, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "nodes_def.pyx":1892
 *         if mipmap_filter is not None:
 *             self.set_mipmap_filter(mipmap_filter)
 *         if wrap_s is not None:             # <<<<<<<<<<<<<<
 *             self.set_wrap_s(wrap_s)
 *         if wrap_t is not None:
 */
  }

  /* "nodes_def.pyx":1894
 *         if wrap_s is not None:
 *             self.set_wrap_s(wrap_s)
 *         if wrap_t is not None:             # <<<<<<<<<<<<<<
 *             self.set_wrap_t(wrap_t)
 *         if access is not None:
 */
  __pyx_t_5 = (__pyx_v_wrap_t != Py_None);
  __pyx_t_1 = (__pyx_t_5 != 0);
  if (__pyx_t_1) {

    /* "nodes_def.pyx":1895
 *             self.set_wrap_s(wrap_s)
 *         if wrap_t is not None:
 *             self.set_wrap_t(wrap_t)             # <<<<<<<<<<<<<<
 *         if access is not None:
 *             self.set_access(access)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_wrap_t); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1895, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_2, __pyx_v_wrap_t) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_wrap_t);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1895, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "nodes_def.pyx":1894
 *         if wrap_s is not None:
 *             self.set_wrap_s(wrap_s)
 *         if wrap_t is not None:             # <<<<<<<<<<<<<<
 *             self.set_wrap_t(wrap_t)
 *         if access is not None:
 */
  }

  /* "nodes_def.pyx":1896
 *         if wrap_t is not None:
 *             self.set_wrap_t(wrap_t)
 *         if access is not None:             # <<<<<<<<<<<<<<
 *             self.set_access(access)
 *         if data_src is not None:
 */
  __pyx_t_1 = (__pyx_v_access != Py_None);
  __pyx_t_5 = (__pyx_t_1 != 0);
  if (__pyx_t_5) {

    /* "nodes_def.pyx":1897
 *             self.set_wrap_t(wrap_t)
 *         if access is not None:
 *             self.set_access(access)             # <<<<<<<<<<<<<<
 *         if data_src is not None:
 *             self.set_data_src(data_src)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_access); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1897, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_2, __pyx_v_access) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_access);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1897, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "nodes_def.pyx":1896
 *         if wrap_t is not None:
 *             self.set_wrap_t(wrap_t)
 *         if access is not None:             # <<<<<<<<<<<<<<
 *             self.set_access(access)
 *         if data_src is not None:
 */
  }

  /* "nodes_def.pyx":1898
 *         if access is not None:
 *             self.set_access(access)
 *         if data_src is not None:             # <<<<<<<<<<<<<<
 *             self.set_data_src(data_src)
 *         if direct_rendering is not None:
 */
  __pyx_t_5 = (__pyx_v_data_src != Py_None);
  __pyx_t_1 = (__pyx_t_5 != 0);
  if (__pyx_t_1) {

    /* "nodes_def.pyx":1899
 *             self.set_access(access)
 *         if data_src is not None:
 *             self.set_data_src(data_src)             # <<<<<<<<<<<<<<
 *         if direct_rendering is not None:
 *             self.set_direct_rendering(direct_rendering)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_data_src); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1899, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_2, __pyx_v_data_src) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_data_src);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1899, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "nodes_def.pyx":1898
 *         if access is not None:
 *             self.set_access(access)
 *         if data_src is not None:             # <<<<<<<<<<<<<<
 *             self.set_data_src(data_src)
 *         if direct_rendering is not None:
 */
  }

  /* "nodes_def.pyx":1900
 *         if data_src is not None:
 *             self.set_data_src(data_src)
 *         if direct_rendering is not None:             # <<<<<<<<<<<<<<
 *             self.set_direct_rendering(direct_rendering)
 * 
 */
  __pyx_t_1 = (__pyx_v_direct_rendering != Py_None);
  __pyx_t_5 = (__pyx_t_1 != 0);
  if (__pyx_t_5) {

    /* "nodes_def.pyx":1901
 *             self.set_data_src(data_src)
 *         if direct_rendering is not None:
 *             self.set_direct_rendering(direct_rendering)             # <<<<<<<<<<<<<<
 * 
 *     def set_format(self, const char * format):
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_direct_rendering); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1901, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_2, __pyx_v_direct_rendering) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_direct_rendering);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1901, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "nodes_def.pyx":1900
 *         if data_src is not None:
 *             self.set_data_src(data_src)
 *         if direct_rendering is not None:             # <<<<<<<<<<<<<<
 *             self.set_direct_rendering(direct_rendering)
 * 
 */
  }

  /* "nodes_def.pyx":1873
 * cdef class Texture2D(_Node):
 * 
 *     def __init__(self, format=None, width=None, height=None, min_filter=None, mag_filter=None, mipmap_filter=None, wrap_s=None, wrap_t=None, access=None, data_src=None, direct_rendering=None, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_TEXTURE2D)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pynodegl.Texture2D.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":1903
 *             self.set_direct_rendering(direct_rendering)
 * 
 *     def set_format(self, const char * format):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "format", format)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_9Texture2D_3set_format(PyObject *__pyx_v_self, PyObject *__pyx_arg_format); /*proto*/
static PyObject *__pyx_pw_8pynodegl_9Texture2D_3set_format(PyObject *__pyx_v_self, PyObject *__pyx_arg_format) {
  char const *__pyx_v_format;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_format (wrapper)", 0);
  assert(__pyx_arg_format); {
    __pyx_v_format = __Pyx_PyObject_AsString(__pyx_arg_format); if (unlikely((!__pyx_v_format) && PyErr_Occurred())) __PYX_ERR(0, 1903, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pynodegl.Texture2D.set_format", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pynodegl_9Texture2D_2set_format(((struct __pyx_obj_8pynodegl_Texture2D *)__pyx_v_self), ((char const *)__pyx_v_format));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_9Texture2D_2set_format(struct __pyx_obj_8pynodegl_Texture2D *__pyx_v_self, char const *__pyx_v_format) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("set_format", 0);

  /* "nodes_def.pyx":1904
 * 
 *     def set_format(self, const char * format):
 *         return ngl_node_param_set(self.ctx, "format", format)             # <<<<<<<<<<<<<<
 * 
 *     def set_width(self, int width):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"format"), __pyx_v_format)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1904, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":1903
 *             self.set_direct_rendering(direct_rendering)
 * 
 *     def set_format(self, const char * format):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "format", format)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.Texture2D.set_format", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":1906
 *         return ngl_node_param_set(self.ctx, "format", format)
 * 
 *     def set_width(self, int width):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "width", width)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_9Texture2D_5set_width(PyObject *__pyx_v_self, PyObject *__pyx_arg_width); /*proto*/
static PyObject *__pyx_pw_8pynodegl_9Texture2D_5set_width(PyObject *__pyx_v_self, PyObject *__pyx_arg_width) {
  int __pyx_v_width;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_width (wrapper)", 0);
  assert(__pyx_arg_width); {
    __pyx_v_width = __Pyx_PyInt_As_int(__pyx_arg_width); if (unlikely((__pyx_v_width == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1906, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pynodegl.Texture2D.set_width", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pynodegl_9Texture2D_4set_width(((struct __pyx_obj_8pynodegl_Texture2D *)__pyx_v_self), ((int)__pyx_v_width));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_9Texture2D_4set_width(struct __pyx_obj_8pynodegl_Texture2D *__pyx_v_self, int __pyx_v_width) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("set_width", 0);

  /* "nodes_def.pyx":1907
 * 
 *     def set_width(self, int width):
 *         return ngl_node_param_set(self.ctx, "width", width)             # <<<<<<<<<<<<<<
 * 
 *     def set_height(self, int height):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"width"), __pyx_v_width)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1907, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":1906
 *         return ngl_node_param_set(self.ctx, "format", format)
 * 
 *     def set_width(self, int width):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "width", width)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.Texture2D.set_width", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":1909
 *         return ngl_node_param_set(self.ctx, "width", width)
 * 
 *     def set_height(self, int height):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "height", height)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_9Texture2D_7set_height(PyObject *__pyx_v_self, PyObject *__pyx_arg_height); /*proto*/
static PyObject *__pyx_pw_8pynodegl_9Texture2D_7set_height(PyObject *__pyx_v_self, PyObject *__pyx_arg_height) {
  int __pyx_v_height;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_height (wrapper)", 0);
  assert(__pyx_arg_height); {
    __pyx_v_height = __Pyx_PyInt_As_int(__pyx_arg_height); if (unlikely((__pyx_v_height == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1909, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pynodegl.Texture2D.set_height", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pynodegl_9Texture2D_6set_height(((struct __pyx_obj_8pynodegl_Texture2D *)__pyx_v_self), ((int)__pyx_v_height));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_9Texture2D_6set_height(struct __pyx_obj_8pynodegl_Texture2D *__pyx_v_self, int __pyx_v_height) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("set_height", 0);

  /* "nodes_def.pyx":1910
 * 
 *     def set_height(self, int height):
 *         return ngl_node_param_set(self.ctx, "height", height)             # <<<<<<<<<<<<<<
 * 
 *     def set_min_filter(self, const char * min_filter):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"height"), __pyx_v_height)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1910, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":1909
 *         return ngl_node_param_set(self.ctx, "width", width)
 * 
 *     def set_height(self, int height):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "height", height)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.Texture2D.set_height", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":1912
 *         return ngl_node_param_set(self.ctx, "height", height)
 * 
 *     def set_min_filter(self, const char * min_filter):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "min_filter", min_filter)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_9Texture2D_9set_min_filter(PyObject *__pyx_v_self, PyObject *__pyx_arg_min_filter); /*proto*/
static PyObject *__pyx_pw_8pynodegl_9Texture2D_9set_min_filter(PyObject *__pyx_v_self, PyObject *__pyx_arg_min_filter) {
  char const *__pyx_v_min_filter;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_min_filter (wrapper)", 0);
  assert(__pyx_arg_min_filter); {
    __pyx_v_min_filter = __Pyx_PyObject_AsString(__pyx_arg_min_filter); if (unlikely((!__pyx_v_min_filter) && PyErr_Occurred())) __PYX_ERR(0, 1912, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pynodegl.Texture2D.set_min_filter", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pynodegl_9Texture2D_8set_min_filter(((struct __pyx_obj_8pynodegl_Texture2D *)__pyx_v_self), ((char const *)__pyx_v_min_filter));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_9Texture2D_8set_min_filter(struct __pyx_obj_8pynodegl_Texture2D *__pyx_v_self, char const *__pyx_v_min_filter) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("set_min_filter", 0);

  /* "nodes_def.pyx":1913
 * 
 *     def set_min_filter(self, const char * min_filter):
 *         return ngl_node_param_set(self.ctx, "min_filter", min_filter)             # <<<<<<<<<<<<<<
 * 
 *     def set_mag_filter(self, const char * mag_filter):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"min_filter"), __pyx_v_min_filter)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1913, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":1912
 *         return ngl_node_param_set(self.ctx, "height", height)
 * 
 *     def set_min_filter(self, const char * min_filter):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "min_filter", min_filter)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.Texture2D.set_min_filter", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":1915
 *         return ngl_node_param_set(self.ctx, "min_filter", min_filter)
 * 
 *     def set_mag_filter(self, const char * mag_filter):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "mag_filter", mag_filter)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_9Texture2D_11set_mag_filter(PyObject *__pyx_v_self, PyObject *__pyx_arg_mag_filter); /*proto*/
static PyObject *__pyx_pw_8pynodegl_9Texture2D_11set_mag_filter(PyObject *__pyx_v_self, PyObject *__pyx_arg_mag_filter) {
  char const *__pyx_v_mag_filter;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_mag_filter (wrapper)", 0);
  assert(__pyx_arg_mag_filter); {
    __pyx_v_mag_filter = __Pyx_PyObject_AsString(__pyx_arg_mag_filter); if (unlikely((!__pyx_v_mag_filter) && PyErr_Occurred())) __PYX_ERR(0, 1915, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pynodegl.Texture2D.set_mag_filter", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pynodegl_9Texture2D_10set_mag_filter(((struct __pyx_obj_8pynodegl_Texture2D *)__pyx_v_self), ((char const *)__pyx_v_mag_filter));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_9Texture2D_10set_mag_filter(struct __pyx_obj_8pynodegl_Texture2D *__pyx_v_self, char const *__pyx_v_mag_filter) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("set_mag_filter", 0);

  /* "nodes_def.pyx":1916
 * 
 *     def set_mag_filter(self, const char * mag_filter):
 *         return ngl_node_param_set(self.ctx, "mag_filter", mag_filter)             # <<<<<<<<<<<<<<
 * 
 *     def set_mipmap_filter(self, const char * mipmap_filter):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"mag_filter"), __pyx_v_mag_filter)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1916, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":1915
 *         return ngl_node_param_set(self.ctx, "min_filter", min_filter)
 * 
 *     def set_mag_filter(self, const char * mag_filter):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "mag_filter", mag_filter)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.Texture2D.set_mag_filter", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":1918
 *         return ngl_node_param_set(self.ctx, "mag_filter", mag_filter)
 * 
 *     def set_mipmap_filter(self, const char * mipmap_filter):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "mipmap_filter", mipmap_filter)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_9Texture2D_13set_mipmap_filter(PyObject *__pyx_v_self, PyObject *__pyx_arg_mipmap_filter); /*proto*/
static PyObject *__pyx_pw_8pynodegl_9Texture2D_13set_mipmap_filter(PyObject *__pyx_v_self, PyObject *__pyx_arg_mipmap_filter) {
  char const *__pyx_v_mipmap_filter;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_mipmap_filter (wrapper)", 0);
  assert(__pyx_arg_mipmap_filter); {
    __pyx_v_mipmap_filter = __Pyx_PyObject_AsString(__pyx_arg_mipmap_filter); if (unlikely((!__pyx_v_mipmap_filter) && PyErr_Occurred())) __PYX_ERR(0, 1918, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pynodegl.Texture2D.set_mipmap_filter", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pynodegl_9Texture2D_12set_mipmap_filter(((struct __pyx_obj_8pynodegl_Texture2D *)__pyx_v_self), ((char const *)__pyx_v_mipmap_filter));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_9Texture2D_12set_mipmap_filter(struct __pyx_obj_8pynodegl_Texture2D *__pyx_v_self, char const *__pyx_v_mipmap_filter) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("set_mipmap_filter", 0);

  /* "nodes_def.pyx":1919
 * 
 *     def set_mipmap_filter(self, const char * mipmap_filter):
 *         return ngl_node_param_set(self.ctx, "mipmap_filter", mipmap_filter)             # <<<<<<<<<<<<<<
 * 
 *     def set_wrap_s(self, const char * wrap_s):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"mipmap_filter"), __pyx_v_mipmap_filter)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1919, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":1918
 *         return ngl_node_param_set(self.ctx, "mag_filter", mag_filter)
 * 
 *     def set_mipmap_filter(self, const char * mipmap_filter):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "mipmap_filter", mipmap_filter)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.Texture2D.set_mipmap_filter", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":1921
 *         return ngl_node_param_set(self.ctx, "mipmap_filter", mipmap_filter)
 * 
 *     def set_wrap_s(self, const char * wrap_s):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "wrap_s", wrap_s)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_9Texture2D_15set_wrap_s(PyObject *__pyx_v_self, PyObject *__pyx_arg_wrap_s); /*proto*/
static PyObject *__pyx_pw_8pynodegl_9Texture2D_15set_wrap_s(PyObject *__pyx_v_self, PyObject *__pyx_arg_wrap_s) {
  char const *__pyx_v_wrap_s;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_wrap_s (wrapper)", 0);
  assert(__pyx_arg_wrap_s); {
    __pyx_v_wrap_s = __Pyx_PyObject_AsString(__pyx_arg_wrap_s); if (unlikely((!__pyx_v_wrap_s) && PyErr_Occurred())) __PYX_ERR(0, 1921, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pynodegl.Texture2D.set_wrap_s", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pynodegl_9Texture2D_14set_wrap_s(((struct __pyx_obj_8pynodegl_Texture2D *)__pyx_v_self), ((char const *)__pyx_v_wrap_s));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_9Texture2D_14set_wrap_s(struct __pyx_obj_8pynodegl_Texture2D *__pyx_v_self, char const *__pyx_v_wrap_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("set_wrap_s", 0);

  /* "nodes_def.pyx":1922
 * 
 *     def set_wrap_s(self, const char * wrap_s):
 *         return ngl_node_param_set(self.ctx, "wrap_s", wrap_s)             # <<<<<<<<<<<<<<
 * 
 *     def set_wrap_t(self, const char * wrap_t):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"wrap_s"), __pyx_v_wrap_s)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1922, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":1921
 *         return ngl_node_param_set(self.ctx, "mipmap_filter", mipmap_filter)
 * 
 *     def set_wrap_s(self, const char * wrap_s):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "wrap_s", wrap_s)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.Texture2D.set_wrap_s", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":1924
 *         return ngl_node_param_set(self.ctx, "wrap_s", wrap_s)
 * 
 *     def set_wrap_t(self, const char * wrap_t):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "wrap_t", wrap_t)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_9Texture2D_17set_wrap_t(PyObject *__pyx_v_self, PyObject *__pyx_arg_wrap_t); /*proto*/
static PyObject *__pyx_pw_8pynodegl_9Texture2D_17set_wrap_t(PyObject *__pyx_v_self, PyObject *__pyx_arg_wrap_t) {
  char const *__pyx_v_wrap_t;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_wrap_t (wrapper)", 0);
  assert(__pyx_arg_wrap_t); {
    __pyx_v_wrap_t = __Pyx_PyObject_AsString(__pyx_arg_wrap_t); if (unlikely((!__pyx_v_wrap_t) && PyErr_Occurred())) __PYX_ERR(0, 1924, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pynodegl.Texture2D.set_wrap_t", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pynodegl_9Texture2D_16set_wrap_t(((struct __pyx_obj_8pynodegl_Texture2D *)__pyx_v_self), ((char const *)__pyx_v_wrap_t));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_9Texture2D_16set_wrap_t(struct __pyx_obj_8pynodegl_Texture2D *__pyx_v_self, char const *__pyx_v_wrap_t) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("set_wrap_t", 0);

  /* "nodes_def.pyx":1925
 * 
 *     def set_wrap_t(self, const char * wrap_t):
 *         return ngl_node_param_set(self.ctx, "wrap_t", wrap_t)             # <<<<<<<<<<<<<<
 * 
 *     def set_access(self, const char * access):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"wrap_t"), __pyx_v_wrap_t)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1925, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":1924
 *         return ngl_node_param_set(self.ctx, "wrap_s", wrap_s)
 * 
 *     def set_wrap_t(self, const char * wrap_t):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "wrap_t", wrap_t)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.Texture2D.set_wrap_t", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":1927
 *         return ngl_node_param_set(self.ctx, "wrap_t", wrap_t)
 * 
 *     def set_access(self, const char * access):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "access", access)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_9Texture2D_19set_access(PyObject *__pyx_v_self, PyObject *__pyx_arg_access); /*proto*/
static PyObject *__pyx_pw_8pynodegl_9Texture2D_19set_access(PyObject *__pyx_v_self, PyObject *__pyx_arg_access) {
  char const *__pyx_v_access;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_access (wrapper)", 0);
  assert(__pyx_arg_access); {
    __pyx_v_access = __Pyx_PyObject_AsString(__pyx_arg_access); if (unlikely((!__pyx_v_access) && PyErr_Occurred())) __PYX_ERR(0, 1927, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pynodegl.Texture2D.set_access", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pynodegl_9Texture2D_18set_access(((struct __pyx_obj_8pynodegl_Texture2D *)__pyx_v_self), ((char const *)__pyx_v_access));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_9Texture2D_18set_access(struct __pyx_obj_8pynodegl_Texture2D *__pyx_v_self, char const *__pyx_v_access) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("set_access", 0);

  /* "nodes_def.pyx":1928
 * 
 *     def set_access(self, const char * access):
 *         return ngl_node_param_set(self.ctx, "access", access)             # <<<<<<<<<<<<<<
 * 
 *     def set_data_src(self, _Node data_src):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"access"), __pyx_v_access)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1928, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":1927
 *         return ngl_node_param_set(self.ctx, "wrap_t", wrap_t)
 * 
 *     def set_access(self, const char * access):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "access", access)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.Texture2D.set_access", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":1930
 *         return ngl_node_param_set(self.ctx, "access", access)
 * 
 *     def set_data_src(self, _Node data_src):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "data_src", data_src.ctx)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_9Texture2D_21set_data_src(PyObject *__pyx_v_self, PyObject *__pyx_v_data_src); /*proto*/
static PyObject *__pyx_pw_8pynodegl_9Texture2D_21set_data_src(PyObject *__pyx_v_self, PyObject *__pyx_v_data_src) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_data_src (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_data_src), __pyx_ptype_8pynodegl__Node, 1, "data_src", 0))) __PYX_ERR(0, 1930, __pyx_L1_error)
  __pyx_r = __pyx_pf_8pynodegl_9Texture2D_20set_data_src(((struct __pyx_obj_8pynodegl_Texture2D *)__pyx_v_self), ((struct __pyx_obj_8pynodegl__Node *)__pyx_v_data_src));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_9Texture2D_20set_data_src(struct __pyx_obj_8pynodegl_Texture2D *__pyx_v_self, struct __pyx_obj_8pynodegl__Node *__pyx_v_data_src) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("set_data_src", 0);

  /* "nodes_def.pyx":1931
 * 
 *     def set_data_src(self, _Node data_src):
 *         return ngl_node_param_set(self.ctx, "data_src", data_src.ctx)             # <<<<<<<<<<<<<<
 * 
 *     def set_direct_rendering(self, bint direct_rendering):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"data_src"), __pyx_v_data_src->ctx)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1931, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":1930
 *         return ngl_node_param_set(self.ctx, "access", access)
 * 
 *     def set_data_src(self, _Node data_src):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "data_src", data_src.ctx)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.Texture2D.set_data_src", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":1933
 *         return ngl_node_param_set(self.ctx, "data_src", data_src.ctx)
 * 
 *     def set_direct_rendering(self, bint direct_rendering):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "direct_rendering", direct_rendering)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_9Texture2D_23set_direct_rendering(PyObject *__pyx_v_self, PyObject *__pyx_arg_direct_rendering); /*proto*/
static PyObject *__pyx_pw_8pynodegl_9Texture2D_23set_direct_rendering(PyObject *__pyx_v_self, PyObject *__pyx_arg_direct_rendering) {
  int __pyx_v_direct_rendering;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_direct_rendering (wrapper)", 0);
  assert(__pyx_arg_direct_rendering); {
    __pyx_v_direct_rendering = __Pyx_PyObject_IsTrue(__pyx_arg_direct_rendering); if (unlikely((__pyx_v_direct_rendering == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1933, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pynodegl.Texture2D.set_direct_rendering", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pynodegl_9Texture2D_22set_direct_rendering(((struct __pyx_obj_8pynodegl_Texture2D *)__pyx_v_self), ((int)__pyx_v_direct_rendering));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_9Texture2D_22set_direct_rendering(struct __pyx_obj_8pynodegl_Texture2D *__pyx_v_self, int __pyx_v_direct_rendering) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("set_direct_rendering", 0);

  /* "nodes_def.pyx":1934
 * 
 *     def set_direct_rendering(self, bint direct_rendering):
 *         return ngl_node_param_set(self.ctx, "direct_rendering", direct_rendering)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"direct_rendering"), __pyx_v_direct_rendering)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1934, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":1933
 *         return ngl_node_param_set(self.ctx, "data_src", data_src.ctx)
 * 
 *     def set_direct_rendering(self, bint direct_rendering):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "direct_rendering", direct_rendering)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.Texture2D.set_direct_rendering", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_9Texture2D_25__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pynodegl_9Texture2D_25__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_9Texture2D_24__reduce_cython__(((struct __pyx_obj_8pynodegl_Texture2D *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_9Texture2D_24__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_Texture2D *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__142, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.Texture2D.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_9Texture2D_27__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8pynodegl_9Texture2D_27__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_9Texture2D_26__setstate_cython__(((struct __pyx_obj_8pynodegl_Texture2D *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_9Texture2D_26__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_Texture2D *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__143, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.Texture2D.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":1939
 * cdef class Texture3D(_Node):
 * 
 *     def __init__(self, format=None, width=None, height=None, depth=None, min_filter=None, mag_filter=None, mipmap_filter=None, wrap_s=None, wrap_t=None, wrap_r=None, access=None, data_src=None, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_TEXTURE3D)
 */

/* Python wrapper */
static int __pyx_pw_8pynodegl_9Texture3D_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pynodegl_9Texture3D_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_format = 0;
  PyObject *__pyx_v_width = 0;
  PyObject *__pyx_v_height = 0;
  PyObject *__pyx_v_depth = 0;
  PyObject *__pyx_v_min_filter = 0;
  PyObject *__pyx_v_mag_filter = 0;
  PyObject *__pyx_v_mipmap_filter = 0;
  PyObject *__pyx_v_wrap_s = 0;
  PyObject *__pyx_v_wrap_t = 0;
  PyObject *__pyx_v_wrap_r = 0;
  PyObject *__pyx_v_access = 0;
  PyObject *__pyx_v_data_src = 0;
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  __pyx_v_kwargs = PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return -1;
  __Pyx_GOTREF(__pyx_v_kwargs);
  if (PyTuple_GET_SIZE(__pyx_args) > 12) {
    __pyx_v_args = PyTuple_GetSlice(__pyx_args, 12, PyTuple_GET_SIZE(__pyx_args));
    if (unlikely(!__pyx_v_args)) {
      __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
      __Pyx_RefNannyFinishContext();
      return -1;
    }
    __Pyx_GOTREF(__pyx_v_args);
  } else {
    __pyx_v_args = __pyx_empty_tuple; __Pyx_INCREF(__pyx_empty_tuple);
  }
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_format,&__pyx_n_s_width,&__pyx_n_s_height,&__pyx_n_s_depth,&__pyx_n_s_min_filter,&__pyx_n_s_mag_filter,&__pyx_n_s_mipmap_filter,&__pyx_n_s_wrap_s,&__pyx_n_s_wrap_t,&__pyx_n_s_wrap_r,&__pyx_n_s_access,&__pyx_n_s_data_src,0};
    PyObject* values[12] = {0,0,0,0,0,0,0,0,0,0,0,0};
    values[0] = ((PyObject *)Py_None);
    values[1] = ((PyObject *)Py_None);
    values[2] = ((PyObject *)Py_None);
    values[3] = ((PyObject *)Py_None);
    values[4] = ((PyObject *)Py_None);
    values[5] = ((PyObject *)Py_None);
    values[6] = ((PyObject *)Py_None);
    values[7] = ((PyObject *)Py_None);
    values[8] = ((PyObject *)Py_None);
    values[9] = ((PyObject *)Py_None);
    values[10] = ((PyObject *)Py_None);
    values[11] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        default:
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        CYTHON_FALLTHROUGH;
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        CYTHON_FALLTHROUGH;
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_format);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_width);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_height);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_depth);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_min_filter);
          if (value) { values[4] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_mag_filter);
          if (value) { values[5] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_mipmap_filter);
          if (value) { values[6] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_wrap_s);
          if (value) { values[7] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_wrap_t);
          if (value) { values[8] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  9:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_wrap_r);
          if (value) { values[9] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case 10:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_access);
          if (value) { values[10] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case 11:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_data_src);
          if (value) { values[11] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t used_pos_args = (pos_args < 12) ? pos_args : 12;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_kwargs, values, used_pos_args, "__init__") < 0)) __PYX_ERR(0, 1939, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        default:
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        CYTHON_FALLTHROUGH;
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        CYTHON_FALLTHROUGH;
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
      }
    }
    __pyx_v_format = values[0];
    __pyx_v_width = values[1];
    __pyx_v_height = values[2];
    __pyx_v_depth = values[3];
    __pyx_v_min_filter = values[4];
    __pyx_v_mag_filter = values[5];
    __pyx_v_mipmap_filter = values[6];
    __pyx_v_wrap_s = values[7];
    __pyx_v_wrap_t = values[8];
    __pyx_v_wrap_r = values[9];
    __pyx_v_access = values[10];
    __pyx_v_data_src = values[11];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_args); __pyx_v_args = 0;
  __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
  __Pyx_AddTraceback("pynodegl.Texture3D.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pynodegl_9Texture3D___init__(((struct __pyx_obj_8pynodegl_Texture3D *)__pyx_v_self), __pyx_v_format, __pyx_v_width, __pyx_v_height, __pyx_v_depth, __pyx_v_min_filter, __pyx_v_mag_filter, __pyx_v_mipmap_filter, __pyx_v_wrap_s, __pyx_v_wrap_t, __pyx_v_wrap_r, __pyx_v_access, __pyx_v_data_src, __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pynodegl_9Texture3D___init__(struct __pyx_obj_8pynodegl_Texture3D *__pyx_v_self, PyObject *__pyx_v_format, PyObject *__pyx_v_width, PyObject *__pyx_v_height, PyObject *__pyx_v_depth, PyObject *__pyx_v_min_filter, PyObject *__pyx_v_mag_filter, PyObject *__pyx_v_mipmap_filter, PyObject *__pyx_v_wrap_s, PyObject *__pyx_v_wrap_t, PyObject *__pyx_v_wrap_r, PyObject *__pyx_v_access, PyObject *__pyx_v_data_src, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "nodes_def.pyx":1940
 * 
 *     def __init__(self, format=None, width=None, height=None, depth=None, min_filter=None, mag_filter=None, mipmap_filter=None, wrap_s=None, wrap_t=None, wrap_r=None, access=None, data_src=None, *args, **kwargs):
 *         assert self.ctx is NULL             # <<<<<<<<<<<<<<
 *         self.ctx = ngl_node_create(NGL_NODE_TEXTURE3D)
 *         if self.ctx is NULL:
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!((__pyx_v_self->__pyx_base.ctx == NULL) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 1940, __pyx_L1_error)
    }
  }
  #endif

  /* "nodes_def.pyx":1941
 *     def __init__(self, format=None, width=None, height=None, depth=None, min_filter=None, mag_filter=None, mipmap_filter=None, wrap_s=None, wrap_t=None, wrap_r=None, access=None, data_src=None, *args, **kwargs):
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_TEXTURE3D)             # <<<<<<<<<<<<<<
 *         if self.ctx is NULL:
 *             raise MemoryError()
 */
  __pyx_v_self->__pyx_base.ctx = ngl_node_create(NGL_NODE_TEXTURE3D);

  /* "nodes_def.pyx":1942
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_TEXTURE3D)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         _Node._init_params(self, *args, **kwargs)
 */
  __pyx_t_1 = ((__pyx_v_self->__pyx_base.ctx == NULL) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "nodes_def.pyx":1943
 *         self.ctx = ngl_node_create(NGL_NODE_TEXTURE3D)
 *         if self.ctx is NULL:
 *             raise MemoryError()             # <<<<<<<<<<<<<<
 *         _Node._init_params(self, *args, **kwargs)
 * 
 */
    PyErr_NoMemory(); __PYX_ERR(0, 1943, __pyx_L1_error)

    /* "nodes_def.pyx":1942
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_TEXTURE3D)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         _Node._init_params(self, *args, **kwargs)
 */
  }

  /* "nodes_def.pyx":1944
 *         if self.ctx is NULL:
 *             raise MemoryError()
 *         _Node._init_params(self, *args, **kwargs)             # <<<<<<<<<<<<<<
 * 
 *         if format is not None:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_8pynodegl__Node), __pyx_n_s_init_params); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1944, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1944, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_v_self));
  __pyx_t_4 = PyNumber_Add(__pyx_t_3, __pyx_v_args); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1944, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, __pyx_v_kwargs); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1944, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "nodes_def.pyx":1946
 *         _Node._init_params(self, *args, **kwargs)
 * 
 *         if format is not None:             # <<<<<<<<<<<<<<
 *             self.set_format(format)
 *         if width is not None:
 */
  __pyx_t_1 = (__pyx_v_format != Py_None);
  __pyx_t_5 = (__pyx_t_1 != 0);
  if (__pyx_t_5) {

    /* "nodes_def.pyx":1947
 * 
 *         if format is not None:
 *             self.set_format(format)             # <<<<<<<<<<<<<<
 *         if width is not None:
 *             self.set_width(width)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_format); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1947, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_2, __pyx_v_format) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_format);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1947, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "nodes_def.pyx":1946
 *         _Node._init_params(self, *args, **kwargs)
 * 
 *         if format is not None:             # <<<<<<<<<<<<<<
 *             self.set_format(format)
 *         if width is not None:
 */
  }

  /* "nodes_def.pyx":1948
 *         if format is not None:
 *             self.set_format(format)
 *         if width is not None:             # <<<<<<<<<<<<<<
 *             self.set_width(width)
 *         if height is not None:
 */
  __pyx_t_5 = (__pyx_v_width != Py_None);
  __pyx_t_1 = (__pyx_t_5 != 0);
  if (__pyx_t_1) {

    /* "nodes_def.pyx":1949
 *             self.set_format(format)
 *         if width is not None:
 *             self.set_width(width)             # <<<<<<<<<<<<<<
 *         if height is not None:
 *             self.set_height(height)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_width); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1949, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_2, __pyx_v_width) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_width);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1949, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "nodes_def.pyx":1948
 *         if format is not None:
 *             self.set_format(format)
 *         if width is not None:             # <<<<<<<<<<<<<<
 *             self.set_width(width)
 *         if height is not None:
 */
  }

  /* "nodes_def.pyx":1950
 *         if width is not None:
 *             self.set_width(width)
 *         if height is not None:             # <<<<<<<<<<<<<<
 *             self.set_height(height)
 *         if depth is not None:
 */
  __pyx_t_1 = (__pyx_v_height != Py_None);
  __pyx_t_5 = (__pyx_t_1 != 0);
  if (__pyx_t_5) {

    /* "nodes_def.pyx":1951
 *             self.set_width(width)
 *         if height is not None:
 *             self.set_height(height)             # <<<<<<<<<<<<<<
 *         if depth is not None:
 *             self.set_depth(depth)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_height); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1951, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_2, __pyx_v_height) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_height);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1951, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "nodes_def.pyx":1950
 *         if width is not None:
 *             self.set_width(width)
 *         if height is not None:             # <<<<<<<<<<<<<<
 *             self.set_height(height)
 *         if depth is not None:
 */
  }

  /* "nodes_def.pyx":1952
 *         if height is not None:
 *             self.set_height(height)
 *         if depth is not None:             # <<<<<<<<<<<<<<
 *             self.set_depth(depth)
 *         if min_filter is not None:
 */
  __pyx_t_5 = (__pyx_v_depth != Py_None);
  __pyx_t_1 = (__pyx_t_5 != 0);
  if (__pyx_t_1) {

    /* "nodes_def.pyx":1953
 *             self.set_height(height)
 *         if depth is not None:
 *             self.set_depth(depth)             # <<<<<<<<<<<<<<
 *         if min_filter is not None:
 *             self.set_min_filter(min_filter)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_depth); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1953, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_2, __pyx_v_depth) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_depth);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1953, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "nodes_def.pyx":1952
 *         if height is not None:
 *             self.set_height(height)
 *         if depth is not None:             # <<<<<<<<<<<<<<
 *             self.set_depth(depth)
 *         if min_filter is not None:
 */
  }

  /* "nodes_def.pyx":1954
 *         if depth is not None:
 *             self.set_depth(depth)
 *         if min_filter is not None:             # <<<<<<<<<<<<<<
 *             self.set_min_filter(min_filter)
 *         if mag_filter is not None:
 */
  __pyx_t_1 = (__pyx_v_min_filter != Py_None);
  __pyx_t_5 = (__pyx_t_1 != 0);
  if (__pyx_t_5) {

    /* "nodes_def.pyx":1955
 *             self.set_depth(depth)
 *         if min_filter is not None:
 *             self.set_min_filter(min_filter)             # <<<<<<<<<<<<<<
 *         if mag_filter is not None:
 *             self.set_mag_filter(mag_filter)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_min_filter); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1955, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_2, __pyx_v_min_filter) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_min_filter);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1955, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "nodes_def.pyx":1954
 *         if depth is not None:
 *             self.set_depth(depth)
 *         if min_filter is not None:             # <<<<<<<<<<<<<<
 *             self.set_min_filter(min_filter)
 *         if mag_filter is not None:
 */
  }

  /* "nodes_def.pyx":1956
 *         if min_filter is not None:
 *             self.set_min_filter(min_filter)
 *         if mag_filter is not None:             # <<<<<<<<<<<<<<
 *             self.set_mag_filter(mag_filter)
 *         if mipmap_filter is not None:
 */
  __pyx_t_5 = (__pyx_v_mag_filter != Py_None);
  __pyx_t_1 = (__pyx_t_5 != 0);
  if (__pyx_t_1) {

    /* "nodes_def.pyx":1957
 *             self.set_min_filter(min_filter)
 *         if mag_filter is not None:
 *             self.set_mag_filter(mag_filter)             # <<<<<<<<<<<<<<
 *         if mipmap_filter is not None:
 *             self.set_mipmap_filter(mipmap_filter)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_mag_filter); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1957, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_2, __pyx_v_mag_filter) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_mag_filter);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1957, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "nodes_def.pyx":1956
 *         if min_filter is not None:
 *             self.set_min_filter(min_filter)
 *         if mag_filter is not None:             # <<<<<<<<<<<<<<
 *             self.set_mag_filter(mag_filter)
 *         if mipmap_filter is not None:
 */
  }

  /* "nodes_def.pyx":1958
 *         if mag_filter is not None:
 *             self.set_mag_filter(mag_filter)
 *         if mipmap_filter is not None:             # <<<<<<<<<<<<<<
 *             self.set_mipmap_filter(mipmap_filter)
 *         if wrap_s is not None:
 */
  __pyx_t_1 = (__pyx_v_mipmap_filter != Py_None);
  __pyx_t_5 = (__pyx_t_1 != 0);
  if (__pyx_t_5) {

    /* "nodes_def.pyx":1959
 *             self.set_mag_filter(mag_filter)
 *         if mipmap_filter is not None:
 *             self.set_mipmap_filter(mipmap_filter)             # <<<<<<<<<<<<<<
 *         if wrap_s is not None:
 *             self.set_wrap_s(wrap_s)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_mipmap_filter); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1959, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_2, __pyx_v_mipmap_filter) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_mipmap_filter);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1959, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "nodes_def.pyx":1958
 *         if mag_filter is not None:
 *             self.set_mag_filter(mag_filter)
 *         if mipmap_filter is not None:             # <<<<<<<<<<<<<<
 *             self.set_mipmap_filter(mipmap_filter)
 *         if wrap_s is not None:
 */
  }

  /* "nodes_def.pyx":1960
 *         if mipmap_filter is not None:
 *             self.set_mipmap_filter(mipmap_filter)
 *         if wrap_s is not None:             # <<<<<<<<<<<<<<
 *             self.set_wrap_s(wrap_s)
 *         if wrap_t is not None:
 */
  __pyx_t_5 = (__pyx_v_wrap_s != Py_None);
  __pyx_t_1 = (__pyx_t_5 != 0);
  if (__pyx_t_1) {

    /* "nodes_def.pyx":1961
 *             self.set_mipmap_filter(mipmap_filter)
 *         if wrap_s is not None:
 *             self.set_wrap_s(wrap_s)             # <<<<<<<<<<<<<<
 *         if wrap_t is not None:
 *             self.set_wrap_t(wrap_t)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_wrap_s); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1961, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_2, __pyx_v_wrap_s) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_wrap_s);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1961, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "nodes_def.pyx":1960
 *         if mipmap_filter is not None:
 *             self.set_mipmap_filter(mipmap_filter)
 *         if wrap_s is not None:             # <<<<<<<<<<<<<<
 *             self.set_wrap_s(wrap_s)
 *         if wrap_t is not None:
 */
  }

  /* "nodes_def.pyx":1962
 *         if wrap_s is not None:
 *             self.set_wrap_s(wrap_s)
 *         if wrap_t is not None:             # <<<<<<<<<<<<<<
 *             self.set_wrap_t(wrap_t)
 *         if wrap_r is not None:
 */
  __pyx_t_1 = (__pyx_v_wrap_t != Py_None);
  __pyx_t_5 = (__pyx_t_1 != 0);
  if (__pyx_t_5) {

    /* "nodes_def.pyx":1963
 *             self.set_wrap_s(wrap_s)
 *         if wrap_t is not None:
 *             self.set_wrap_t(wrap_t)             # <<<<<<<<<<<<<<
 *         if wrap_r is not None:
 *             self.set_wrap_r(wrap_r)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_wrap_t); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1963, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_2, __pyx_v_wrap_t) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_wrap_t);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1963, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "nodes_def.pyx":1962
 *         if wrap_s is not None:
 *             self.set_wrap_s(wrap_s)
 *         if wrap_t is not None:             # <<<<<<<<<<<<<<
 *             self.set_wrap_t(wrap_t)
 *         if wrap_r is not None:
 */
  }

  /* "nodes_def.pyx":1964
 *         if wrap_t is not None:
 *             self.set_wrap_t(wrap_t)
 *         if wrap_r is not None:             # <<<<<<<<<<<<<<
 *             self.set_wrap_r(wrap_r)
 *         if access is not None:
 */
  __pyx_t_5 = (__pyx_v_wrap_r != Py_None);
  __pyx_t_1 = (__pyx_t_5 != 0);
  if (__pyx_t_1) {

    /* "nodes_def.pyx":1965
 *             self.set_wrap_t(wrap_t)
 *         if wrap_r is not None:
 *             self.set_wrap_r(wrap_r)             # <<<<<<<<<<<<<<
 *         if access is not None:
 *             self.set_access(access)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_wrap_r); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1965, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_2, __pyx_v_wrap_r) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_wrap_r);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1965, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "nodes_def.pyx":1964
 *         if wrap_t is not None:
 *             self.set_wrap_t(wrap_t)
 *         if wrap_r is not None:             # <<<<<<<<<<<<<<
 *             self.set_wrap_r(wrap_r)
 *         if access is not None:
 */
  }

  /* "nodes_def.pyx":1966
 *         if wrap_r is not None:
 *             self.set_wrap_r(wrap_r)
 *         if access is not None:             # <<<<<<<<<<<<<<
 *             self.set_access(access)
 *         if data_src is not None:
 */
  __pyx_t_1 = (__pyx_v_access != Py_None);
  __pyx_t_5 = (__pyx_t_1 != 0);
  if (__pyx_t_5) {

    /* "nodes_def.pyx":1967
 *             self.set_wrap_r(wrap_r)
 *         if access is not None:
 *             self.set_access(access)             # <<<<<<<<<<<<<<
 *         if data_src is not None:
 *             self.set_data_src(data_src)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_access); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1967, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_2, __pyx_v_access) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_access);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1967, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "nodes_def.pyx":1966
 *         if wrap_r is not None:
 *             self.set_wrap_r(wrap_r)
 *         if access is not None:             # <<<<<<<<<<<<<<
 *             self.set_access(access)
 *         if data_src is not None:
 */
  }

  /* "nodes_def.pyx":1968
 *         if access is not None:
 *             self.set_access(access)
 *         if data_src is not None:             # <<<<<<<<<<<<<<
 *             self.set_data_src(data_src)
 * 
 */
  __pyx_t_5 = (__pyx_v_data_src != Py_None);
  __pyx_t_1 = (__pyx_t_5 != 0);
  if (__pyx_t_1) {

    /* "nodes_def.pyx":1969
 *             self.set_access(access)
 *         if data_src is not None:
 *             self.set_data_src(data_src)             # <<<<<<<<<<<<<<
 * 
 *     def set_format(self, const char * format):
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_data_src); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1969, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_2, __pyx_v_data_src) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_data_src);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1969, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "nodes_def.pyx":1968
 *         if access is not None:
 *             self.set_access(access)
 *         if data_src is not None:             # <<<<<<<<<<<<<<
 *             self.set_data_src(data_src)
 * 
 */
  }

  /* "nodes_def.pyx":1939
 * cdef class Texture3D(_Node):
 * 
 *     def __init__(self, format=None, width=None, height=None, depth=None, min_filter=None, mag_filter=None, mipmap_filter=None, wrap_s=None, wrap_t=None, wrap_r=None, access=None, data_src=None, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_TEXTURE3D)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pynodegl.Texture3D.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":1971
 *             self.set_data_src(data_src)
 * 
 *     def set_format(self, const char * format):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "format", format)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_9Texture3D_3set_format(PyObject *__pyx_v_self, PyObject *__pyx_arg_format); /*proto*/
static PyObject *__pyx_pw_8pynodegl_9Texture3D_3set_format(PyObject *__pyx_v_self, PyObject *__pyx_arg_format) {
  char const *__pyx_v_format;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_format (wrapper)", 0);
  assert(__pyx_arg_format); {
    __pyx_v_format = __Pyx_PyObject_AsString(__pyx_arg_format); if (unlikely((!__pyx_v_format) && PyErr_Occurred())) __PYX_ERR(0, 1971, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pynodegl.Texture3D.set_format", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pynodegl_9Texture3D_2set_format(((struct __pyx_obj_8pynodegl_Texture3D *)__pyx_v_self), ((char const *)__pyx_v_format));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_9Texture3D_2set_format(struct __pyx_obj_8pynodegl_Texture3D *__pyx_v_self, char const *__pyx_v_format) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("set_format", 0);

  /* "nodes_def.pyx":1972
 * 
 *     def set_format(self, const char * format):
 *         return ngl_node_param_set(self.ctx, "format", format)             # <<<<<<<<<<<<<<
 * 
 *     def set_width(self, int width):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"format"), __pyx_v_format)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1972, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":1971
 *             self.set_data_src(data_src)
 * 
 *     def set_format(self, const char * format):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "format", format)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.Texture3D.set_format", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":1974
 *         return ngl_node_param_set(self.ctx, "format", format)
 * 
 *     def set_width(self, int width):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "width", width)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_9Texture3D_5set_width(PyObject *__pyx_v_self, PyObject *__pyx_arg_width); /*proto*/
static PyObject *__pyx_pw_8pynodegl_9Texture3D_5set_width(PyObject *__pyx_v_self, PyObject *__pyx_arg_width) {
  int __pyx_v_width;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_width (wrapper)", 0);
  assert(__pyx_arg_width); {
    __pyx_v_width = __Pyx_PyInt_As_int(__pyx_arg_width); if (unlikely((__pyx_v_width == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1974, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pynodegl.Texture3D.set_width", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pynodegl_9Texture3D_4set_width(((struct __pyx_obj_8pynodegl_Texture3D *)__pyx_v_self), ((int)__pyx_v_width));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_9Texture3D_4set_width(struct __pyx_obj_8pynodegl_Texture3D *__pyx_v_self, int __pyx_v_width) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("set_width", 0);

  /* "nodes_def.pyx":1975
 * 
 *     def set_width(self, int width):
 *         return ngl_node_param_set(self.ctx, "width", width)             # <<<<<<<<<<<<<<
 * 
 *     def set_height(self, int height):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"width"), __pyx_v_width)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1975, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":1974
 *         return ngl_node_param_set(self.ctx, "format", format)
 * 
 *     def set_width(self, int width):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "width", width)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.Texture3D.set_width", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":1977
 *         return ngl_node_param_set(self.ctx, "width", width)
 * 
 *     def set_height(self, int height):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "height", height)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_9Texture3D_7set_height(PyObject *__pyx_v_self, PyObject *__pyx_arg_height); /*proto*/
static PyObject *__pyx_pw_8pynodegl_9Texture3D_7set_height(PyObject *__pyx_v_self, PyObject *__pyx_arg_height) {
  int __pyx_v_height;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_height (wrapper)", 0);
  assert(__pyx_arg_height); {
    __pyx_v_height = __Pyx_PyInt_As_int(__pyx_arg_height); if (unlikely((__pyx_v_height == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1977, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pynodegl.Texture3D.set_height", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pynodegl_9Texture3D_6set_height(((struct __pyx_obj_8pynodegl_Texture3D *)__pyx_v_self), ((int)__pyx_v_height));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_9Texture3D_6set_height(struct __pyx_obj_8pynodegl_Texture3D *__pyx_v_self, int __pyx_v_height) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("set_height", 0);

  /* "nodes_def.pyx":1978
 * 
 *     def set_height(self, int height):
 *         return ngl_node_param_set(self.ctx, "height", height)             # <<<<<<<<<<<<<<
 * 
 *     def set_depth(self, int depth):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"height"), __pyx_v_height)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1978, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":1977
 *         return ngl_node_param_set(self.ctx, "width", width)
 * 
 *     def set_height(self, int height):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "height", height)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.Texture3D.set_height", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":1980
 *         return ngl_node_param_set(self.ctx, "height", height)
 * 
 *     def set_depth(self, int depth):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "depth", depth)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_9Texture3D_9set_depth(PyObject *__pyx_v_self, PyObject *__pyx_arg_depth); /*proto*/
static PyObject *__pyx_pw_8pynodegl_9Texture3D_9set_depth(PyObject *__pyx_v_self, PyObject *__pyx_arg_depth) {
  int __pyx_v_depth;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_depth (wrapper)", 0);
  assert(__pyx_arg_depth); {
    __pyx_v_depth = __Pyx_PyInt_As_int(__pyx_arg_depth); if (unlikely((__pyx_v_depth == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1980, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pynodegl.Texture3D.set_depth", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pynodegl_9Texture3D_8set_depth(((struct __pyx_obj_8pynodegl_Texture3D *)__pyx_v_self), ((int)__pyx_v_depth));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_9Texture3D_8set_depth(struct __pyx_obj_8pynodegl_Texture3D *__pyx_v_self, int __pyx_v_depth) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("set_depth", 0);

  /* "nodes_def.pyx":1981
 * 
 *     def set_depth(self, int depth):
 *         return ngl_node_param_set(self.ctx, "depth", depth)             # <<<<<<<<<<<<<<
 * 
 *     def set_min_filter(self, const char * min_filter):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"depth"), __pyx_v_depth)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1981, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":1980
 *         return ngl_node_param_set(self.ctx, "height", height)
 * 
 *     def set_depth(self, int depth):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "depth", depth)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.Texture3D.set_depth", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":1983
 *         return ngl_node_param_set(self.ctx, "depth", depth)
 * 
 *     def set_min_filter(self, const char * min_filter):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "min_filter", min_filter)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_9Texture3D_11set_min_filter(PyObject *__pyx_v_self, PyObject *__pyx_arg_min_filter); /*proto*/
static PyObject *__pyx_pw_8pynodegl_9Texture3D_11set_min_filter(PyObject *__pyx_v_self, PyObject *__pyx_arg_min_filter) {
  char const *__pyx_v_min_filter;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_min_filter (wrapper)", 0);
  assert(__pyx_arg_min_filter); {
    __pyx_v_min_filter = __Pyx_PyObject_AsString(__pyx_arg_min_filter); if (unlikely((!__pyx_v_min_filter) && PyErr_Occurred())) __PYX_ERR(0, 1983, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pynodegl.Texture3D.set_min_filter", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pynodegl_9Texture3D_10set_min_filter(((struct __pyx_obj_8pynodegl_Texture3D *)__pyx_v_self), ((char const *)__pyx_v_min_filter));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_9Texture3D_10set_min_filter(struct __pyx_obj_8pynodegl_Texture3D *__pyx_v_self, char const *__pyx_v_min_filter) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("set_min_filter", 0);

  /* "nodes_def.pyx":1984
 * 
 *     def set_min_filter(self, const char * min_filter):
 *         return ngl_node_param_set(self.ctx, "min_filter", min_filter)             # <<<<<<<<<<<<<<
 * 
 *     def set_mag_filter(self, const char * mag_filter):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"min_filter"), __pyx_v_min_filter)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1984, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":1983
 *         return ngl_node_param_set(self.ctx, "depth", depth)
 * 
 *     def set_min_filter(self, const char * min_filter):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "min_filter", min_filter)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.Texture3D.set_min_filter", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":1986
 *         return ngl_node_param_set(self.ctx, "min_filter", min_filter)
 * 
 *     def set_mag_filter(self, const char * mag_filter):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "mag_filter", mag_filter)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_9Texture3D_13set_mag_filter(PyObject *__pyx_v_self, PyObject *__pyx_arg_mag_filter); /*proto*/
static PyObject *__pyx_pw_8pynodegl_9Texture3D_13set_mag_filter(PyObject *__pyx_v_self, PyObject *__pyx_arg_mag_filter) {
  char const *__pyx_v_mag_filter;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_mag_filter (wrapper)", 0);
  assert(__pyx_arg_mag_filter); {
    __pyx_v_mag_filter = __Pyx_PyObject_AsString(__pyx_arg_mag_filter); if (unlikely((!__pyx_v_mag_filter) && PyErr_Occurred())) __PYX_ERR(0, 1986, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pynodegl.Texture3D.set_mag_filter", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pynodegl_9Texture3D_12set_mag_filter(((struct __pyx_obj_8pynodegl_Texture3D *)__pyx_v_self), ((char const *)__pyx_v_mag_filter));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_9Texture3D_12set_mag_filter(struct __pyx_obj_8pynodegl_Texture3D *__pyx_v_self, char const *__pyx_v_mag_filter) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("set_mag_filter", 0);

  /* "nodes_def.pyx":1987
 * 
 *     def set_mag_filter(self, const char * mag_filter):
 *         return ngl_node_param_set(self.ctx, "mag_filter", mag_filter)             # <<<<<<<<<<<<<<
 * 
 *     def set_mipmap_filter(self, const char * mipmap_filter):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"mag_filter"), __pyx_v_mag_filter)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1987, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":1986
 *         return ngl_node_param_set(self.ctx, "min_filter", min_filter)
 * 
 *     def set_mag_filter(self, const char * mag_filter):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "mag_filter", mag_filter)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.Texture3D.set_mag_filter", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":1989
 *         return ngl_node_param_set(self.ctx, "mag_filter", mag_filter)
 * 
 *     def set_mipmap_filter(self, const char * mipmap_filter):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "mipmap_filter", mipmap_filter)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_9Texture3D_15set_mipmap_filter(PyObject *__pyx_v_self, PyObject *__pyx_arg_mipmap_filter); /*proto*/
static PyObject *__pyx_pw_8pynodegl_9Texture3D_15set_mipmap_filter(PyObject *__pyx_v_self, PyObject *__pyx_arg_mipmap_filter) {
  char const *__pyx_v_mipmap_filter;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_mipmap_filter (wrapper)", 0);
  assert(__pyx_arg_mipmap_filter); {
    __pyx_v_mipmap_filter = __Pyx_PyObject_AsString(__pyx_arg_mipmap_filter); if (unlikely((!__pyx_v_mipmap_filter) && PyErr_Occurred())) __PYX_ERR(0, 1989, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pynodegl.Texture3D.set_mipmap_filter", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pynodegl_9Texture3D_14set_mipmap_filter(((struct __pyx_obj_8pynodegl_Texture3D *)__pyx_v_self), ((char const *)__pyx_v_mipmap_filter));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_9Texture3D_14set_mipmap_filter(struct __pyx_obj_8pynodegl_Texture3D *__pyx_v_self, char const *__pyx_v_mipmap_filter) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("set_mipmap_filter", 0);

  /* "nodes_def.pyx":1990
 * 
 *     def set_mipmap_filter(self, const char * mipmap_filter):
 *         return ngl_node_param_set(self.ctx, "mipmap_filter", mipmap_filter)             # <<<<<<<<<<<<<<
 * 
 *     def set_wrap_s(self, const char * wrap_s):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"mipmap_filter"), __pyx_v_mipmap_filter)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1990, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":1989
 *         return ngl_node_param_set(self.ctx, "mag_filter", mag_filter)
 * 
 *     def set_mipmap_filter(self, const char * mipmap_filter):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "mipmap_filter", mipmap_filter)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.Texture3D.set_mipmap_filter", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":1992
 *         return ngl_node_param_set(self.ctx, "mipmap_filter", mipmap_filter)
 * 
 *     def set_wrap_s(self, const char * wrap_s):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "wrap_s", wrap_s)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_9Texture3D_17set_wrap_s(PyObject *__pyx_v_self, PyObject *__pyx_arg_wrap_s); /*proto*/
static PyObject *__pyx_pw_8pynodegl_9Texture3D_17set_wrap_s(PyObject *__pyx_v_self, PyObject *__pyx_arg_wrap_s) {
  char const *__pyx_v_wrap_s;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_wrap_s (wrapper)", 0);
  assert(__pyx_arg_wrap_s); {
    __pyx_v_wrap_s = __Pyx_PyObject_AsString(__pyx_arg_wrap_s); if (unlikely((!__pyx_v_wrap_s) && PyErr_Occurred())) __PYX_ERR(0, 1992, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pynodegl.Texture3D.set_wrap_s", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pynodegl_9Texture3D_16set_wrap_s(((struct __pyx_obj_8pynodegl_Texture3D *)__pyx_v_self), ((char const *)__pyx_v_wrap_s));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_9Texture3D_16set_wrap_s(struct __pyx_obj_8pynodegl_Texture3D *__pyx_v_self, char const *__pyx_v_wrap_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("set_wrap_s", 0);

  /* "nodes_def.pyx":1993
 * 
 *     def set_wrap_s(self, const char * wrap_s):
 *         return ngl_node_param_set(self.ctx, "wrap_s", wrap_s)             # <<<<<<<<<<<<<<
 * 
 *     def set_wrap_t(self, const char * wrap_t):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"wrap_s"), __pyx_v_wrap_s)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1993, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":1992
 *         return ngl_node_param_set(self.ctx, "mipmap_filter", mipmap_filter)
 * 
 *     def set_wrap_s(self, const char * wrap_s):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "wrap_s", wrap_s)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.Texture3D.set_wrap_s", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":1995
 *         return ngl_node_param_set(self.ctx, "wrap_s", wrap_s)
 * 
 *     def set_wrap_t(self, const char * wrap_t):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "wrap_t", wrap_t)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_9Texture3D_19set_wrap_t(PyObject *__pyx_v_self, PyObject *__pyx_arg_wrap_t); /*proto*/
static PyObject *__pyx_pw_8pynodegl_9Texture3D_19set_wrap_t(PyObject *__pyx_v_self, PyObject *__pyx_arg_wrap_t) {
  char const *__pyx_v_wrap_t;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_wrap_t (wrapper)", 0);
  assert(__pyx_arg_wrap_t); {
    __pyx_v_wrap_t = __Pyx_PyObject_AsString(__pyx_arg_wrap_t); if (unlikely((!__pyx_v_wrap_t) && PyErr_Occurred())) __PYX_ERR(0, 1995, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pynodegl.Texture3D.set_wrap_t", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pynodegl_9Texture3D_18set_wrap_t(((struct __pyx_obj_8pynodegl_Texture3D *)__pyx_v_self), ((char const *)__pyx_v_wrap_t));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_9Texture3D_18set_wrap_t(struct __pyx_obj_8pynodegl_Texture3D *__pyx_v_self, char const *__pyx_v_wrap_t) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("set_wrap_t", 0);

  /* "nodes_def.pyx":1996
 * 
 *     def set_wrap_t(self, const char * wrap_t):
 *         return ngl_node_param_set(self.ctx, "wrap_t", wrap_t)             # <<<<<<<<<<<<<<
 * 
 *     def set_wrap_r(self, const char * wrap_r):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"wrap_t"), __pyx_v_wrap_t)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1996, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":1995
 *         return ngl_node_param_set(self.ctx, "wrap_s", wrap_s)
 * 
 *     def set_wrap_t(self, const char * wrap_t):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "wrap_t", wrap_t)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.Texture3D.set_wrap_t", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":1998
 *         return ngl_node_param_set(self.ctx, "wrap_t", wrap_t)
 * 
 *     def set_wrap_r(self, const char * wrap_r):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "wrap_r", wrap_r)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_9Texture3D_21set_wrap_r(PyObject *__pyx_v_self, PyObject *__pyx_arg_wrap_r); /*proto*/
static PyObject *__pyx_pw_8pynodegl_9Texture3D_21set_wrap_r(PyObject *__pyx_v_self, PyObject *__pyx_arg_wrap_r) {
  char const *__pyx_v_wrap_r;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_wrap_r (wrapper)", 0);
  assert(__pyx_arg_wrap_r); {
    __pyx_v_wrap_r = __Pyx_PyObject_AsString(__pyx_arg_wrap_r); if (unlikely((!__pyx_v_wrap_r) && PyErr_Occurred())) __PYX_ERR(0, 1998, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pynodegl.Texture3D.set_wrap_r", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pynodegl_9Texture3D_20set_wrap_r(((struct __pyx_obj_8pynodegl_Texture3D *)__pyx_v_self), ((char const *)__pyx_v_wrap_r));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_9Texture3D_20set_wrap_r(struct __pyx_obj_8pynodegl_Texture3D *__pyx_v_self, char const *__pyx_v_wrap_r) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("set_wrap_r", 0);

  /* "nodes_def.pyx":1999
 * 
 *     def set_wrap_r(self, const char * wrap_r):
 *         return ngl_node_param_set(self.ctx, "wrap_r", wrap_r)             # <<<<<<<<<<<<<<
 * 
 *     def set_access(self, const char * access):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"wrap_r"), __pyx_v_wrap_r)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1999, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":1998
 *         return ngl_node_param_set(self.ctx, "wrap_t", wrap_t)
 * 
 *     def set_wrap_r(self, const char * wrap_r):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "wrap_r", wrap_r)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.Texture3D.set_wrap_r", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":2001
 *         return ngl_node_param_set(self.ctx, "wrap_r", wrap_r)
 * 
 *     def set_access(self, const char * access):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "access", access)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_9Texture3D_23set_access(PyObject *__pyx_v_self, PyObject *__pyx_arg_access); /*proto*/
static PyObject *__pyx_pw_8pynodegl_9Texture3D_23set_access(PyObject *__pyx_v_self, PyObject *__pyx_arg_access) {
  char const *__pyx_v_access;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_access (wrapper)", 0);
  assert(__pyx_arg_access); {
    __pyx_v_access = __Pyx_PyObject_AsString(__pyx_arg_access); if (unlikely((!__pyx_v_access) && PyErr_Occurred())) __PYX_ERR(0, 2001, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pynodegl.Texture3D.set_access", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pynodegl_9Texture3D_22set_access(((struct __pyx_obj_8pynodegl_Texture3D *)__pyx_v_self), ((char const *)__pyx_v_access));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_9Texture3D_22set_access(struct __pyx_obj_8pynodegl_Texture3D *__pyx_v_self, char const *__pyx_v_access) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("set_access", 0);

  /* "nodes_def.pyx":2002
 * 
 *     def set_access(self, const char * access):
 *         return ngl_node_param_set(self.ctx, "access", access)             # <<<<<<<<<<<<<<
 * 
 *     def set_data_src(self, _Node data_src):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"access"), __pyx_v_access)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2002, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":2001
 *         return ngl_node_param_set(self.ctx, "wrap_r", wrap_r)
 * 
 *     def set_access(self, const char * access):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "access", access)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.Texture3D.set_access", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":2004
 *         return ngl_node_param_set(self.ctx, "access", access)
 * 
 *     def set_data_src(self, _Node data_src):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "data_src", data_src.ctx)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_9Texture3D_25set_data_src(PyObject *__pyx_v_self, PyObject *__pyx_v_data_src); /*proto*/
static PyObject *__pyx_pw_8pynodegl_9Texture3D_25set_data_src(PyObject *__pyx_v_self, PyObject *__pyx_v_data_src) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_data_src (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_data_src), __pyx_ptype_8pynodegl__Node, 1, "data_src", 0))) __PYX_ERR(0, 2004, __pyx_L1_error)
  __pyx_r = __pyx_pf_8pynodegl_9Texture3D_24set_data_src(((struct __pyx_obj_8pynodegl_Texture3D *)__pyx_v_self), ((struct __pyx_obj_8pynodegl__Node *)__pyx_v_data_src));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_9Texture3D_24set_data_src(struct __pyx_obj_8pynodegl_Texture3D *__pyx_v_self, struct __pyx_obj_8pynodegl__Node *__pyx_v_data_src) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("set_data_src", 0);

  /* "nodes_def.pyx":2005
 * 
 *     def set_data_src(self, _Node data_src):
 *         return ngl_node_param_set(self.ctx, "data_src", data_src.ctx)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"data_src"), __pyx_v_data_src->ctx)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2005, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":2004
 *         return ngl_node_param_set(self.ctx, "access", access)
 * 
 *     def set_data_src(self, _Node data_src):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "data_src", data_src.ctx)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.Texture3D.set_data_src", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_9Texture3D_27__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pynodegl_9Texture3D_27__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_9Texture3D_26__reduce_cython__(((struct __pyx_obj_8pynodegl_Texture3D *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_9Texture3D_26__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_Texture3D *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__144, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.Texture3D.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_9Texture3D_29__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8pynodegl_9Texture3D_29__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_9Texture3D_28__setstate_cython__(((struct __pyx_obj_8pynodegl_Texture3D *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_9Texture3D_28__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_Texture3D *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__145, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.Texture3D.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":2010
 * cdef class TextureCube(_Node):
 * 
 *     def __init__(self, format=None, size=None, min_filter=None, mag_filter=None, mipmap_filter=None, wrap_s=None, wrap_t=None, wrap_r=None, access=None, data_src=None, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_TEXTURECUBE)
 */

/* Python wrapper */
static int __pyx_pw_8pynodegl_11TextureCube_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pynodegl_11TextureCube_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_format = 0;
  PyObject *__pyx_v_size = 0;
  PyObject *__pyx_v_min_filter = 0;
  PyObject *__pyx_v_mag_filter = 0;
  PyObject *__pyx_v_mipmap_filter = 0;
  PyObject *__pyx_v_wrap_s = 0;
  PyObject *__pyx_v_wrap_t = 0;
  PyObject *__pyx_v_wrap_r = 0;
  PyObject *__pyx_v_access = 0;
  PyObject *__pyx_v_data_src = 0;
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  __pyx_v_kwargs = PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return -1;
  __Pyx_GOTREF(__pyx_v_kwargs);
  if (PyTuple_GET_SIZE(__pyx_args) > 10) {
    __pyx_v_args = PyTuple_GetSlice(__pyx_args, 10, PyTuple_GET_SIZE(__pyx_args));
    if (unlikely(!__pyx_v_args)) {
      __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
      __Pyx_RefNannyFinishContext();
      return -1;
    }
    __Pyx_GOTREF(__pyx_v_args);
  } else {
    __pyx_v_args = __pyx_empty_tuple; __Pyx_INCREF(__pyx_empty_tuple);
  }
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_format,&__pyx_n_s_size,&__pyx_n_s_min_filter,&__pyx_n_s_mag_filter,&__pyx_n_s_mipmap_filter,&__pyx_n_s_wrap_s,&__pyx_n_s_wrap_t,&__pyx_n_s_wrap_r,&__pyx_n_s_access,&__pyx_n_s_data_src,0};
    PyObject* values[10] = {0,0,0,0,0,0,0,0,0,0};
    values[0] = ((PyObject *)Py_None);
    values[1] = ((PyObject *)Py_None);
    values[2] = ((PyObject *)Py_None);
    values[3] = ((PyObject *)Py_None);
    values[4] = ((PyObject *)Py_None);
    values[5] = ((PyObject *)Py_None);
    values[6] = ((PyObject *)Py_None);
    values[7] = ((PyObject *)Py_None);
    values[8] = ((PyObject *)Py_None);
    values[9] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        default:
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_format);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_size);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_min_filter);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_mag_filter);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_mipmap_filter);
          if (value) { values[4] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_wrap_s);
          if (value) { values[5] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_wrap_t);
          if (value) { values[6] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_wrap_r);
          if (value) { values[7] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_access);
          if (value) { values[8] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  9:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_data_src);
          if (value) { values[9] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t used_pos_args = (pos_args < 10) ? pos_args : 10;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_kwargs, values, used_pos_args, "__init__") < 0)) __PYX_ERR(0, 2010, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        default:
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
      }
    }
    __pyx_v_format = values[0];
    __pyx_v_size = values[1];
    __pyx_v_min_filter = values[2];
    __pyx_v_mag_filter = values[3];
    __pyx_v_mipmap_filter = values[4];
    __pyx_v_wrap_s = values[5];
    __pyx_v_wrap_t = values[6];
    __pyx_v_wrap_r = values[7];
    __pyx_v_access = values[8];
    __pyx_v_data_src = values[9];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_args); __pyx_v_args = 0;
  __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
  __Pyx_AddTraceback("pynodegl.TextureCube.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pynodegl_11TextureCube___init__(((struct __pyx_obj_8pynodegl_TextureCube *)__pyx_v_self), __pyx_v_format, __pyx_v_size, __pyx_v_min_filter, __pyx_v_mag_filter, __pyx_v_mipmap_filter, __pyx_v_wrap_s, __pyx_v_wrap_t, __pyx_v_wrap_r, __pyx_v_access, __pyx_v_data_src, __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pynodegl_11TextureCube___init__(struct __pyx_obj_8pynodegl_TextureCube *__pyx_v_self, PyObject *__pyx_v_format, PyObject *__pyx_v_size, PyObject *__pyx_v_min_filter, PyObject *__pyx_v_mag_filter, PyObject *__pyx_v_mipmap_filter, PyObject *__pyx_v_wrap_s, PyObject *__pyx_v_wrap_t, PyObject *__pyx_v_wrap_r, PyObject *__pyx_v_access, PyObject *__pyx_v_data_src, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "nodes_def.pyx":2011
 * 
 *     def __init__(self, format=None, size=None, min_filter=None, mag_filter=None, mipmap_filter=None, wrap_s=None, wrap_t=None, wrap_r=None, access=None, data_src=None, *args, **kwargs):
 *         assert self.ctx is NULL             # <<<<<<<<<<<<<<
 *         self.ctx = ngl_node_create(NGL_NODE_TEXTURECUBE)
 *         if self.ctx is NULL:
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!((__pyx_v_self->__pyx_base.ctx == NULL) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 2011, __pyx_L1_error)
    }
  }
  #endif

  /* "nodes_def.pyx":2012
 *     def __init__(self, format=None, size=None, min_filter=None, mag_filter=None, mipmap_filter=None, wrap_s=None, wrap_t=None, wrap_r=None, access=None, data_src=None, *args, **kwargs):
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_TEXTURECUBE)             # <<<<<<<<<<<<<<
 *         if self.ctx is NULL:
 *             raise MemoryError()
 */
  __pyx_v_self->__pyx_base.ctx = ngl_node_create(NGL_NODE_TEXTURECUBE);

  /* "nodes_def.pyx":2013
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_TEXTURECUBE)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         _Node._init_params(self, *args, **kwargs)
 */
  __pyx_t_1 = ((__pyx_v_self->__pyx_base.ctx == NULL) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "nodes_def.pyx":2014
 *         self.ctx = ngl_node_create(NGL_NODE_TEXTURECUBE)
 *         if self.ctx is NULL:
 *             raise MemoryError()             # <<<<<<<<<<<<<<
 *         _Node._init_params(self, *args, **kwargs)
 * 
 */
    PyErr_NoMemory(); __PYX_ERR(0, 2014, __pyx_L1_error)

    /* "nodes_def.pyx":2013
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_TEXTURECUBE)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         _Node._init_params(self, *args, **kwargs)
 */
  }

  /* "nodes_def.pyx":2015
 *         if self.ctx is NULL:
 *             raise MemoryError()
 *         _Node._init_params(self, *args, **kwargs)             # <<<<<<<<<<<<<<
 * 
 *         if format is not None:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_8pynodegl__Node), __pyx_n_s_init_params); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2015, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2015, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_v_self));
  __pyx_t_4 = PyNumber_Add(__pyx_t_3, __pyx_v_args); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2015, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, __pyx_v_kwargs); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2015, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "nodes_def.pyx":2017
 *         _Node._init_params(self, *args, **kwargs)
 * 
 *         if format is not None:             # <<<<<<<<<<<<<<
 *             self.set_format(format)
 *         if size is not None:
 */
  __pyx_t_1 = (__pyx_v_format != Py_None);
  __pyx_t_5 = (__pyx_t_1 != 0);
  if (__pyx_t_5) {

    /* "nodes_def.pyx":2018
 * 
 *         if format is not None:
 *             self.set_format(format)             # <<<<<<<<<<<<<<
 *         if size is not None:
 *             self.set_size(size)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_format); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2018, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_2, __pyx_v_format) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_format);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2018, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "nodes_def.pyx":2017
 *         _Node._init_params(self, *args, **kwargs)
 * 
 *         if format is not None:             # <<<<<<<<<<<<<<
 *             self.set_format(format)
 *         if size is not None:
 */
  }

  /* "nodes_def.pyx":2019
 *         if format is not None:
 *             self.set_format(format)
 *         if size is not None:             # <<<<<<<<<<<<<<
 *             self.set_size(size)
 *         if min_filter is not None:
 */
  __pyx_t_5 = (__pyx_v_size != Py_None);
  __pyx_t_1 = (__pyx_t_5 != 0);
  if (__pyx_t_1) {

    /* "nodes_def.pyx":2020
 *             self.set_format(format)
 *         if size is not None:
 *             self.set_size(size)             # <<<<<<<<<<<<<<
 *         if min_filter is not None:
 *             self.set_min_filter(min_filter)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_size); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2020, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_2, __pyx_v_size) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_size);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2020, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "nodes_def.pyx":2019
 *         if format is not None:
 *             self.set_format(format)
 *         if size is not None:             # <<<<<<<<<<<<<<
 *             self.set_size(size)
 *         if min_filter is not None:
 */
  }

  /* "nodes_def.pyx":2021
 *         if size is not None:
 *             self.set_size(size)
 *         if min_filter is not None:             # <<<<<<<<<<<<<<
 *             self.set_min_filter(min_filter)
 *         if mag_filter is not None:
 */
  __pyx_t_1 = (__pyx_v_min_filter != Py_None);
  __pyx_t_5 = (__pyx_t_1 != 0);
  if (__pyx_t_5) {

    /* "nodes_def.pyx":2022
 *             self.set_size(size)
 *         if min_filter is not None:
 *             self.set_min_filter(min_filter)             # <<<<<<<<<<<<<<
 *         if mag_filter is not None:
 *             self.set_mag_filter(mag_filter)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_min_filter); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2022, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_2, __pyx_v_min_filter) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_min_filter);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2022, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "nodes_def.pyx":2021
 *         if size is not None:
 *             self.set_size(size)
 *         if min_filter is not None:             # <<<<<<<<<<<<<<
 *             self.set_min_filter(min_filter)
 *         if mag_filter is not None:
 */
  }

  /* "nodes_def.pyx":2023
 *         if min_filter is not None:
 *             self.set_min_filter(min_filter)
 *         if mag_filter is not None:             # <<<<<<<<<<<<<<
 *             self.set_mag_filter(mag_filter)
 *         if mipmap_filter is not None:
 */
  __pyx_t_5 = (__pyx_v_mag_filter != Py_None);
  __pyx_t_1 = (__pyx_t_5 != 0);
  if (__pyx_t_1) {

    /* "nodes_def.pyx":2024
 *             self.set_min_filter(min_filter)
 *         if mag_filter is not None:
 *             self.set_mag_filter(mag_filter)             # <<<<<<<<<<<<<<
 *         if mipmap_filter is not None:
 *             self.set_mipmap_filter(mipmap_filter)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_mag_filter); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2024, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_2, __pyx_v_mag_filter) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_mag_filter);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2024, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "nodes_def.pyx":2023
 *         if min_filter is not None:
 *             self.set_min_filter(min_filter)
 *         if mag_filter is not None:             # <<<<<<<<<<<<<<
 *             self.set_mag_filter(mag_filter)
 *         if mipmap_filter is not None:
 */
  }

  /* "nodes_def.pyx":2025
 *         if mag_filter is not None:
 *             self.set_mag_filter(mag_filter)
 *         if mipmap_filter is not None:             # <<<<<<<<<<<<<<
 *             self.set_mipmap_filter(mipmap_filter)
 *         if wrap_s is not None:
 */
  __pyx_t_1 = (__pyx_v_mipmap_filter != Py_None);
  __pyx_t_5 = (__pyx_t_1 != 0);
  if (__pyx_t_5) {

    /* "nodes_def.pyx":2026
 *             self.set_mag_filter(mag_filter)
 *         if mipmap_filter is not None:
 *             self.set_mipmap_filter(mipmap_filter)             # <<<<<<<<<<<<<<
 *         if wrap_s is not None:
 *             self.set_wrap_s(wrap_s)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_mipmap_filter); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2026, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_2, __pyx_v_mipmap_filter) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_mipmap_filter);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2026, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "nodes_def.pyx":2025
 *         if mag_filter is not None:
 *             self.set_mag_filter(mag_filter)
 *         if mipmap_filter is not None:             # <<<<<<<<<<<<<<
 *             self.set_mipmap_filter(mipmap_filter)
 *         if wrap_s is not None:
 */
  }

  /* "nodes_def.pyx":2027
 *         if mipmap_filter is not None:
 *             self.set_mipmap_filter(mipmap_filter)
 *         if wrap_s is not None:             # <<<<<<<<<<<<<<
 *             self.set_wrap_s(wrap_s)
 *         if wrap_t is not None:
 */
  __pyx_t_5 = (__pyx_v_wrap_s != Py_None);
  __pyx_t_1 = (__pyx_t_5 != 0);
  if (__pyx_t_1) {

    /* "nodes_def.pyx":2028
 *             self.set_mipmap_filter(mipmap_filter)
 *         if wrap_s is not None:
 *             self.set_wrap_s(wrap_s)             # <<<<<<<<<<<<<<
 *         if wrap_t is not None:
 *             self.set_wrap_t(wrap_t)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_wrap_s); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2028, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_2, __pyx_v_wrap_s) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_wrap_s);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2028, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "nodes_def.pyx":2027
 *         if mipmap_filter is not None:
 *             self.set_mipmap_filter(mipmap_filter)
 *         if wrap_s is not None:             # <<<<<<<<<<<<<<
 *             self.set_wrap_s(wrap_s)
 *         if wrap_t is not None:
 */
  }

  /* "nodes_def.pyx":2029
 *         if wrap_s is not None:
 *             self.set_wrap_s(wrap_s)
 *         if wrap_t is not None:             # <<<<<<<<<<<<<<
 *             self.set_wrap_t(wrap_t)
 *         if wrap_r is not None:
 */
  __pyx_t_1 = (__pyx_v_wrap_t != Py_None);
  __pyx_t_5 = (__pyx_t_1 != 0);
  if (__pyx_t_5) {

    /* "nodes_def.pyx":2030
 *             self.set_wrap_s(wrap_s)
 *         if wrap_t is not None:
 *             self.set_wrap_t(wrap_t)             # <<<<<<<<<<<<<<
 *         if wrap_r is not None:
 *             self.set_wrap_r(wrap_r)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_wrap_t); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2030, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_2, __pyx_v_wrap_t) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_wrap_t);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2030, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "nodes_def.pyx":2029
 *         if wrap_s is not None:
 *             self.set_wrap_s(wrap_s)
 *         if wrap_t is not None:             # <<<<<<<<<<<<<<
 *             self.set_wrap_t(wrap_t)
 *         if wrap_r is not None:
 */
  }

  /* "nodes_def.pyx":2031
 *         if wrap_t is not None:
 *             self.set_wrap_t(wrap_t)
 *         if wrap_r is not None:             # <<<<<<<<<<<<<<
 *             self.set_wrap_r(wrap_r)
 *         if access is not None:
 */
  __pyx_t_5 = (__pyx_v_wrap_r != Py_None);
  __pyx_t_1 = (__pyx_t_5 != 0);
  if (__pyx_t_1) {

    /* "nodes_def.pyx":2032
 *             self.set_wrap_t(wrap_t)
 *         if wrap_r is not None:
 *             self.set_wrap_r(wrap_r)             # <<<<<<<<<<<<<<
 *         if access is not None:
 *             self.set_access(access)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_wrap_r); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2032, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_2, __pyx_v_wrap_r) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_wrap_r);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2032, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "nodes_def.pyx":2031
 *         if wrap_t is not None:
 *             self.set_wrap_t(wrap_t)
 *         if wrap_r is not None:             # <<<<<<<<<<<<<<
 *             self.set_wrap_r(wrap_r)
 *         if access is not None:
 */
  }

  /* "nodes_def.pyx":2033
 *         if wrap_r is not None:
 *             self.set_wrap_r(wrap_r)
 *         if access is not None:             # <<<<<<<<<<<<<<
 *             self.set_access(access)
 *         if data_src is not None:
 */
  __pyx_t_1 = (__pyx_v_access != Py_None);
  __pyx_t_5 = (__pyx_t_1 != 0);
  if (__pyx_t_5) {

    /* "nodes_def.pyx":2034
 *             self.set_wrap_r(wrap_r)
 *         if access is not None:
 *             self.set_access(access)             # <<<<<<<<<<<<<<
 *         if data_src is not None:
 *             self.set_data_src(data_src)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_access); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2034, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_2, __pyx_v_access) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_access);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2034, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "nodes_def.pyx":2033
 *         if wrap_r is not None:
 *             self.set_wrap_r(wrap_r)
 *         if access is not None:             # <<<<<<<<<<<<<<
 *             self.set_access(access)
 *         if data_src is not None:
 */
  }

  /* "nodes_def.pyx":2035
 *         if access is not None:
 *             self.set_access(access)
 *         if data_src is not None:             # <<<<<<<<<<<<<<
 *             self.set_data_src(data_src)
 * 
 */
  __pyx_t_5 = (__pyx_v_data_src != Py_None);
  __pyx_t_1 = (__pyx_t_5 != 0);
  if (__pyx_t_1) {

    /* "nodes_def.pyx":2036
 *             self.set_access(access)
 *         if data_src is not None:
 *             self.set_data_src(data_src)             # <<<<<<<<<<<<<<
 * 
 *     def set_format(self, const char * format):
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_data_src); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2036, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_2, __pyx_v_data_src) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_data_src);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2036, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "nodes_def.pyx":2035
 *         if access is not None:
 *             self.set_access(access)
 *         if data_src is not None:             # <<<<<<<<<<<<<<
 *             self.set_data_src(data_src)
 * 
 */
  }

  /* "nodes_def.pyx":2010
 * cdef class TextureCube(_Node):
 * 
 *     def __init__(self, format=None, size=None, min_filter=None, mag_filter=None, mipmap_filter=None, wrap_s=None, wrap_t=None, wrap_r=None, access=None, data_src=None, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_TEXTURECUBE)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pynodegl.TextureCube.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":2038
 *             self.set_data_src(data_src)
 * 
 *     def set_format(self, const char * format):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "format", format)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_11TextureCube_3set_format(PyObject *__pyx_v_self, PyObject *__pyx_arg_format); /*proto*/
static PyObject *__pyx_pw_8pynodegl_11TextureCube_3set_format(PyObject *__pyx_v_self, PyObject *__pyx_arg_format) {
  char const *__pyx_v_format;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_format (wrapper)", 0);
  assert(__pyx_arg_format); {
    __pyx_v_format = __Pyx_PyObject_AsString(__pyx_arg_format); if (unlikely((!__pyx_v_format) && PyErr_Occurred())) __PYX_ERR(0, 2038, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pynodegl.TextureCube.set_format", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pynodegl_11TextureCube_2set_format(((struct __pyx_obj_8pynodegl_TextureCube *)__pyx_v_self), ((char const *)__pyx_v_format));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_11TextureCube_2set_format(struct __pyx_obj_8pynodegl_TextureCube *__pyx_v_self, char const *__pyx_v_format) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("set_format", 0);

  /* "nodes_def.pyx":2039
 * 
 *     def set_format(self, const char * format):
 *         return ngl_node_param_set(self.ctx, "format", format)             # <<<<<<<<<<<<<<
 * 
 *     def set_size(self, int size):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"format"), __pyx_v_format)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2039, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":2038
 *             self.set_data_src(data_src)
 * 
 *     def set_format(self, const char * format):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "format", format)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.TextureCube.set_format", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":2041
 *         return ngl_node_param_set(self.ctx, "format", format)
 * 
 *     def set_size(self, int size):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "size", size)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_11TextureCube_5set_size(PyObject *__pyx_v_self, PyObject *__pyx_arg_size); /*proto*/
static PyObject *__pyx_pw_8pynodegl_11TextureCube_5set_size(PyObject *__pyx_v_self, PyObject *__pyx_arg_size) {
  int __pyx_v_size;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_size (wrapper)", 0);
  assert(__pyx_arg_size); {
    __pyx_v_size = __Pyx_PyInt_As_int(__pyx_arg_size); if (unlikely((__pyx_v_size == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2041, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pynodegl.TextureCube.set_size", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pynodegl_11TextureCube_4set_size(((struct __pyx_obj_8pynodegl_TextureCube *)__pyx_v_self), ((int)__pyx_v_size));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_11TextureCube_4set_size(struct __pyx_obj_8pynodegl_TextureCube *__pyx_v_self, int __pyx_v_size) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("set_size", 0);

  /* "nodes_def.pyx":2042
 * 
 *     def set_size(self, int size):
 *         return ngl_node_param_set(self.ctx, "size", size)             # <<<<<<<<<<<<<<
 * 
 *     def set_min_filter(self, const char * min_filter):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"size"), __pyx_v_size)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2042, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":2041
 *         return ngl_node_param_set(self.ctx, "format", format)
 * 
 *     def set_size(self, int size):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "size", size)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.TextureCube.set_size", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":2044
 *         return ngl_node_param_set(self.ctx, "size", size)
 * 
 *     def set_min_filter(self, const char * min_filter):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "min_filter", min_filter)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_11TextureCube_7set_min_filter(PyObject *__pyx_v_self, PyObject *__pyx_arg_min_filter); /*proto*/
static PyObject *__pyx_pw_8pynodegl_11TextureCube_7set_min_filter(PyObject *__pyx_v_self, PyObject *__pyx_arg_min_filter) {
  char const *__pyx_v_min_filter;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_min_filter (wrapper)", 0);
  assert(__pyx_arg_min_filter); {
    __pyx_v_min_filter = __Pyx_PyObject_AsString(__pyx_arg_min_filter); if (unlikely((!__pyx_v_min_filter) && PyErr_Occurred())) __PYX_ERR(0, 2044, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pynodegl.TextureCube.set_min_filter", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pynodegl_11TextureCube_6set_min_filter(((struct __pyx_obj_8pynodegl_TextureCube *)__pyx_v_self), ((char const *)__pyx_v_min_filter));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_11TextureCube_6set_min_filter(struct __pyx_obj_8pynodegl_TextureCube *__pyx_v_self, char const *__pyx_v_min_filter) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("set_min_filter", 0);

  /* "nodes_def.pyx":2045
 * 
 *     def set_min_filter(self, const char * min_filter):
 *         return ngl_node_param_set(self.ctx, "min_filter", min_filter)             # <<<<<<<<<<<<<<
 * 
 *     def set_mag_filter(self, const char * mag_filter):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"min_filter"), __pyx_v_min_filter)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2045, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":2044
 *         return ngl_node_param_set(self.ctx, "size", size)
 * 
 *     def set_min_filter(self, const char * min_filter):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "min_filter", min_filter)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.TextureCube.set_min_filter", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":2047
 *         return ngl_node_param_set(self.ctx, "min_filter", min_filter)
 * 
 *     def set_mag_filter(self, const char * mag_filter):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "mag_filter", mag_filter)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_11TextureCube_9set_mag_filter(PyObject *__pyx_v_self, PyObject *__pyx_arg_mag_filter); /*proto*/
static PyObject *__pyx_pw_8pynodegl_11TextureCube_9set_mag_filter(PyObject *__pyx_v_self, PyObject *__pyx_arg_mag_filter) {
  char const *__pyx_v_mag_filter;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_mag_filter (wrapper)", 0);
  assert(__pyx_arg_mag_filter); {
    __pyx_v_mag_filter = __Pyx_PyObject_AsString(__pyx_arg_mag_filter); if (unlikely((!__pyx_v_mag_filter) && PyErr_Occurred())) __PYX_ERR(0, 2047, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pynodegl.TextureCube.set_mag_filter", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pynodegl_11TextureCube_8set_mag_filter(((struct __pyx_obj_8pynodegl_TextureCube *)__pyx_v_self), ((char const *)__pyx_v_mag_filter));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_11TextureCube_8set_mag_filter(struct __pyx_obj_8pynodegl_TextureCube *__pyx_v_self, char const *__pyx_v_mag_filter) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("set_mag_filter", 0);

  /* "nodes_def.pyx":2048
 * 
 *     def set_mag_filter(self, const char * mag_filter):
 *         return ngl_node_param_set(self.ctx, "mag_filter", mag_filter)             # <<<<<<<<<<<<<<
 * 
 *     def set_mipmap_filter(self, const char * mipmap_filter):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"mag_filter"), __pyx_v_mag_filter)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2048, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":2047
 *         return ngl_node_param_set(self.ctx, "min_filter", min_filter)
 * 
 *     def set_mag_filter(self, const char * mag_filter):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "mag_filter", mag_filter)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.TextureCube.set_mag_filter", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":2050
 *         return ngl_node_param_set(self.ctx, "mag_filter", mag_filter)
 * 
 *     def set_mipmap_filter(self, const char * mipmap_filter):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "mipmap_filter", mipmap_filter)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_11TextureCube_11set_mipmap_filter(PyObject *__pyx_v_self, PyObject *__pyx_arg_mipmap_filter); /*proto*/
static PyObject *__pyx_pw_8pynodegl_11TextureCube_11set_mipmap_filter(PyObject *__pyx_v_self, PyObject *__pyx_arg_mipmap_filter) {
  char const *__pyx_v_mipmap_filter;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_mipmap_filter (wrapper)", 0);
  assert(__pyx_arg_mipmap_filter); {
    __pyx_v_mipmap_filter = __Pyx_PyObject_AsString(__pyx_arg_mipmap_filter); if (unlikely((!__pyx_v_mipmap_filter) && PyErr_Occurred())) __PYX_ERR(0, 2050, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pynodegl.TextureCube.set_mipmap_filter", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pynodegl_11TextureCube_10set_mipmap_filter(((struct __pyx_obj_8pynodegl_TextureCube *)__pyx_v_self), ((char const *)__pyx_v_mipmap_filter));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_11TextureCube_10set_mipmap_filter(struct __pyx_obj_8pynodegl_TextureCube *__pyx_v_self, char const *__pyx_v_mipmap_filter) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("set_mipmap_filter", 0);

  /* "nodes_def.pyx":2051
 * 
 *     def set_mipmap_filter(self, const char * mipmap_filter):
 *         return ngl_node_param_set(self.ctx, "mipmap_filter", mipmap_filter)             # <<<<<<<<<<<<<<
 * 
 *     def set_wrap_s(self, const char * wrap_s):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"mipmap_filter"), __pyx_v_mipmap_filter)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2051, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":2050
 *         return ngl_node_param_set(self.ctx, "mag_filter", mag_filter)
 * 
 *     def set_mipmap_filter(self, const char * mipmap_filter):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "mipmap_filter", mipmap_filter)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.TextureCube.set_mipmap_filter", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":2053
 *         return ngl_node_param_set(self.ctx, "mipmap_filter", mipmap_filter)
 * 
 *     def set_wrap_s(self, const char * wrap_s):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "wrap_s", wrap_s)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_11TextureCube_13set_wrap_s(PyObject *__pyx_v_self, PyObject *__pyx_arg_wrap_s); /*proto*/
static PyObject *__pyx_pw_8pynodegl_11TextureCube_13set_wrap_s(PyObject *__pyx_v_self, PyObject *__pyx_arg_wrap_s) {
  char const *__pyx_v_wrap_s;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_wrap_s (wrapper)", 0);
  assert(__pyx_arg_wrap_s); {
    __pyx_v_wrap_s = __Pyx_PyObject_AsString(__pyx_arg_wrap_s); if (unlikely((!__pyx_v_wrap_s) && PyErr_Occurred())) __PYX_ERR(0, 2053, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pynodegl.TextureCube.set_wrap_s", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pynodegl_11TextureCube_12set_wrap_s(((struct __pyx_obj_8pynodegl_TextureCube *)__pyx_v_self), ((char const *)__pyx_v_wrap_s));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_11TextureCube_12set_wrap_s(struct __pyx_obj_8pynodegl_TextureCube *__pyx_v_self, char const *__pyx_v_wrap_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("set_wrap_s", 0);

  /* "nodes_def.pyx":2054
 * 
 *     def set_wrap_s(self, const char * wrap_s):
 *         return ngl_node_param_set(self.ctx, "wrap_s", wrap_s)             # <<<<<<<<<<<<<<
 * 
 *     def set_wrap_t(self, const char * wrap_t):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"wrap_s"), __pyx_v_wrap_s)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2054, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":2053
 *         return ngl_node_param_set(self.ctx, "mipmap_filter", mipmap_filter)
 * 
 *     def set_wrap_s(self, const char * wrap_s):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "wrap_s", wrap_s)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.TextureCube.set_wrap_s", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":2056
 *         return ngl_node_param_set(self.ctx, "wrap_s", wrap_s)
 * 
 *     def set_wrap_t(self, const char * wrap_t):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "wrap_t", wrap_t)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_11TextureCube_15set_wrap_t(PyObject *__pyx_v_self, PyObject *__pyx_arg_wrap_t); /*proto*/
static PyObject *__pyx_pw_8pynodegl_11TextureCube_15set_wrap_t(PyObject *__pyx_v_self, PyObject *__pyx_arg_wrap_t) {
  char const *__pyx_v_wrap_t;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_wrap_t (wrapper)", 0);
  assert(__pyx_arg_wrap_t); {
    __pyx_v_wrap_t = __Pyx_PyObject_AsString(__pyx_arg_wrap_t); if (unlikely((!__pyx_v_wrap_t) && PyErr_Occurred())) __PYX_ERR(0, 2056, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pynodegl.TextureCube.set_wrap_t", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pynodegl_11TextureCube_14set_wrap_t(((struct __pyx_obj_8pynodegl_TextureCube *)__pyx_v_self), ((char const *)__pyx_v_wrap_t));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_11TextureCube_14set_wrap_t(struct __pyx_obj_8pynodegl_TextureCube *__pyx_v_self, char const *__pyx_v_wrap_t) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("set_wrap_t", 0);

  /* "nodes_def.pyx":2057
 * 
 *     def set_wrap_t(self, const char * wrap_t):
 *         return ngl_node_param_set(self.ctx, "wrap_t", wrap_t)             # <<<<<<<<<<<<<<
 * 
 *     def set_wrap_r(self, const char * wrap_r):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"wrap_t"), __pyx_v_wrap_t)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2057, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":2056
 *         return ngl_node_param_set(self.ctx, "wrap_s", wrap_s)
 * 
 *     def set_wrap_t(self, const char * wrap_t):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "wrap_t", wrap_t)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.TextureCube.set_wrap_t", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":2059
 *         return ngl_node_param_set(self.ctx, "wrap_t", wrap_t)
 * 
 *     def set_wrap_r(self, const char * wrap_r):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "wrap_r", wrap_r)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_11TextureCube_17set_wrap_r(PyObject *__pyx_v_self, PyObject *__pyx_arg_wrap_r); /*proto*/
static PyObject *__pyx_pw_8pynodegl_11TextureCube_17set_wrap_r(PyObject *__pyx_v_self, PyObject *__pyx_arg_wrap_r) {
  char const *__pyx_v_wrap_r;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_wrap_r (wrapper)", 0);
  assert(__pyx_arg_wrap_r); {
    __pyx_v_wrap_r = __Pyx_PyObject_AsString(__pyx_arg_wrap_r); if (unlikely((!__pyx_v_wrap_r) && PyErr_Occurred())) __PYX_ERR(0, 2059, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pynodegl.TextureCube.set_wrap_r", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pynodegl_11TextureCube_16set_wrap_r(((struct __pyx_obj_8pynodegl_TextureCube *)__pyx_v_self), ((char const *)__pyx_v_wrap_r));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_11TextureCube_16set_wrap_r(struct __pyx_obj_8pynodegl_TextureCube *__pyx_v_self, char const *__pyx_v_wrap_r) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("set_wrap_r", 0);

  /* "nodes_def.pyx":2060
 * 
 *     def set_wrap_r(self, const char * wrap_r):
 *         return ngl_node_param_set(self.ctx, "wrap_r", wrap_r)             # <<<<<<<<<<<<<<
 * 
 *     def set_access(self, const char * access):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"wrap_r"), __pyx_v_wrap_r)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2060, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":2059
 *         return ngl_node_param_set(self.ctx, "wrap_t", wrap_t)
 * 
 *     def set_wrap_r(self, const char * wrap_r):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "wrap_r", wrap_r)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.TextureCube.set_wrap_r", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":2062
 *         return ngl_node_param_set(self.ctx, "wrap_r", wrap_r)
 * 
 *     def set_access(self, const char * access):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "access", access)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_11TextureCube_19set_access(PyObject *__pyx_v_self, PyObject *__pyx_arg_access); /*proto*/
static PyObject *__pyx_pw_8pynodegl_11TextureCube_19set_access(PyObject *__pyx_v_self, PyObject *__pyx_arg_access) {
  char const *__pyx_v_access;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_access (wrapper)", 0);
  assert(__pyx_arg_access); {
    __pyx_v_access = __Pyx_PyObject_AsString(__pyx_arg_access); if (unlikely((!__pyx_v_access) && PyErr_Occurred())) __PYX_ERR(0, 2062, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pynodegl.TextureCube.set_access", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pynodegl_11TextureCube_18set_access(((struct __pyx_obj_8pynodegl_TextureCube *)__pyx_v_self), ((char const *)__pyx_v_access));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_11TextureCube_18set_access(struct __pyx_obj_8pynodegl_TextureCube *__pyx_v_self, char const *__pyx_v_access) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("set_access", 0);

  /* "nodes_def.pyx":2063
 * 
 *     def set_access(self, const char * access):
 *         return ngl_node_param_set(self.ctx, "access", access)             # <<<<<<<<<<<<<<
 * 
 *     def set_data_src(self, _Node data_src):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"access"), __pyx_v_access)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2063, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":2062
 *         return ngl_node_param_set(self.ctx, "wrap_r", wrap_r)
 * 
 *     def set_access(self, const char * access):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "access", access)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.TextureCube.set_access", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":2065
 *         return ngl_node_param_set(self.ctx, "access", access)
 * 
 *     def set_data_src(self, _Node data_src):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "data_src", data_src.ctx)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_11TextureCube_21set_data_src(PyObject *__pyx_v_self, PyObject *__pyx_v_data_src); /*proto*/
static PyObject *__pyx_pw_8pynodegl_11TextureCube_21set_data_src(PyObject *__pyx_v_self, PyObject *__pyx_v_data_src) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_data_src (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_data_src), __pyx_ptype_8pynodegl__Node, 1, "data_src", 0))) __PYX_ERR(0, 2065, __pyx_L1_error)
  __pyx_r = __pyx_pf_8pynodegl_11TextureCube_20set_data_src(((struct __pyx_obj_8pynodegl_TextureCube *)__pyx_v_self), ((struct __pyx_obj_8pynodegl__Node *)__pyx_v_data_src));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_11TextureCube_20set_data_src(struct __pyx_obj_8pynodegl_TextureCube *__pyx_v_self, struct __pyx_obj_8pynodegl__Node *__pyx_v_data_src) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("set_data_src", 0);

  /* "nodes_def.pyx":2066
 * 
 *     def set_data_src(self, _Node data_src):
 *         return ngl_node_param_set(self.ctx, "data_src", data_src.ctx)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"data_src"), __pyx_v_data_src->ctx)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2066, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":2065
 *         return ngl_node_param_set(self.ctx, "access", access)
 * 
 *     def set_data_src(self, _Node data_src):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "data_src", data_src.ctx)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.TextureCube.set_data_src", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_11TextureCube_23__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pynodegl_11TextureCube_23__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_11TextureCube_22__reduce_cython__(((struct __pyx_obj_8pynodegl_TextureCube *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_11TextureCube_22__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_TextureCube *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__146, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.TextureCube.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_11TextureCube_25__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8pynodegl_11TextureCube_25__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_11TextureCube_24__setstate_cython__(((struct __pyx_obj_8pynodegl_TextureCube *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_11TextureCube_24__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_TextureCube *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__147, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.TextureCube.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":2071
 * cdef class TimeRangeFilter(_Node):
 * 
 *     def __init__(self, _Node child, ranges=None, prefetch_time=None, max_idle_time=None, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         assert child is not None
 * 
 */

/* Python wrapper */
static int __pyx_pw_8pynodegl_15TimeRangeFilter_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pynodegl_15TimeRangeFilter_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pynodegl__Node *__pyx_v_child = 0;
  PyObject *__pyx_v_ranges = 0;
  PyObject *__pyx_v_prefetch_time = 0;
  PyObject *__pyx_v_max_idle_time = 0;
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  __pyx_v_kwargs = PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return -1;
  __Pyx_GOTREF(__pyx_v_kwargs);
  if (PyTuple_GET_SIZE(__pyx_args) > 4) {
    __pyx_v_args = PyTuple_GetSlice(__pyx_args, 4, PyTuple_GET_SIZE(__pyx_args));
    if (unlikely(!__pyx_v_args)) {
      __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
      __Pyx_RefNannyFinishContext();
      return -1;
    }
    __Pyx_GOTREF(__pyx_v_args);
  } else {
    __pyx_v_args = __pyx_empty_tuple; __Pyx_INCREF(__pyx_empty_tuple);
  }
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_child,&__pyx_n_s_ranges,&__pyx_n_s_prefetch_time,&__pyx_n_s_max_idle_time,0};
    PyObject* values[4] = {0,0,0,0};
    values[1] = ((PyObject *)Py_None);
    values[2] = ((PyObject *)Py_None);
    values[3] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        default:
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_child)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ranges);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_prefetch_time);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_max_idle_time);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t used_pos_args = (pos_args < 4) ? pos_args : 4;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_kwargs, values, used_pos_args, "__init__") < 0)) __PYX_ERR(0, 2071, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        default:
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        case  0:
        goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_child = ((struct __pyx_obj_8pynodegl__Node *)values[0]);
    __pyx_v_ranges = values[1];
    __pyx_v_prefetch_time = values[2];
    __pyx_v_max_idle_time = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 1, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2071, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_args); __pyx_v_args = 0;
  __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
  __Pyx_AddTraceback("pynodegl.TimeRangeFilter.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_child), __pyx_ptype_8pynodegl__Node, 1, "child", 0))) __PYX_ERR(0, 2071, __pyx_L1_error)
  __pyx_r = __pyx_pf_8pynodegl_15TimeRangeFilter___init__(((struct __pyx_obj_8pynodegl_TimeRangeFilter *)__pyx_v_self), __pyx_v_child, __pyx_v_ranges, __pyx_v_prefetch_time, __pyx_v_max_idle_time, __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pynodegl_15TimeRangeFilter___init__(struct __pyx_obj_8pynodegl_TimeRangeFilter *__pyx_v_self, struct __pyx_obj_8pynodegl__Node *__pyx_v_child, PyObject *__pyx_v_ranges, PyObject *__pyx_v_prefetch_time, PyObject *__pyx_v_max_idle_time, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "nodes_def.pyx":2072
 * 
 *     def __init__(self, _Node child, ranges=None, prefetch_time=None, max_idle_time=None, *args, **kwargs):
 *         assert child is not None             # <<<<<<<<<<<<<<
 * 
 *         assert self.ctx is NULL
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = (((PyObject *)__pyx_v_child) != Py_None);
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 2072, __pyx_L1_error)
    }
  }
  #endif

  /* "nodes_def.pyx":2074
 *         assert child is not None
 * 
 *         assert self.ctx is NULL             # <<<<<<<<<<<<<<
 *         self.ctx = ngl_node_create(NGL_NODE_TIMERANGEFILTER, child.ctx)
 *         if self.ctx is NULL:
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!((__pyx_v_self->__pyx_base.ctx == NULL) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 2074, __pyx_L1_error)
    }
  }
  #endif

  /* "nodes_def.pyx":2075
 * 
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_TIMERANGEFILTER, child.ctx)             # <<<<<<<<<<<<<<
 *         if self.ctx is NULL:
 *             raise MemoryError()
 */
  __pyx_v_self->__pyx_base.ctx = ngl_node_create(NGL_NODE_TIMERANGEFILTER, __pyx_v_child->ctx);

  /* "nodes_def.pyx":2076
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_TIMERANGEFILTER, child.ctx)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         _Node._init_params(self, *args, **kwargs)
 */
  __pyx_t_1 = ((__pyx_v_self->__pyx_base.ctx == NULL) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "nodes_def.pyx":2077
 *         self.ctx = ngl_node_create(NGL_NODE_TIMERANGEFILTER, child.ctx)
 *         if self.ctx is NULL:
 *             raise MemoryError()             # <<<<<<<<<<<<<<
 *         _Node._init_params(self, *args, **kwargs)
 * 
 */
    PyErr_NoMemory(); __PYX_ERR(0, 2077, __pyx_L1_error)

    /* "nodes_def.pyx":2076
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_TIMERANGEFILTER, child.ctx)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         _Node._init_params(self, *args, **kwargs)
 */
  }

  /* "nodes_def.pyx":2078
 *         if self.ctx is NULL:
 *             raise MemoryError()
 *         _Node._init_params(self, *args, **kwargs)             # <<<<<<<<<<<<<<
 * 
 *         if ranges is not None:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_8pynodegl__Node), __pyx_n_s_init_params); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2078, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2078, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_v_self));
  __pyx_t_4 = PyNumber_Add(__pyx_t_3, __pyx_v_args); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2078, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, __pyx_v_kwargs); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2078, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "nodes_def.pyx":2080
 *         _Node._init_params(self, *args, **kwargs)
 * 
 *         if ranges is not None:             # <<<<<<<<<<<<<<
 *             self.add_ranges(*ranges)
 *         if prefetch_time is not None:
 */
  __pyx_t_1 = (__pyx_v_ranges != Py_None);
  __pyx_t_5 = (__pyx_t_1 != 0);
  if (__pyx_t_5) {

    /* "nodes_def.pyx":2081
 * 
 *         if ranges is not None:
 *             self.add_ranges(*ranges)             # <<<<<<<<<<<<<<
 *         if prefetch_time is not None:
 *             self.set_prefetch_time(prefetch_time)
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_add_ranges); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2081, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PySequence_Tuple(__pyx_v_ranges); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2081, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2081, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "nodes_def.pyx":2080
 *         _Node._init_params(self, *args, **kwargs)
 * 
 *         if ranges is not None:             # <<<<<<<<<<<<<<
 *             self.add_ranges(*ranges)
 *         if prefetch_time is not None:
 */
  }

  /* "nodes_def.pyx":2082
 *         if ranges is not None:
 *             self.add_ranges(*ranges)
 *         if prefetch_time is not None:             # <<<<<<<<<<<<<<
 *             self.set_prefetch_time(prefetch_time)
 *         if max_idle_time is not None:
 */
  __pyx_t_5 = (__pyx_v_prefetch_time != Py_None);
  __pyx_t_1 = (__pyx_t_5 != 0);
  if (__pyx_t_1) {

    /* "nodes_def.pyx":2083
 *             self.add_ranges(*ranges)
 *         if prefetch_time is not None:
 *             self.set_prefetch_time(prefetch_time)             # <<<<<<<<<<<<<<
 *         if max_idle_time is not None:
 *             self.set_max_idle_time(max_idle_time)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_prefetch_time); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2083, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_2 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_3, __pyx_v_prefetch_time) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_prefetch_time);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2083, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "nodes_def.pyx":2082
 *         if ranges is not None:
 *             self.add_ranges(*ranges)
 *         if prefetch_time is not None:             # <<<<<<<<<<<<<<
 *             self.set_prefetch_time(prefetch_time)
 *         if max_idle_time is not None:
 */
  }

  /* "nodes_def.pyx":2084
 *         if prefetch_time is not None:
 *             self.set_prefetch_time(prefetch_time)
 *         if max_idle_time is not None:             # <<<<<<<<<<<<<<
 *             self.set_max_idle_time(max_idle_time)
 * 
 */
  __pyx_t_1 = (__pyx_v_max_idle_time != Py_None);
  __pyx_t_5 = (__pyx_t_1 != 0);
  if (__pyx_t_5) {

    /* "nodes_def.pyx":2085
 *             self.set_prefetch_time(prefetch_time)
 *         if max_idle_time is not None:
 *             self.set_max_idle_time(max_idle_time)             # <<<<<<<<<<<<<<
 * 
 *     def add_ranges(self, *ranges):
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_max_idle_time); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2085, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_2 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_3, __pyx_v_max_idle_time) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_max_idle_time);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2085, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "nodes_def.pyx":2084
 *         if prefetch_time is not None:
 *             self.set_prefetch_time(prefetch_time)
 *         if max_idle_time is not None:             # <<<<<<<<<<<<<<
 *             self.set_max_idle_time(max_idle_time)
 * 
 */
  }

  /* "nodes_def.pyx":2071
 * cdef class TimeRangeFilter(_Node):
 * 
 *     def __init__(self, _Node child, ranges=None, prefetch_time=None, max_idle_time=None, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         assert child is not None
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pynodegl.TimeRangeFilter.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":2087
 *             self.set_max_idle_time(max_idle_time)
 * 
 *     def add_ranges(self, *ranges):             # <<<<<<<<<<<<<<
 *         return self._add_nodelist("ranges", *ranges)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_15TimeRangeFilter_3add_ranges(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_8pynodegl_15TimeRangeFilter_3add_ranges(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_ranges = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_ranges (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "add_ranges", 0))) return NULL;
  __Pyx_INCREF(__pyx_args);
  __pyx_v_ranges = __pyx_args;
  __pyx_r = __pyx_pf_8pynodegl_15TimeRangeFilter_2add_ranges(((struct __pyx_obj_8pynodegl_TimeRangeFilter *)__pyx_v_self), __pyx_v_ranges);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_ranges);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_15TimeRangeFilter_2add_ranges(struct __pyx_obj_8pynodegl_TimeRangeFilter *__pyx_v_self, PyObject *__pyx_v_ranges) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("add_ranges", 0);

  /* "nodes_def.pyx":2088
 * 
 *     def add_ranges(self, *ranges):
 *         return self._add_nodelist("ranges", *ranges)             # <<<<<<<<<<<<<<
 * 
 *     def set_prefetch_time(self, double prefetch_time):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_add_nodelist); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2088, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyNumber_Add(__pyx_tuple__148, __pyx_v_ranges); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2088, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2088, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":2087
 *             self.set_max_idle_time(max_idle_time)
 * 
 *     def add_ranges(self, *ranges):             # <<<<<<<<<<<<<<
 *         return self._add_nodelist("ranges", *ranges)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pynodegl.TimeRangeFilter.add_ranges", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":2090
 *         return self._add_nodelist("ranges", *ranges)
 * 
 *     def set_prefetch_time(self, double prefetch_time):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "prefetch_time", prefetch_time)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_15TimeRangeFilter_5set_prefetch_time(PyObject *__pyx_v_self, PyObject *__pyx_arg_prefetch_time); /*proto*/
static PyObject *__pyx_pw_8pynodegl_15TimeRangeFilter_5set_prefetch_time(PyObject *__pyx_v_self, PyObject *__pyx_arg_prefetch_time) {
  double __pyx_v_prefetch_time;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_prefetch_time (wrapper)", 0);
  assert(__pyx_arg_prefetch_time); {
    __pyx_v_prefetch_time = __pyx_PyFloat_AsDouble(__pyx_arg_prefetch_time); if (unlikely((__pyx_v_prefetch_time == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2090, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pynodegl.TimeRangeFilter.set_prefetch_time", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pynodegl_15TimeRangeFilter_4set_prefetch_time(((struct __pyx_obj_8pynodegl_TimeRangeFilter *)__pyx_v_self), ((double)__pyx_v_prefetch_time));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_15TimeRangeFilter_4set_prefetch_time(struct __pyx_obj_8pynodegl_TimeRangeFilter *__pyx_v_self, double __pyx_v_prefetch_time) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("set_prefetch_time", 0);

  /* "nodes_def.pyx":2091
 * 
 *     def set_prefetch_time(self, double prefetch_time):
 *         return ngl_node_param_set(self.ctx, "prefetch_time", prefetch_time)             # <<<<<<<<<<<<<<
 * 
 *     def set_max_idle_time(self, double max_idle_time):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"prefetch_time"), __pyx_v_prefetch_time)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2091, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":2090
 *         return self._add_nodelist("ranges", *ranges)
 * 
 *     def set_prefetch_time(self, double prefetch_time):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "prefetch_time", prefetch_time)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.TimeRangeFilter.set_prefetch_time", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":2093
 *         return ngl_node_param_set(self.ctx, "prefetch_time", prefetch_time)
 * 
 *     def set_max_idle_time(self, double max_idle_time):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "max_idle_time", max_idle_time)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_15TimeRangeFilter_7set_max_idle_time(PyObject *__pyx_v_self, PyObject *__pyx_arg_max_idle_time); /*proto*/
static PyObject *__pyx_pw_8pynodegl_15TimeRangeFilter_7set_max_idle_time(PyObject *__pyx_v_self, PyObject *__pyx_arg_max_idle_time) {
  double __pyx_v_max_idle_time;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_max_idle_time (wrapper)", 0);
  assert(__pyx_arg_max_idle_time); {
    __pyx_v_max_idle_time = __pyx_PyFloat_AsDouble(__pyx_arg_max_idle_time); if (unlikely((__pyx_v_max_idle_time == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2093, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pynodegl.TimeRangeFilter.set_max_idle_time", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pynodegl_15TimeRangeFilter_6set_max_idle_time(((struct __pyx_obj_8pynodegl_TimeRangeFilter *)__pyx_v_self), ((double)__pyx_v_max_idle_time));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_15TimeRangeFilter_6set_max_idle_time(struct __pyx_obj_8pynodegl_TimeRangeFilter *__pyx_v_self, double __pyx_v_max_idle_time) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("set_max_idle_time", 0);

  /* "nodes_def.pyx":2094
 * 
 *     def set_max_idle_time(self, double max_idle_time):
 *         return ngl_node_param_set(self.ctx, "max_idle_time", max_idle_time)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"max_idle_time"), __pyx_v_max_idle_time)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2094, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":2093
 *         return ngl_node_param_set(self.ctx, "prefetch_time", prefetch_time)
 * 
 *     def set_max_idle_time(self, double max_idle_time):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "max_idle_time", max_idle_time)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.TimeRangeFilter.set_max_idle_time", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_15TimeRangeFilter_9__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pynodegl_15TimeRangeFilter_9__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_15TimeRangeFilter_8__reduce_cython__(((struct __pyx_obj_8pynodegl_TimeRangeFilter *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_15TimeRangeFilter_8__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_TimeRangeFilter *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__149, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.TimeRangeFilter.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_15TimeRangeFilter_11__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8pynodegl_15TimeRangeFilter_11__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_15TimeRangeFilter_10__setstate_cython__(((struct __pyx_obj_8pynodegl_TimeRangeFilter *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_15TimeRangeFilter_10__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_TimeRangeFilter *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__150, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.TimeRangeFilter.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":2099
 * cdef class TimeRangeModeCont(_Node):
 * 
 *     def __init__(self, double start_time, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_TIMERANGEMODECONT, start_time)
 */

/* Python wrapper */
static int __pyx_pw_8pynodegl_17TimeRangeModeCont_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pynodegl_17TimeRangeModeCont_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_start_time;
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  __pyx_v_kwargs = PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return -1;
  __Pyx_GOTREF(__pyx_v_kwargs);
  if (PyTuple_GET_SIZE(__pyx_args) > 1) {
    __pyx_v_args = PyTuple_GetSlice(__pyx_args, 1, PyTuple_GET_SIZE(__pyx_args));
    if (unlikely(!__pyx_v_args)) {
      __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
      __Pyx_RefNannyFinishContext();
      return -1;
    }
    __Pyx_GOTREF(__pyx_v_args);
  } else {
    __pyx_v_args = __pyx_empty_tuple; __Pyx_INCREF(__pyx_empty_tuple);
  }
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_start_time,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        default:
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_start_time)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t used_pos_args = (pos_args < 1) ? pos_args : 1;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_kwargs, values, used_pos_args, "__init__") < 0)) __PYX_ERR(0, 2099, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) < 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_start_time = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_start_time == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2099, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2099, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_args); __pyx_v_args = 0;
  __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
  __Pyx_AddTraceback("pynodegl.TimeRangeModeCont.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pynodegl_17TimeRangeModeCont___init__(((struct __pyx_obj_8pynodegl_TimeRangeModeCont *)__pyx_v_self), __pyx_v_start_time, __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pynodegl_17TimeRangeModeCont___init__(struct __pyx_obj_8pynodegl_TimeRangeModeCont *__pyx_v_self, double __pyx_v_start_time, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "nodes_def.pyx":2100
 * 
 *     def __init__(self, double start_time, *args, **kwargs):
 *         assert self.ctx is NULL             # <<<<<<<<<<<<<<
 *         self.ctx = ngl_node_create(NGL_NODE_TIMERANGEMODECONT, start_time)
 *         if self.ctx is NULL:
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!((__pyx_v_self->__pyx_base.ctx == NULL) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 2100, __pyx_L1_error)
    }
  }
  #endif

  /* "nodes_def.pyx":2101
 *     def __init__(self, double start_time, *args, **kwargs):
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_TIMERANGEMODECONT, start_time)             # <<<<<<<<<<<<<<
 *         if self.ctx is NULL:
 *             raise MemoryError()
 */
  __pyx_v_self->__pyx_base.ctx = ngl_node_create(NGL_NODE_TIMERANGEMODECONT, __pyx_v_start_time);

  /* "nodes_def.pyx":2102
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_TIMERANGEMODECONT, start_time)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         _Node._init_params(self, *args, **kwargs)
 */
  __pyx_t_1 = ((__pyx_v_self->__pyx_base.ctx == NULL) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "nodes_def.pyx":2103
 *         self.ctx = ngl_node_create(NGL_NODE_TIMERANGEMODECONT, start_time)
 *         if self.ctx is NULL:
 *             raise MemoryError()             # <<<<<<<<<<<<<<
 *         _Node._init_params(self, *args, **kwargs)
 * 
 */
    PyErr_NoMemory(); __PYX_ERR(0, 2103, __pyx_L1_error)

    /* "nodes_def.pyx":2102
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_TIMERANGEMODECONT, start_time)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         _Node._init_params(self, *args, **kwargs)
 */
  }

  /* "nodes_def.pyx":2104
 *         if self.ctx is NULL:
 *             raise MemoryError()
 *         _Node._init_params(self, *args, **kwargs)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_8pynodegl__Node), __pyx_n_s_init_params); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2104, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2104, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_v_self));
  __pyx_t_4 = PyNumber_Add(__pyx_t_3, __pyx_v_args); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2104, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, __pyx_v_kwargs); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2104, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "nodes_def.pyx":2099
 * cdef class TimeRangeModeCont(_Node):
 * 
 *     def __init__(self, double start_time, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_TIMERANGEMODECONT, start_time)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pynodegl.TimeRangeModeCont.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_17TimeRangeModeCont_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pynodegl_17TimeRangeModeCont_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_17TimeRangeModeCont_2__reduce_cython__(((struct __pyx_obj_8pynodegl_TimeRangeModeCont *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_17TimeRangeModeCont_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_TimeRangeModeCont *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__151, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.TimeRangeModeCont.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_17TimeRangeModeCont_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8pynodegl_17TimeRangeModeCont_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_17TimeRangeModeCont_4__setstate_cython__(((struct __pyx_obj_8pynodegl_TimeRangeModeCont *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_17TimeRangeModeCont_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_TimeRangeModeCont *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__152, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.TimeRangeModeCont.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":2110
 * cdef class TimeRangeModeNoop(_Node):
 * 
 *     def __init__(self, double start_time, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_TIMERANGEMODENOOP, start_time)
 */

/* Python wrapper */
static int __pyx_pw_8pynodegl_17TimeRangeModeNoop_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pynodegl_17TimeRangeModeNoop_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_start_time;
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  __pyx_v_kwargs = PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return -1;
  __Pyx_GOTREF(__pyx_v_kwargs);
  if (PyTuple_GET_SIZE(__pyx_args) > 1) {
    __pyx_v_args = PyTuple_GetSlice(__pyx_args, 1, PyTuple_GET_SIZE(__pyx_args));
    if (unlikely(!__pyx_v_args)) {
      __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
      __Pyx_RefNannyFinishContext();
      return -1;
    }
    __Pyx_GOTREF(__pyx_v_args);
  } else {
    __pyx_v_args = __pyx_empty_tuple; __Pyx_INCREF(__pyx_empty_tuple);
  }
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_start_time,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        default:
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_start_time)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t used_pos_args = (pos_args < 1) ? pos_args : 1;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_kwargs, values, used_pos_args, "__init__") < 0)) __PYX_ERR(0, 2110, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) < 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_start_time = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_start_time == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2110, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2110, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_args); __pyx_v_args = 0;
  __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
  __Pyx_AddTraceback("pynodegl.TimeRangeModeNoop.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pynodegl_17TimeRangeModeNoop___init__(((struct __pyx_obj_8pynodegl_TimeRangeModeNoop *)__pyx_v_self), __pyx_v_start_time, __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pynodegl_17TimeRangeModeNoop___init__(struct __pyx_obj_8pynodegl_TimeRangeModeNoop *__pyx_v_self, double __pyx_v_start_time, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "nodes_def.pyx":2111
 * 
 *     def __init__(self, double start_time, *args, **kwargs):
 *         assert self.ctx is NULL             # <<<<<<<<<<<<<<
 *         self.ctx = ngl_node_create(NGL_NODE_TIMERANGEMODENOOP, start_time)
 *         if self.ctx is NULL:
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!((__pyx_v_self->__pyx_base.ctx == NULL) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 2111, __pyx_L1_error)
    }
  }
  #endif

  /* "nodes_def.pyx":2112
 *     def __init__(self, double start_time, *args, **kwargs):
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_TIMERANGEMODENOOP, start_time)             # <<<<<<<<<<<<<<
 *         if self.ctx is NULL:
 *             raise MemoryError()
 */
  __pyx_v_self->__pyx_base.ctx = ngl_node_create(NGL_NODE_TIMERANGEMODENOOP, __pyx_v_start_time);

  /* "nodes_def.pyx":2113
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_TIMERANGEMODENOOP, start_time)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         _Node._init_params(self, *args, **kwargs)
 */
  __pyx_t_1 = ((__pyx_v_self->__pyx_base.ctx == NULL) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "nodes_def.pyx":2114
 *         self.ctx = ngl_node_create(NGL_NODE_TIMERANGEMODENOOP, start_time)
 *         if self.ctx is NULL:
 *             raise MemoryError()             # <<<<<<<<<<<<<<
 *         _Node._init_params(self, *args, **kwargs)
 * 
 */
    PyErr_NoMemory(); __PYX_ERR(0, 2114, __pyx_L1_error)

    /* "nodes_def.pyx":2113
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_TIMERANGEMODENOOP, start_time)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         _Node._init_params(self, *args, **kwargs)
 */
  }

  /* "nodes_def.pyx":2115
 *         if self.ctx is NULL:
 *             raise MemoryError()
 *         _Node._init_params(self, *args, **kwargs)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_8pynodegl__Node), __pyx_n_s_init_params); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2115, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2115, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_v_self));
  __pyx_t_4 = PyNumber_Add(__pyx_t_3, __pyx_v_args); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2115, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, __pyx_v_kwargs); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2115, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "nodes_def.pyx":2110
 * cdef class TimeRangeModeNoop(_Node):
 * 
 *     def __init__(self, double start_time, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_TIMERANGEMODENOOP, start_time)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pynodegl.TimeRangeModeNoop.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_17TimeRangeModeNoop_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pynodegl_17TimeRangeModeNoop_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_17TimeRangeModeNoop_2__reduce_cython__(((struct __pyx_obj_8pynodegl_TimeRangeModeNoop *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_17TimeRangeModeNoop_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_TimeRangeModeNoop *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__153, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.TimeRangeModeNoop.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_17TimeRangeModeNoop_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8pynodegl_17TimeRangeModeNoop_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_17TimeRangeModeNoop_4__setstate_cython__(((struct __pyx_obj_8pynodegl_TimeRangeModeNoop *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_17TimeRangeModeNoop_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_TimeRangeModeNoop *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__154, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.TimeRangeModeNoop.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":2121
 * cdef class TimeRangeModeOnce(_Node):
 * 
 *     def __init__(self, double start_time, double render_time, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_TIMERANGEMODEONCE, start_time, render_time)
 */

/* Python wrapper */
static int __pyx_pw_8pynodegl_17TimeRangeModeOnce_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pynodegl_17TimeRangeModeOnce_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_start_time;
  double __pyx_v_render_time;
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  __pyx_v_kwargs = PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return -1;
  __Pyx_GOTREF(__pyx_v_kwargs);
  if (PyTuple_GET_SIZE(__pyx_args) > 2) {
    __pyx_v_args = PyTuple_GetSlice(__pyx_args, 2, PyTuple_GET_SIZE(__pyx_args));
    if (unlikely(!__pyx_v_args)) {
      __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
      __Pyx_RefNannyFinishContext();
      return -1;
    }
    __Pyx_GOTREF(__pyx_v_args);
  } else {
    __pyx_v_args = __pyx_empty_tuple; __Pyx_INCREF(__pyx_empty_tuple);
  }
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_start_time,&__pyx_n_s_render_time,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        default:
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_start_time)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_render_time)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 2, 2, 1); __PYX_ERR(0, 2121, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t used_pos_args = (pos_args < 2) ? pos_args : 2;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_kwargs, values, used_pos_args, "__init__") < 0)) __PYX_ERR(0, 2121, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) < 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_start_time = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_start_time == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2121, __pyx_L3_error)
    __pyx_v_render_time = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_render_time == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2121, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2121, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_args); __pyx_v_args = 0;
  __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
  __Pyx_AddTraceback("pynodegl.TimeRangeModeOnce.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pynodegl_17TimeRangeModeOnce___init__(((struct __pyx_obj_8pynodegl_TimeRangeModeOnce *)__pyx_v_self), __pyx_v_start_time, __pyx_v_render_time, __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pynodegl_17TimeRangeModeOnce___init__(struct __pyx_obj_8pynodegl_TimeRangeModeOnce *__pyx_v_self, double __pyx_v_start_time, double __pyx_v_render_time, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "nodes_def.pyx":2122
 * 
 *     def __init__(self, double start_time, double render_time, *args, **kwargs):
 *         assert self.ctx is NULL             # <<<<<<<<<<<<<<
 *         self.ctx = ngl_node_create(NGL_NODE_TIMERANGEMODEONCE, start_time, render_time)
 *         if self.ctx is NULL:
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!((__pyx_v_self->__pyx_base.ctx == NULL) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 2122, __pyx_L1_error)
    }
  }
  #endif

  /* "nodes_def.pyx":2123
 *     def __init__(self, double start_time, double render_time, *args, **kwargs):
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_TIMERANGEMODEONCE, start_time, render_time)             # <<<<<<<<<<<<<<
 *         if self.ctx is NULL:
 *             raise MemoryError()
 */
  __pyx_v_self->__pyx_base.ctx = ngl_node_create(NGL_NODE_TIMERANGEMODEONCE, __pyx_v_start_time, __pyx_v_render_time);

  /* "nodes_def.pyx":2124
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_TIMERANGEMODEONCE, start_time, render_time)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         _Node._init_params(self, *args, **kwargs)
 */
  __pyx_t_1 = ((__pyx_v_self->__pyx_base.ctx == NULL) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "nodes_def.pyx":2125
 *         self.ctx = ngl_node_create(NGL_NODE_TIMERANGEMODEONCE, start_time, render_time)
 *         if self.ctx is NULL:
 *             raise MemoryError()             # <<<<<<<<<<<<<<
 *         _Node._init_params(self, *args, **kwargs)
 * 
 */
    PyErr_NoMemory(); __PYX_ERR(0, 2125, __pyx_L1_error)

    /* "nodes_def.pyx":2124
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_TIMERANGEMODEONCE, start_time, render_time)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         _Node._init_params(self, *args, **kwargs)
 */
  }

  /* "nodes_def.pyx":2126
 *         if self.ctx is NULL:
 *             raise MemoryError()
 *         _Node._init_params(self, *args, **kwargs)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_8pynodegl__Node), __pyx_n_s_init_params); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2126, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2126, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_v_self));
  __pyx_t_4 = PyNumber_Add(__pyx_t_3, __pyx_v_args); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2126, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, __pyx_v_kwargs); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2126, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "nodes_def.pyx":2121
 * cdef class TimeRangeModeOnce(_Node):
 * 
 *     def __init__(self, double start_time, double render_time, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_TIMERANGEMODEONCE, start_time, render_time)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pynodegl.TimeRangeModeOnce.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_17TimeRangeModeOnce_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pynodegl_17TimeRangeModeOnce_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_17TimeRangeModeOnce_2__reduce_cython__(((struct __pyx_obj_8pynodegl_TimeRangeModeOnce *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_17TimeRangeModeOnce_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_TimeRangeModeOnce *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__155, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.TimeRangeModeOnce.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_17TimeRangeModeOnce_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8pynodegl_17TimeRangeModeOnce_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_17TimeRangeModeOnce_4__setstate_cython__(((struct __pyx_obj_8pynodegl_TimeRangeModeOnce *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_17TimeRangeModeOnce_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_TimeRangeModeOnce *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__156, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.TimeRangeModeOnce.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":2132
 * cdef class Transform(_Node):
 * 
 *     def __init__(self, _Node child, matrix=None, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         assert child is not None
 * 
 */

/* Python wrapper */
static int __pyx_pw_8pynodegl_9Transform_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pynodegl_9Transform_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pynodegl__Node *__pyx_v_child = 0;
  PyObject *__pyx_v_matrix = 0;
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  __pyx_v_kwargs = PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return -1;
  __Pyx_GOTREF(__pyx_v_kwargs);
  if (PyTuple_GET_SIZE(__pyx_args) > 2) {
    __pyx_v_args = PyTuple_GetSlice(__pyx_args, 2, PyTuple_GET_SIZE(__pyx_args));
    if (unlikely(!__pyx_v_args)) {
      __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
      __Pyx_RefNannyFinishContext();
      return -1;
    }
    __Pyx_GOTREF(__pyx_v_args);
  } else {
    __pyx_v_args = __pyx_empty_tuple; __Pyx_INCREF(__pyx_empty_tuple);
  }
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_child,&__pyx_n_s_matrix,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        default:
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_child)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_matrix);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t used_pos_args = (pos_args < 2) ? pos_args : 2;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_kwargs, values, used_pos_args, "__init__") < 0)) __PYX_ERR(0, 2132, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        default:
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        case  0:
        goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_child = ((struct __pyx_obj_8pynodegl__Node *)values[0]);
    __pyx_v_matrix = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2132, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_args); __pyx_v_args = 0;
  __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
  __Pyx_AddTraceback("pynodegl.Transform.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_child), __pyx_ptype_8pynodegl__Node, 1, "child", 0))) __PYX_ERR(0, 2132, __pyx_L1_error)
  __pyx_r = __pyx_pf_8pynodegl_9Transform___init__(((struct __pyx_obj_8pynodegl_Transform *)__pyx_v_self), __pyx_v_child, __pyx_v_matrix, __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pynodegl_9Transform___init__(struct __pyx_obj_8pynodegl_Transform *__pyx_v_self, struct __pyx_obj_8pynodegl__Node *__pyx_v_child, PyObject *__pyx_v_matrix, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "nodes_def.pyx":2133
 * 
 *     def __init__(self, _Node child, matrix=None, *args, **kwargs):
 *         assert child is not None             # <<<<<<<<<<<<<<
 * 
 *         assert self.ctx is NULL
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = (((PyObject *)__pyx_v_child) != Py_None);
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 2133, __pyx_L1_error)
    }
  }
  #endif

  /* "nodes_def.pyx":2135
 *         assert child is not None
 * 
 *         assert self.ctx is NULL             # <<<<<<<<<<<<<<
 *         self.ctx = ngl_node_create(NGL_NODE_TRANSFORM, child.ctx)
 *         if self.ctx is NULL:
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!((__pyx_v_self->__pyx_base.ctx == NULL) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 2135, __pyx_L1_error)
    }
  }
  #endif

  /* "nodes_def.pyx":2136
 * 
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_TRANSFORM, child.ctx)             # <<<<<<<<<<<<<<
 *         if self.ctx is NULL:
 *             raise MemoryError()
 */
  __pyx_v_self->__pyx_base.ctx = ngl_node_create(NGL_NODE_TRANSFORM, __pyx_v_child->ctx);

  /* "nodes_def.pyx":2137
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_TRANSFORM, child.ctx)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         _Node._init_params(self, *args, **kwargs)
 */
  __pyx_t_1 = ((__pyx_v_self->__pyx_base.ctx == NULL) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "nodes_def.pyx":2138
 *         self.ctx = ngl_node_create(NGL_NODE_TRANSFORM, child.ctx)
 *         if self.ctx is NULL:
 *             raise MemoryError()             # <<<<<<<<<<<<<<
 *         _Node._init_params(self, *args, **kwargs)
 * 
 */
    PyErr_NoMemory(); __PYX_ERR(0, 2138, __pyx_L1_error)

    /* "nodes_def.pyx":2137
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_TRANSFORM, child.ctx)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         _Node._init_params(self, *args, **kwargs)
 */
  }

  /* "nodes_def.pyx":2139
 *         if self.ctx is NULL:
 *             raise MemoryError()
 *         _Node._init_params(self, *args, **kwargs)             # <<<<<<<<<<<<<<
 * 
 *         if matrix is not None:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_8pynodegl__Node), __pyx_n_s_init_params); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2139, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2139, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_v_self));
  __pyx_t_4 = PyNumber_Add(__pyx_t_3, __pyx_v_args); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2139, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, __pyx_v_kwargs); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2139, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "nodes_def.pyx":2141
 *         _Node._init_params(self, *args, **kwargs)
 * 
 *         if matrix is not None:             # <<<<<<<<<<<<<<
 *             self.set_matrix(*matrix)
 * 
 */
  __pyx_t_1 = (__pyx_v_matrix != Py_None);
  __pyx_t_5 = (__pyx_t_1 != 0);
  if (__pyx_t_5) {

    /* "nodes_def.pyx":2142
 * 
 *         if matrix is not None:
 *             self.set_matrix(*matrix)             # <<<<<<<<<<<<<<
 * 
 *     def set_matrix(self, *matrix):
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_matrix); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2142, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PySequence_Tuple(__pyx_v_matrix); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2142, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2142, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "nodes_def.pyx":2141
 *         _Node._init_params(self, *args, **kwargs)
 * 
 *         if matrix is not None:             # <<<<<<<<<<<<<<
 *             self.set_matrix(*matrix)
 * 
 */
  }

  /* "nodes_def.pyx":2132
 * cdef class Transform(_Node):
 * 
 *     def __init__(self, _Node child, matrix=None, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         assert child is not None
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pynodegl.Transform.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":2144
 *             self.set_matrix(*matrix)
 * 
 *     def set_matrix(self, *matrix):             # <<<<<<<<<<<<<<
 *         cdef float[16] matrix_c
 *         cdef int matrix_i
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_9Transform_3set_matrix(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_8pynodegl_9Transform_3set_matrix(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_matrix = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_matrix (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "set_matrix", 0))) return NULL;
  __Pyx_INCREF(__pyx_args);
  __pyx_v_matrix = __pyx_args;
  __pyx_r = __pyx_pf_8pynodegl_9Transform_2set_matrix(((struct __pyx_obj_8pynodegl_Transform *)__pyx_v_self), __pyx_v_matrix);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_matrix);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_9Transform_2set_matrix(struct __pyx_obj_8pynodegl_Transform *__pyx_v_self, PyObject *__pyx_v_matrix) {
  float __pyx_v_matrix_c[16];
  int __pyx_v_matrix_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  Py_UCS4 __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  int __pyx_t_7;
  float __pyx_t_8;
  __Pyx_RefNannySetupContext("set_matrix", 0);

  /* "nodes_def.pyx":2147
 *         cdef float[16] matrix_c
 *         cdef int matrix_i
 *         if len(matrix) != 16:             # <<<<<<<<<<<<<<
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (
 *                             "matrix", 16, len(matrix)))
 */
  __pyx_t_1 = PyTuple_GET_SIZE(__pyx_v_matrix); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 2147, __pyx_L1_error)
  __pyx_t_2 = ((__pyx_t_1 != 16) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "nodes_def.pyx":2148
 *         cdef int matrix_i
 *         if len(matrix) != 16:
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (             # <<<<<<<<<<<<<<
 *                             "matrix", 16, len(matrix)))
 *         for matrix_i in range(16):
 */
    __pyx_t_3 = PyTuple_New(5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2148, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = 0;
    __pyx_t_4 = 127;
    __Pyx_INCREF(__pyx_kp_u_matrix_parameter_is_expected_to);
    __pyx_t_1 += 38;
    __Pyx_GIVEREF(__pyx_kp_u_matrix_parameter_is_expected_to);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_kp_u_matrix_parameter_is_expected_to);

    /* "nodes_def.pyx":2149
 *         if len(matrix) != 16:
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (
 *                             "matrix", 16, len(matrix)))             # <<<<<<<<<<<<<<
 *         for matrix_i in range(16):
 *             matrix_c[matrix_i] = matrix[matrix_i]
 */
    __pyx_t_5 = __Pyx_PyUnicode_From_long(16, 0, ' ', 'd'); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2149, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_INCREF(__pyx_kp_u_but_got);
    __pyx_t_1 += 9;
    __Pyx_GIVEREF(__pyx_kp_u_but_got);
    PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_kp_u_but_got);
    __pyx_t_6 = PyTuple_GET_SIZE(__pyx_v_matrix); if (unlikely(__pyx_t_6 == ((Py_ssize_t)-1))) __PYX_ERR(0, 2149, __pyx_L1_error)
    __pyx_t_5 = __Pyx_PyUnicode_From_Py_ssize_t(__pyx_t_6, 0, ' ', 'd'); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2149, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_3, 3, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_INCREF(__pyx_kp_u_values);
    __pyx_t_1 += 7;
    __Pyx_GIVEREF(__pyx_kp_u_values);
    PyTuple_SET_ITEM(__pyx_t_3, 4, __pyx_kp_u_values);

    /* "nodes_def.pyx":2148
 *         cdef int matrix_i
 *         if len(matrix) != 16:
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (             # <<<<<<<<<<<<<<
 *                             "matrix", 16, len(matrix)))
 *         for matrix_i in range(16):
 */
    __pyx_t_5 = __Pyx_PyUnicode_Join(__pyx_t_3, 5, __pyx_t_1, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2148, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2148, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 2148, __pyx_L1_error)

    /* "nodes_def.pyx":2147
 *         cdef float[16] matrix_c
 *         cdef int matrix_i
 *         if len(matrix) != 16:             # <<<<<<<<<<<<<<
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (
 *                             "matrix", 16, len(matrix)))
 */
  }

  /* "nodes_def.pyx":2150
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (
 *                             "matrix", 16, len(matrix)))
 *         for matrix_i in range(16):             # <<<<<<<<<<<<<<
 *             matrix_c[matrix_i] = matrix[matrix_i]
 * 
 */
  for (__pyx_t_7 = 0; __pyx_t_7 < 16; __pyx_t_7+=1) {
    __pyx_v_matrix_i = __pyx_t_7;

    /* "nodes_def.pyx":2151
 *                             "matrix", 16, len(matrix)))
 *         for matrix_i in range(16):
 *             matrix_c[matrix_i] = matrix[matrix_i]             # <<<<<<<<<<<<<<
 * 
 *         return ngl_node_param_set(self.ctx, "matrix", matrix_c)
 */
    __pyx_t_3 = __Pyx_GetItemInt_Tuple(__pyx_v_matrix, __pyx_v_matrix_i, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2151, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_8 = __pyx_PyFloat_AsFloat(__pyx_t_3); if (unlikely((__pyx_t_8 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 2151, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    (__pyx_v_matrix_c[__pyx_v_matrix_i]) = __pyx_t_8;
  }

  /* "nodes_def.pyx":2153
 *             matrix_c[matrix_i] = matrix[matrix_i]
 * 
 *         return ngl_node_param_set(self.ctx, "matrix", matrix_c)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"matrix"), __pyx_v_matrix_c)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2153, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":2144
 *             self.set_matrix(*matrix)
 * 
 *     def set_matrix(self, *matrix):             # <<<<<<<<<<<<<<
 *         cdef float[16] matrix_c
 *         cdef int matrix_i
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pynodegl.Transform.set_matrix", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_9Transform_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pynodegl_9Transform_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_9Transform_4__reduce_cython__(((struct __pyx_obj_8pynodegl_Transform *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_9Transform_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_Transform *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__157, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.Transform.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_9Transform_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8pynodegl_9Transform_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_9Transform_6__setstate_cython__(((struct __pyx_obj_8pynodegl_Transform *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_9Transform_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_Transform *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__158, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.Transform.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":2158
 * cdef class Translate(_Node):
 * 
 *     def __init__(self, _Node child, vector=None, anim=None, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         assert child is not None
 * 
 */

/* Python wrapper */
static int __pyx_pw_8pynodegl_9Translate_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pynodegl_9Translate_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pynodegl__Node *__pyx_v_child = 0;
  PyObject *__pyx_v_vector = 0;
  PyObject *__pyx_v_anim = 0;
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  __pyx_v_kwargs = PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return -1;
  __Pyx_GOTREF(__pyx_v_kwargs);
  if (PyTuple_GET_SIZE(__pyx_args) > 3) {
    __pyx_v_args = PyTuple_GetSlice(__pyx_args, 3, PyTuple_GET_SIZE(__pyx_args));
    if (unlikely(!__pyx_v_args)) {
      __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
      __Pyx_RefNannyFinishContext();
      return -1;
    }
    __Pyx_GOTREF(__pyx_v_args);
  } else {
    __pyx_v_args = __pyx_empty_tuple; __Pyx_INCREF(__pyx_empty_tuple);
  }
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_child,&__pyx_n_s_vector,&__pyx_n_s_anim,0};
    PyObject* values[3] = {0,0,0};
    values[1] = ((PyObject *)Py_None);
    values[2] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        default:
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_child)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_vector);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_anim);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t used_pos_args = (pos_args < 3) ? pos_args : 3;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_kwargs, values, used_pos_args, "__init__") < 0)) __PYX_ERR(0, 2158, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        default:
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        case  0:
        goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_child = ((struct __pyx_obj_8pynodegl__Node *)values[0]);
    __pyx_v_vector = values[1];
    __pyx_v_anim = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 1, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2158, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_args); __pyx_v_args = 0;
  __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
  __Pyx_AddTraceback("pynodegl.Translate.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_child), __pyx_ptype_8pynodegl__Node, 1, "child", 0))) __PYX_ERR(0, 2158, __pyx_L1_error)
  __pyx_r = __pyx_pf_8pynodegl_9Translate___init__(((struct __pyx_obj_8pynodegl_Translate *)__pyx_v_self), __pyx_v_child, __pyx_v_vector, __pyx_v_anim, __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pynodegl_9Translate___init__(struct __pyx_obj_8pynodegl_Translate *__pyx_v_self, struct __pyx_obj_8pynodegl__Node *__pyx_v_child, PyObject *__pyx_v_vector, PyObject *__pyx_v_anim, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "nodes_def.pyx":2159
 * 
 *     def __init__(self, _Node child, vector=None, anim=None, *args, **kwargs):
 *         assert child is not None             # <<<<<<<<<<<<<<
 * 
 *         assert self.ctx is NULL
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = (((PyObject *)__pyx_v_child) != Py_None);
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 2159, __pyx_L1_error)
    }
  }
  #endif

  /* "nodes_def.pyx":2161
 *         assert child is not None
 * 
 *         assert self.ctx is NULL             # <<<<<<<<<<<<<<
 *         self.ctx = ngl_node_create(NGL_NODE_TRANSLATE, child.ctx)
 *         if self.ctx is NULL:
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!((__pyx_v_self->__pyx_base.ctx == NULL) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 2161, __pyx_L1_error)
    }
  }
  #endif

  /* "nodes_def.pyx":2162
 * 
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_TRANSLATE, child.ctx)             # <<<<<<<<<<<<<<
 *         if self.ctx is NULL:
 *             raise MemoryError()
 */
  __pyx_v_self->__pyx_base.ctx = ngl_node_create(NGL_NODE_TRANSLATE, __pyx_v_child->ctx);

  /* "nodes_def.pyx":2163
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_TRANSLATE, child.ctx)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         _Node._init_params(self, *args, **kwargs)
 */
  __pyx_t_1 = ((__pyx_v_self->__pyx_base.ctx == NULL) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "nodes_def.pyx":2164
 *         self.ctx = ngl_node_create(NGL_NODE_TRANSLATE, child.ctx)
 *         if self.ctx is NULL:
 *             raise MemoryError()             # <<<<<<<<<<<<<<
 *         _Node._init_params(self, *args, **kwargs)
 * 
 */
    PyErr_NoMemory(); __PYX_ERR(0, 2164, __pyx_L1_error)

    /* "nodes_def.pyx":2163
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_TRANSLATE, child.ctx)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         _Node._init_params(self, *args, **kwargs)
 */
  }

  /* "nodes_def.pyx":2165
 *         if self.ctx is NULL:
 *             raise MemoryError()
 *         _Node._init_params(self, *args, **kwargs)             # <<<<<<<<<<<<<<
 * 
 *         if vector is not None:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_8pynodegl__Node), __pyx_n_s_init_params); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2165, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2165, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_v_self));
  __pyx_t_4 = PyNumber_Add(__pyx_t_3, __pyx_v_args); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2165, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, __pyx_v_kwargs); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2165, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "nodes_def.pyx":2167
 *         _Node._init_params(self, *args, **kwargs)
 * 
 *         if vector is not None:             # <<<<<<<<<<<<<<
 *             self.set_vector(*vector)
 *         if anim is not None:
 */
  __pyx_t_1 = (__pyx_v_vector != Py_None);
  __pyx_t_5 = (__pyx_t_1 != 0);
  if (__pyx_t_5) {

    /* "nodes_def.pyx":2168
 * 
 *         if vector is not None:
 *             self.set_vector(*vector)             # <<<<<<<<<<<<<<
 *         if anim is not None:
 *             self.set_anim(anim)
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_vector); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2168, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PySequence_Tuple(__pyx_v_vector); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2168, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2168, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "nodes_def.pyx":2167
 *         _Node._init_params(self, *args, **kwargs)
 * 
 *         if vector is not None:             # <<<<<<<<<<<<<<
 *             self.set_vector(*vector)
 *         if anim is not None:
 */
  }

  /* "nodes_def.pyx":2169
 *         if vector is not None:
 *             self.set_vector(*vector)
 *         if anim is not None:             # <<<<<<<<<<<<<<
 *             self.set_anim(anim)
 * 
 */
  __pyx_t_5 = (__pyx_v_anim != Py_None);
  __pyx_t_1 = (__pyx_t_5 != 0);
  if (__pyx_t_1) {

    /* "nodes_def.pyx":2170
 *             self.set_vector(*vector)
 *         if anim is not None:
 *             self.set_anim(anim)             # <<<<<<<<<<<<<<
 * 
 *     def set_vector(self, *vector):
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_anim); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2170, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_2 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_3, __pyx_v_anim) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_anim);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2170, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "nodes_def.pyx":2169
 *         if vector is not None:
 *             self.set_vector(*vector)
 *         if anim is not None:             # <<<<<<<<<<<<<<
 *             self.set_anim(anim)
 * 
 */
  }

  /* "nodes_def.pyx":2158
 * cdef class Translate(_Node):
 * 
 *     def __init__(self, _Node child, vector=None, anim=None, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         assert child is not None
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pynodegl.Translate.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":2172
 *             self.set_anim(anim)
 * 
 *     def set_vector(self, *vector):             # <<<<<<<<<<<<<<
 *         cdef float[3] vector_c
 *         cdef int vector_i
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_9Translate_3set_vector(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_8pynodegl_9Translate_3set_vector(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_vector = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_vector (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "set_vector", 0))) return NULL;
  __Pyx_INCREF(__pyx_args);
  __pyx_v_vector = __pyx_args;
  __pyx_r = __pyx_pf_8pynodegl_9Translate_2set_vector(((struct __pyx_obj_8pynodegl_Translate *)__pyx_v_self), __pyx_v_vector);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_vector);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_9Translate_2set_vector(struct __pyx_obj_8pynodegl_Translate *__pyx_v_self, PyObject *__pyx_v_vector) {
  float __pyx_v_vector_c[3];
  int __pyx_v_vector_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  Py_UCS4 __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  int __pyx_t_7;
  float __pyx_t_8;
  __Pyx_RefNannySetupContext("set_vector", 0);

  /* "nodes_def.pyx":2175
 *         cdef float[3] vector_c
 *         cdef int vector_i
 *         if len(vector) != 3:             # <<<<<<<<<<<<<<
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (
 *                             "vector", 3, len(vector)))
 */
  __pyx_t_1 = PyTuple_GET_SIZE(__pyx_v_vector); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 2175, __pyx_L1_error)
  __pyx_t_2 = ((__pyx_t_1 != 3) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "nodes_def.pyx":2176
 *         cdef int vector_i
 *         if len(vector) != 3:
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (             # <<<<<<<<<<<<<<
 *                             "vector", 3, len(vector)))
 *         for vector_i in range(3):
 */
    __pyx_t_3 = PyTuple_New(5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2176, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = 0;
    __pyx_t_4 = 127;
    __Pyx_INCREF(__pyx_kp_u_vector_parameter_is_expected_to);
    __pyx_t_1 += 38;
    __Pyx_GIVEREF(__pyx_kp_u_vector_parameter_is_expected_to);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_kp_u_vector_parameter_is_expected_to);

    /* "nodes_def.pyx":2177
 *         if len(vector) != 3:
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (
 *                             "vector", 3, len(vector)))             # <<<<<<<<<<<<<<
 *         for vector_i in range(3):
 *             vector_c[vector_i] = vector[vector_i]
 */
    __pyx_t_5 = __Pyx_PyUnicode_From_long(3, 0, ' ', 'd'); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2177, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_INCREF(__pyx_kp_u_but_got);
    __pyx_t_1 += 9;
    __Pyx_GIVEREF(__pyx_kp_u_but_got);
    PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_kp_u_but_got);
    __pyx_t_6 = PyTuple_GET_SIZE(__pyx_v_vector); if (unlikely(__pyx_t_6 == ((Py_ssize_t)-1))) __PYX_ERR(0, 2177, __pyx_L1_error)
    __pyx_t_5 = __Pyx_PyUnicode_From_Py_ssize_t(__pyx_t_6, 0, ' ', 'd'); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2177, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_3, 3, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_INCREF(__pyx_kp_u_values);
    __pyx_t_1 += 7;
    __Pyx_GIVEREF(__pyx_kp_u_values);
    PyTuple_SET_ITEM(__pyx_t_3, 4, __pyx_kp_u_values);

    /* "nodes_def.pyx":2176
 *         cdef int vector_i
 *         if len(vector) != 3:
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (             # <<<<<<<<<<<<<<
 *                             "vector", 3, len(vector)))
 *         for vector_i in range(3):
 */
    __pyx_t_5 = __Pyx_PyUnicode_Join(__pyx_t_3, 5, __pyx_t_1, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2176, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2176, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 2176, __pyx_L1_error)

    /* "nodes_def.pyx":2175
 *         cdef float[3] vector_c
 *         cdef int vector_i
 *         if len(vector) != 3:             # <<<<<<<<<<<<<<
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (
 *                             "vector", 3, len(vector)))
 */
  }

  /* "nodes_def.pyx":2178
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (
 *                             "vector", 3, len(vector)))
 *         for vector_i in range(3):             # <<<<<<<<<<<<<<
 *             vector_c[vector_i] = vector[vector_i]
 * 
 */
  for (__pyx_t_7 = 0; __pyx_t_7 < 3; __pyx_t_7+=1) {
    __pyx_v_vector_i = __pyx_t_7;

    /* "nodes_def.pyx":2179
 *                             "vector", 3, len(vector)))
 *         for vector_i in range(3):
 *             vector_c[vector_i] = vector[vector_i]             # <<<<<<<<<<<<<<
 * 
 *         return ngl_node_param_set(self.ctx, "vector", vector_c)
 */
    __pyx_t_3 = __Pyx_GetItemInt_Tuple(__pyx_v_vector, __pyx_v_vector_i, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2179, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_8 = __pyx_PyFloat_AsFloat(__pyx_t_3); if (unlikely((__pyx_t_8 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 2179, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    (__pyx_v_vector_c[__pyx_v_vector_i]) = __pyx_t_8;
  }

  /* "nodes_def.pyx":2181
 *             vector_c[vector_i] = vector[vector_i]
 * 
 *         return ngl_node_param_set(self.ctx, "vector", vector_c)             # <<<<<<<<<<<<<<
 * 
 *     def set_anim(self, _Node anim):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"vector"), __pyx_v_vector_c)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2181, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":2172
 *             self.set_anim(anim)
 * 
 *     def set_vector(self, *vector):             # <<<<<<<<<<<<<<
 *         cdef float[3] vector_c
 *         cdef int vector_i
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pynodegl.Translate.set_vector", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":2183
 *         return ngl_node_param_set(self.ctx, "vector", vector_c)
 * 
 *     def set_anim(self, _Node anim):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "anim", anim.ctx)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_9Translate_5set_anim(PyObject *__pyx_v_self, PyObject *__pyx_v_anim); /*proto*/
static PyObject *__pyx_pw_8pynodegl_9Translate_5set_anim(PyObject *__pyx_v_self, PyObject *__pyx_v_anim) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_anim (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_anim), __pyx_ptype_8pynodegl__Node, 1, "anim", 0))) __PYX_ERR(0, 2183, __pyx_L1_error)
  __pyx_r = __pyx_pf_8pynodegl_9Translate_4set_anim(((struct __pyx_obj_8pynodegl_Translate *)__pyx_v_self), ((struct __pyx_obj_8pynodegl__Node *)__pyx_v_anim));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_9Translate_4set_anim(struct __pyx_obj_8pynodegl_Translate *__pyx_v_self, struct __pyx_obj_8pynodegl__Node *__pyx_v_anim) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("set_anim", 0);

  /* "nodes_def.pyx":2184
 * 
 *     def set_anim(self, _Node anim):
 *         return ngl_node_param_set(self.ctx, "anim", anim.ctx)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"anim"), __pyx_v_anim->ctx)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2184, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":2183
 *         return ngl_node_param_set(self.ctx, "vector", vector_c)
 * 
 *     def set_anim(self, _Node anim):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "anim", anim.ctx)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.Translate.set_anim", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_9Translate_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pynodegl_9Translate_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_9Translate_6__reduce_cython__(((struct __pyx_obj_8pynodegl_Translate *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_9Translate_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_Translate *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__159, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.Translate.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_9Translate_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8pynodegl_9Translate_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_9Translate_8__setstate_cython__(((struct __pyx_obj_8pynodegl_Translate *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_9Translate_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_Translate *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__160, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.Translate.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":2189
 * cdef class Triangle(_Node):
 * 
 *     def __init__(self, edge0, edge1, edge2, uv_edge0=None, uv_edge1=None, uv_edge2=None, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         cdef float[3] edge0_c
 *         cdef int edge0_i
 */

/* Python wrapper */
static int __pyx_pw_8pynodegl_8Triangle_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pynodegl_8Triangle_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_edge0 = 0;
  PyObject *__pyx_v_edge1 = 0;
  PyObject *__pyx_v_edge2 = 0;
  PyObject *__pyx_v_uv_edge0 = 0;
  PyObject *__pyx_v_uv_edge1 = 0;
  PyObject *__pyx_v_uv_edge2 = 0;
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  __pyx_v_kwargs = PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return -1;
  __Pyx_GOTREF(__pyx_v_kwargs);
  if (PyTuple_GET_SIZE(__pyx_args) > 6) {
    __pyx_v_args = PyTuple_GetSlice(__pyx_args, 6, PyTuple_GET_SIZE(__pyx_args));
    if (unlikely(!__pyx_v_args)) {
      __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
      __Pyx_RefNannyFinishContext();
      return -1;
    }
    __Pyx_GOTREF(__pyx_v_args);
  } else {
    __pyx_v_args = __pyx_empty_tuple; __Pyx_INCREF(__pyx_empty_tuple);
  }
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_edge0,&__pyx_n_s_edge1,&__pyx_n_s_edge2,&__pyx_n_s_uv_edge0,&__pyx_n_s_uv_edge1,&__pyx_n_s_uv_edge2,0};
    PyObject* values[6] = {0,0,0,0,0,0};
    values[3] = ((PyObject *)Py_None);
    values[4] = ((PyObject *)Py_None);
    values[5] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        default:
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_edge0)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_edge1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 3, 6, 1); __PYX_ERR(0, 2189, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_edge2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 3, 6, 2); __PYX_ERR(0, 2189, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_uv_edge0);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_uv_edge1);
          if (value) { values[4] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_uv_edge2);
          if (value) { values[5] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t used_pos_args = (pos_args < 6) ? pos_args : 6;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_kwargs, values, used_pos_args, "__init__") < 0)) __PYX_ERR(0, 2189, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        default:
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        case  2:
        case  1:
        case  0:
        goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_edge0 = values[0];
    __pyx_v_edge1 = values[1];
    __pyx_v_edge2 = values[2];
    __pyx_v_uv_edge0 = values[3];
    __pyx_v_uv_edge1 = values[4];
    __pyx_v_uv_edge2 = values[5];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 3, 6, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2189, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_args); __pyx_v_args = 0;
  __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
  __Pyx_AddTraceback("pynodegl.Triangle.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pynodegl_8Triangle___init__(((struct __pyx_obj_8pynodegl_Triangle *)__pyx_v_self), __pyx_v_edge0, __pyx_v_edge1, __pyx_v_edge2, __pyx_v_uv_edge0, __pyx_v_uv_edge1, __pyx_v_uv_edge2, __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pynodegl_8Triangle___init__(struct __pyx_obj_8pynodegl_Triangle *__pyx_v_self, PyObject *__pyx_v_edge0, PyObject *__pyx_v_edge1, PyObject *__pyx_v_edge2, PyObject *__pyx_v_uv_edge0, PyObject *__pyx_v_uv_edge1, PyObject *__pyx_v_uv_edge2, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs) {
  float __pyx_v_edge0_c[3];
  int __pyx_v_edge0_i;
  float __pyx_v_edge1_c[3];
  int __pyx_v_edge1_i;
  float __pyx_v_edge2_c[3];
  int __pyx_v_edge2_i;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  Py_UCS4 __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  int __pyx_t_7;
  float __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_t_10;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "nodes_def.pyx":2192
 *         cdef float[3] edge0_c
 *         cdef int edge0_i
 *         if len(edge0) != 3:             # <<<<<<<<<<<<<<
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (
 *                             "edge0", 3, len(edge0)))
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_edge0); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 2192, __pyx_L1_error)
  __pyx_t_2 = ((__pyx_t_1 != 3) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "nodes_def.pyx":2193
 *         cdef int edge0_i
 *         if len(edge0) != 3:
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (             # <<<<<<<<<<<<<<
 *                             "edge0", 3, len(edge0)))
 *         for edge0_i in range(3):
 */
    __pyx_t_3 = PyTuple_New(5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2193, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = 0;
    __pyx_t_4 = 127;
    __Pyx_INCREF(__pyx_kp_u_edge0_parameter_is_expected_to_b);
    __pyx_t_1 += 37;
    __Pyx_GIVEREF(__pyx_kp_u_edge0_parameter_is_expected_to_b);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_kp_u_edge0_parameter_is_expected_to_b);

    /* "nodes_def.pyx":2194
 *         if len(edge0) != 3:
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (
 *                             "edge0", 3, len(edge0)))             # <<<<<<<<<<<<<<
 *         for edge0_i in range(3):
 *             edge0_c[edge0_i] = edge0[edge0_i]
 */
    __pyx_t_5 = __Pyx_PyUnicode_From_long(3, 0, ' ', 'd'); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2194, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_INCREF(__pyx_kp_u_but_got);
    __pyx_t_1 += 9;
    __Pyx_GIVEREF(__pyx_kp_u_but_got);
    PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_kp_u_but_got);
    __pyx_t_6 = PyObject_Length(__pyx_v_edge0); if (unlikely(__pyx_t_6 == ((Py_ssize_t)-1))) __PYX_ERR(0, 2194, __pyx_L1_error)
    __pyx_t_5 = __Pyx_PyUnicode_From_Py_ssize_t(__pyx_t_6, 0, ' ', 'd'); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2194, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_3, 3, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_INCREF(__pyx_kp_u_values);
    __pyx_t_1 += 7;
    __Pyx_GIVEREF(__pyx_kp_u_values);
    PyTuple_SET_ITEM(__pyx_t_3, 4, __pyx_kp_u_values);

    /* "nodes_def.pyx":2193
 *         cdef int edge0_i
 *         if len(edge0) != 3:
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (             # <<<<<<<<<<<<<<
 *                             "edge0", 3, len(edge0)))
 *         for edge0_i in range(3):
 */
    __pyx_t_5 = __Pyx_PyUnicode_Join(__pyx_t_3, 5, __pyx_t_1, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2193, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2193, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 2193, __pyx_L1_error)

    /* "nodes_def.pyx":2192
 *         cdef float[3] edge0_c
 *         cdef int edge0_i
 *         if len(edge0) != 3:             # <<<<<<<<<<<<<<
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (
 *                             "edge0", 3, len(edge0)))
 */
  }

  /* "nodes_def.pyx":2195
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (
 *                             "edge0", 3, len(edge0)))
 *         for edge0_i in range(3):             # <<<<<<<<<<<<<<
 *             edge0_c[edge0_i] = edge0[edge0_i]
 * 
 */
  for (__pyx_t_7 = 0; __pyx_t_7 < 3; __pyx_t_7+=1) {
    __pyx_v_edge0_i = __pyx_t_7;

    /* "nodes_def.pyx":2196
 *                             "edge0", 3, len(edge0)))
 *         for edge0_i in range(3):
 *             edge0_c[edge0_i] = edge0[edge0_i]             # <<<<<<<<<<<<<<
 * 
 *         cdef float[3] edge1_c
 */
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_edge0, __pyx_v_edge0_i, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2196, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_8 = __pyx_PyFloat_AsFloat(__pyx_t_3); if (unlikely((__pyx_t_8 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 2196, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    (__pyx_v_edge0_c[__pyx_v_edge0_i]) = __pyx_t_8;
  }

  /* "nodes_def.pyx":2200
 *         cdef float[3] edge1_c
 *         cdef int edge1_i
 *         if len(edge1) != 3:             # <<<<<<<<<<<<<<
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (
 *                             "edge1", 3, len(edge1)))
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_edge1); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 2200, __pyx_L1_error)
  __pyx_t_2 = ((__pyx_t_1 != 3) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "nodes_def.pyx":2201
 *         cdef int edge1_i
 *         if len(edge1) != 3:
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (             # <<<<<<<<<<<<<<
 *                             "edge1", 3, len(edge1)))
 *         for edge1_i in range(3):
 */
    __pyx_t_3 = PyTuple_New(5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2201, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = 0;
    __pyx_t_4 = 127;
    __Pyx_INCREF(__pyx_kp_u_edge1_parameter_is_expected_to_b);
    __pyx_t_1 += 37;
    __Pyx_GIVEREF(__pyx_kp_u_edge1_parameter_is_expected_to_b);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_kp_u_edge1_parameter_is_expected_to_b);

    /* "nodes_def.pyx":2202
 *         if len(edge1) != 3:
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (
 *                             "edge1", 3, len(edge1)))             # <<<<<<<<<<<<<<
 *         for edge1_i in range(3):
 *             edge1_c[edge1_i] = edge1[edge1_i]
 */
    __pyx_t_5 = __Pyx_PyUnicode_From_long(3, 0, ' ', 'd'); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2202, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_INCREF(__pyx_kp_u_but_got);
    __pyx_t_1 += 9;
    __Pyx_GIVEREF(__pyx_kp_u_but_got);
    PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_kp_u_but_got);
    __pyx_t_6 = PyObject_Length(__pyx_v_edge1); if (unlikely(__pyx_t_6 == ((Py_ssize_t)-1))) __PYX_ERR(0, 2202, __pyx_L1_error)
    __pyx_t_5 = __Pyx_PyUnicode_From_Py_ssize_t(__pyx_t_6, 0, ' ', 'd'); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2202, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_3, 3, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_INCREF(__pyx_kp_u_values);
    __pyx_t_1 += 7;
    __Pyx_GIVEREF(__pyx_kp_u_values);
    PyTuple_SET_ITEM(__pyx_t_3, 4, __pyx_kp_u_values);

    /* "nodes_def.pyx":2201
 *         cdef int edge1_i
 *         if len(edge1) != 3:
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (             # <<<<<<<<<<<<<<
 *                             "edge1", 3, len(edge1)))
 *         for edge1_i in range(3):
 */
    __pyx_t_5 = __Pyx_PyUnicode_Join(__pyx_t_3, 5, __pyx_t_1, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2201, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2201, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 2201, __pyx_L1_error)

    /* "nodes_def.pyx":2200
 *         cdef float[3] edge1_c
 *         cdef int edge1_i
 *         if len(edge1) != 3:             # <<<<<<<<<<<<<<
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (
 *                             "edge1", 3, len(edge1)))
 */
  }

  /* "nodes_def.pyx":2203
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (
 *                             "edge1", 3, len(edge1)))
 *         for edge1_i in range(3):             # <<<<<<<<<<<<<<
 *             edge1_c[edge1_i] = edge1[edge1_i]
 * 
 */
  for (__pyx_t_7 = 0; __pyx_t_7 < 3; __pyx_t_7+=1) {
    __pyx_v_edge1_i = __pyx_t_7;

    /* "nodes_def.pyx":2204
 *                             "edge1", 3, len(edge1)))
 *         for edge1_i in range(3):
 *             edge1_c[edge1_i] = edge1[edge1_i]             # <<<<<<<<<<<<<<
 * 
 *         cdef float[3] edge2_c
 */
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_edge1, __pyx_v_edge1_i, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2204, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_8 = __pyx_PyFloat_AsFloat(__pyx_t_3); if (unlikely((__pyx_t_8 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 2204, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    (__pyx_v_edge1_c[__pyx_v_edge1_i]) = __pyx_t_8;
  }

  /* "nodes_def.pyx":2208
 *         cdef float[3] edge2_c
 *         cdef int edge2_i
 *         if len(edge2) != 3:             # <<<<<<<<<<<<<<
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (
 *                             "edge2", 3, len(edge2)))
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_edge2); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 2208, __pyx_L1_error)
  __pyx_t_2 = ((__pyx_t_1 != 3) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "nodes_def.pyx":2209
 *         cdef int edge2_i
 *         if len(edge2) != 3:
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (             # <<<<<<<<<<<<<<
 *                             "edge2", 3, len(edge2)))
 *         for edge2_i in range(3):
 */
    __pyx_t_3 = PyTuple_New(5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2209, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = 0;
    __pyx_t_4 = 127;
    __Pyx_INCREF(__pyx_kp_u_edge2_parameter_is_expected_to_b);
    __pyx_t_1 += 37;
    __Pyx_GIVEREF(__pyx_kp_u_edge2_parameter_is_expected_to_b);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_kp_u_edge2_parameter_is_expected_to_b);

    /* "nodes_def.pyx":2210
 *         if len(edge2) != 3:
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (
 *                             "edge2", 3, len(edge2)))             # <<<<<<<<<<<<<<
 *         for edge2_i in range(3):
 *             edge2_c[edge2_i] = edge2[edge2_i]
 */
    __pyx_t_5 = __Pyx_PyUnicode_From_long(3, 0, ' ', 'd'); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2210, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_INCREF(__pyx_kp_u_but_got);
    __pyx_t_1 += 9;
    __Pyx_GIVEREF(__pyx_kp_u_but_got);
    PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_kp_u_but_got);
    __pyx_t_6 = PyObject_Length(__pyx_v_edge2); if (unlikely(__pyx_t_6 == ((Py_ssize_t)-1))) __PYX_ERR(0, 2210, __pyx_L1_error)
    __pyx_t_5 = __Pyx_PyUnicode_From_Py_ssize_t(__pyx_t_6, 0, ' ', 'd'); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2210, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_3, 3, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_INCREF(__pyx_kp_u_values);
    __pyx_t_1 += 7;
    __Pyx_GIVEREF(__pyx_kp_u_values);
    PyTuple_SET_ITEM(__pyx_t_3, 4, __pyx_kp_u_values);

    /* "nodes_def.pyx":2209
 *         cdef int edge2_i
 *         if len(edge2) != 3:
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (             # <<<<<<<<<<<<<<
 *                             "edge2", 3, len(edge2)))
 *         for edge2_i in range(3):
 */
    __pyx_t_5 = __Pyx_PyUnicode_Join(__pyx_t_3, 5, __pyx_t_1, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2209, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2209, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 2209, __pyx_L1_error)

    /* "nodes_def.pyx":2208
 *         cdef float[3] edge2_c
 *         cdef int edge2_i
 *         if len(edge2) != 3:             # <<<<<<<<<<<<<<
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (
 *                             "edge2", 3, len(edge2)))
 */
  }

  /* "nodes_def.pyx":2211
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (
 *                             "edge2", 3, len(edge2)))
 *         for edge2_i in range(3):             # <<<<<<<<<<<<<<
 *             edge2_c[edge2_i] = edge2[edge2_i]
 * 
 */
  for (__pyx_t_7 = 0; __pyx_t_7 < 3; __pyx_t_7+=1) {
    __pyx_v_edge2_i = __pyx_t_7;

    /* "nodes_def.pyx":2212
 *                             "edge2", 3, len(edge2)))
 *         for edge2_i in range(3):
 *             edge2_c[edge2_i] = edge2[edge2_i]             # <<<<<<<<<<<<<<
 * 
 *         assert self.ctx is NULL
 */
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_edge2, __pyx_v_edge2_i, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2212, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_8 = __pyx_PyFloat_AsFloat(__pyx_t_3); if (unlikely((__pyx_t_8 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 2212, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    (__pyx_v_edge2_c[__pyx_v_edge2_i]) = __pyx_t_8;
  }

  /* "nodes_def.pyx":2214
 *             edge2_c[edge2_i] = edge2[edge2_i]
 * 
 *         assert self.ctx is NULL             # <<<<<<<<<<<<<<
 *         self.ctx = ngl_node_create(NGL_NODE_TRIANGLE, edge0_c, edge1_c, edge2_c)
 *         if self.ctx is NULL:
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!((__pyx_v_self->__pyx_base.ctx == NULL) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 2214, __pyx_L1_error)
    }
  }
  #endif

  /* "nodes_def.pyx":2215
 * 
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_TRIANGLE, edge0_c, edge1_c, edge2_c)             # <<<<<<<<<<<<<<
 *         if self.ctx is NULL:
 *             raise MemoryError()
 */
  __pyx_v_self->__pyx_base.ctx = ngl_node_create(NGL_NODE_TRIANGLE, __pyx_v_edge0_c, __pyx_v_edge1_c, __pyx_v_edge2_c);

  /* "nodes_def.pyx":2216
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_TRIANGLE, edge0_c, edge1_c, edge2_c)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         _Node._init_params(self, *args, **kwargs)
 */
  __pyx_t_2 = ((__pyx_v_self->__pyx_base.ctx == NULL) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "nodes_def.pyx":2217
 *         self.ctx = ngl_node_create(NGL_NODE_TRIANGLE, edge0_c, edge1_c, edge2_c)
 *         if self.ctx is NULL:
 *             raise MemoryError()             # <<<<<<<<<<<<<<
 *         _Node._init_params(self, *args, **kwargs)
 * 
 */
    PyErr_NoMemory(); __PYX_ERR(0, 2217, __pyx_L1_error)

    /* "nodes_def.pyx":2216
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_TRIANGLE, edge0_c, edge1_c, edge2_c)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         _Node._init_params(self, *args, **kwargs)
 */
  }

  /* "nodes_def.pyx":2218
 *         if self.ctx is NULL:
 *             raise MemoryError()
 *         _Node._init_params(self, *args, **kwargs)             # <<<<<<<<<<<<<<
 * 
 *         if uv_edge0 is not None:
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_8pynodegl__Node), __pyx_n_s_init_params); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2218, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2218, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_5, 0, ((PyObject *)__pyx_v_self));
  __pyx_t_9 = PyNumber_Add(__pyx_t_5, __pyx_v_args); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2218, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_9, __pyx_v_kwargs); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2218, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "nodes_def.pyx":2220
 *         _Node._init_params(self, *args, **kwargs)
 * 
 *         if uv_edge0 is not None:             # <<<<<<<<<<<<<<
 *             self.set_uv_edge0(*uv_edge0)
 *         if uv_edge1 is not None:
 */
  __pyx_t_2 = (__pyx_v_uv_edge0 != Py_None);
  __pyx_t_10 = (__pyx_t_2 != 0);
  if (__pyx_t_10) {

    /* "nodes_def.pyx":2221
 * 
 *         if uv_edge0 is not None:
 *             self.set_uv_edge0(*uv_edge0)             # <<<<<<<<<<<<<<
 *         if uv_edge1 is not None:
 *             self.set_uv_edge1(*uv_edge1)
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_uv_edge0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2221, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_9 = __Pyx_PySequence_Tuple(__pyx_v_uv_edge0); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2221, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_9, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2221, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "nodes_def.pyx":2220
 *         _Node._init_params(self, *args, **kwargs)
 * 
 *         if uv_edge0 is not None:             # <<<<<<<<<<<<<<
 *             self.set_uv_edge0(*uv_edge0)
 *         if uv_edge1 is not None:
 */
  }

  /* "nodes_def.pyx":2222
 *         if uv_edge0 is not None:
 *             self.set_uv_edge0(*uv_edge0)
 *         if uv_edge1 is not None:             # <<<<<<<<<<<<<<
 *             self.set_uv_edge1(*uv_edge1)
 *         if uv_edge2 is not None:
 */
  __pyx_t_10 = (__pyx_v_uv_edge1 != Py_None);
  __pyx_t_2 = (__pyx_t_10 != 0);
  if (__pyx_t_2) {

    /* "nodes_def.pyx":2223
 *             self.set_uv_edge0(*uv_edge0)
 *         if uv_edge1 is not None:
 *             self.set_uv_edge1(*uv_edge1)             # <<<<<<<<<<<<<<
 *         if uv_edge2 is not None:
 *             self.set_uv_edge2(*uv_edge2)
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_uv_edge1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2223, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_9 = __Pyx_PySequence_Tuple(__pyx_v_uv_edge1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2223, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_9, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2223, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "nodes_def.pyx":2222
 *         if uv_edge0 is not None:
 *             self.set_uv_edge0(*uv_edge0)
 *         if uv_edge1 is not None:             # <<<<<<<<<<<<<<
 *             self.set_uv_edge1(*uv_edge1)
 *         if uv_edge2 is not None:
 */
  }

  /* "nodes_def.pyx":2224
 *         if uv_edge1 is not None:
 *             self.set_uv_edge1(*uv_edge1)
 *         if uv_edge2 is not None:             # <<<<<<<<<<<<<<
 *             self.set_uv_edge2(*uv_edge2)
 * 
 */
  __pyx_t_2 = (__pyx_v_uv_edge2 != Py_None);
  __pyx_t_10 = (__pyx_t_2 != 0);
  if (__pyx_t_10) {

    /* "nodes_def.pyx":2225
 *             self.set_uv_edge1(*uv_edge1)
 *         if uv_edge2 is not None:
 *             self.set_uv_edge2(*uv_edge2)             # <<<<<<<<<<<<<<
 * 
 *     def set_uv_edge0(self, *uv_edge0):
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_uv_edge2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2225, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_9 = __Pyx_PySequence_Tuple(__pyx_v_uv_edge2); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2225, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_9, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2225, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "nodes_def.pyx":2224
 *         if uv_edge1 is not None:
 *             self.set_uv_edge1(*uv_edge1)
 *         if uv_edge2 is not None:             # <<<<<<<<<<<<<<
 *             self.set_uv_edge2(*uv_edge2)
 * 
 */
  }

  /* "nodes_def.pyx":2189
 * cdef class Triangle(_Node):
 * 
 *     def __init__(self, edge0, edge1, edge2, uv_edge0=None, uv_edge1=None, uv_edge2=None, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         cdef float[3] edge0_c
 *         cdef int edge0_i
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("pynodegl.Triangle.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":2227
 *             self.set_uv_edge2(*uv_edge2)
 * 
 *     def set_uv_edge0(self, *uv_edge0):             # <<<<<<<<<<<<<<
 *         cdef float[2] uv_edge0_c
 *         cdef int uv_edge0_i
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_8Triangle_3set_uv_edge0(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_8pynodegl_8Triangle_3set_uv_edge0(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_uv_edge0 = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_uv_edge0 (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "set_uv_edge0", 0))) return NULL;
  __Pyx_INCREF(__pyx_args);
  __pyx_v_uv_edge0 = __pyx_args;
  __pyx_r = __pyx_pf_8pynodegl_8Triangle_2set_uv_edge0(((struct __pyx_obj_8pynodegl_Triangle *)__pyx_v_self), __pyx_v_uv_edge0);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_uv_edge0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_8Triangle_2set_uv_edge0(struct __pyx_obj_8pynodegl_Triangle *__pyx_v_self, PyObject *__pyx_v_uv_edge0) {
  float __pyx_v_uv_edge0_c[2];
  int __pyx_v_uv_edge0_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  Py_UCS4 __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  int __pyx_t_7;
  float __pyx_t_8;
  __Pyx_RefNannySetupContext("set_uv_edge0", 0);

  /* "nodes_def.pyx":2230
 *         cdef float[2] uv_edge0_c
 *         cdef int uv_edge0_i
 *         if len(uv_edge0) != 2:             # <<<<<<<<<<<<<<
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (
 *                             "uv_edge0", 2, len(uv_edge0)))
 */
  __pyx_t_1 = PyTuple_GET_SIZE(__pyx_v_uv_edge0); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 2230, __pyx_L1_error)
  __pyx_t_2 = ((__pyx_t_1 != 2) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "nodes_def.pyx":2231
 *         cdef int uv_edge0_i
 *         if len(uv_edge0) != 2:
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (             # <<<<<<<<<<<<<<
 *                             "uv_edge0", 2, len(uv_edge0)))
 *         for uv_edge0_i in range(2):
 */
    __pyx_t_3 = PyTuple_New(5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2231, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = 0;
    __pyx_t_4 = 127;
    __Pyx_INCREF(__pyx_kp_u_uv_edge0_parameter_is_expected_t);
    __pyx_t_1 += 40;
    __Pyx_GIVEREF(__pyx_kp_u_uv_edge0_parameter_is_expected_t);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_kp_u_uv_edge0_parameter_is_expected_t);

    /* "nodes_def.pyx":2232
 *         if len(uv_edge0) != 2:
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (
 *                             "uv_edge0", 2, len(uv_edge0)))             # <<<<<<<<<<<<<<
 *         for uv_edge0_i in range(2):
 *             uv_edge0_c[uv_edge0_i] = uv_edge0[uv_edge0_i]
 */
    __pyx_t_5 = __Pyx_PyUnicode_From_long(2, 0, ' ', 'd'); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2232, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_INCREF(__pyx_kp_u_but_got);
    __pyx_t_1 += 9;
    __Pyx_GIVEREF(__pyx_kp_u_but_got);
    PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_kp_u_but_got);
    __pyx_t_6 = PyTuple_GET_SIZE(__pyx_v_uv_edge0); if (unlikely(__pyx_t_6 == ((Py_ssize_t)-1))) __PYX_ERR(0, 2232, __pyx_L1_error)
    __pyx_t_5 = __Pyx_PyUnicode_From_Py_ssize_t(__pyx_t_6, 0, ' ', 'd'); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2232, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_3, 3, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_INCREF(__pyx_kp_u_values);
    __pyx_t_1 += 7;
    __Pyx_GIVEREF(__pyx_kp_u_values);
    PyTuple_SET_ITEM(__pyx_t_3, 4, __pyx_kp_u_values);

    /* "nodes_def.pyx":2231
 *         cdef int uv_edge0_i
 *         if len(uv_edge0) != 2:
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (             # <<<<<<<<<<<<<<
 *                             "uv_edge0", 2, len(uv_edge0)))
 *         for uv_edge0_i in range(2):
 */
    __pyx_t_5 = __Pyx_PyUnicode_Join(__pyx_t_3, 5, __pyx_t_1, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2231, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2231, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 2231, __pyx_L1_error)

    /* "nodes_def.pyx":2230
 *         cdef float[2] uv_edge0_c
 *         cdef int uv_edge0_i
 *         if len(uv_edge0) != 2:             # <<<<<<<<<<<<<<
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (
 *                             "uv_edge0", 2, len(uv_edge0)))
 */
  }

  /* "nodes_def.pyx":2233
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (
 *                             "uv_edge0", 2, len(uv_edge0)))
 *         for uv_edge0_i in range(2):             # <<<<<<<<<<<<<<
 *             uv_edge0_c[uv_edge0_i] = uv_edge0[uv_edge0_i]
 * 
 */
  for (__pyx_t_7 = 0; __pyx_t_7 < 2; __pyx_t_7+=1) {
    __pyx_v_uv_edge0_i = __pyx_t_7;

    /* "nodes_def.pyx":2234
 *                             "uv_edge0", 2, len(uv_edge0)))
 *         for uv_edge0_i in range(2):
 *             uv_edge0_c[uv_edge0_i] = uv_edge0[uv_edge0_i]             # <<<<<<<<<<<<<<
 * 
 *         return ngl_node_param_set(self.ctx, "uv_edge0", uv_edge0_c)
 */
    __pyx_t_3 = __Pyx_GetItemInt_Tuple(__pyx_v_uv_edge0, __pyx_v_uv_edge0_i, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2234, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_8 = __pyx_PyFloat_AsFloat(__pyx_t_3); if (unlikely((__pyx_t_8 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 2234, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    (__pyx_v_uv_edge0_c[__pyx_v_uv_edge0_i]) = __pyx_t_8;
  }

  /* "nodes_def.pyx":2236
 *             uv_edge0_c[uv_edge0_i] = uv_edge0[uv_edge0_i]
 * 
 *         return ngl_node_param_set(self.ctx, "uv_edge0", uv_edge0_c)             # <<<<<<<<<<<<<<
 * 
 *     def set_uv_edge1(self, *uv_edge1):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"uv_edge0"), __pyx_v_uv_edge0_c)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2236, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":2227
 *             self.set_uv_edge2(*uv_edge2)
 * 
 *     def set_uv_edge0(self, *uv_edge0):             # <<<<<<<<<<<<<<
 *         cdef float[2] uv_edge0_c
 *         cdef int uv_edge0_i
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pynodegl.Triangle.set_uv_edge0", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":2238
 *         return ngl_node_param_set(self.ctx, "uv_edge0", uv_edge0_c)
 * 
 *     def set_uv_edge1(self, *uv_edge1):             # <<<<<<<<<<<<<<
 *         cdef float[2] uv_edge1_c
 *         cdef int uv_edge1_i
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_8Triangle_5set_uv_edge1(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_8pynodegl_8Triangle_5set_uv_edge1(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_uv_edge1 = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_uv_edge1 (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "set_uv_edge1", 0))) return NULL;
  __Pyx_INCREF(__pyx_args);
  __pyx_v_uv_edge1 = __pyx_args;
  __pyx_r = __pyx_pf_8pynodegl_8Triangle_4set_uv_edge1(((struct __pyx_obj_8pynodegl_Triangle *)__pyx_v_self), __pyx_v_uv_edge1);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_uv_edge1);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_8Triangle_4set_uv_edge1(struct __pyx_obj_8pynodegl_Triangle *__pyx_v_self, PyObject *__pyx_v_uv_edge1) {
  float __pyx_v_uv_edge1_c[2];
  int __pyx_v_uv_edge1_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  Py_UCS4 __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  int __pyx_t_7;
  float __pyx_t_8;
  __Pyx_RefNannySetupContext("set_uv_edge1", 0);

  /* "nodes_def.pyx":2241
 *         cdef float[2] uv_edge1_c
 *         cdef int uv_edge1_i
 *         if len(uv_edge1) != 2:             # <<<<<<<<<<<<<<
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (
 *                             "uv_edge1", 2, len(uv_edge1)))
 */
  __pyx_t_1 = PyTuple_GET_SIZE(__pyx_v_uv_edge1); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 2241, __pyx_L1_error)
  __pyx_t_2 = ((__pyx_t_1 != 2) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "nodes_def.pyx":2242
 *         cdef int uv_edge1_i
 *         if len(uv_edge1) != 2:
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (             # <<<<<<<<<<<<<<
 *                             "uv_edge1", 2, len(uv_edge1)))
 *         for uv_edge1_i in range(2):
 */
    __pyx_t_3 = PyTuple_New(5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2242, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = 0;
    __pyx_t_4 = 127;
    __Pyx_INCREF(__pyx_kp_u_uv_edge1_parameter_is_expected_t);
    __pyx_t_1 += 40;
    __Pyx_GIVEREF(__pyx_kp_u_uv_edge1_parameter_is_expected_t);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_kp_u_uv_edge1_parameter_is_expected_t);

    /* "nodes_def.pyx":2243
 *         if len(uv_edge1) != 2:
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (
 *                             "uv_edge1", 2, len(uv_edge1)))             # <<<<<<<<<<<<<<
 *         for uv_edge1_i in range(2):
 *             uv_edge1_c[uv_edge1_i] = uv_edge1[uv_edge1_i]
 */
    __pyx_t_5 = __Pyx_PyUnicode_From_long(2, 0, ' ', 'd'); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2243, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_INCREF(__pyx_kp_u_but_got);
    __pyx_t_1 += 9;
    __Pyx_GIVEREF(__pyx_kp_u_but_got);
    PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_kp_u_but_got);
    __pyx_t_6 = PyTuple_GET_SIZE(__pyx_v_uv_edge1); if (unlikely(__pyx_t_6 == ((Py_ssize_t)-1))) __PYX_ERR(0, 2243, __pyx_L1_error)
    __pyx_t_5 = __Pyx_PyUnicode_From_Py_ssize_t(__pyx_t_6, 0, ' ', 'd'); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2243, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_3, 3, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_INCREF(__pyx_kp_u_values);
    __pyx_t_1 += 7;
    __Pyx_GIVEREF(__pyx_kp_u_values);
    PyTuple_SET_ITEM(__pyx_t_3, 4, __pyx_kp_u_values);

    /* "nodes_def.pyx":2242
 *         cdef int uv_edge1_i
 *         if len(uv_edge1) != 2:
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (             # <<<<<<<<<<<<<<
 *                             "uv_edge1", 2, len(uv_edge1)))
 *         for uv_edge1_i in range(2):
 */
    __pyx_t_5 = __Pyx_PyUnicode_Join(__pyx_t_3, 5, __pyx_t_1, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2242, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2242, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 2242, __pyx_L1_error)

    /* "nodes_def.pyx":2241
 *         cdef float[2] uv_edge1_c
 *         cdef int uv_edge1_i
 *         if len(uv_edge1) != 2:             # <<<<<<<<<<<<<<
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (
 *                             "uv_edge1", 2, len(uv_edge1)))
 */
  }

  /* "nodes_def.pyx":2244
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (
 *                             "uv_edge1", 2, len(uv_edge1)))
 *         for uv_edge1_i in range(2):             # <<<<<<<<<<<<<<
 *             uv_edge1_c[uv_edge1_i] = uv_edge1[uv_edge1_i]
 * 
 */
  for (__pyx_t_7 = 0; __pyx_t_7 < 2; __pyx_t_7+=1) {
    __pyx_v_uv_edge1_i = __pyx_t_7;

    /* "nodes_def.pyx":2245
 *                             "uv_edge1", 2, len(uv_edge1)))
 *         for uv_edge1_i in range(2):
 *             uv_edge1_c[uv_edge1_i] = uv_edge1[uv_edge1_i]             # <<<<<<<<<<<<<<
 * 
 *         return ngl_node_param_set(self.ctx, "uv_edge1", uv_edge1_c)
 */
    __pyx_t_3 = __Pyx_GetItemInt_Tuple(__pyx_v_uv_edge1, __pyx_v_uv_edge1_i, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2245, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_8 = __pyx_PyFloat_AsFloat(__pyx_t_3); if (unlikely((__pyx_t_8 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 2245, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    (__pyx_v_uv_edge1_c[__pyx_v_uv_edge1_i]) = __pyx_t_8;
  }

  /* "nodes_def.pyx":2247
 *             uv_edge1_c[uv_edge1_i] = uv_edge1[uv_edge1_i]
 * 
 *         return ngl_node_param_set(self.ctx, "uv_edge1", uv_edge1_c)             # <<<<<<<<<<<<<<
 * 
 *     def set_uv_edge2(self, *uv_edge2):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"uv_edge1"), __pyx_v_uv_edge1_c)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2247, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":2238
 *         return ngl_node_param_set(self.ctx, "uv_edge0", uv_edge0_c)
 * 
 *     def set_uv_edge1(self, *uv_edge1):             # <<<<<<<<<<<<<<
 *         cdef float[2] uv_edge1_c
 *         cdef int uv_edge1_i
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pynodegl.Triangle.set_uv_edge1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":2249
 *         return ngl_node_param_set(self.ctx, "uv_edge1", uv_edge1_c)
 * 
 *     def set_uv_edge2(self, *uv_edge2):             # <<<<<<<<<<<<<<
 *         cdef float[2] uv_edge2_c
 *         cdef int uv_edge2_i
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_8Triangle_7set_uv_edge2(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_8pynodegl_8Triangle_7set_uv_edge2(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_uv_edge2 = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_uv_edge2 (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "set_uv_edge2", 0))) return NULL;
  __Pyx_INCREF(__pyx_args);
  __pyx_v_uv_edge2 = __pyx_args;
  __pyx_r = __pyx_pf_8pynodegl_8Triangle_6set_uv_edge2(((struct __pyx_obj_8pynodegl_Triangle *)__pyx_v_self), __pyx_v_uv_edge2);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_uv_edge2);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_8Triangle_6set_uv_edge2(struct __pyx_obj_8pynodegl_Triangle *__pyx_v_self, PyObject *__pyx_v_uv_edge2) {
  float __pyx_v_uv_edge2_c[2];
  int __pyx_v_uv_edge2_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  Py_UCS4 __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  int __pyx_t_7;
  float __pyx_t_8;
  __Pyx_RefNannySetupContext("set_uv_edge2", 0);

  /* "nodes_def.pyx":2252
 *         cdef float[2] uv_edge2_c
 *         cdef int uv_edge2_i
 *         if len(uv_edge2) != 2:             # <<<<<<<<<<<<<<
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (
 *                             "uv_edge2", 2, len(uv_edge2)))
 */
  __pyx_t_1 = PyTuple_GET_SIZE(__pyx_v_uv_edge2); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 2252, __pyx_L1_error)
  __pyx_t_2 = ((__pyx_t_1 != 2) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "nodes_def.pyx":2253
 *         cdef int uv_edge2_i
 *         if len(uv_edge2) != 2:
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (             # <<<<<<<<<<<<<<
 *                             "uv_edge2", 2, len(uv_edge2)))
 *         for uv_edge2_i in range(2):
 */
    __pyx_t_3 = PyTuple_New(5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2253, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = 0;
    __pyx_t_4 = 127;
    __Pyx_INCREF(__pyx_kp_u_uv_edge2_parameter_is_expected_t);
    __pyx_t_1 += 40;
    __Pyx_GIVEREF(__pyx_kp_u_uv_edge2_parameter_is_expected_t);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_kp_u_uv_edge2_parameter_is_expected_t);

    /* "nodes_def.pyx":2254
 *         if len(uv_edge2) != 2:
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (
 *                             "uv_edge2", 2, len(uv_edge2)))             # <<<<<<<<<<<<<<
 *         for uv_edge2_i in range(2):
 *             uv_edge2_c[uv_edge2_i] = uv_edge2[uv_edge2_i]
 */
    __pyx_t_5 = __Pyx_PyUnicode_From_long(2, 0, ' ', 'd'); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2254, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_INCREF(__pyx_kp_u_but_got);
    __pyx_t_1 += 9;
    __Pyx_GIVEREF(__pyx_kp_u_but_got);
    PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_kp_u_but_got);
    __pyx_t_6 = PyTuple_GET_SIZE(__pyx_v_uv_edge2); if (unlikely(__pyx_t_6 == ((Py_ssize_t)-1))) __PYX_ERR(0, 2254, __pyx_L1_error)
    __pyx_t_5 = __Pyx_PyUnicode_From_Py_ssize_t(__pyx_t_6, 0, ' ', 'd'); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2254, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_3, 3, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_INCREF(__pyx_kp_u_values);
    __pyx_t_1 += 7;
    __Pyx_GIVEREF(__pyx_kp_u_values);
    PyTuple_SET_ITEM(__pyx_t_3, 4, __pyx_kp_u_values);

    /* "nodes_def.pyx":2253
 *         cdef int uv_edge2_i
 *         if len(uv_edge2) != 2:
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (             # <<<<<<<<<<<<<<
 *                             "uv_edge2", 2, len(uv_edge2)))
 *         for uv_edge2_i in range(2):
 */
    __pyx_t_5 = __Pyx_PyUnicode_Join(__pyx_t_3, 5, __pyx_t_1, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2253, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2253, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 2253, __pyx_L1_error)

    /* "nodes_def.pyx":2252
 *         cdef float[2] uv_edge2_c
 *         cdef int uv_edge2_i
 *         if len(uv_edge2) != 2:             # <<<<<<<<<<<<<<
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (
 *                             "uv_edge2", 2, len(uv_edge2)))
 */
  }

  /* "nodes_def.pyx":2255
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (
 *                             "uv_edge2", 2, len(uv_edge2)))
 *         for uv_edge2_i in range(2):             # <<<<<<<<<<<<<<
 *             uv_edge2_c[uv_edge2_i] = uv_edge2[uv_edge2_i]
 * 
 */
  for (__pyx_t_7 = 0; __pyx_t_7 < 2; __pyx_t_7+=1) {
    __pyx_v_uv_edge2_i = __pyx_t_7;

    /* "nodes_def.pyx":2256
 *                             "uv_edge2", 2, len(uv_edge2)))
 *         for uv_edge2_i in range(2):
 *             uv_edge2_c[uv_edge2_i] = uv_edge2[uv_edge2_i]             # <<<<<<<<<<<<<<
 * 
 *         return ngl_node_param_set(self.ctx, "uv_edge2", uv_edge2_c)
 */
    __pyx_t_3 = __Pyx_GetItemInt_Tuple(__pyx_v_uv_edge2, __pyx_v_uv_edge2_i, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2256, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_8 = __pyx_PyFloat_AsFloat(__pyx_t_3); if (unlikely((__pyx_t_8 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 2256, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    (__pyx_v_uv_edge2_c[__pyx_v_uv_edge2_i]) = __pyx_t_8;
  }

  /* "nodes_def.pyx":2258
 *             uv_edge2_c[uv_edge2_i] = uv_edge2[uv_edge2_i]
 * 
 *         return ngl_node_param_set(self.ctx, "uv_edge2", uv_edge2_c)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"uv_edge2"), __pyx_v_uv_edge2_c)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2258, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":2249
 *         return ngl_node_param_set(self.ctx, "uv_edge1", uv_edge1_c)
 * 
 *     def set_uv_edge2(self, *uv_edge2):             # <<<<<<<<<<<<<<
 *         cdef float[2] uv_edge2_c
 *         cdef int uv_edge2_i
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pynodegl.Triangle.set_uv_edge2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_8Triangle_9__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pynodegl_8Triangle_9__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_8Triangle_8__reduce_cython__(((struct __pyx_obj_8pynodegl_Triangle *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_8Triangle_8__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_Triangle *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__161, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.Triangle.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_8Triangle_11__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8pynodegl_8Triangle_11__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_8Triangle_10__setstate_cython__(((struct __pyx_obj_8pynodegl_Triangle *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_8Triangle_10__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_Triangle *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__162, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.Triangle.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":2263
 * cdef class StreamedInt(_Node):
 * 
 *     def __init__(self, _Node timestamps, _Node buffer, timebase=None, time_anim=None, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         assert timestamps is not None
 * 
 */

/* Python wrapper */
static int __pyx_pw_8pynodegl_11StreamedInt_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pynodegl_11StreamedInt_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pynodegl__Node *__pyx_v_timestamps = 0;
  struct __pyx_obj_8pynodegl__Node *__pyx_v_buffer = 0;
  PyObject *__pyx_v_timebase = 0;
  PyObject *__pyx_v_time_anim = 0;
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  __pyx_v_kwargs = PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return -1;
  __Pyx_GOTREF(__pyx_v_kwargs);
  if (PyTuple_GET_SIZE(__pyx_args) > 4) {
    __pyx_v_args = PyTuple_GetSlice(__pyx_args, 4, PyTuple_GET_SIZE(__pyx_args));
    if (unlikely(!__pyx_v_args)) {
      __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
      __Pyx_RefNannyFinishContext();
      return -1;
    }
    __Pyx_GOTREF(__pyx_v_args);
  } else {
    __pyx_v_args = __pyx_empty_tuple; __Pyx_INCREF(__pyx_empty_tuple);
  }
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_timestamps,&__pyx_n_s_buffer,&__pyx_n_s_timebase,&__pyx_n_s_time_anim,0};
    PyObject* values[4] = {0,0,0,0};
    values[2] = ((PyObject *)Py_None);
    values[3] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        default:
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_timestamps)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_buffer)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 2, 4, 1); __PYX_ERR(0, 2263, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_timebase);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_time_anim);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t used_pos_args = (pos_args < 4) ? pos_args : 4;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_kwargs, values, used_pos_args, "__init__") < 0)) __PYX_ERR(0, 2263, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        default:
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        case  1:
        case  0:
        goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_timestamps = ((struct __pyx_obj_8pynodegl__Node *)values[0]);
    __pyx_v_buffer = ((struct __pyx_obj_8pynodegl__Node *)values[1]);
    __pyx_v_timebase = values[2];
    __pyx_v_time_anim = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 2, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2263, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_args); __pyx_v_args = 0;
  __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
  __Pyx_AddTraceback("pynodegl.StreamedInt.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_timestamps), __pyx_ptype_8pynodegl__Node, 1, "timestamps", 0))) __PYX_ERR(0, 2263, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_buffer), __pyx_ptype_8pynodegl__Node, 1, "buffer", 0))) __PYX_ERR(0, 2263, __pyx_L1_error)
  __pyx_r = __pyx_pf_8pynodegl_11StreamedInt___init__(((struct __pyx_obj_8pynodegl_StreamedInt *)__pyx_v_self), __pyx_v_timestamps, __pyx_v_buffer, __pyx_v_timebase, __pyx_v_time_anim, __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pynodegl_11StreamedInt___init__(struct __pyx_obj_8pynodegl_StreamedInt *__pyx_v_self, struct __pyx_obj_8pynodegl__Node *__pyx_v_timestamps, struct __pyx_obj_8pynodegl__Node *__pyx_v_buffer, PyObject *__pyx_v_timebase, PyObject *__pyx_v_time_anim, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "nodes_def.pyx":2264
 * 
 *     def __init__(self, _Node timestamps, _Node buffer, timebase=None, time_anim=None, *args, **kwargs):
 *         assert timestamps is not None             # <<<<<<<<<<<<<<
 * 
 *         assert buffer is not None
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = (((PyObject *)__pyx_v_timestamps) != Py_None);
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 2264, __pyx_L1_error)
    }
  }
  #endif

  /* "nodes_def.pyx":2266
 *         assert timestamps is not None
 * 
 *         assert buffer is not None             # <<<<<<<<<<<<<<
 * 
 *         assert self.ctx is NULL
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = (((PyObject *)__pyx_v_buffer) != Py_None);
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 2266, __pyx_L1_error)
    }
  }
  #endif

  /* "nodes_def.pyx":2268
 *         assert buffer is not None
 * 
 *         assert self.ctx is NULL             # <<<<<<<<<<<<<<
 *         self.ctx = ngl_node_create(NGL_NODE_STREAMEDINT, timestamps.ctx, buffer.ctx)
 *         if self.ctx is NULL:
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!((__pyx_v_self->__pyx_base.ctx == NULL) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 2268, __pyx_L1_error)
    }
  }
  #endif

  /* "nodes_def.pyx":2269
 * 
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_STREAMEDINT, timestamps.ctx, buffer.ctx)             # <<<<<<<<<<<<<<
 *         if self.ctx is NULL:
 *             raise MemoryError()
 */
  __pyx_v_self->__pyx_base.ctx = ngl_node_create(NGL_NODE_STREAMEDINT, __pyx_v_timestamps->ctx, __pyx_v_buffer->ctx);

  /* "nodes_def.pyx":2270
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_STREAMEDINT, timestamps.ctx, buffer.ctx)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         _Node._init_params(self, *args, **kwargs)
 */
  __pyx_t_1 = ((__pyx_v_self->__pyx_base.ctx == NULL) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "nodes_def.pyx":2271
 *         self.ctx = ngl_node_create(NGL_NODE_STREAMEDINT, timestamps.ctx, buffer.ctx)
 *         if self.ctx is NULL:
 *             raise MemoryError()             # <<<<<<<<<<<<<<
 *         _Node._init_params(self, *args, **kwargs)
 * 
 */
    PyErr_NoMemory(); __PYX_ERR(0, 2271, __pyx_L1_error)

    /* "nodes_def.pyx":2270
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_STREAMEDINT, timestamps.ctx, buffer.ctx)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         _Node._init_params(self, *args, **kwargs)
 */
  }

  /* "nodes_def.pyx":2272
 *         if self.ctx is NULL:
 *             raise MemoryError()
 *         _Node._init_params(self, *args, **kwargs)             # <<<<<<<<<<<<<<
 * 
 *         if timebase is not None:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_8pynodegl__Node), __pyx_n_s_init_params); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2272, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2272, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_v_self));
  __pyx_t_4 = PyNumber_Add(__pyx_t_3, __pyx_v_args); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2272, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, __pyx_v_kwargs); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2272, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "nodes_def.pyx":2274
 *         _Node._init_params(self, *args, **kwargs)
 * 
 *         if timebase is not None:             # <<<<<<<<<<<<<<
 *             self.set_timebase(timebase)
 *         if time_anim is not None:
 */
  __pyx_t_1 = (__pyx_v_timebase != Py_None);
  __pyx_t_5 = (__pyx_t_1 != 0);
  if (__pyx_t_5) {

    /* "nodes_def.pyx":2275
 * 
 *         if timebase is not None:
 *             self.set_timebase(timebase)             # <<<<<<<<<<<<<<
 *         if time_anim is not None:
 *             self.set_time_anim(time_anim)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_timebase); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2275, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_2, __pyx_v_timebase) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_timebase);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2275, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "nodes_def.pyx":2274
 *         _Node._init_params(self, *args, **kwargs)
 * 
 *         if timebase is not None:             # <<<<<<<<<<<<<<
 *             self.set_timebase(timebase)
 *         if time_anim is not None:
 */
  }

  /* "nodes_def.pyx":2276
 *         if timebase is not None:
 *             self.set_timebase(timebase)
 *         if time_anim is not None:             # <<<<<<<<<<<<<<
 *             self.set_time_anim(time_anim)
 * 
 */
  __pyx_t_5 = (__pyx_v_time_anim != Py_None);
  __pyx_t_1 = (__pyx_t_5 != 0);
  if (__pyx_t_1) {

    /* "nodes_def.pyx":2277
 *             self.set_timebase(timebase)
 *         if time_anim is not None:
 *             self.set_time_anim(time_anim)             # <<<<<<<<<<<<<<
 * 
 *     def set_timebase(self, tuple timebase):
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_time_anim); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2277, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_2, __pyx_v_time_anim) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_time_anim);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2277, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "nodes_def.pyx":2276
 *         if timebase is not None:
 *             self.set_timebase(timebase)
 *         if time_anim is not None:             # <<<<<<<<<<<<<<
 *             self.set_time_anim(time_anim)
 * 
 */
  }

  /* "nodes_def.pyx":2263
 * cdef class StreamedInt(_Node):
 * 
 *     def __init__(self, _Node timestamps, _Node buffer, timebase=None, time_anim=None, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         assert timestamps is not None
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pynodegl.StreamedInt.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":2279
 *             self.set_time_anim(time_anim)
 * 
 *     def set_timebase(self, tuple timebase):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx,
 *                                   "timebase",
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_11StreamedInt_3set_timebase(PyObject *__pyx_v_self, PyObject *__pyx_v_timebase); /*proto*/
static PyObject *__pyx_pw_8pynodegl_11StreamedInt_3set_timebase(PyObject *__pyx_v_self, PyObject *__pyx_v_timebase) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_timebase (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_timebase), (&PyTuple_Type), 1, "timebase", 1))) __PYX_ERR(0, 2279, __pyx_L1_error)
  __pyx_r = __pyx_pf_8pynodegl_11StreamedInt_2set_timebase(((struct __pyx_obj_8pynodegl_StreamedInt *)__pyx_v_self), ((PyObject*)__pyx_v_timebase));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_11StreamedInt_2set_timebase(struct __pyx_obj_8pynodegl_StreamedInt *__pyx_v_self, PyObject *__pyx_v_timebase) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  __Pyx_RefNannySetupContext("set_timebase", 0);

  /* "nodes_def.pyx":2280
 * 
 *     def set_timebase(self, tuple timebase):
 *         return ngl_node_param_set(self.ctx,             # <<<<<<<<<<<<<<
 *                                   "timebase",
 *                                   <int>timebase[0],
 */
  __Pyx_XDECREF(__pyx_r);

  /* "nodes_def.pyx":2282
 *         return ngl_node_param_set(self.ctx,
 *                                   "timebase",
 *                                   <int>timebase[0],             # <<<<<<<<<<<<<<
 *                                   <int>timebase[1]);
 * 
 */
  if (unlikely(__pyx_v_timebase == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 2282, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v_timebase, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2282, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2282, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "nodes_def.pyx":2283
 *                                   "timebase",
 *                                   <int>timebase[0],
 *                                   <int>timebase[1]);             # <<<<<<<<<<<<<<
 * 
 *     def set_time_anim(self, _Node time_anim):
 */
  if (unlikely(__pyx_v_timebase == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 2283, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v_timebase, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2283, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2283, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "nodes_def.pyx":2280
 * 
 *     def set_timebase(self, tuple timebase):
 *         return ngl_node_param_set(self.ctx,             # <<<<<<<<<<<<<<
 *                                   "timebase",
 *                                   <int>timebase[0],
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"timebase"), ((int)__pyx_t_2), ((int)__pyx_t_3))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2280, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":2279
 *             self.set_time_anim(time_anim)
 * 
 *     def set_timebase(self, tuple timebase):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx,
 *                                   "timebase",
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.StreamedInt.set_timebase", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":2285
 *                                   <int>timebase[1]);
 * 
 *     def set_time_anim(self, _Node time_anim):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "time_anim", time_anim.ctx)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_11StreamedInt_5set_time_anim(PyObject *__pyx_v_self, PyObject *__pyx_v_time_anim); /*proto*/
static PyObject *__pyx_pw_8pynodegl_11StreamedInt_5set_time_anim(PyObject *__pyx_v_self, PyObject *__pyx_v_time_anim) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_time_anim (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_time_anim), __pyx_ptype_8pynodegl__Node, 1, "time_anim", 0))) __PYX_ERR(0, 2285, __pyx_L1_error)
  __pyx_r = __pyx_pf_8pynodegl_11StreamedInt_4set_time_anim(((struct __pyx_obj_8pynodegl_StreamedInt *)__pyx_v_self), ((struct __pyx_obj_8pynodegl__Node *)__pyx_v_time_anim));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_11StreamedInt_4set_time_anim(struct __pyx_obj_8pynodegl_StreamedInt *__pyx_v_self, struct __pyx_obj_8pynodegl__Node *__pyx_v_time_anim) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("set_time_anim", 0);

  /* "nodes_def.pyx":2286
 * 
 *     def set_time_anim(self, _Node time_anim):
 *         return ngl_node_param_set(self.ctx, "time_anim", time_anim.ctx)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"time_anim"), __pyx_v_time_anim->ctx)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2286, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":2285
 *                                   <int>timebase[1]);
 * 
 *     def set_time_anim(self, _Node time_anim):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "time_anim", time_anim.ctx)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.StreamedInt.set_time_anim", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_11StreamedInt_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pynodegl_11StreamedInt_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_11StreamedInt_6__reduce_cython__(((struct __pyx_obj_8pynodegl_StreamedInt *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_11StreamedInt_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_StreamedInt *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__163, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.StreamedInt.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_11StreamedInt_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8pynodegl_11StreamedInt_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_11StreamedInt_8__setstate_cython__(((struct __pyx_obj_8pynodegl_StreamedInt *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_11StreamedInt_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_StreamedInt *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__164, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.StreamedInt.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":2291
 * cdef class StreamedFloat(_Node):
 * 
 *     def __init__(self, _Node timestamps, _Node buffer, timebase=None, time_anim=None, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         assert timestamps is not None
 * 
 */

/* Python wrapper */
static int __pyx_pw_8pynodegl_13StreamedFloat_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pynodegl_13StreamedFloat_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pynodegl__Node *__pyx_v_timestamps = 0;
  struct __pyx_obj_8pynodegl__Node *__pyx_v_buffer = 0;
  PyObject *__pyx_v_timebase = 0;
  PyObject *__pyx_v_time_anim = 0;
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  __pyx_v_kwargs = PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return -1;
  __Pyx_GOTREF(__pyx_v_kwargs);
  if (PyTuple_GET_SIZE(__pyx_args) > 4) {
    __pyx_v_args = PyTuple_GetSlice(__pyx_args, 4, PyTuple_GET_SIZE(__pyx_args));
    if (unlikely(!__pyx_v_args)) {
      __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
      __Pyx_RefNannyFinishContext();
      return -1;
    }
    __Pyx_GOTREF(__pyx_v_args);
  } else {
    __pyx_v_args = __pyx_empty_tuple; __Pyx_INCREF(__pyx_empty_tuple);
  }
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_timestamps,&__pyx_n_s_buffer,&__pyx_n_s_timebase,&__pyx_n_s_time_anim,0};
    PyObject* values[4] = {0,0,0,0};
    values[2] = ((PyObject *)Py_None);
    values[3] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        default:
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_timestamps)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_buffer)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 2, 4, 1); __PYX_ERR(0, 2291, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_timebase);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_time_anim);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t used_pos_args = (pos_args < 4) ? pos_args : 4;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_kwargs, values, used_pos_args, "__init__") < 0)) __PYX_ERR(0, 2291, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        default:
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        case  1:
        case  0:
        goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_timestamps = ((struct __pyx_obj_8pynodegl__Node *)values[0]);
    __pyx_v_buffer = ((struct __pyx_obj_8pynodegl__Node *)values[1]);
    __pyx_v_timebase = values[2];
    __pyx_v_time_anim = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 2, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2291, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_args); __pyx_v_args = 0;
  __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
  __Pyx_AddTraceback("pynodegl.StreamedFloat.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_timestamps), __pyx_ptype_8pynodegl__Node, 1, "timestamps", 0))) __PYX_ERR(0, 2291, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_buffer), __pyx_ptype_8pynodegl__Node, 1, "buffer", 0))) __PYX_ERR(0, 2291, __pyx_L1_error)
  __pyx_r = __pyx_pf_8pynodegl_13StreamedFloat___init__(((struct __pyx_obj_8pynodegl_StreamedFloat *)__pyx_v_self), __pyx_v_timestamps, __pyx_v_buffer, __pyx_v_timebase, __pyx_v_time_anim, __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pynodegl_13StreamedFloat___init__(struct __pyx_obj_8pynodegl_StreamedFloat *__pyx_v_self, struct __pyx_obj_8pynodegl__Node *__pyx_v_timestamps, struct __pyx_obj_8pynodegl__Node *__pyx_v_buffer, PyObject *__pyx_v_timebase, PyObject *__pyx_v_time_anim, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "nodes_def.pyx":2292
 * 
 *     def __init__(self, _Node timestamps, _Node buffer, timebase=None, time_anim=None, *args, **kwargs):
 *         assert timestamps is not None             # <<<<<<<<<<<<<<
 * 
 *         assert buffer is not None
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = (((PyObject *)__pyx_v_timestamps) != Py_None);
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 2292, __pyx_L1_error)
    }
  }
  #endif

  /* "nodes_def.pyx":2294
 *         assert timestamps is not None
 * 
 *         assert buffer is not None             # <<<<<<<<<<<<<<
 * 
 *         assert self.ctx is NULL
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = (((PyObject *)__pyx_v_buffer) != Py_None);
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 2294, __pyx_L1_error)
    }
  }
  #endif

  /* "nodes_def.pyx":2296
 *         assert buffer is not None
 * 
 *         assert self.ctx is NULL             # <<<<<<<<<<<<<<
 *         self.ctx = ngl_node_create(NGL_NODE_STREAMEDFLOAT, timestamps.ctx, buffer.ctx)
 *         if self.ctx is NULL:
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!((__pyx_v_self->__pyx_base.ctx == NULL) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 2296, __pyx_L1_error)
    }
  }
  #endif

  /* "nodes_def.pyx":2297
 * 
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_STREAMEDFLOAT, timestamps.ctx, buffer.ctx)             # <<<<<<<<<<<<<<
 *         if self.ctx is NULL:
 *             raise MemoryError()
 */
  __pyx_v_self->__pyx_base.ctx = ngl_node_create(NGL_NODE_STREAMEDFLOAT, __pyx_v_timestamps->ctx, __pyx_v_buffer->ctx);

  /* "nodes_def.pyx":2298
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_STREAMEDFLOAT, timestamps.ctx, buffer.ctx)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         _Node._init_params(self, *args, **kwargs)
 */
  __pyx_t_1 = ((__pyx_v_self->__pyx_base.ctx == NULL) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "nodes_def.pyx":2299
 *         self.ctx = ngl_node_create(NGL_NODE_STREAMEDFLOAT, timestamps.ctx, buffer.ctx)
 *         if self.ctx is NULL:
 *             raise MemoryError()             # <<<<<<<<<<<<<<
 *         _Node._init_params(self, *args, **kwargs)
 * 
 */
    PyErr_NoMemory(); __PYX_ERR(0, 2299, __pyx_L1_error)

    /* "nodes_def.pyx":2298
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_STREAMEDFLOAT, timestamps.ctx, buffer.ctx)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         _Node._init_params(self, *args, **kwargs)
 */
  }

  /* "nodes_def.pyx":2300
 *         if self.ctx is NULL:
 *             raise MemoryError()
 *         _Node._init_params(self, *args, **kwargs)             # <<<<<<<<<<<<<<
 * 
 *         if timebase is not None:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_8pynodegl__Node), __pyx_n_s_init_params); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2300, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2300, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_v_self));
  __pyx_t_4 = PyNumber_Add(__pyx_t_3, __pyx_v_args); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2300, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, __pyx_v_kwargs); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2300, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "nodes_def.pyx":2302
 *         _Node._init_params(self, *args, **kwargs)
 * 
 *         if timebase is not None:             # <<<<<<<<<<<<<<
 *             self.set_timebase(timebase)
 *         if time_anim is not None:
 */
  __pyx_t_1 = (__pyx_v_timebase != Py_None);
  __pyx_t_5 = (__pyx_t_1 != 0);
  if (__pyx_t_5) {

    /* "nodes_def.pyx":2303
 * 
 *         if timebase is not None:
 *             self.set_timebase(timebase)             # <<<<<<<<<<<<<<
 *         if time_anim is not None:
 *             self.set_time_anim(time_anim)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_timebase); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2303, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_2, __pyx_v_timebase) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_timebase);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2303, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "nodes_def.pyx":2302
 *         _Node._init_params(self, *args, **kwargs)
 * 
 *         if timebase is not None:             # <<<<<<<<<<<<<<
 *             self.set_timebase(timebase)
 *         if time_anim is not None:
 */
  }

  /* "nodes_def.pyx":2304
 *         if timebase is not None:
 *             self.set_timebase(timebase)
 *         if time_anim is not None:             # <<<<<<<<<<<<<<
 *             self.set_time_anim(time_anim)
 * 
 */
  __pyx_t_5 = (__pyx_v_time_anim != Py_None);
  __pyx_t_1 = (__pyx_t_5 != 0);
  if (__pyx_t_1) {

    /* "nodes_def.pyx":2305
 *             self.set_timebase(timebase)
 *         if time_anim is not None:
 *             self.set_time_anim(time_anim)             # <<<<<<<<<<<<<<
 * 
 *     def set_timebase(self, tuple timebase):
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_time_anim); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2305, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_2, __pyx_v_time_anim) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_time_anim);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2305, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "nodes_def.pyx":2304
 *         if timebase is not None:
 *             self.set_timebase(timebase)
 *         if time_anim is not None:             # <<<<<<<<<<<<<<
 *             self.set_time_anim(time_anim)
 * 
 */
  }

  /* "nodes_def.pyx":2291
 * cdef class StreamedFloat(_Node):
 * 
 *     def __init__(self, _Node timestamps, _Node buffer, timebase=None, time_anim=None, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         assert timestamps is not None
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pynodegl.StreamedFloat.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":2307
 *             self.set_time_anim(time_anim)
 * 
 *     def set_timebase(self, tuple timebase):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx,
 *                                   "timebase",
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_13StreamedFloat_3set_timebase(PyObject *__pyx_v_self, PyObject *__pyx_v_timebase); /*proto*/
static PyObject *__pyx_pw_8pynodegl_13StreamedFloat_3set_timebase(PyObject *__pyx_v_self, PyObject *__pyx_v_timebase) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_timebase (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_timebase), (&PyTuple_Type), 1, "timebase", 1))) __PYX_ERR(0, 2307, __pyx_L1_error)
  __pyx_r = __pyx_pf_8pynodegl_13StreamedFloat_2set_timebase(((struct __pyx_obj_8pynodegl_StreamedFloat *)__pyx_v_self), ((PyObject*)__pyx_v_timebase));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_13StreamedFloat_2set_timebase(struct __pyx_obj_8pynodegl_StreamedFloat *__pyx_v_self, PyObject *__pyx_v_timebase) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  __Pyx_RefNannySetupContext("set_timebase", 0);

  /* "nodes_def.pyx":2308
 * 
 *     def set_timebase(self, tuple timebase):
 *         return ngl_node_param_set(self.ctx,             # <<<<<<<<<<<<<<
 *                                   "timebase",
 *                                   <int>timebase[0],
 */
  __Pyx_XDECREF(__pyx_r);

  /* "nodes_def.pyx":2310
 *         return ngl_node_param_set(self.ctx,
 *                                   "timebase",
 *                                   <int>timebase[0],             # <<<<<<<<<<<<<<
 *                                   <int>timebase[1]);
 * 
 */
  if (unlikely(__pyx_v_timebase == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 2310, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v_timebase, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2310, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2310, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "nodes_def.pyx":2311
 *                                   "timebase",
 *                                   <int>timebase[0],
 *                                   <int>timebase[1]);             # <<<<<<<<<<<<<<
 * 
 *     def set_time_anim(self, _Node time_anim):
 */
  if (unlikely(__pyx_v_timebase == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 2311, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v_timebase, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2311, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2311, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "nodes_def.pyx":2308
 * 
 *     def set_timebase(self, tuple timebase):
 *         return ngl_node_param_set(self.ctx,             # <<<<<<<<<<<<<<
 *                                   "timebase",
 *                                   <int>timebase[0],
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"timebase"), ((int)__pyx_t_2), ((int)__pyx_t_3))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2308, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":2307
 *             self.set_time_anim(time_anim)
 * 
 *     def set_timebase(self, tuple timebase):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx,
 *                                   "timebase",
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.StreamedFloat.set_timebase", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":2313
 *                                   <int>timebase[1]);
 * 
 *     def set_time_anim(self, _Node time_anim):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "time_anim", time_anim.ctx)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_13StreamedFloat_5set_time_anim(PyObject *__pyx_v_self, PyObject *__pyx_v_time_anim); /*proto*/
static PyObject *__pyx_pw_8pynodegl_13StreamedFloat_5set_time_anim(PyObject *__pyx_v_self, PyObject *__pyx_v_time_anim) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_time_anim (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_time_anim), __pyx_ptype_8pynodegl__Node, 1, "time_anim", 0))) __PYX_ERR(0, 2313, __pyx_L1_error)
  __pyx_r = __pyx_pf_8pynodegl_13StreamedFloat_4set_time_anim(((struct __pyx_obj_8pynodegl_StreamedFloat *)__pyx_v_self), ((struct __pyx_obj_8pynodegl__Node *)__pyx_v_time_anim));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_13StreamedFloat_4set_time_anim(struct __pyx_obj_8pynodegl_StreamedFloat *__pyx_v_self, struct __pyx_obj_8pynodegl__Node *__pyx_v_time_anim) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("set_time_anim", 0);

  /* "nodes_def.pyx":2314
 * 
 *     def set_time_anim(self, _Node time_anim):
 *         return ngl_node_param_set(self.ctx, "time_anim", time_anim.ctx)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"time_anim"), __pyx_v_time_anim->ctx)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2314, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":2313
 *                                   <int>timebase[1]);
 * 
 *     def set_time_anim(self, _Node time_anim):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "time_anim", time_anim.ctx)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.StreamedFloat.set_time_anim", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_13StreamedFloat_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pynodegl_13StreamedFloat_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_13StreamedFloat_6__reduce_cython__(((struct __pyx_obj_8pynodegl_StreamedFloat *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_13StreamedFloat_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_StreamedFloat *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__165, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.StreamedFloat.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_13StreamedFloat_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8pynodegl_13StreamedFloat_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_13StreamedFloat_8__setstate_cython__(((struct __pyx_obj_8pynodegl_StreamedFloat *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_13StreamedFloat_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_StreamedFloat *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__166, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.StreamedFloat.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":2319
 * cdef class StreamedVec2(_Node):
 * 
 *     def __init__(self, _Node timestamps, _Node buffer, timebase=None, time_anim=None, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         assert timestamps is not None
 * 
 */

/* Python wrapper */
static int __pyx_pw_8pynodegl_12StreamedVec2_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pynodegl_12StreamedVec2_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pynodegl__Node *__pyx_v_timestamps = 0;
  struct __pyx_obj_8pynodegl__Node *__pyx_v_buffer = 0;
  PyObject *__pyx_v_timebase = 0;
  PyObject *__pyx_v_time_anim = 0;
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  __pyx_v_kwargs = PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return -1;
  __Pyx_GOTREF(__pyx_v_kwargs);
  if (PyTuple_GET_SIZE(__pyx_args) > 4) {
    __pyx_v_args = PyTuple_GetSlice(__pyx_args, 4, PyTuple_GET_SIZE(__pyx_args));
    if (unlikely(!__pyx_v_args)) {
      __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
      __Pyx_RefNannyFinishContext();
      return -1;
    }
    __Pyx_GOTREF(__pyx_v_args);
  } else {
    __pyx_v_args = __pyx_empty_tuple; __Pyx_INCREF(__pyx_empty_tuple);
  }
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_timestamps,&__pyx_n_s_buffer,&__pyx_n_s_timebase,&__pyx_n_s_time_anim,0};
    PyObject* values[4] = {0,0,0,0};
    values[2] = ((PyObject *)Py_None);
    values[3] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        default:
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_timestamps)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_buffer)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 2, 4, 1); __PYX_ERR(0, 2319, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_timebase);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_time_anim);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t used_pos_args = (pos_args < 4) ? pos_args : 4;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_kwargs, values, used_pos_args, "__init__") < 0)) __PYX_ERR(0, 2319, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        default:
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        case  1:
        case  0:
        goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_timestamps = ((struct __pyx_obj_8pynodegl__Node *)values[0]);
    __pyx_v_buffer = ((struct __pyx_obj_8pynodegl__Node *)values[1]);
    __pyx_v_timebase = values[2];
    __pyx_v_time_anim = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 2, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2319, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_args); __pyx_v_args = 0;
  __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
  __Pyx_AddTraceback("pynodegl.StreamedVec2.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_timestamps), __pyx_ptype_8pynodegl__Node, 1, "timestamps", 0))) __PYX_ERR(0, 2319, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_buffer), __pyx_ptype_8pynodegl__Node, 1, "buffer", 0))) __PYX_ERR(0, 2319, __pyx_L1_error)
  __pyx_r = __pyx_pf_8pynodegl_12StreamedVec2___init__(((struct __pyx_obj_8pynodegl_StreamedVec2 *)__pyx_v_self), __pyx_v_timestamps, __pyx_v_buffer, __pyx_v_timebase, __pyx_v_time_anim, __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pynodegl_12StreamedVec2___init__(struct __pyx_obj_8pynodegl_StreamedVec2 *__pyx_v_self, struct __pyx_obj_8pynodegl__Node *__pyx_v_timestamps, struct __pyx_obj_8pynodegl__Node *__pyx_v_buffer, PyObject *__pyx_v_timebase, PyObject *__pyx_v_time_anim, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "nodes_def.pyx":2320
 * 
 *     def __init__(self, _Node timestamps, _Node buffer, timebase=None, time_anim=None, *args, **kwargs):
 *         assert timestamps is not None             # <<<<<<<<<<<<<<
 * 
 *         assert buffer is not None
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = (((PyObject *)__pyx_v_timestamps) != Py_None);
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 2320, __pyx_L1_error)
    }
  }
  #endif

  /* "nodes_def.pyx":2322
 *         assert timestamps is not None
 * 
 *         assert buffer is not None             # <<<<<<<<<<<<<<
 * 
 *         assert self.ctx is NULL
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = (((PyObject *)__pyx_v_buffer) != Py_None);
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 2322, __pyx_L1_error)
    }
  }
  #endif

  /* "nodes_def.pyx":2324
 *         assert buffer is not None
 * 
 *         assert self.ctx is NULL             # <<<<<<<<<<<<<<
 *         self.ctx = ngl_node_create(NGL_NODE_STREAMEDVEC2, timestamps.ctx, buffer.ctx)
 *         if self.ctx is NULL:
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!((__pyx_v_self->__pyx_base.ctx == NULL) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 2324, __pyx_L1_error)
    }
  }
  #endif

  /* "nodes_def.pyx":2325
 * 
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_STREAMEDVEC2, timestamps.ctx, buffer.ctx)             # <<<<<<<<<<<<<<
 *         if self.ctx is NULL:
 *             raise MemoryError()
 */
  __pyx_v_self->__pyx_base.ctx = ngl_node_create(NGL_NODE_STREAMEDVEC2, __pyx_v_timestamps->ctx, __pyx_v_buffer->ctx);

  /* "nodes_def.pyx":2326
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_STREAMEDVEC2, timestamps.ctx, buffer.ctx)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         _Node._init_params(self, *args, **kwargs)
 */
  __pyx_t_1 = ((__pyx_v_self->__pyx_base.ctx == NULL) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "nodes_def.pyx":2327
 *         self.ctx = ngl_node_create(NGL_NODE_STREAMEDVEC2, timestamps.ctx, buffer.ctx)
 *         if self.ctx is NULL:
 *             raise MemoryError()             # <<<<<<<<<<<<<<
 *         _Node._init_params(self, *args, **kwargs)
 * 
 */
    PyErr_NoMemory(); __PYX_ERR(0, 2327, __pyx_L1_error)

    /* "nodes_def.pyx":2326
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_STREAMEDVEC2, timestamps.ctx, buffer.ctx)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         _Node._init_params(self, *args, **kwargs)
 */
  }

  /* "nodes_def.pyx":2328
 *         if self.ctx is NULL:
 *             raise MemoryError()
 *         _Node._init_params(self, *args, **kwargs)             # <<<<<<<<<<<<<<
 * 
 *         if timebase is not None:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_8pynodegl__Node), __pyx_n_s_init_params); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2328, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2328, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_v_self));
  __pyx_t_4 = PyNumber_Add(__pyx_t_3, __pyx_v_args); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2328, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, __pyx_v_kwargs); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2328, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "nodes_def.pyx":2330
 *         _Node._init_params(self, *args, **kwargs)
 * 
 *         if timebase is not None:             # <<<<<<<<<<<<<<
 *             self.set_timebase(timebase)
 *         if time_anim is not None:
 */
  __pyx_t_1 = (__pyx_v_timebase != Py_None);
  __pyx_t_5 = (__pyx_t_1 != 0);
  if (__pyx_t_5) {

    /* "nodes_def.pyx":2331
 * 
 *         if timebase is not None:
 *             self.set_timebase(timebase)             # <<<<<<<<<<<<<<
 *         if time_anim is not None:
 *             self.set_time_anim(time_anim)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_timebase); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2331, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_2, __pyx_v_timebase) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_timebase);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2331, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "nodes_def.pyx":2330
 *         _Node._init_params(self, *args, **kwargs)
 * 
 *         if timebase is not None:             # <<<<<<<<<<<<<<
 *             self.set_timebase(timebase)
 *         if time_anim is not None:
 */
  }

  /* "nodes_def.pyx":2332
 *         if timebase is not None:
 *             self.set_timebase(timebase)
 *         if time_anim is not None:             # <<<<<<<<<<<<<<
 *             self.set_time_anim(time_anim)
 * 
 */
  __pyx_t_5 = (__pyx_v_time_anim != Py_None);
  __pyx_t_1 = (__pyx_t_5 != 0);
  if (__pyx_t_1) {

    /* "nodes_def.pyx":2333
 *             self.set_timebase(timebase)
 *         if time_anim is not None:
 *             self.set_time_anim(time_anim)             # <<<<<<<<<<<<<<
 * 
 *     def set_timebase(self, tuple timebase):
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_time_anim); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2333, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_2, __pyx_v_time_anim) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_time_anim);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2333, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "nodes_def.pyx":2332
 *         if timebase is not None:
 *             self.set_timebase(timebase)
 *         if time_anim is not None:             # <<<<<<<<<<<<<<
 *             self.set_time_anim(time_anim)
 * 
 */
  }

  /* "nodes_def.pyx":2319
 * cdef class StreamedVec2(_Node):
 * 
 *     def __init__(self, _Node timestamps, _Node buffer, timebase=None, time_anim=None, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         assert timestamps is not None
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pynodegl.StreamedVec2.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":2335
 *             self.set_time_anim(time_anim)
 * 
 *     def set_timebase(self, tuple timebase):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx,
 *                                   "timebase",
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_12StreamedVec2_3set_timebase(PyObject *__pyx_v_self, PyObject *__pyx_v_timebase); /*proto*/
static PyObject *__pyx_pw_8pynodegl_12StreamedVec2_3set_timebase(PyObject *__pyx_v_self, PyObject *__pyx_v_timebase) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_timebase (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_timebase), (&PyTuple_Type), 1, "timebase", 1))) __PYX_ERR(0, 2335, __pyx_L1_error)
  __pyx_r = __pyx_pf_8pynodegl_12StreamedVec2_2set_timebase(((struct __pyx_obj_8pynodegl_StreamedVec2 *)__pyx_v_self), ((PyObject*)__pyx_v_timebase));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_12StreamedVec2_2set_timebase(struct __pyx_obj_8pynodegl_StreamedVec2 *__pyx_v_self, PyObject *__pyx_v_timebase) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  __Pyx_RefNannySetupContext("set_timebase", 0);

  /* "nodes_def.pyx":2336
 * 
 *     def set_timebase(self, tuple timebase):
 *         return ngl_node_param_set(self.ctx,             # <<<<<<<<<<<<<<
 *                                   "timebase",
 *                                   <int>timebase[0],
 */
  __Pyx_XDECREF(__pyx_r);

  /* "nodes_def.pyx":2338
 *         return ngl_node_param_set(self.ctx,
 *                                   "timebase",
 *                                   <int>timebase[0],             # <<<<<<<<<<<<<<
 *                                   <int>timebase[1]);
 * 
 */
  if (unlikely(__pyx_v_timebase == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 2338, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v_timebase, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2338, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2338, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "nodes_def.pyx":2339
 *                                   "timebase",
 *                                   <int>timebase[0],
 *                                   <int>timebase[1]);             # <<<<<<<<<<<<<<
 * 
 *     def set_time_anim(self, _Node time_anim):
 */
  if (unlikely(__pyx_v_timebase == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 2339, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v_timebase, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2339, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2339, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "nodes_def.pyx":2336
 * 
 *     def set_timebase(self, tuple timebase):
 *         return ngl_node_param_set(self.ctx,             # <<<<<<<<<<<<<<
 *                                   "timebase",
 *                                   <int>timebase[0],
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"timebase"), ((int)__pyx_t_2), ((int)__pyx_t_3))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2336, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":2335
 *             self.set_time_anim(time_anim)
 * 
 *     def set_timebase(self, tuple timebase):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx,
 *                                   "timebase",
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.StreamedVec2.set_timebase", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":2341
 *                                   <int>timebase[1]);
 * 
 *     def set_time_anim(self, _Node time_anim):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "time_anim", time_anim.ctx)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_12StreamedVec2_5set_time_anim(PyObject *__pyx_v_self, PyObject *__pyx_v_time_anim); /*proto*/
static PyObject *__pyx_pw_8pynodegl_12StreamedVec2_5set_time_anim(PyObject *__pyx_v_self, PyObject *__pyx_v_time_anim) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_time_anim (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_time_anim), __pyx_ptype_8pynodegl__Node, 1, "time_anim", 0))) __PYX_ERR(0, 2341, __pyx_L1_error)
  __pyx_r = __pyx_pf_8pynodegl_12StreamedVec2_4set_time_anim(((struct __pyx_obj_8pynodegl_StreamedVec2 *)__pyx_v_self), ((struct __pyx_obj_8pynodegl__Node *)__pyx_v_time_anim));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_12StreamedVec2_4set_time_anim(struct __pyx_obj_8pynodegl_StreamedVec2 *__pyx_v_self, struct __pyx_obj_8pynodegl__Node *__pyx_v_time_anim) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("set_time_anim", 0);

  /* "nodes_def.pyx":2342
 * 
 *     def set_time_anim(self, _Node time_anim):
 *         return ngl_node_param_set(self.ctx, "time_anim", time_anim.ctx)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"time_anim"), __pyx_v_time_anim->ctx)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2342, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":2341
 *                                   <int>timebase[1]);
 * 
 *     def set_time_anim(self, _Node time_anim):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "time_anim", time_anim.ctx)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.StreamedVec2.set_time_anim", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_12StreamedVec2_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pynodegl_12StreamedVec2_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_12StreamedVec2_6__reduce_cython__(((struct __pyx_obj_8pynodegl_StreamedVec2 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_12StreamedVec2_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_StreamedVec2 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__167, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.StreamedVec2.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_12StreamedVec2_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8pynodegl_12StreamedVec2_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_12StreamedVec2_8__setstate_cython__(((struct __pyx_obj_8pynodegl_StreamedVec2 *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_12StreamedVec2_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_StreamedVec2 *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__168, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.StreamedVec2.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":2347
 * cdef class StreamedVec3(_Node):
 * 
 *     def __init__(self, _Node timestamps, _Node buffer, timebase=None, time_anim=None, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         assert timestamps is not None
 * 
 */

/* Python wrapper */
static int __pyx_pw_8pynodegl_12StreamedVec3_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pynodegl_12StreamedVec3_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pynodegl__Node *__pyx_v_timestamps = 0;
  struct __pyx_obj_8pynodegl__Node *__pyx_v_buffer = 0;
  PyObject *__pyx_v_timebase = 0;
  PyObject *__pyx_v_time_anim = 0;
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  __pyx_v_kwargs = PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return -1;
  __Pyx_GOTREF(__pyx_v_kwargs);
  if (PyTuple_GET_SIZE(__pyx_args) > 4) {
    __pyx_v_args = PyTuple_GetSlice(__pyx_args, 4, PyTuple_GET_SIZE(__pyx_args));
    if (unlikely(!__pyx_v_args)) {
      __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
      __Pyx_RefNannyFinishContext();
      return -1;
    }
    __Pyx_GOTREF(__pyx_v_args);
  } else {
    __pyx_v_args = __pyx_empty_tuple; __Pyx_INCREF(__pyx_empty_tuple);
  }
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_timestamps,&__pyx_n_s_buffer,&__pyx_n_s_timebase,&__pyx_n_s_time_anim,0};
    PyObject* values[4] = {0,0,0,0};
    values[2] = ((PyObject *)Py_None);
    values[3] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        default:
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_timestamps)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_buffer)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 2, 4, 1); __PYX_ERR(0, 2347, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_timebase);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_time_anim);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t used_pos_args = (pos_args < 4) ? pos_args : 4;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_kwargs, values, used_pos_args, "__init__") < 0)) __PYX_ERR(0, 2347, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        default:
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        case  1:
        case  0:
        goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_timestamps = ((struct __pyx_obj_8pynodegl__Node *)values[0]);
    __pyx_v_buffer = ((struct __pyx_obj_8pynodegl__Node *)values[1]);
    __pyx_v_timebase = values[2];
    __pyx_v_time_anim = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 2, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2347, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_args); __pyx_v_args = 0;
  __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
  __Pyx_AddTraceback("pynodegl.StreamedVec3.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_timestamps), __pyx_ptype_8pynodegl__Node, 1, "timestamps", 0))) __PYX_ERR(0, 2347, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_buffer), __pyx_ptype_8pynodegl__Node, 1, "buffer", 0))) __PYX_ERR(0, 2347, __pyx_L1_error)
  __pyx_r = __pyx_pf_8pynodegl_12StreamedVec3___init__(((struct __pyx_obj_8pynodegl_StreamedVec3 *)__pyx_v_self), __pyx_v_timestamps, __pyx_v_buffer, __pyx_v_timebase, __pyx_v_time_anim, __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pynodegl_12StreamedVec3___init__(struct __pyx_obj_8pynodegl_StreamedVec3 *__pyx_v_self, struct __pyx_obj_8pynodegl__Node *__pyx_v_timestamps, struct __pyx_obj_8pynodegl__Node *__pyx_v_buffer, PyObject *__pyx_v_timebase, PyObject *__pyx_v_time_anim, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "nodes_def.pyx":2348
 * 
 *     def __init__(self, _Node timestamps, _Node buffer, timebase=None, time_anim=None, *args, **kwargs):
 *         assert timestamps is not None             # <<<<<<<<<<<<<<
 * 
 *         assert buffer is not None
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = (((PyObject *)__pyx_v_timestamps) != Py_None);
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 2348, __pyx_L1_error)
    }
  }
  #endif

  /* "nodes_def.pyx":2350
 *         assert timestamps is not None
 * 
 *         assert buffer is not None             # <<<<<<<<<<<<<<
 * 
 *         assert self.ctx is NULL
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = (((PyObject *)__pyx_v_buffer) != Py_None);
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 2350, __pyx_L1_error)
    }
  }
  #endif

  /* "nodes_def.pyx":2352
 *         assert buffer is not None
 * 
 *         assert self.ctx is NULL             # <<<<<<<<<<<<<<
 *         self.ctx = ngl_node_create(NGL_NODE_STREAMEDVEC3, timestamps.ctx, buffer.ctx)
 *         if self.ctx is NULL:
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!((__pyx_v_self->__pyx_base.ctx == NULL) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 2352, __pyx_L1_error)
    }
  }
  #endif

  /* "nodes_def.pyx":2353
 * 
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_STREAMEDVEC3, timestamps.ctx, buffer.ctx)             # <<<<<<<<<<<<<<
 *         if self.ctx is NULL:
 *             raise MemoryError()
 */
  __pyx_v_self->__pyx_base.ctx = ngl_node_create(NGL_NODE_STREAMEDVEC3, __pyx_v_timestamps->ctx, __pyx_v_buffer->ctx);

  /* "nodes_def.pyx":2354
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_STREAMEDVEC3, timestamps.ctx, buffer.ctx)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         _Node._init_params(self, *args, **kwargs)
 */
  __pyx_t_1 = ((__pyx_v_self->__pyx_base.ctx == NULL) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "nodes_def.pyx":2355
 *         self.ctx = ngl_node_create(NGL_NODE_STREAMEDVEC3, timestamps.ctx, buffer.ctx)
 *         if self.ctx is NULL:
 *             raise MemoryError()             # <<<<<<<<<<<<<<
 *         _Node._init_params(self, *args, **kwargs)
 * 
 */
    PyErr_NoMemory(); __PYX_ERR(0, 2355, __pyx_L1_error)

    /* "nodes_def.pyx":2354
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_STREAMEDVEC3, timestamps.ctx, buffer.ctx)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         _Node._init_params(self, *args, **kwargs)
 */
  }

  /* "nodes_def.pyx":2356
 *         if self.ctx is NULL:
 *             raise MemoryError()
 *         _Node._init_params(self, *args, **kwargs)             # <<<<<<<<<<<<<<
 * 
 *         if timebase is not None:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_8pynodegl__Node), __pyx_n_s_init_params); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2356, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2356, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_v_self));
  __pyx_t_4 = PyNumber_Add(__pyx_t_3, __pyx_v_args); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2356, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, __pyx_v_kwargs); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2356, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "nodes_def.pyx":2358
 *         _Node._init_params(self, *args, **kwargs)
 * 
 *         if timebase is not None:             # <<<<<<<<<<<<<<
 *             self.set_timebase(timebase)
 *         if time_anim is not None:
 */
  __pyx_t_1 = (__pyx_v_timebase != Py_None);
  __pyx_t_5 = (__pyx_t_1 != 0);
  if (__pyx_t_5) {

    /* "nodes_def.pyx":2359
 * 
 *         if timebase is not None:
 *             self.set_timebase(timebase)             # <<<<<<<<<<<<<<
 *         if time_anim is not None:
 *             self.set_time_anim(time_anim)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_timebase); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2359, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_2, __pyx_v_timebase) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_timebase);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2359, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "nodes_def.pyx":2358
 *         _Node._init_params(self, *args, **kwargs)
 * 
 *         if timebase is not None:             # <<<<<<<<<<<<<<
 *             self.set_timebase(timebase)
 *         if time_anim is not None:
 */
  }

  /* "nodes_def.pyx":2360
 *         if timebase is not None:
 *             self.set_timebase(timebase)
 *         if time_anim is not None:             # <<<<<<<<<<<<<<
 *             self.set_time_anim(time_anim)
 * 
 */
  __pyx_t_5 = (__pyx_v_time_anim != Py_None);
  __pyx_t_1 = (__pyx_t_5 != 0);
  if (__pyx_t_1) {

    /* "nodes_def.pyx":2361
 *             self.set_timebase(timebase)
 *         if time_anim is not None:
 *             self.set_time_anim(time_anim)             # <<<<<<<<<<<<<<
 * 
 *     def set_timebase(self, tuple timebase):
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_time_anim); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2361, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_2, __pyx_v_time_anim) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_time_anim);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2361, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "nodes_def.pyx":2360
 *         if timebase is not None:
 *             self.set_timebase(timebase)
 *         if time_anim is not None:             # <<<<<<<<<<<<<<
 *             self.set_time_anim(time_anim)
 * 
 */
  }

  /* "nodes_def.pyx":2347
 * cdef class StreamedVec3(_Node):
 * 
 *     def __init__(self, _Node timestamps, _Node buffer, timebase=None, time_anim=None, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         assert timestamps is not None
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pynodegl.StreamedVec3.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":2363
 *             self.set_time_anim(time_anim)
 * 
 *     def set_timebase(self, tuple timebase):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx,
 *                                   "timebase",
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_12StreamedVec3_3set_timebase(PyObject *__pyx_v_self, PyObject *__pyx_v_timebase); /*proto*/
static PyObject *__pyx_pw_8pynodegl_12StreamedVec3_3set_timebase(PyObject *__pyx_v_self, PyObject *__pyx_v_timebase) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_timebase (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_timebase), (&PyTuple_Type), 1, "timebase", 1))) __PYX_ERR(0, 2363, __pyx_L1_error)
  __pyx_r = __pyx_pf_8pynodegl_12StreamedVec3_2set_timebase(((struct __pyx_obj_8pynodegl_StreamedVec3 *)__pyx_v_self), ((PyObject*)__pyx_v_timebase));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_12StreamedVec3_2set_timebase(struct __pyx_obj_8pynodegl_StreamedVec3 *__pyx_v_self, PyObject *__pyx_v_timebase) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  __Pyx_RefNannySetupContext("set_timebase", 0);

  /* "nodes_def.pyx":2364
 * 
 *     def set_timebase(self, tuple timebase):
 *         return ngl_node_param_set(self.ctx,             # <<<<<<<<<<<<<<
 *                                   "timebase",
 *                                   <int>timebase[0],
 */
  __Pyx_XDECREF(__pyx_r);

  /* "nodes_def.pyx":2366
 *         return ngl_node_param_set(self.ctx,
 *                                   "timebase",
 *                                   <int>timebase[0],             # <<<<<<<<<<<<<<
 *                                   <int>timebase[1]);
 * 
 */
  if (unlikely(__pyx_v_timebase == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 2366, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v_timebase, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2366, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2366, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "nodes_def.pyx":2367
 *                                   "timebase",
 *                                   <int>timebase[0],
 *                                   <int>timebase[1]);             # <<<<<<<<<<<<<<
 * 
 *     def set_time_anim(self, _Node time_anim):
 */
  if (unlikely(__pyx_v_timebase == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 2367, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v_timebase, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2367, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2367, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "nodes_def.pyx":2364
 * 
 *     def set_timebase(self, tuple timebase):
 *         return ngl_node_param_set(self.ctx,             # <<<<<<<<<<<<<<
 *                                   "timebase",
 *                                   <int>timebase[0],
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"timebase"), ((int)__pyx_t_2), ((int)__pyx_t_3))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2364, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":2363
 *             self.set_time_anim(time_anim)
 * 
 *     def set_timebase(self, tuple timebase):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx,
 *                                   "timebase",
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.StreamedVec3.set_timebase", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":2369
 *                                   <int>timebase[1]);
 * 
 *     def set_time_anim(self, _Node time_anim):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "time_anim", time_anim.ctx)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_12StreamedVec3_5set_time_anim(PyObject *__pyx_v_self, PyObject *__pyx_v_time_anim); /*proto*/
static PyObject *__pyx_pw_8pynodegl_12StreamedVec3_5set_time_anim(PyObject *__pyx_v_self, PyObject *__pyx_v_time_anim) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_time_anim (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_time_anim), __pyx_ptype_8pynodegl__Node, 1, "time_anim", 0))) __PYX_ERR(0, 2369, __pyx_L1_error)
  __pyx_r = __pyx_pf_8pynodegl_12StreamedVec3_4set_time_anim(((struct __pyx_obj_8pynodegl_StreamedVec3 *)__pyx_v_self), ((struct __pyx_obj_8pynodegl__Node *)__pyx_v_time_anim));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_12StreamedVec3_4set_time_anim(struct __pyx_obj_8pynodegl_StreamedVec3 *__pyx_v_self, struct __pyx_obj_8pynodegl__Node *__pyx_v_time_anim) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("set_time_anim", 0);

  /* "nodes_def.pyx":2370
 * 
 *     def set_time_anim(self, _Node time_anim):
 *         return ngl_node_param_set(self.ctx, "time_anim", time_anim.ctx)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"time_anim"), __pyx_v_time_anim->ctx)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2370, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":2369
 *                                   <int>timebase[1]);
 * 
 *     def set_time_anim(self, _Node time_anim):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "time_anim", time_anim.ctx)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.StreamedVec3.set_time_anim", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_12StreamedVec3_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pynodegl_12StreamedVec3_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_12StreamedVec3_6__reduce_cython__(((struct __pyx_obj_8pynodegl_StreamedVec3 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_12StreamedVec3_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_StreamedVec3 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__169, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.StreamedVec3.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_12StreamedVec3_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8pynodegl_12StreamedVec3_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_12StreamedVec3_8__setstate_cython__(((struct __pyx_obj_8pynodegl_StreamedVec3 *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_12StreamedVec3_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_StreamedVec3 *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__170, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.StreamedVec3.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":2375
 * cdef class StreamedVec4(_Node):
 * 
 *     def __init__(self, _Node timestamps, _Node buffer, timebase=None, time_anim=None, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         assert timestamps is not None
 * 
 */

/* Python wrapper */
static int __pyx_pw_8pynodegl_12StreamedVec4_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pynodegl_12StreamedVec4_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pynodegl__Node *__pyx_v_timestamps = 0;
  struct __pyx_obj_8pynodegl__Node *__pyx_v_buffer = 0;
  PyObject *__pyx_v_timebase = 0;
  PyObject *__pyx_v_time_anim = 0;
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  __pyx_v_kwargs = PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return -1;
  __Pyx_GOTREF(__pyx_v_kwargs);
  if (PyTuple_GET_SIZE(__pyx_args) > 4) {
    __pyx_v_args = PyTuple_GetSlice(__pyx_args, 4, PyTuple_GET_SIZE(__pyx_args));
    if (unlikely(!__pyx_v_args)) {
      __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
      __Pyx_RefNannyFinishContext();
      return -1;
    }
    __Pyx_GOTREF(__pyx_v_args);
  } else {
    __pyx_v_args = __pyx_empty_tuple; __Pyx_INCREF(__pyx_empty_tuple);
  }
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_timestamps,&__pyx_n_s_buffer,&__pyx_n_s_timebase,&__pyx_n_s_time_anim,0};
    PyObject* values[4] = {0,0,0,0};
    values[2] = ((PyObject *)Py_None);
    values[3] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        default:
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_timestamps)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_buffer)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 2, 4, 1); __PYX_ERR(0, 2375, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_timebase);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_time_anim);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t used_pos_args = (pos_args < 4) ? pos_args : 4;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_kwargs, values, used_pos_args, "__init__") < 0)) __PYX_ERR(0, 2375, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        default:
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        case  1:
        case  0:
        goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_timestamps = ((struct __pyx_obj_8pynodegl__Node *)values[0]);
    __pyx_v_buffer = ((struct __pyx_obj_8pynodegl__Node *)values[1]);
    __pyx_v_timebase = values[2];
    __pyx_v_time_anim = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 2, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2375, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_args); __pyx_v_args = 0;
  __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
  __Pyx_AddTraceback("pynodegl.StreamedVec4.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_timestamps), __pyx_ptype_8pynodegl__Node, 1, "timestamps", 0))) __PYX_ERR(0, 2375, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_buffer), __pyx_ptype_8pynodegl__Node, 1, "buffer", 0))) __PYX_ERR(0, 2375, __pyx_L1_error)
  __pyx_r = __pyx_pf_8pynodegl_12StreamedVec4___init__(((struct __pyx_obj_8pynodegl_StreamedVec4 *)__pyx_v_self), __pyx_v_timestamps, __pyx_v_buffer, __pyx_v_timebase, __pyx_v_time_anim, __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pynodegl_12StreamedVec4___init__(struct __pyx_obj_8pynodegl_StreamedVec4 *__pyx_v_self, struct __pyx_obj_8pynodegl__Node *__pyx_v_timestamps, struct __pyx_obj_8pynodegl__Node *__pyx_v_buffer, PyObject *__pyx_v_timebase, PyObject *__pyx_v_time_anim, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "nodes_def.pyx":2376
 * 
 *     def __init__(self, _Node timestamps, _Node buffer, timebase=None, time_anim=None, *args, **kwargs):
 *         assert timestamps is not None             # <<<<<<<<<<<<<<
 * 
 *         assert buffer is not None
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = (((PyObject *)__pyx_v_timestamps) != Py_None);
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 2376, __pyx_L1_error)
    }
  }
  #endif

  /* "nodes_def.pyx":2378
 *         assert timestamps is not None
 * 
 *         assert buffer is not None             # <<<<<<<<<<<<<<
 * 
 *         assert self.ctx is NULL
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = (((PyObject *)__pyx_v_buffer) != Py_None);
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 2378, __pyx_L1_error)
    }
  }
  #endif

  /* "nodes_def.pyx":2380
 *         assert buffer is not None
 * 
 *         assert self.ctx is NULL             # <<<<<<<<<<<<<<
 *         self.ctx = ngl_node_create(NGL_NODE_STREAMEDVEC4, timestamps.ctx, buffer.ctx)
 *         if self.ctx is NULL:
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!((__pyx_v_self->__pyx_base.ctx == NULL) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 2380, __pyx_L1_error)
    }
  }
  #endif

  /* "nodes_def.pyx":2381
 * 
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_STREAMEDVEC4, timestamps.ctx, buffer.ctx)             # <<<<<<<<<<<<<<
 *         if self.ctx is NULL:
 *             raise MemoryError()
 */
  __pyx_v_self->__pyx_base.ctx = ngl_node_create(NGL_NODE_STREAMEDVEC4, __pyx_v_timestamps->ctx, __pyx_v_buffer->ctx);

  /* "nodes_def.pyx":2382
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_STREAMEDVEC4, timestamps.ctx, buffer.ctx)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         _Node._init_params(self, *args, **kwargs)
 */
  __pyx_t_1 = ((__pyx_v_self->__pyx_base.ctx == NULL) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "nodes_def.pyx":2383
 *         self.ctx = ngl_node_create(NGL_NODE_STREAMEDVEC4, timestamps.ctx, buffer.ctx)
 *         if self.ctx is NULL:
 *             raise MemoryError()             # <<<<<<<<<<<<<<
 *         _Node._init_params(self, *args, **kwargs)
 * 
 */
    PyErr_NoMemory(); __PYX_ERR(0, 2383, __pyx_L1_error)

    /* "nodes_def.pyx":2382
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_STREAMEDVEC4, timestamps.ctx, buffer.ctx)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         _Node._init_params(self, *args, **kwargs)
 */
  }

  /* "nodes_def.pyx":2384
 *         if self.ctx is NULL:
 *             raise MemoryError()
 *         _Node._init_params(self, *args, **kwargs)             # <<<<<<<<<<<<<<
 * 
 *         if timebase is not None:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_8pynodegl__Node), __pyx_n_s_init_params); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2384, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2384, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_v_self));
  __pyx_t_4 = PyNumber_Add(__pyx_t_3, __pyx_v_args); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2384, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, __pyx_v_kwargs); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2384, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "nodes_def.pyx":2386
 *         _Node._init_params(self, *args, **kwargs)
 * 
 *         if timebase is not None:             # <<<<<<<<<<<<<<
 *             self.set_timebase(timebase)
 *         if time_anim is not None:
 */
  __pyx_t_1 = (__pyx_v_timebase != Py_None);
  __pyx_t_5 = (__pyx_t_1 != 0);
  if (__pyx_t_5) {

    /* "nodes_def.pyx":2387
 * 
 *         if timebase is not None:
 *             self.set_timebase(timebase)             # <<<<<<<<<<<<<<
 *         if time_anim is not None:
 *             self.set_time_anim(time_anim)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_timebase); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2387, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_2, __pyx_v_timebase) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_timebase);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2387, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "nodes_def.pyx":2386
 *         _Node._init_params(self, *args, **kwargs)
 * 
 *         if timebase is not None:             # <<<<<<<<<<<<<<
 *             self.set_timebase(timebase)
 *         if time_anim is not None:
 */
  }

  /* "nodes_def.pyx":2388
 *         if timebase is not None:
 *             self.set_timebase(timebase)
 *         if time_anim is not None:             # <<<<<<<<<<<<<<
 *             self.set_time_anim(time_anim)
 * 
 */
  __pyx_t_5 = (__pyx_v_time_anim != Py_None);
  __pyx_t_1 = (__pyx_t_5 != 0);
  if (__pyx_t_1) {

    /* "nodes_def.pyx":2389
 *             self.set_timebase(timebase)
 *         if time_anim is not None:
 *             self.set_time_anim(time_anim)             # <<<<<<<<<<<<<<
 * 
 *     def set_timebase(self, tuple timebase):
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_time_anim); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2389, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_2, __pyx_v_time_anim) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_time_anim);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2389, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "nodes_def.pyx":2388
 *         if timebase is not None:
 *             self.set_timebase(timebase)
 *         if time_anim is not None:             # <<<<<<<<<<<<<<
 *             self.set_time_anim(time_anim)
 * 
 */
  }

  /* "nodes_def.pyx":2375
 * cdef class StreamedVec4(_Node):
 * 
 *     def __init__(self, _Node timestamps, _Node buffer, timebase=None, time_anim=None, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         assert timestamps is not None
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pynodegl.StreamedVec4.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":2391
 *             self.set_time_anim(time_anim)
 * 
 *     def set_timebase(self, tuple timebase):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx,
 *                                   "timebase",
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_12StreamedVec4_3set_timebase(PyObject *__pyx_v_self, PyObject *__pyx_v_timebase); /*proto*/
static PyObject *__pyx_pw_8pynodegl_12StreamedVec4_3set_timebase(PyObject *__pyx_v_self, PyObject *__pyx_v_timebase) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_timebase (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_timebase), (&PyTuple_Type), 1, "timebase", 1))) __PYX_ERR(0, 2391, __pyx_L1_error)
  __pyx_r = __pyx_pf_8pynodegl_12StreamedVec4_2set_timebase(((struct __pyx_obj_8pynodegl_StreamedVec4 *)__pyx_v_self), ((PyObject*)__pyx_v_timebase));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_12StreamedVec4_2set_timebase(struct __pyx_obj_8pynodegl_StreamedVec4 *__pyx_v_self, PyObject *__pyx_v_timebase) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  __Pyx_RefNannySetupContext("set_timebase", 0);

  /* "nodes_def.pyx":2392
 * 
 *     def set_timebase(self, tuple timebase):
 *         return ngl_node_param_set(self.ctx,             # <<<<<<<<<<<<<<
 *                                   "timebase",
 *                                   <int>timebase[0],
 */
  __Pyx_XDECREF(__pyx_r);

  /* "nodes_def.pyx":2394
 *         return ngl_node_param_set(self.ctx,
 *                                   "timebase",
 *                                   <int>timebase[0],             # <<<<<<<<<<<<<<
 *                                   <int>timebase[1]);
 * 
 */
  if (unlikely(__pyx_v_timebase == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 2394, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v_timebase, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2394, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2394, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "nodes_def.pyx":2395
 *                                   "timebase",
 *                                   <int>timebase[0],
 *                                   <int>timebase[1]);             # <<<<<<<<<<<<<<
 * 
 *     def set_time_anim(self, _Node time_anim):
 */
  if (unlikely(__pyx_v_timebase == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 2395, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v_timebase, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2395, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2395, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "nodes_def.pyx":2392
 * 
 *     def set_timebase(self, tuple timebase):
 *         return ngl_node_param_set(self.ctx,             # <<<<<<<<<<<<<<
 *                                   "timebase",
 *                                   <int>timebase[0],
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"timebase"), ((int)__pyx_t_2), ((int)__pyx_t_3))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2392, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":2391
 *             self.set_time_anim(time_anim)
 * 
 *     def set_timebase(self, tuple timebase):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx,
 *                                   "timebase",
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.StreamedVec4.set_timebase", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":2397
 *                                   <int>timebase[1]);
 * 
 *     def set_time_anim(self, _Node time_anim):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "time_anim", time_anim.ctx)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_12StreamedVec4_5set_time_anim(PyObject *__pyx_v_self, PyObject *__pyx_v_time_anim); /*proto*/
static PyObject *__pyx_pw_8pynodegl_12StreamedVec4_5set_time_anim(PyObject *__pyx_v_self, PyObject *__pyx_v_time_anim) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_time_anim (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_time_anim), __pyx_ptype_8pynodegl__Node, 1, "time_anim", 0))) __PYX_ERR(0, 2397, __pyx_L1_error)
  __pyx_r = __pyx_pf_8pynodegl_12StreamedVec4_4set_time_anim(((struct __pyx_obj_8pynodegl_StreamedVec4 *)__pyx_v_self), ((struct __pyx_obj_8pynodegl__Node *)__pyx_v_time_anim));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_12StreamedVec4_4set_time_anim(struct __pyx_obj_8pynodegl_StreamedVec4 *__pyx_v_self, struct __pyx_obj_8pynodegl__Node *__pyx_v_time_anim) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("set_time_anim", 0);

  /* "nodes_def.pyx":2398
 * 
 *     def set_time_anim(self, _Node time_anim):
 *         return ngl_node_param_set(self.ctx, "time_anim", time_anim.ctx)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"time_anim"), __pyx_v_time_anim->ctx)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2398, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":2397
 *                                   <int>timebase[1]);
 * 
 *     def set_time_anim(self, _Node time_anim):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "time_anim", time_anim.ctx)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.StreamedVec4.set_time_anim", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_12StreamedVec4_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pynodegl_12StreamedVec4_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_12StreamedVec4_6__reduce_cython__(((struct __pyx_obj_8pynodegl_StreamedVec4 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_12StreamedVec4_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_StreamedVec4 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__171, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.StreamedVec4.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_12StreamedVec4_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8pynodegl_12StreamedVec4_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_12StreamedVec4_8__setstate_cython__(((struct __pyx_obj_8pynodegl_StreamedVec4 *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_12StreamedVec4_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_StreamedVec4 *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__172, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.StreamedVec4.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":2403
 * cdef class StreamedMat4(_Node):
 * 
 *     def __init__(self, _Node timestamps, _Node buffer, timebase=None, time_anim=None, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         assert timestamps is not None
 * 
 */

/* Python wrapper */
static int __pyx_pw_8pynodegl_12StreamedMat4_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pynodegl_12StreamedMat4_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pynodegl__Node *__pyx_v_timestamps = 0;
  struct __pyx_obj_8pynodegl__Node *__pyx_v_buffer = 0;
  PyObject *__pyx_v_timebase = 0;
  PyObject *__pyx_v_time_anim = 0;
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  __pyx_v_kwargs = PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return -1;
  __Pyx_GOTREF(__pyx_v_kwargs);
  if (PyTuple_GET_SIZE(__pyx_args) > 4) {
    __pyx_v_args = PyTuple_GetSlice(__pyx_args, 4, PyTuple_GET_SIZE(__pyx_args));
    if (unlikely(!__pyx_v_args)) {
      __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
      __Pyx_RefNannyFinishContext();
      return -1;
    }
    __Pyx_GOTREF(__pyx_v_args);
  } else {
    __pyx_v_args = __pyx_empty_tuple; __Pyx_INCREF(__pyx_empty_tuple);
  }
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_timestamps,&__pyx_n_s_buffer,&__pyx_n_s_timebase,&__pyx_n_s_time_anim,0};
    PyObject* values[4] = {0,0,0,0};
    values[2] = ((PyObject *)Py_None);
    values[3] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        default:
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_timestamps)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_buffer)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 2, 4, 1); __PYX_ERR(0, 2403, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_timebase);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_time_anim);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t used_pos_args = (pos_args < 4) ? pos_args : 4;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_kwargs, values, used_pos_args, "__init__") < 0)) __PYX_ERR(0, 2403, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        default:
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        case  1:
        case  0:
        goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_timestamps = ((struct __pyx_obj_8pynodegl__Node *)values[0]);
    __pyx_v_buffer = ((struct __pyx_obj_8pynodegl__Node *)values[1]);
    __pyx_v_timebase = values[2];
    __pyx_v_time_anim = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 2, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2403, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_args); __pyx_v_args = 0;
  __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
  __Pyx_AddTraceback("pynodegl.StreamedMat4.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_timestamps), __pyx_ptype_8pynodegl__Node, 1, "timestamps", 0))) __PYX_ERR(0, 2403, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_buffer), __pyx_ptype_8pynodegl__Node, 1, "buffer", 0))) __PYX_ERR(0, 2403, __pyx_L1_error)
  __pyx_r = __pyx_pf_8pynodegl_12StreamedMat4___init__(((struct __pyx_obj_8pynodegl_StreamedMat4 *)__pyx_v_self), __pyx_v_timestamps, __pyx_v_buffer, __pyx_v_timebase, __pyx_v_time_anim, __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pynodegl_12StreamedMat4___init__(struct __pyx_obj_8pynodegl_StreamedMat4 *__pyx_v_self, struct __pyx_obj_8pynodegl__Node *__pyx_v_timestamps, struct __pyx_obj_8pynodegl__Node *__pyx_v_buffer, PyObject *__pyx_v_timebase, PyObject *__pyx_v_time_anim, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "nodes_def.pyx":2404
 * 
 *     def __init__(self, _Node timestamps, _Node buffer, timebase=None, time_anim=None, *args, **kwargs):
 *         assert timestamps is not None             # <<<<<<<<<<<<<<
 * 
 *         assert buffer is not None
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = (((PyObject *)__pyx_v_timestamps) != Py_None);
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 2404, __pyx_L1_error)
    }
  }
  #endif

  /* "nodes_def.pyx":2406
 *         assert timestamps is not None
 * 
 *         assert buffer is not None             # <<<<<<<<<<<<<<
 * 
 *         assert self.ctx is NULL
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = (((PyObject *)__pyx_v_buffer) != Py_None);
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 2406, __pyx_L1_error)
    }
  }
  #endif

  /* "nodes_def.pyx":2408
 *         assert buffer is not None
 * 
 *         assert self.ctx is NULL             # <<<<<<<<<<<<<<
 *         self.ctx = ngl_node_create(NGL_NODE_STREAMEDMAT4, timestamps.ctx, buffer.ctx)
 *         if self.ctx is NULL:
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!((__pyx_v_self->__pyx_base.ctx == NULL) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 2408, __pyx_L1_error)
    }
  }
  #endif

  /* "nodes_def.pyx":2409
 * 
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_STREAMEDMAT4, timestamps.ctx, buffer.ctx)             # <<<<<<<<<<<<<<
 *         if self.ctx is NULL:
 *             raise MemoryError()
 */
  __pyx_v_self->__pyx_base.ctx = ngl_node_create(NGL_NODE_STREAMEDMAT4, __pyx_v_timestamps->ctx, __pyx_v_buffer->ctx);

  /* "nodes_def.pyx":2410
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_STREAMEDMAT4, timestamps.ctx, buffer.ctx)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         _Node._init_params(self, *args, **kwargs)
 */
  __pyx_t_1 = ((__pyx_v_self->__pyx_base.ctx == NULL) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "nodes_def.pyx":2411
 *         self.ctx = ngl_node_create(NGL_NODE_STREAMEDMAT4, timestamps.ctx, buffer.ctx)
 *         if self.ctx is NULL:
 *             raise MemoryError()             # <<<<<<<<<<<<<<
 *         _Node._init_params(self, *args, **kwargs)
 * 
 */
    PyErr_NoMemory(); __PYX_ERR(0, 2411, __pyx_L1_error)

    /* "nodes_def.pyx":2410
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_STREAMEDMAT4, timestamps.ctx, buffer.ctx)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         _Node._init_params(self, *args, **kwargs)
 */
  }

  /* "nodes_def.pyx":2412
 *         if self.ctx is NULL:
 *             raise MemoryError()
 *         _Node._init_params(self, *args, **kwargs)             # <<<<<<<<<<<<<<
 * 
 *         if timebase is not None:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_8pynodegl__Node), __pyx_n_s_init_params); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2412, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2412, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_v_self));
  __pyx_t_4 = PyNumber_Add(__pyx_t_3, __pyx_v_args); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2412, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, __pyx_v_kwargs); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2412, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "nodes_def.pyx":2414
 *         _Node._init_params(self, *args, **kwargs)
 * 
 *         if timebase is not None:             # <<<<<<<<<<<<<<
 *             self.set_timebase(timebase)
 *         if time_anim is not None:
 */
  __pyx_t_1 = (__pyx_v_timebase != Py_None);
  __pyx_t_5 = (__pyx_t_1 != 0);
  if (__pyx_t_5) {

    /* "nodes_def.pyx":2415
 * 
 *         if timebase is not None:
 *             self.set_timebase(timebase)             # <<<<<<<<<<<<<<
 *         if time_anim is not None:
 *             self.set_time_anim(time_anim)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_timebase); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2415, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_2, __pyx_v_timebase) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_timebase);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2415, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "nodes_def.pyx":2414
 *         _Node._init_params(self, *args, **kwargs)
 * 
 *         if timebase is not None:             # <<<<<<<<<<<<<<
 *             self.set_timebase(timebase)
 *         if time_anim is not None:
 */
  }

  /* "nodes_def.pyx":2416
 *         if timebase is not None:
 *             self.set_timebase(timebase)
 *         if time_anim is not None:             # <<<<<<<<<<<<<<
 *             self.set_time_anim(time_anim)
 * 
 */
  __pyx_t_5 = (__pyx_v_time_anim != Py_None);
  __pyx_t_1 = (__pyx_t_5 != 0);
  if (__pyx_t_1) {

    /* "nodes_def.pyx":2417
 *             self.set_timebase(timebase)
 *         if time_anim is not None:
 *             self.set_time_anim(time_anim)             # <<<<<<<<<<<<<<
 * 
 *     def set_timebase(self, tuple timebase):
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_time_anim); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2417, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_2, __pyx_v_time_anim) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_time_anim);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2417, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "nodes_def.pyx":2416
 *         if timebase is not None:
 *             self.set_timebase(timebase)
 *         if time_anim is not None:             # <<<<<<<<<<<<<<
 *             self.set_time_anim(time_anim)
 * 
 */
  }

  /* "nodes_def.pyx":2403
 * cdef class StreamedMat4(_Node):
 * 
 *     def __init__(self, _Node timestamps, _Node buffer, timebase=None, time_anim=None, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         assert timestamps is not None
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pynodegl.StreamedMat4.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":2419
 *             self.set_time_anim(time_anim)
 * 
 *     def set_timebase(self, tuple timebase):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx,
 *                                   "timebase",
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_12StreamedMat4_3set_timebase(PyObject *__pyx_v_self, PyObject *__pyx_v_timebase); /*proto*/
static PyObject *__pyx_pw_8pynodegl_12StreamedMat4_3set_timebase(PyObject *__pyx_v_self, PyObject *__pyx_v_timebase) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_timebase (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_timebase), (&PyTuple_Type), 1, "timebase", 1))) __PYX_ERR(0, 2419, __pyx_L1_error)
  __pyx_r = __pyx_pf_8pynodegl_12StreamedMat4_2set_timebase(((struct __pyx_obj_8pynodegl_StreamedMat4 *)__pyx_v_self), ((PyObject*)__pyx_v_timebase));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_12StreamedMat4_2set_timebase(struct __pyx_obj_8pynodegl_StreamedMat4 *__pyx_v_self, PyObject *__pyx_v_timebase) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  __Pyx_RefNannySetupContext("set_timebase", 0);

  /* "nodes_def.pyx":2420
 * 
 *     def set_timebase(self, tuple timebase):
 *         return ngl_node_param_set(self.ctx,             # <<<<<<<<<<<<<<
 *                                   "timebase",
 *                                   <int>timebase[0],
 */
  __Pyx_XDECREF(__pyx_r);

  /* "nodes_def.pyx":2422
 *         return ngl_node_param_set(self.ctx,
 *                                   "timebase",
 *                                   <int>timebase[0],             # <<<<<<<<<<<<<<
 *                                   <int>timebase[1]);
 * 
 */
  if (unlikely(__pyx_v_timebase == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 2422, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v_timebase, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2422, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2422, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "nodes_def.pyx":2423
 *                                   "timebase",
 *                                   <int>timebase[0],
 *                                   <int>timebase[1]);             # <<<<<<<<<<<<<<
 * 
 *     def set_time_anim(self, _Node time_anim):
 */
  if (unlikely(__pyx_v_timebase == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 2423, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v_timebase, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2423, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2423, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "nodes_def.pyx":2420
 * 
 *     def set_timebase(self, tuple timebase):
 *         return ngl_node_param_set(self.ctx,             # <<<<<<<<<<<<<<
 *                                   "timebase",
 *                                   <int>timebase[0],
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"timebase"), ((int)__pyx_t_2), ((int)__pyx_t_3))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2420, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":2419
 *             self.set_time_anim(time_anim)
 * 
 *     def set_timebase(self, tuple timebase):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx,
 *                                   "timebase",
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.StreamedMat4.set_timebase", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":2425
 *                                   <int>timebase[1]);
 * 
 *     def set_time_anim(self, _Node time_anim):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "time_anim", time_anim.ctx)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_12StreamedMat4_5set_time_anim(PyObject *__pyx_v_self, PyObject *__pyx_v_time_anim); /*proto*/
static PyObject *__pyx_pw_8pynodegl_12StreamedMat4_5set_time_anim(PyObject *__pyx_v_self, PyObject *__pyx_v_time_anim) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_time_anim (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_time_anim), __pyx_ptype_8pynodegl__Node, 1, "time_anim", 0))) __PYX_ERR(0, 2425, __pyx_L1_error)
  __pyx_r = __pyx_pf_8pynodegl_12StreamedMat4_4set_time_anim(((struct __pyx_obj_8pynodegl_StreamedMat4 *)__pyx_v_self), ((struct __pyx_obj_8pynodegl__Node *)__pyx_v_time_anim));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_12StreamedMat4_4set_time_anim(struct __pyx_obj_8pynodegl_StreamedMat4 *__pyx_v_self, struct __pyx_obj_8pynodegl__Node *__pyx_v_time_anim) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("set_time_anim", 0);

  /* "nodes_def.pyx":2426
 * 
 *     def set_time_anim(self, _Node time_anim):
 *         return ngl_node_param_set(self.ctx, "time_anim", time_anim.ctx)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"time_anim"), __pyx_v_time_anim->ctx)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2426, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":2425
 *                                   <int>timebase[1]);
 * 
 *     def set_time_anim(self, _Node time_anim):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "time_anim", time_anim.ctx)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.StreamedMat4.set_time_anim", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_12StreamedMat4_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pynodegl_12StreamedMat4_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_12StreamedMat4_6__reduce_cython__(((struct __pyx_obj_8pynodegl_StreamedMat4 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_12StreamedMat4_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_StreamedMat4 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__173, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.StreamedMat4.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_12StreamedMat4_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8pynodegl_12StreamedMat4_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_12StreamedMat4_8__setstate_cython__(((struct __pyx_obj_8pynodegl_StreamedMat4 *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_12StreamedMat4_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_StreamedMat4 *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__174, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.StreamedMat4.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":2431
 * cdef class StreamedBufferInt(_Node):
 * 
 *     def __init__(self, int count, _Node timestamps, _Node buffer, timebase=None, time_anim=None, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         assert timestamps is not None
 * 
 */

/* Python wrapper */
static int __pyx_pw_8pynodegl_17StreamedBufferInt_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pynodegl_17StreamedBufferInt_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_count;
  struct __pyx_obj_8pynodegl__Node *__pyx_v_timestamps = 0;
  struct __pyx_obj_8pynodegl__Node *__pyx_v_buffer = 0;
  PyObject *__pyx_v_timebase = 0;
  PyObject *__pyx_v_time_anim = 0;
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  __pyx_v_kwargs = PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return -1;
  __Pyx_GOTREF(__pyx_v_kwargs);
  if (PyTuple_GET_SIZE(__pyx_args) > 5) {
    __pyx_v_args = PyTuple_GetSlice(__pyx_args, 5, PyTuple_GET_SIZE(__pyx_args));
    if (unlikely(!__pyx_v_args)) {
      __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
      __Pyx_RefNannyFinishContext();
      return -1;
    }
    __Pyx_GOTREF(__pyx_v_args);
  } else {
    __pyx_v_args = __pyx_empty_tuple; __Pyx_INCREF(__pyx_empty_tuple);
  }
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_count,&__pyx_n_s_timestamps,&__pyx_n_s_buffer,&__pyx_n_s_timebase,&__pyx_n_s_time_anim,0};
    PyObject* values[5] = {0,0,0,0,0};
    values[3] = ((PyObject *)Py_None);
    values[4] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        default:
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_count)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_timestamps)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 3, 5, 1); __PYX_ERR(0, 2431, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_buffer)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 3, 5, 2); __PYX_ERR(0, 2431, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_timebase);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_time_anim);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t used_pos_args = (pos_args < 5) ? pos_args : 5;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_kwargs, values, used_pos_args, "__init__") < 0)) __PYX_ERR(0, 2431, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        default:
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        case  2:
        case  1:
        case  0:
        goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_count = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_count == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2431, __pyx_L3_error)
    __pyx_v_timestamps = ((struct __pyx_obj_8pynodegl__Node *)values[1]);
    __pyx_v_buffer = ((struct __pyx_obj_8pynodegl__Node *)values[2]);
    __pyx_v_timebase = values[3];
    __pyx_v_time_anim = values[4];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 3, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2431, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_args); __pyx_v_args = 0;
  __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
  __Pyx_AddTraceback("pynodegl.StreamedBufferInt.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_timestamps), __pyx_ptype_8pynodegl__Node, 1, "timestamps", 0))) __PYX_ERR(0, 2431, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_buffer), __pyx_ptype_8pynodegl__Node, 1, "buffer", 0))) __PYX_ERR(0, 2431, __pyx_L1_error)
  __pyx_r = __pyx_pf_8pynodegl_17StreamedBufferInt___init__(((struct __pyx_obj_8pynodegl_StreamedBufferInt *)__pyx_v_self), __pyx_v_count, __pyx_v_timestamps, __pyx_v_buffer, __pyx_v_timebase, __pyx_v_time_anim, __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pynodegl_17StreamedBufferInt___init__(struct __pyx_obj_8pynodegl_StreamedBufferInt *__pyx_v_self, int __pyx_v_count, struct __pyx_obj_8pynodegl__Node *__pyx_v_timestamps, struct __pyx_obj_8pynodegl__Node *__pyx_v_buffer, PyObject *__pyx_v_timebase, PyObject *__pyx_v_time_anim, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "nodes_def.pyx":2432
 * 
 *     def __init__(self, int count, _Node timestamps, _Node buffer, timebase=None, time_anim=None, *args, **kwargs):
 *         assert timestamps is not None             # <<<<<<<<<<<<<<
 * 
 *         assert buffer is not None
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = (((PyObject *)__pyx_v_timestamps) != Py_None);
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 2432, __pyx_L1_error)
    }
  }
  #endif

  /* "nodes_def.pyx":2434
 *         assert timestamps is not None
 * 
 *         assert buffer is not None             # <<<<<<<<<<<<<<
 * 
 *         assert self.ctx is NULL
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = (((PyObject *)__pyx_v_buffer) != Py_None);
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 2434, __pyx_L1_error)
    }
  }
  #endif

  /* "nodes_def.pyx":2436
 *         assert buffer is not None
 * 
 *         assert self.ctx is NULL             # <<<<<<<<<<<<<<
 *         self.ctx = ngl_node_create(NGL_NODE_STREAMEDBUFFERINT, count, timestamps.ctx, buffer.ctx)
 *         if self.ctx is NULL:
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!((__pyx_v_self->__pyx_base.ctx == NULL) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 2436, __pyx_L1_error)
    }
  }
  #endif

  /* "nodes_def.pyx":2437
 * 
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_STREAMEDBUFFERINT, count, timestamps.ctx, buffer.ctx)             # <<<<<<<<<<<<<<
 *         if self.ctx is NULL:
 *             raise MemoryError()
 */
  __pyx_v_self->__pyx_base.ctx = ngl_node_create(NGL_NODE_STREAMEDBUFFERINT, __pyx_v_count, __pyx_v_timestamps->ctx, __pyx_v_buffer->ctx);

  /* "nodes_def.pyx":2438
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_STREAMEDBUFFERINT, count, timestamps.ctx, buffer.ctx)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         _Node._init_params(self, *args, **kwargs)
 */
  __pyx_t_1 = ((__pyx_v_self->__pyx_base.ctx == NULL) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "nodes_def.pyx":2439
 *         self.ctx = ngl_node_create(NGL_NODE_STREAMEDBUFFERINT, count, timestamps.ctx, buffer.ctx)
 *         if self.ctx is NULL:
 *             raise MemoryError()             # <<<<<<<<<<<<<<
 *         _Node._init_params(self, *args, **kwargs)
 * 
 */
    PyErr_NoMemory(); __PYX_ERR(0, 2439, __pyx_L1_error)

    /* "nodes_def.pyx":2438
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_STREAMEDBUFFERINT, count, timestamps.ctx, buffer.ctx)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         _Node._init_params(self, *args, **kwargs)
 */
  }

  /* "nodes_def.pyx":2440
 *         if self.ctx is NULL:
 *             raise MemoryError()
 *         _Node._init_params(self, *args, **kwargs)             # <<<<<<<<<<<<<<
 * 
 *         if timebase is not None:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_8pynodegl__Node), __pyx_n_s_init_params); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2440, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2440, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_v_self));
  __pyx_t_4 = PyNumber_Add(__pyx_t_3, __pyx_v_args); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2440, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, __pyx_v_kwargs); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2440, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "nodes_def.pyx":2442
 *         _Node._init_params(self, *args, **kwargs)
 * 
 *         if timebase is not None:             # <<<<<<<<<<<<<<
 *             self.set_timebase(timebase)
 *         if time_anim is not None:
 */
  __pyx_t_1 = (__pyx_v_timebase != Py_None);
  __pyx_t_5 = (__pyx_t_1 != 0);
  if (__pyx_t_5) {

    /* "nodes_def.pyx":2443
 * 
 *         if timebase is not None:
 *             self.set_timebase(timebase)             # <<<<<<<<<<<<<<
 *         if time_anim is not None:
 *             self.set_time_anim(time_anim)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_timebase); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2443, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_2, __pyx_v_timebase) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_timebase);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2443, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "nodes_def.pyx":2442
 *         _Node._init_params(self, *args, **kwargs)
 * 
 *         if timebase is not None:             # <<<<<<<<<<<<<<
 *             self.set_timebase(timebase)
 *         if time_anim is not None:
 */
  }

  /* "nodes_def.pyx":2444
 *         if timebase is not None:
 *             self.set_timebase(timebase)
 *         if time_anim is not None:             # <<<<<<<<<<<<<<
 *             self.set_time_anim(time_anim)
 * 
 */
  __pyx_t_5 = (__pyx_v_time_anim != Py_None);
  __pyx_t_1 = (__pyx_t_5 != 0);
  if (__pyx_t_1) {

    /* "nodes_def.pyx":2445
 *             self.set_timebase(timebase)
 *         if time_anim is not None:
 *             self.set_time_anim(time_anim)             # <<<<<<<<<<<<<<
 * 
 *     def set_timebase(self, tuple timebase):
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_time_anim); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2445, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_2, __pyx_v_time_anim) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_time_anim);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2445, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "nodes_def.pyx":2444
 *         if timebase is not None:
 *             self.set_timebase(timebase)
 *         if time_anim is not None:             # <<<<<<<<<<<<<<
 *             self.set_time_anim(time_anim)
 * 
 */
  }

  /* "nodes_def.pyx":2431
 * cdef class StreamedBufferInt(_Node):
 * 
 *     def __init__(self, int count, _Node timestamps, _Node buffer, timebase=None, time_anim=None, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         assert timestamps is not None
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pynodegl.StreamedBufferInt.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":2447
 *             self.set_time_anim(time_anim)
 * 
 *     def set_timebase(self, tuple timebase):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx,
 *                                   "timebase",
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_17StreamedBufferInt_3set_timebase(PyObject *__pyx_v_self, PyObject *__pyx_v_timebase); /*proto*/
static PyObject *__pyx_pw_8pynodegl_17StreamedBufferInt_3set_timebase(PyObject *__pyx_v_self, PyObject *__pyx_v_timebase) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_timebase (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_timebase), (&PyTuple_Type), 1, "timebase", 1))) __PYX_ERR(0, 2447, __pyx_L1_error)
  __pyx_r = __pyx_pf_8pynodegl_17StreamedBufferInt_2set_timebase(((struct __pyx_obj_8pynodegl_StreamedBufferInt *)__pyx_v_self), ((PyObject*)__pyx_v_timebase));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_17StreamedBufferInt_2set_timebase(struct __pyx_obj_8pynodegl_StreamedBufferInt *__pyx_v_self, PyObject *__pyx_v_timebase) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  __Pyx_RefNannySetupContext("set_timebase", 0);

  /* "nodes_def.pyx":2448
 * 
 *     def set_timebase(self, tuple timebase):
 *         return ngl_node_param_set(self.ctx,             # <<<<<<<<<<<<<<
 *                                   "timebase",
 *                                   <int>timebase[0],
 */
  __Pyx_XDECREF(__pyx_r);

  /* "nodes_def.pyx":2450
 *         return ngl_node_param_set(self.ctx,
 *                                   "timebase",
 *                                   <int>timebase[0],             # <<<<<<<<<<<<<<
 *                                   <int>timebase[1]);
 * 
 */
  if (unlikely(__pyx_v_timebase == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 2450, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v_timebase, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2450, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2450, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "nodes_def.pyx":2451
 *                                   "timebase",
 *                                   <int>timebase[0],
 *                                   <int>timebase[1]);             # <<<<<<<<<<<<<<
 * 
 *     def set_time_anim(self, _Node time_anim):
 */
  if (unlikely(__pyx_v_timebase == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 2451, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v_timebase, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2451, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2451, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "nodes_def.pyx":2448
 * 
 *     def set_timebase(self, tuple timebase):
 *         return ngl_node_param_set(self.ctx,             # <<<<<<<<<<<<<<
 *                                   "timebase",
 *                                   <int>timebase[0],
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"timebase"), ((int)__pyx_t_2), ((int)__pyx_t_3))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2448, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":2447
 *             self.set_time_anim(time_anim)
 * 
 *     def set_timebase(self, tuple timebase):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx,
 *                                   "timebase",
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.StreamedBufferInt.set_timebase", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":2453
 *                                   <int>timebase[1]);
 * 
 *     def set_time_anim(self, _Node time_anim):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "time_anim", time_anim.ctx)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_17StreamedBufferInt_5set_time_anim(PyObject *__pyx_v_self, PyObject *__pyx_v_time_anim); /*proto*/
static PyObject *__pyx_pw_8pynodegl_17StreamedBufferInt_5set_time_anim(PyObject *__pyx_v_self, PyObject *__pyx_v_time_anim) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_time_anim (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_time_anim), __pyx_ptype_8pynodegl__Node, 1, "time_anim", 0))) __PYX_ERR(0, 2453, __pyx_L1_error)
  __pyx_r = __pyx_pf_8pynodegl_17StreamedBufferInt_4set_time_anim(((struct __pyx_obj_8pynodegl_StreamedBufferInt *)__pyx_v_self), ((struct __pyx_obj_8pynodegl__Node *)__pyx_v_time_anim));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_17StreamedBufferInt_4set_time_anim(struct __pyx_obj_8pynodegl_StreamedBufferInt *__pyx_v_self, struct __pyx_obj_8pynodegl__Node *__pyx_v_time_anim) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("set_time_anim", 0);

  /* "nodes_def.pyx":2454
 * 
 *     def set_time_anim(self, _Node time_anim):
 *         return ngl_node_param_set(self.ctx, "time_anim", time_anim.ctx)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"time_anim"), __pyx_v_time_anim->ctx)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2454, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":2453
 *                                   <int>timebase[1]);
 * 
 *     def set_time_anim(self, _Node time_anim):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "time_anim", time_anim.ctx)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.StreamedBufferInt.set_time_anim", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_17StreamedBufferInt_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pynodegl_17StreamedBufferInt_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_17StreamedBufferInt_6__reduce_cython__(((struct __pyx_obj_8pynodegl_StreamedBufferInt *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_17StreamedBufferInt_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_StreamedBufferInt *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__175, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.StreamedBufferInt.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_17StreamedBufferInt_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8pynodegl_17StreamedBufferInt_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_17StreamedBufferInt_8__setstate_cython__(((struct __pyx_obj_8pynodegl_StreamedBufferInt *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_17StreamedBufferInt_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_StreamedBufferInt *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__176, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.StreamedBufferInt.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":2459
 * cdef class StreamedBufferFloat(_Node):
 * 
 *     def __init__(self, int count, _Node timestamps, _Node buffer, timebase=None, time_anim=None, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         assert timestamps is not None
 * 
 */

/* Python wrapper */
static int __pyx_pw_8pynodegl_19StreamedBufferFloat_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pynodegl_19StreamedBufferFloat_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_count;
  struct __pyx_obj_8pynodegl__Node *__pyx_v_timestamps = 0;
  struct __pyx_obj_8pynodegl__Node *__pyx_v_buffer = 0;
  PyObject *__pyx_v_timebase = 0;
  PyObject *__pyx_v_time_anim = 0;
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  __pyx_v_kwargs = PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return -1;
  __Pyx_GOTREF(__pyx_v_kwargs);
  if (PyTuple_GET_SIZE(__pyx_args) > 5) {
    __pyx_v_args = PyTuple_GetSlice(__pyx_args, 5, PyTuple_GET_SIZE(__pyx_args));
    if (unlikely(!__pyx_v_args)) {
      __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
      __Pyx_RefNannyFinishContext();
      return -1;
    }
    __Pyx_GOTREF(__pyx_v_args);
  } else {
    __pyx_v_args = __pyx_empty_tuple; __Pyx_INCREF(__pyx_empty_tuple);
  }
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_count,&__pyx_n_s_timestamps,&__pyx_n_s_buffer,&__pyx_n_s_timebase,&__pyx_n_s_time_anim,0};
    PyObject* values[5] = {0,0,0,0,0};
    values[3] = ((PyObject *)Py_None);
    values[4] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        default:
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_count)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_timestamps)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 3, 5, 1); __PYX_ERR(0, 2459, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_buffer)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 3, 5, 2); __PYX_ERR(0, 2459, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_timebase);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_time_anim);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t used_pos_args = (pos_args < 5) ? pos_args : 5;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_kwargs, values, used_pos_args, "__init__") < 0)) __PYX_ERR(0, 2459, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        default:
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        case  2:
        case  1:
        case  0:
        goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_count = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_count == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2459, __pyx_L3_error)
    __pyx_v_timestamps = ((struct __pyx_obj_8pynodegl__Node *)values[1]);
    __pyx_v_buffer = ((struct __pyx_obj_8pynodegl__Node *)values[2]);
    __pyx_v_timebase = values[3];
    __pyx_v_time_anim = values[4];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 3, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2459, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_args); __pyx_v_args = 0;
  __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
  __Pyx_AddTraceback("pynodegl.StreamedBufferFloat.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_timestamps), __pyx_ptype_8pynodegl__Node, 1, "timestamps", 0))) __PYX_ERR(0, 2459, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_buffer), __pyx_ptype_8pynodegl__Node, 1, "buffer", 0))) __PYX_ERR(0, 2459, __pyx_L1_error)
  __pyx_r = __pyx_pf_8pynodegl_19StreamedBufferFloat___init__(((struct __pyx_obj_8pynodegl_StreamedBufferFloat *)__pyx_v_self), __pyx_v_count, __pyx_v_timestamps, __pyx_v_buffer, __pyx_v_timebase, __pyx_v_time_anim, __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pynodegl_19StreamedBufferFloat___init__(struct __pyx_obj_8pynodegl_StreamedBufferFloat *__pyx_v_self, int __pyx_v_count, struct __pyx_obj_8pynodegl__Node *__pyx_v_timestamps, struct __pyx_obj_8pynodegl__Node *__pyx_v_buffer, PyObject *__pyx_v_timebase, PyObject *__pyx_v_time_anim, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "nodes_def.pyx":2460
 * 
 *     def __init__(self, int count, _Node timestamps, _Node buffer, timebase=None, time_anim=None, *args, **kwargs):
 *         assert timestamps is not None             # <<<<<<<<<<<<<<
 * 
 *         assert buffer is not None
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = (((PyObject *)__pyx_v_timestamps) != Py_None);
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 2460, __pyx_L1_error)
    }
  }
  #endif

  /* "nodes_def.pyx":2462
 *         assert timestamps is not None
 * 
 *         assert buffer is not None             # <<<<<<<<<<<<<<
 * 
 *         assert self.ctx is NULL
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = (((PyObject *)__pyx_v_buffer) != Py_None);
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 2462, __pyx_L1_error)
    }
  }
  #endif

  /* "nodes_def.pyx":2464
 *         assert buffer is not None
 * 
 *         assert self.ctx is NULL             # <<<<<<<<<<<<<<
 *         self.ctx = ngl_node_create(NGL_NODE_STREAMEDBUFFERFLOAT, count, timestamps.ctx, buffer.ctx)
 *         if self.ctx is NULL:
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!((__pyx_v_self->__pyx_base.ctx == NULL) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 2464, __pyx_L1_error)
    }
  }
  #endif

  /* "nodes_def.pyx":2465
 * 
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_STREAMEDBUFFERFLOAT, count, timestamps.ctx, buffer.ctx)             # <<<<<<<<<<<<<<
 *         if self.ctx is NULL:
 *             raise MemoryError()
 */
  __pyx_v_self->__pyx_base.ctx = ngl_node_create(NGL_NODE_STREAMEDBUFFERFLOAT, __pyx_v_count, __pyx_v_timestamps->ctx, __pyx_v_buffer->ctx);

  /* "nodes_def.pyx":2466
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_STREAMEDBUFFERFLOAT, count, timestamps.ctx, buffer.ctx)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         _Node._init_params(self, *args, **kwargs)
 */
  __pyx_t_1 = ((__pyx_v_self->__pyx_base.ctx == NULL) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "nodes_def.pyx":2467
 *         self.ctx = ngl_node_create(NGL_NODE_STREAMEDBUFFERFLOAT, count, timestamps.ctx, buffer.ctx)
 *         if self.ctx is NULL:
 *             raise MemoryError()             # <<<<<<<<<<<<<<
 *         _Node._init_params(self, *args, **kwargs)
 * 
 */
    PyErr_NoMemory(); __PYX_ERR(0, 2467, __pyx_L1_error)

    /* "nodes_def.pyx":2466
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_STREAMEDBUFFERFLOAT, count, timestamps.ctx, buffer.ctx)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         _Node._init_params(self, *args, **kwargs)
 */
  }

  /* "nodes_def.pyx":2468
 *         if self.ctx is NULL:
 *             raise MemoryError()
 *         _Node._init_params(self, *args, **kwargs)             # <<<<<<<<<<<<<<
 * 
 *         if timebase is not None:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_8pynodegl__Node), __pyx_n_s_init_params); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2468, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2468, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_v_self));
  __pyx_t_4 = PyNumber_Add(__pyx_t_3, __pyx_v_args); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2468, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, __pyx_v_kwargs); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2468, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "nodes_def.pyx":2470
 *         _Node._init_params(self, *args, **kwargs)
 * 
 *         if timebase is not None:             # <<<<<<<<<<<<<<
 *             self.set_timebase(timebase)
 *         if time_anim is not None:
 */
  __pyx_t_1 = (__pyx_v_timebase != Py_None);
  __pyx_t_5 = (__pyx_t_1 != 0);
  if (__pyx_t_5) {

    /* "nodes_def.pyx":2471
 * 
 *         if timebase is not None:
 *             self.set_timebase(timebase)             # <<<<<<<<<<<<<<
 *         if time_anim is not None:
 *             self.set_time_anim(time_anim)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_timebase); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2471, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_2, __pyx_v_timebase) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_timebase);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2471, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "nodes_def.pyx":2470
 *         _Node._init_params(self, *args, **kwargs)
 * 
 *         if timebase is not None:             # <<<<<<<<<<<<<<
 *             self.set_timebase(timebase)
 *         if time_anim is not None:
 */
  }

  /* "nodes_def.pyx":2472
 *         if timebase is not None:
 *             self.set_timebase(timebase)
 *         if time_anim is not None:             # <<<<<<<<<<<<<<
 *             self.set_time_anim(time_anim)
 * 
 */
  __pyx_t_5 = (__pyx_v_time_anim != Py_None);
  __pyx_t_1 = (__pyx_t_5 != 0);
  if (__pyx_t_1) {

    /* "nodes_def.pyx":2473
 *             self.set_timebase(timebase)
 *         if time_anim is not None:
 *             self.set_time_anim(time_anim)             # <<<<<<<<<<<<<<
 * 
 *     def set_timebase(self, tuple timebase):
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_time_anim); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2473, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_2, __pyx_v_time_anim) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_time_anim);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2473, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "nodes_def.pyx":2472
 *         if timebase is not None:
 *             self.set_timebase(timebase)
 *         if time_anim is not None:             # <<<<<<<<<<<<<<
 *             self.set_time_anim(time_anim)
 * 
 */
  }

  /* "nodes_def.pyx":2459
 * cdef class StreamedBufferFloat(_Node):
 * 
 *     def __init__(self, int count, _Node timestamps, _Node buffer, timebase=None, time_anim=None, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         assert timestamps is not None
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pynodegl.StreamedBufferFloat.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":2475
 *             self.set_time_anim(time_anim)
 * 
 *     def set_timebase(self, tuple timebase):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx,
 *                                   "timebase",
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_19StreamedBufferFloat_3set_timebase(PyObject *__pyx_v_self, PyObject *__pyx_v_timebase); /*proto*/
static PyObject *__pyx_pw_8pynodegl_19StreamedBufferFloat_3set_timebase(PyObject *__pyx_v_self, PyObject *__pyx_v_timebase) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_timebase (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_timebase), (&PyTuple_Type), 1, "timebase", 1))) __PYX_ERR(0, 2475, __pyx_L1_error)
  __pyx_r = __pyx_pf_8pynodegl_19StreamedBufferFloat_2set_timebase(((struct __pyx_obj_8pynodegl_StreamedBufferFloat *)__pyx_v_self), ((PyObject*)__pyx_v_timebase));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_19StreamedBufferFloat_2set_timebase(struct __pyx_obj_8pynodegl_StreamedBufferFloat *__pyx_v_self, PyObject *__pyx_v_timebase) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  __Pyx_RefNannySetupContext("set_timebase", 0);

  /* "nodes_def.pyx":2476
 * 
 *     def set_timebase(self, tuple timebase):
 *         return ngl_node_param_set(self.ctx,             # <<<<<<<<<<<<<<
 *                                   "timebase",
 *                                   <int>timebase[0],
 */
  __Pyx_XDECREF(__pyx_r);

  /* "nodes_def.pyx":2478
 *         return ngl_node_param_set(self.ctx,
 *                                   "timebase",
 *                                   <int>timebase[0],             # <<<<<<<<<<<<<<
 *                                   <int>timebase[1]);
 * 
 */
  if (unlikely(__pyx_v_timebase == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 2478, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v_timebase, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2478, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2478, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "nodes_def.pyx":2479
 *                                   "timebase",
 *                                   <int>timebase[0],
 *                                   <int>timebase[1]);             # <<<<<<<<<<<<<<
 * 
 *     def set_time_anim(self, _Node time_anim):
 */
  if (unlikely(__pyx_v_timebase == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 2479, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v_timebase, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2479, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2479, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "nodes_def.pyx":2476
 * 
 *     def set_timebase(self, tuple timebase):
 *         return ngl_node_param_set(self.ctx,             # <<<<<<<<<<<<<<
 *                                   "timebase",
 *                                   <int>timebase[0],
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"timebase"), ((int)__pyx_t_2), ((int)__pyx_t_3))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2476, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":2475
 *             self.set_time_anim(time_anim)
 * 
 *     def set_timebase(self, tuple timebase):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx,
 *                                   "timebase",
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.StreamedBufferFloat.set_timebase", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":2481
 *                                   <int>timebase[1]);
 * 
 *     def set_time_anim(self, _Node time_anim):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "time_anim", time_anim.ctx)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_19StreamedBufferFloat_5set_time_anim(PyObject *__pyx_v_self, PyObject *__pyx_v_time_anim); /*proto*/
static PyObject *__pyx_pw_8pynodegl_19StreamedBufferFloat_5set_time_anim(PyObject *__pyx_v_self, PyObject *__pyx_v_time_anim) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_time_anim (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_time_anim), __pyx_ptype_8pynodegl__Node, 1, "time_anim", 0))) __PYX_ERR(0, 2481, __pyx_L1_error)
  __pyx_r = __pyx_pf_8pynodegl_19StreamedBufferFloat_4set_time_anim(((struct __pyx_obj_8pynodegl_StreamedBufferFloat *)__pyx_v_self), ((struct __pyx_obj_8pynodegl__Node *)__pyx_v_time_anim));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_19StreamedBufferFloat_4set_time_anim(struct __pyx_obj_8pynodegl_StreamedBufferFloat *__pyx_v_self, struct __pyx_obj_8pynodegl__Node *__pyx_v_time_anim) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("set_time_anim", 0);

  /* "nodes_def.pyx":2482
 * 
 *     def set_time_anim(self, _Node time_anim):
 *         return ngl_node_param_set(self.ctx, "time_anim", time_anim.ctx)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"time_anim"), __pyx_v_time_anim->ctx)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2482, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":2481
 *                                   <int>timebase[1]);
 * 
 *     def set_time_anim(self, _Node time_anim):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "time_anim", time_anim.ctx)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.StreamedBufferFloat.set_time_anim", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_19StreamedBufferFloat_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pynodegl_19StreamedBufferFloat_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_19StreamedBufferFloat_6__reduce_cython__(((struct __pyx_obj_8pynodegl_StreamedBufferFloat *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_19StreamedBufferFloat_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_StreamedBufferFloat *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__177, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.StreamedBufferFloat.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_19StreamedBufferFloat_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8pynodegl_19StreamedBufferFloat_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_19StreamedBufferFloat_8__setstate_cython__(((struct __pyx_obj_8pynodegl_StreamedBufferFloat *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_19StreamedBufferFloat_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_StreamedBufferFloat *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__178, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.StreamedBufferFloat.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":2487
 * cdef class StreamedBufferVec2(_Node):
 * 
 *     def __init__(self, int count, _Node timestamps, _Node buffer, timebase=None, time_anim=None, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         assert timestamps is not None
 * 
 */

/* Python wrapper */
static int __pyx_pw_8pynodegl_18StreamedBufferVec2_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pynodegl_18StreamedBufferVec2_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_count;
  struct __pyx_obj_8pynodegl__Node *__pyx_v_timestamps = 0;
  struct __pyx_obj_8pynodegl__Node *__pyx_v_buffer = 0;
  PyObject *__pyx_v_timebase = 0;
  PyObject *__pyx_v_time_anim = 0;
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  __pyx_v_kwargs = PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return -1;
  __Pyx_GOTREF(__pyx_v_kwargs);
  if (PyTuple_GET_SIZE(__pyx_args) > 5) {
    __pyx_v_args = PyTuple_GetSlice(__pyx_args, 5, PyTuple_GET_SIZE(__pyx_args));
    if (unlikely(!__pyx_v_args)) {
      __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
      __Pyx_RefNannyFinishContext();
      return -1;
    }
    __Pyx_GOTREF(__pyx_v_args);
  } else {
    __pyx_v_args = __pyx_empty_tuple; __Pyx_INCREF(__pyx_empty_tuple);
  }
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_count,&__pyx_n_s_timestamps,&__pyx_n_s_buffer,&__pyx_n_s_timebase,&__pyx_n_s_time_anim,0};
    PyObject* values[5] = {0,0,0,0,0};
    values[3] = ((PyObject *)Py_None);
    values[4] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        default:
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_count)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_timestamps)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 3, 5, 1); __PYX_ERR(0, 2487, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_buffer)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 3, 5, 2); __PYX_ERR(0, 2487, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_timebase);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_time_anim);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t used_pos_args = (pos_args < 5) ? pos_args : 5;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_kwargs, values, used_pos_args, "__init__") < 0)) __PYX_ERR(0, 2487, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        default:
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        case  2:
        case  1:
        case  0:
        goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_count = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_count == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2487, __pyx_L3_error)
    __pyx_v_timestamps = ((struct __pyx_obj_8pynodegl__Node *)values[1]);
    __pyx_v_buffer = ((struct __pyx_obj_8pynodegl__Node *)values[2]);
    __pyx_v_timebase = values[3];
    __pyx_v_time_anim = values[4];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 3, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2487, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_args); __pyx_v_args = 0;
  __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
  __Pyx_AddTraceback("pynodegl.StreamedBufferVec2.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_timestamps), __pyx_ptype_8pynodegl__Node, 1, "timestamps", 0))) __PYX_ERR(0, 2487, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_buffer), __pyx_ptype_8pynodegl__Node, 1, "buffer", 0))) __PYX_ERR(0, 2487, __pyx_L1_error)
  __pyx_r = __pyx_pf_8pynodegl_18StreamedBufferVec2___init__(((struct __pyx_obj_8pynodegl_StreamedBufferVec2 *)__pyx_v_self), __pyx_v_count, __pyx_v_timestamps, __pyx_v_buffer, __pyx_v_timebase, __pyx_v_time_anim, __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pynodegl_18StreamedBufferVec2___init__(struct __pyx_obj_8pynodegl_StreamedBufferVec2 *__pyx_v_self, int __pyx_v_count, struct __pyx_obj_8pynodegl__Node *__pyx_v_timestamps, struct __pyx_obj_8pynodegl__Node *__pyx_v_buffer, PyObject *__pyx_v_timebase, PyObject *__pyx_v_time_anim, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "nodes_def.pyx":2488
 * 
 *     def __init__(self, int count, _Node timestamps, _Node buffer, timebase=None, time_anim=None, *args, **kwargs):
 *         assert timestamps is not None             # <<<<<<<<<<<<<<
 * 
 *         assert buffer is not None
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = (((PyObject *)__pyx_v_timestamps) != Py_None);
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 2488, __pyx_L1_error)
    }
  }
  #endif

  /* "nodes_def.pyx":2490
 *         assert timestamps is not None
 * 
 *         assert buffer is not None             # <<<<<<<<<<<<<<
 * 
 *         assert self.ctx is NULL
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = (((PyObject *)__pyx_v_buffer) != Py_None);
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 2490, __pyx_L1_error)
    }
  }
  #endif

  /* "nodes_def.pyx":2492
 *         assert buffer is not None
 * 
 *         assert self.ctx is NULL             # <<<<<<<<<<<<<<
 *         self.ctx = ngl_node_create(NGL_NODE_STREAMEDBUFFERVEC2, count, timestamps.ctx, buffer.ctx)
 *         if self.ctx is NULL:
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!((__pyx_v_self->__pyx_base.ctx == NULL) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 2492, __pyx_L1_error)
    }
  }
  #endif

  /* "nodes_def.pyx":2493
 * 
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_STREAMEDBUFFERVEC2, count, timestamps.ctx, buffer.ctx)             # <<<<<<<<<<<<<<
 *         if self.ctx is NULL:
 *             raise MemoryError()
 */
  __pyx_v_self->__pyx_base.ctx = ngl_node_create(NGL_NODE_STREAMEDBUFFERVEC2, __pyx_v_count, __pyx_v_timestamps->ctx, __pyx_v_buffer->ctx);

  /* "nodes_def.pyx":2494
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_STREAMEDBUFFERVEC2, count, timestamps.ctx, buffer.ctx)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         _Node._init_params(self, *args, **kwargs)
 */
  __pyx_t_1 = ((__pyx_v_self->__pyx_base.ctx == NULL) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "nodes_def.pyx":2495
 *         self.ctx = ngl_node_create(NGL_NODE_STREAMEDBUFFERVEC2, count, timestamps.ctx, buffer.ctx)
 *         if self.ctx is NULL:
 *             raise MemoryError()             # <<<<<<<<<<<<<<
 *         _Node._init_params(self, *args, **kwargs)
 * 
 */
    PyErr_NoMemory(); __PYX_ERR(0, 2495, __pyx_L1_error)

    /* "nodes_def.pyx":2494
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_STREAMEDBUFFERVEC2, count, timestamps.ctx, buffer.ctx)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         _Node._init_params(self, *args, **kwargs)
 */
  }

  /* "nodes_def.pyx":2496
 *         if self.ctx is NULL:
 *             raise MemoryError()
 *         _Node._init_params(self, *args, **kwargs)             # <<<<<<<<<<<<<<
 * 
 *         if timebase is not None:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_8pynodegl__Node), __pyx_n_s_init_params); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2496, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2496, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_v_self));
  __pyx_t_4 = PyNumber_Add(__pyx_t_3, __pyx_v_args); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2496, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, __pyx_v_kwargs); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2496, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "nodes_def.pyx":2498
 *         _Node._init_params(self, *args, **kwargs)
 * 
 *         if timebase is not None:             # <<<<<<<<<<<<<<
 *             self.set_timebase(timebase)
 *         if time_anim is not None:
 */
  __pyx_t_1 = (__pyx_v_timebase != Py_None);
  __pyx_t_5 = (__pyx_t_1 != 0);
  if (__pyx_t_5) {

    /* "nodes_def.pyx":2499
 * 
 *         if timebase is not None:
 *             self.set_timebase(timebase)             # <<<<<<<<<<<<<<
 *         if time_anim is not None:
 *             self.set_time_anim(time_anim)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_timebase); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2499, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_2, __pyx_v_timebase) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_timebase);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2499, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "nodes_def.pyx":2498
 *         _Node._init_params(self, *args, **kwargs)
 * 
 *         if timebase is not None:             # <<<<<<<<<<<<<<
 *             self.set_timebase(timebase)
 *         if time_anim is not None:
 */
  }

  /* "nodes_def.pyx":2500
 *         if timebase is not None:
 *             self.set_timebase(timebase)
 *         if time_anim is not None:             # <<<<<<<<<<<<<<
 *             self.set_time_anim(time_anim)
 * 
 */
  __pyx_t_5 = (__pyx_v_time_anim != Py_None);
  __pyx_t_1 = (__pyx_t_5 != 0);
  if (__pyx_t_1) {

    /* "nodes_def.pyx":2501
 *             self.set_timebase(timebase)
 *         if time_anim is not None:
 *             self.set_time_anim(time_anim)             # <<<<<<<<<<<<<<
 * 
 *     def set_timebase(self, tuple timebase):
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_time_anim); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2501, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_2, __pyx_v_time_anim) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_time_anim);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2501, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "nodes_def.pyx":2500
 *         if timebase is not None:
 *             self.set_timebase(timebase)
 *         if time_anim is not None:             # <<<<<<<<<<<<<<
 *             self.set_time_anim(time_anim)
 * 
 */
  }

  /* "nodes_def.pyx":2487
 * cdef class StreamedBufferVec2(_Node):
 * 
 *     def __init__(self, int count, _Node timestamps, _Node buffer, timebase=None, time_anim=None, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         assert timestamps is not None
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pynodegl.StreamedBufferVec2.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":2503
 *             self.set_time_anim(time_anim)
 * 
 *     def set_timebase(self, tuple timebase):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx,
 *                                   "timebase",
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_18StreamedBufferVec2_3set_timebase(PyObject *__pyx_v_self, PyObject *__pyx_v_timebase); /*proto*/
static PyObject *__pyx_pw_8pynodegl_18StreamedBufferVec2_3set_timebase(PyObject *__pyx_v_self, PyObject *__pyx_v_timebase) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_timebase (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_timebase), (&PyTuple_Type), 1, "timebase", 1))) __PYX_ERR(0, 2503, __pyx_L1_error)
  __pyx_r = __pyx_pf_8pynodegl_18StreamedBufferVec2_2set_timebase(((struct __pyx_obj_8pynodegl_StreamedBufferVec2 *)__pyx_v_self), ((PyObject*)__pyx_v_timebase));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_18StreamedBufferVec2_2set_timebase(struct __pyx_obj_8pynodegl_StreamedBufferVec2 *__pyx_v_self, PyObject *__pyx_v_timebase) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  __Pyx_RefNannySetupContext("set_timebase", 0);

  /* "nodes_def.pyx":2504
 * 
 *     def set_timebase(self, tuple timebase):
 *         return ngl_node_param_set(self.ctx,             # <<<<<<<<<<<<<<
 *                                   "timebase",
 *                                   <int>timebase[0],
 */
  __Pyx_XDECREF(__pyx_r);

  /* "nodes_def.pyx":2506
 *         return ngl_node_param_set(self.ctx,
 *                                   "timebase",
 *                                   <int>timebase[0],             # <<<<<<<<<<<<<<
 *                                   <int>timebase[1]);
 * 
 */
  if (unlikely(__pyx_v_timebase == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 2506, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v_timebase, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2506, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2506, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "nodes_def.pyx":2507
 *                                   "timebase",
 *                                   <int>timebase[0],
 *                                   <int>timebase[1]);             # <<<<<<<<<<<<<<
 * 
 *     def set_time_anim(self, _Node time_anim):
 */
  if (unlikely(__pyx_v_timebase == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 2507, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v_timebase, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2507, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2507, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "nodes_def.pyx":2504
 * 
 *     def set_timebase(self, tuple timebase):
 *         return ngl_node_param_set(self.ctx,             # <<<<<<<<<<<<<<
 *                                   "timebase",
 *                                   <int>timebase[0],
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"timebase"), ((int)__pyx_t_2), ((int)__pyx_t_3))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2504, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":2503
 *             self.set_time_anim(time_anim)
 * 
 *     def set_timebase(self, tuple timebase):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx,
 *                                   "timebase",
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.StreamedBufferVec2.set_timebase", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":2509
 *                                   <int>timebase[1]);
 * 
 *     def set_time_anim(self, _Node time_anim):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "time_anim", time_anim.ctx)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_18StreamedBufferVec2_5set_time_anim(PyObject *__pyx_v_self, PyObject *__pyx_v_time_anim); /*proto*/
static PyObject *__pyx_pw_8pynodegl_18StreamedBufferVec2_5set_time_anim(PyObject *__pyx_v_self, PyObject *__pyx_v_time_anim) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_time_anim (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_time_anim), __pyx_ptype_8pynodegl__Node, 1, "time_anim", 0))) __PYX_ERR(0, 2509, __pyx_L1_error)
  __pyx_r = __pyx_pf_8pynodegl_18StreamedBufferVec2_4set_time_anim(((struct __pyx_obj_8pynodegl_StreamedBufferVec2 *)__pyx_v_self), ((struct __pyx_obj_8pynodegl__Node *)__pyx_v_time_anim));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_18StreamedBufferVec2_4set_time_anim(struct __pyx_obj_8pynodegl_StreamedBufferVec2 *__pyx_v_self, struct __pyx_obj_8pynodegl__Node *__pyx_v_time_anim) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("set_time_anim", 0);

  /* "nodes_def.pyx":2510
 * 
 *     def set_time_anim(self, _Node time_anim):
 *         return ngl_node_param_set(self.ctx, "time_anim", time_anim.ctx)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"time_anim"), __pyx_v_time_anim->ctx)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2510, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":2509
 *                                   <int>timebase[1]);
 * 
 *     def set_time_anim(self, _Node time_anim):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "time_anim", time_anim.ctx)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.StreamedBufferVec2.set_time_anim", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_18StreamedBufferVec2_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pynodegl_18StreamedBufferVec2_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_18StreamedBufferVec2_6__reduce_cython__(((struct __pyx_obj_8pynodegl_StreamedBufferVec2 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_18StreamedBufferVec2_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_StreamedBufferVec2 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__179, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.StreamedBufferVec2.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_18StreamedBufferVec2_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8pynodegl_18StreamedBufferVec2_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_18StreamedBufferVec2_8__setstate_cython__(((struct __pyx_obj_8pynodegl_StreamedBufferVec2 *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_18StreamedBufferVec2_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_StreamedBufferVec2 *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__180, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.StreamedBufferVec2.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":2515
 * cdef class StreamedBufferVec3(_Node):
 * 
 *     def __init__(self, int count, _Node timestamps, _Node buffer, timebase=None, time_anim=None, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         assert timestamps is not None
 * 
 */

/* Python wrapper */
static int __pyx_pw_8pynodegl_18StreamedBufferVec3_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pynodegl_18StreamedBufferVec3_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_count;
  struct __pyx_obj_8pynodegl__Node *__pyx_v_timestamps = 0;
  struct __pyx_obj_8pynodegl__Node *__pyx_v_buffer = 0;
  PyObject *__pyx_v_timebase = 0;
  PyObject *__pyx_v_time_anim = 0;
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  __pyx_v_kwargs = PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return -1;
  __Pyx_GOTREF(__pyx_v_kwargs);
  if (PyTuple_GET_SIZE(__pyx_args) > 5) {
    __pyx_v_args = PyTuple_GetSlice(__pyx_args, 5, PyTuple_GET_SIZE(__pyx_args));
    if (unlikely(!__pyx_v_args)) {
      __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
      __Pyx_RefNannyFinishContext();
      return -1;
    }
    __Pyx_GOTREF(__pyx_v_args);
  } else {
    __pyx_v_args = __pyx_empty_tuple; __Pyx_INCREF(__pyx_empty_tuple);
  }
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_count,&__pyx_n_s_timestamps,&__pyx_n_s_buffer,&__pyx_n_s_timebase,&__pyx_n_s_time_anim,0};
    PyObject* values[5] = {0,0,0,0,0};
    values[3] = ((PyObject *)Py_None);
    values[4] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        default:
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_count)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_timestamps)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 3, 5, 1); __PYX_ERR(0, 2515, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_buffer)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 3, 5, 2); __PYX_ERR(0, 2515, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_timebase);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_time_anim);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t used_pos_args = (pos_args < 5) ? pos_args : 5;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_kwargs, values, used_pos_args, "__init__") < 0)) __PYX_ERR(0, 2515, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        default:
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        case  2:
        case  1:
        case  0:
        goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_count = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_count == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2515, __pyx_L3_error)
    __pyx_v_timestamps = ((struct __pyx_obj_8pynodegl__Node *)values[1]);
    __pyx_v_buffer = ((struct __pyx_obj_8pynodegl__Node *)values[2]);
    __pyx_v_timebase = values[3];
    __pyx_v_time_anim = values[4];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 3, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2515, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_args); __pyx_v_args = 0;
  __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
  __Pyx_AddTraceback("pynodegl.StreamedBufferVec3.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_timestamps), __pyx_ptype_8pynodegl__Node, 1, "timestamps", 0))) __PYX_ERR(0, 2515, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_buffer), __pyx_ptype_8pynodegl__Node, 1, "buffer", 0))) __PYX_ERR(0, 2515, __pyx_L1_error)
  __pyx_r = __pyx_pf_8pynodegl_18StreamedBufferVec3___init__(((struct __pyx_obj_8pynodegl_StreamedBufferVec3 *)__pyx_v_self), __pyx_v_count, __pyx_v_timestamps, __pyx_v_buffer, __pyx_v_timebase, __pyx_v_time_anim, __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pynodegl_18StreamedBufferVec3___init__(struct __pyx_obj_8pynodegl_StreamedBufferVec3 *__pyx_v_self, int __pyx_v_count, struct __pyx_obj_8pynodegl__Node *__pyx_v_timestamps, struct __pyx_obj_8pynodegl__Node *__pyx_v_buffer, PyObject *__pyx_v_timebase, PyObject *__pyx_v_time_anim, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "nodes_def.pyx":2516
 * 
 *     def __init__(self, int count, _Node timestamps, _Node buffer, timebase=None, time_anim=None, *args, **kwargs):
 *         assert timestamps is not None             # <<<<<<<<<<<<<<
 * 
 *         assert buffer is not None
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = (((PyObject *)__pyx_v_timestamps) != Py_None);
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 2516, __pyx_L1_error)
    }
  }
  #endif

  /* "nodes_def.pyx":2518
 *         assert timestamps is not None
 * 
 *         assert buffer is not None             # <<<<<<<<<<<<<<
 * 
 *         assert self.ctx is NULL
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = (((PyObject *)__pyx_v_buffer) != Py_None);
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 2518, __pyx_L1_error)
    }
  }
  #endif

  /* "nodes_def.pyx":2520
 *         assert buffer is not None
 * 
 *         assert self.ctx is NULL             # <<<<<<<<<<<<<<
 *         self.ctx = ngl_node_create(NGL_NODE_STREAMEDBUFFERVEC3, count, timestamps.ctx, buffer.ctx)
 *         if self.ctx is NULL:
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!((__pyx_v_self->__pyx_base.ctx == NULL) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 2520, __pyx_L1_error)
    }
  }
  #endif

  /* "nodes_def.pyx":2521
 * 
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_STREAMEDBUFFERVEC3, count, timestamps.ctx, buffer.ctx)             # <<<<<<<<<<<<<<
 *         if self.ctx is NULL:
 *             raise MemoryError()
 */
  __pyx_v_self->__pyx_base.ctx = ngl_node_create(NGL_NODE_STREAMEDBUFFERVEC3, __pyx_v_count, __pyx_v_timestamps->ctx, __pyx_v_buffer->ctx);

  /* "nodes_def.pyx":2522
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_STREAMEDBUFFERVEC3, count, timestamps.ctx, buffer.ctx)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         _Node._init_params(self, *args, **kwargs)
 */
  __pyx_t_1 = ((__pyx_v_self->__pyx_base.ctx == NULL) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "nodes_def.pyx":2523
 *         self.ctx = ngl_node_create(NGL_NODE_STREAMEDBUFFERVEC3, count, timestamps.ctx, buffer.ctx)
 *         if self.ctx is NULL:
 *             raise MemoryError()             # <<<<<<<<<<<<<<
 *         _Node._init_params(self, *args, **kwargs)
 * 
 */
    PyErr_NoMemory(); __PYX_ERR(0, 2523, __pyx_L1_error)

    /* "nodes_def.pyx":2522
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_STREAMEDBUFFERVEC3, count, timestamps.ctx, buffer.ctx)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         _Node._init_params(self, *args, **kwargs)
 */
  }

  /* "nodes_def.pyx":2524
 *         if self.ctx is NULL:
 *             raise MemoryError()
 *         _Node._init_params(self, *args, **kwargs)             # <<<<<<<<<<<<<<
 * 
 *         if timebase is not None:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_8pynodegl__Node), __pyx_n_s_init_params); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2524, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2524, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_v_self));
  __pyx_t_4 = PyNumber_Add(__pyx_t_3, __pyx_v_args); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2524, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, __pyx_v_kwargs); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2524, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "nodes_def.pyx":2526
 *         _Node._init_params(self, *args, **kwargs)
 * 
 *         if timebase is not None:             # <<<<<<<<<<<<<<
 *             self.set_timebase(timebase)
 *         if time_anim is not None:
 */
  __pyx_t_1 = (__pyx_v_timebase != Py_None);
  __pyx_t_5 = (__pyx_t_1 != 0);
  if (__pyx_t_5) {

    /* "nodes_def.pyx":2527
 * 
 *         if timebase is not None:
 *             self.set_timebase(timebase)             # <<<<<<<<<<<<<<
 *         if time_anim is not None:
 *             self.set_time_anim(time_anim)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_timebase); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2527, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_2, __pyx_v_timebase) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_timebase);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2527, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "nodes_def.pyx":2526
 *         _Node._init_params(self, *args, **kwargs)
 * 
 *         if timebase is not None:             # <<<<<<<<<<<<<<
 *             self.set_timebase(timebase)
 *         if time_anim is not None:
 */
  }

  /* "nodes_def.pyx":2528
 *         if timebase is not None:
 *             self.set_timebase(timebase)
 *         if time_anim is not None:             # <<<<<<<<<<<<<<
 *             self.set_time_anim(time_anim)
 * 
 */
  __pyx_t_5 = (__pyx_v_time_anim != Py_None);
  __pyx_t_1 = (__pyx_t_5 != 0);
  if (__pyx_t_1) {

    /* "nodes_def.pyx":2529
 *             self.set_timebase(timebase)
 *         if time_anim is not None:
 *             self.set_time_anim(time_anim)             # <<<<<<<<<<<<<<
 * 
 *     def set_timebase(self, tuple timebase):
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_time_anim); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2529, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_2, __pyx_v_time_anim) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_time_anim);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2529, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "nodes_def.pyx":2528
 *         if timebase is not None:
 *             self.set_timebase(timebase)
 *         if time_anim is not None:             # <<<<<<<<<<<<<<
 *             self.set_time_anim(time_anim)
 * 
 */
  }

  /* "nodes_def.pyx":2515
 * cdef class StreamedBufferVec3(_Node):
 * 
 *     def __init__(self, int count, _Node timestamps, _Node buffer, timebase=None, time_anim=None, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         assert timestamps is not None
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pynodegl.StreamedBufferVec3.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":2531
 *             self.set_time_anim(time_anim)
 * 
 *     def set_timebase(self, tuple timebase):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx,
 *                                   "timebase",
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_18StreamedBufferVec3_3set_timebase(PyObject *__pyx_v_self, PyObject *__pyx_v_timebase); /*proto*/
static PyObject *__pyx_pw_8pynodegl_18StreamedBufferVec3_3set_timebase(PyObject *__pyx_v_self, PyObject *__pyx_v_timebase) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_timebase (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_timebase), (&PyTuple_Type), 1, "timebase", 1))) __PYX_ERR(0, 2531, __pyx_L1_error)
  __pyx_r = __pyx_pf_8pynodegl_18StreamedBufferVec3_2set_timebase(((struct __pyx_obj_8pynodegl_StreamedBufferVec3 *)__pyx_v_self), ((PyObject*)__pyx_v_timebase));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_18StreamedBufferVec3_2set_timebase(struct __pyx_obj_8pynodegl_StreamedBufferVec3 *__pyx_v_self, PyObject *__pyx_v_timebase) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  __Pyx_RefNannySetupContext("set_timebase", 0);

  /* "nodes_def.pyx":2532
 * 
 *     def set_timebase(self, tuple timebase):
 *         return ngl_node_param_set(self.ctx,             # <<<<<<<<<<<<<<
 *                                   "timebase",
 *                                   <int>timebase[0],
 */
  __Pyx_XDECREF(__pyx_r);

  /* "nodes_def.pyx":2534
 *         return ngl_node_param_set(self.ctx,
 *                                   "timebase",
 *                                   <int>timebase[0],             # <<<<<<<<<<<<<<
 *                                   <int>timebase[1]);
 * 
 */
  if (unlikely(__pyx_v_timebase == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 2534, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v_timebase, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2534, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2534, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "nodes_def.pyx":2535
 *                                   "timebase",
 *                                   <int>timebase[0],
 *                                   <int>timebase[1]);             # <<<<<<<<<<<<<<
 * 
 *     def set_time_anim(self, _Node time_anim):
 */
  if (unlikely(__pyx_v_timebase == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 2535, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v_timebase, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2535, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2535, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "nodes_def.pyx":2532
 * 
 *     def set_timebase(self, tuple timebase):
 *         return ngl_node_param_set(self.ctx,             # <<<<<<<<<<<<<<
 *                                   "timebase",
 *                                   <int>timebase[0],
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"timebase"), ((int)__pyx_t_2), ((int)__pyx_t_3))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2532, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":2531
 *             self.set_time_anim(time_anim)
 * 
 *     def set_timebase(self, tuple timebase):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx,
 *                                   "timebase",
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.StreamedBufferVec3.set_timebase", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":2537
 *                                   <int>timebase[1]);
 * 
 *     def set_time_anim(self, _Node time_anim):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "time_anim", time_anim.ctx)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_18StreamedBufferVec3_5set_time_anim(PyObject *__pyx_v_self, PyObject *__pyx_v_time_anim); /*proto*/
static PyObject *__pyx_pw_8pynodegl_18StreamedBufferVec3_5set_time_anim(PyObject *__pyx_v_self, PyObject *__pyx_v_time_anim) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_time_anim (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_time_anim), __pyx_ptype_8pynodegl__Node, 1, "time_anim", 0))) __PYX_ERR(0, 2537, __pyx_L1_error)
  __pyx_r = __pyx_pf_8pynodegl_18StreamedBufferVec3_4set_time_anim(((struct __pyx_obj_8pynodegl_StreamedBufferVec3 *)__pyx_v_self), ((struct __pyx_obj_8pynodegl__Node *)__pyx_v_time_anim));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_18StreamedBufferVec3_4set_time_anim(struct __pyx_obj_8pynodegl_StreamedBufferVec3 *__pyx_v_self, struct __pyx_obj_8pynodegl__Node *__pyx_v_time_anim) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("set_time_anim", 0);

  /* "nodes_def.pyx":2538
 * 
 *     def set_time_anim(self, _Node time_anim):
 *         return ngl_node_param_set(self.ctx, "time_anim", time_anim.ctx)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"time_anim"), __pyx_v_time_anim->ctx)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2538, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":2537
 *                                   <int>timebase[1]);
 * 
 *     def set_time_anim(self, _Node time_anim):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "time_anim", time_anim.ctx)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.StreamedBufferVec3.set_time_anim", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_18StreamedBufferVec3_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pynodegl_18StreamedBufferVec3_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_18StreamedBufferVec3_6__reduce_cython__(((struct __pyx_obj_8pynodegl_StreamedBufferVec3 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_18StreamedBufferVec3_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_StreamedBufferVec3 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__181, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.StreamedBufferVec3.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_18StreamedBufferVec3_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8pynodegl_18StreamedBufferVec3_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_18StreamedBufferVec3_8__setstate_cython__(((struct __pyx_obj_8pynodegl_StreamedBufferVec3 *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_18StreamedBufferVec3_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_StreamedBufferVec3 *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__182, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.StreamedBufferVec3.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":2543
 * cdef class StreamedBufferVec4(_Node):
 * 
 *     def __init__(self, int count, _Node timestamps, _Node buffer, timebase=None, time_anim=None, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         assert timestamps is not None
 * 
 */

/* Python wrapper */
static int __pyx_pw_8pynodegl_18StreamedBufferVec4_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pynodegl_18StreamedBufferVec4_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_count;
  struct __pyx_obj_8pynodegl__Node *__pyx_v_timestamps = 0;
  struct __pyx_obj_8pynodegl__Node *__pyx_v_buffer = 0;
  PyObject *__pyx_v_timebase = 0;
  PyObject *__pyx_v_time_anim = 0;
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  __pyx_v_kwargs = PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return -1;
  __Pyx_GOTREF(__pyx_v_kwargs);
  if (PyTuple_GET_SIZE(__pyx_args) > 5) {
    __pyx_v_args = PyTuple_GetSlice(__pyx_args, 5, PyTuple_GET_SIZE(__pyx_args));
    if (unlikely(!__pyx_v_args)) {
      __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
      __Pyx_RefNannyFinishContext();
      return -1;
    }
    __Pyx_GOTREF(__pyx_v_args);
  } else {
    __pyx_v_args = __pyx_empty_tuple; __Pyx_INCREF(__pyx_empty_tuple);
  }
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_count,&__pyx_n_s_timestamps,&__pyx_n_s_buffer,&__pyx_n_s_timebase,&__pyx_n_s_time_anim,0};
    PyObject* values[5] = {0,0,0,0,0};
    values[3] = ((PyObject *)Py_None);
    values[4] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        default:
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_count)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_timestamps)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 3, 5, 1); __PYX_ERR(0, 2543, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_buffer)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 3, 5, 2); __PYX_ERR(0, 2543, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_timebase);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_time_anim);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t used_pos_args = (pos_args < 5) ? pos_args : 5;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_kwargs, values, used_pos_args, "__init__") < 0)) __PYX_ERR(0, 2543, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        default:
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        case  2:
        case  1:
        case  0:
        goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_count = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_count == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2543, __pyx_L3_error)
    __pyx_v_timestamps = ((struct __pyx_obj_8pynodegl__Node *)values[1]);
    __pyx_v_buffer = ((struct __pyx_obj_8pynodegl__Node *)values[2]);
    __pyx_v_timebase = values[3];
    __pyx_v_time_anim = values[4];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 3, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2543, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_args); __pyx_v_args = 0;
  __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
  __Pyx_AddTraceback("pynodegl.StreamedBufferVec4.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_timestamps), __pyx_ptype_8pynodegl__Node, 1, "timestamps", 0))) __PYX_ERR(0, 2543, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_buffer), __pyx_ptype_8pynodegl__Node, 1, "buffer", 0))) __PYX_ERR(0, 2543, __pyx_L1_error)
  __pyx_r = __pyx_pf_8pynodegl_18StreamedBufferVec4___init__(((struct __pyx_obj_8pynodegl_StreamedBufferVec4 *)__pyx_v_self), __pyx_v_count, __pyx_v_timestamps, __pyx_v_buffer, __pyx_v_timebase, __pyx_v_time_anim, __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pynodegl_18StreamedBufferVec4___init__(struct __pyx_obj_8pynodegl_StreamedBufferVec4 *__pyx_v_self, int __pyx_v_count, struct __pyx_obj_8pynodegl__Node *__pyx_v_timestamps, struct __pyx_obj_8pynodegl__Node *__pyx_v_buffer, PyObject *__pyx_v_timebase, PyObject *__pyx_v_time_anim, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "nodes_def.pyx":2544
 * 
 *     def __init__(self, int count, _Node timestamps, _Node buffer, timebase=None, time_anim=None, *args, **kwargs):
 *         assert timestamps is not None             # <<<<<<<<<<<<<<
 * 
 *         assert buffer is not None
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = (((PyObject *)__pyx_v_timestamps) != Py_None);
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 2544, __pyx_L1_error)
    }
  }
  #endif

  /* "nodes_def.pyx":2546
 *         assert timestamps is not None
 * 
 *         assert buffer is not None             # <<<<<<<<<<<<<<
 * 
 *         assert self.ctx is NULL
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = (((PyObject *)__pyx_v_buffer) != Py_None);
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 2546, __pyx_L1_error)
    }
  }
  #endif

  /* "nodes_def.pyx":2548
 *         assert buffer is not None
 * 
 *         assert self.ctx is NULL             # <<<<<<<<<<<<<<
 *         self.ctx = ngl_node_create(NGL_NODE_STREAMEDBUFFERVEC4, count, timestamps.ctx, buffer.ctx)
 *         if self.ctx is NULL:
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!((__pyx_v_self->__pyx_base.ctx == NULL) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 2548, __pyx_L1_error)
    }
  }
  #endif

  /* "nodes_def.pyx":2549
 * 
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_STREAMEDBUFFERVEC4, count, timestamps.ctx, buffer.ctx)             # <<<<<<<<<<<<<<
 *         if self.ctx is NULL:
 *             raise MemoryError()
 */
  __pyx_v_self->__pyx_base.ctx = ngl_node_create(NGL_NODE_STREAMEDBUFFERVEC4, __pyx_v_count, __pyx_v_timestamps->ctx, __pyx_v_buffer->ctx);

  /* "nodes_def.pyx":2550
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_STREAMEDBUFFERVEC4, count, timestamps.ctx, buffer.ctx)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         _Node._init_params(self, *args, **kwargs)
 */
  __pyx_t_1 = ((__pyx_v_self->__pyx_base.ctx == NULL) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "nodes_def.pyx":2551
 *         self.ctx = ngl_node_create(NGL_NODE_STREAMEDBUFFERVEC4, count, timestamps.ctx, buffer.ctx)
 *         if self.ctx is NULL:
 *             raise MemoryError()             # <<<<<<<<<<<<<<
 *         _Node._init_params(self, *args, **kwargs)
 * 
 */
    PyErr_NoMemory(); __PYX_ERR(0, 2551, __pyx_L1_error)

    /* "nodes_def.pyx":2550
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_STREAMEDBUFFERVEC4, count, timestamps.ctx, buffer.ctx)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         _Node._init_params(self, *args, **kwargs)
 */
  }

  /* "nodes_def.pyx":2552
 *         if self.ctx is NULL:
 *             raise MemoryError()
 *         _Node._init_params(self, *args, **kwargs)             # <<<<<<<<<<<<<<
 * 
 *         if timebase is not None:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_8pynodegl__Node), __pyx_n_s_init_params); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2552, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2552, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_v_self));
  __pyx_t_4 = PyNumber_Add(__pyx_t_3, __pyx_v_args); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2552, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, __pyx_v_kwargs); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2552, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "nodes_def.pyx":2554
 *         _Node._init_params(self, *args, **kwargs)
 * 
 *         if timebase is not None:             # <<<<<<<<<<<<<<
 *             self.set_timebase(timebase)
 *         if time_anim is not None:
 */
  __pyx_t_1 = (__pyx_v_timebase != Py_None);
  __pyx_t_5 = (__pyx_t_1 != 0);
  if (__pyx_t_5) {

    /* "nodes_def.pyx":2555
 * 
 *         if timebase is not None:
 *             self.set_timebase(timebase)             # <<<<<<<<<<<<<<
 *         if time_anim is not None:
 *             self.set_time_anim(time_anim)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_timebase); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2555, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_2, __pyx_v_timebase) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_timebase);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2555, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "nodes_def.pyx":2554
 *         _Node._init_params(self, *args, **kwargs)
 * 
 *         if timebase is not None:             # <<<<<<<<<<<<<<
 *             self.set_timebase(timebase)
 *         if time_anim is not None:
 */
  }

  /* "nodes_def.pyx":2556
 *         if timebase is not None:
 *             self.set_timebase(timebase)
 *         if time_anim is not None:             # <<<<<<<<<<<<<<
 *             self.set_time_anim(time_anim)
 * 
 */
  __pyx_t_5 = (__pyx_v_time_anim != Py_None);
  __pyx_t_1 = (__pyx_t_5 != 0);
  if (__pyx_t_1) {

    /* "nodes_def.pyx":2557
 *             self.set_timebase(timebase)
 *         if time_anim is not None:
 *             self.set_time_anim(time_anim)             # <<<<<<<<<<<<<<
 * 
 *     def set_timebase(self, tuple timebase):
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_time_anim); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2557, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_2, __pyx_v_time_anim) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_time_anim);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2557, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "nodes_def.pyx":2556
 *         if timebase is not None:
 *             self.set_timebase(timebase)
 *         if time_anim is not None:             # <<<<<<<<<<<<<<
 *             self.set_time_anim(time_anim)
 * 
 */
  }

  /* "nodes_def.pyx":2543
 * cdef class StreamedBufferVec4(_Node):
 * 
 *     def __init__(self, int count, _Node timestamps, _Node buffer, timebase=None, time_anim=None, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         assert timestamps is not None
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pynodegl.StreamedBufferVec4.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":2559
 *             self.set_time_anim(time_anim)
 * 
 *     def set_timebase(self, tuple timebase):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx,
 *                                   "timebase",
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_18StreamedBufferVec4_3set_timebase(PyObject *__pyx_v_self, PyObject *__pyx_v_timebase); /*proto*/
static PyObject *__pyx_pw_8pynodegl_18StreamedBufferVec4_3set_timebase(PyObject *__pyx_v_self, PyObject *__pyx_v_timebase) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_timebase (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_timebase), (&PyTuple_Type), 1, "timebase", 1))) __PYX_ERR(0, 2559, __pyx_L1_error)
  __pyx_r = __pyx_pf_8pynodegl_18StreamedBufferVec4_2set_timebase(((struct __pyx_obj_8pynodegl_StreamedBufferVec4 *)__pyx_v_self), ((PyObject*)__pyx_v_timebase));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_18StreamedBufferVec4_2set_timebase(struct __pyx_obj_8pynodegl_StreamedBufferVec4 *__pyx_v_self, PyObject *__pyx_v_timebase) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  __Pyx_RefNannySetupContext("set_timebase", 0);

  /* "nodes_def.pyx":2560
 * 
 *     def set_timebase(self, tuple timebase):
 *         return ngl_node_param_set(self.ctx,             # <<<<<<<<<<<<<<
 *                                   "timebase",
 *                                   <int>timebase[0],
 */
  __Pyx_XDECREF(__pyx_r);

  /* "nodes_def.pyx":2562
 *         return ngl_node_param_set(self.ctx,
 *                                   "timebase",
 *                                   <int>timebase[0],             # <<<<<<<<<<<<<<
 *                                   <int>timebase[1]);
 * 
 */
  if (unlikely(__pyx_v_timebase == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 2562, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v_timebase, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2562, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2562, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "nodes_def.pyx":2563
 *                                   "timebase",
 *                                   <int>timebase[0],
 *                                   <int>timebase[1]);             # <<<<<<<<<<<<<<
 * 
 *     def set_time_anim(self, _Node time_anim):
 */
  if (unlikely(__pyx_v_timebase == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 2563, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v_timebase, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2563, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2563, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "nodes_def.pyx":2560
 * 
 *     def set_timebase(self, tuple timebase):
 *         return ngl_node_param_set(self.ctx,             # <<<<<<<<<<<<<<
 *                                   "timebase",
 *                                   <int>timebase[0],
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"timebase"), ((int)__pyx_t_2), ((int)__pyx_t_3))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2560, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":2559
 *             self.set_time_anim(time_anim)
 * 
 *     def set_timebase(self, tuple timebase):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx,
 *                                   "timebase",
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.StreamedBufferVec4.set_timebase", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":2565
 *                                   <int>timebase[1]);
 * 
 *     def set_time_anim(self, _Node time_anim):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "time_anim", time_anim.ctx)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_18StreamedBufferVec4_5set_time_anim(PyObject *__pyx_v_self, PyObject *__pyx_v_time_anim); /*proto*/
static PyObject *__pyx_pw_8pynodegl_18StreamedBufferVec4_5set_time_anim(PyObject *__pyx_v_self, PyObject *__pyx_v_time_anim) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_time_anim (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_time_anim), __pyx_ptype_8pynodegl__Node, 1, "time_anim", 0))) __PYX_ERR(0, 2565, __pyx_L1_error)
  __pyx_r = __pyx_pf_8pynodegl_18StreamedBufferVec4_4set_time_anim(((struct __pyx_obj_8pynodegl_StreamedBufferVec4 *)__pyx_v_self), ((struct __pyx_obj_8pynodegl__Node *)__pyx_v_time_anim));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_18StreamedBufferVec4_4set_time_anim(struct __pyx_obj_8pynodegl_StreamedBufferVec4 *__pyx_v_self, struct __pyx_obj_8pynodegl__Node *__pyx_v_time_anim) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("set_time_anim", 0);

  /* "nodes_def.pyx":2566
 * 
 *     def set_time_anim(self, _Node time_anim):
 *         return ngl_node_param_set(self.ctx, "time_anim", time_anim.ctx)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"time_anim"), __pyx_v_time_anim->ctx)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2566, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":2565
 *                                   <int>timebase[1]);
 * 
 *     def set_time_anim(self, _Node time_anim):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "time_anim", time_anim.ctx)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.StreamedBufferVec4.set_time_anim", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_18StreamedBufferVec4_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pynodegl_18StreamedBufferVec4_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_18StreamedBufferVec4_6__reduce_cython__(((struct __pyx_obj_8pynodegl_StreamedBufferVec4 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_18StreamedBufferVec4_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_StreamedBufferVec4 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__183, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.StreamedBufferVec4.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_18StreamedBufferVec4_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8pynodegl_18StreamedBufferVec4_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_18StreamedBufferVec4_8__setstate_cython__(((struct __pyx_obj_8pynodegl_StreamedBufferVec4 *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_18StreamedBufferVec4_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_StreamedBufferVec4 *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__184, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.StreamedBufferVec4.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":2571
 * cdef class StreamedBufferMat4(_Node):
 * 
 *     def __init__(self, int count, _Node timestamps, _Node buffer, timebase=None, time_anim=None, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         assert timestamps is not None
 * 
 */

/* Python wrapper */
static int __pyx_pw_8pynodegl_18StreamedBufferMat4_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pynodegl_18StreamedBufferMat4_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_count;
  struct __pyx_obj_8pynodegl__Node *__pyx_v_timestamps = 0;
  struct __pyx_obj_8pynodegl__Node *__pyx_v_buffer = 0;
  PyObject *__pyx_v_timebase = 0;
  PyObject *__pyx_v_time_anim = 0;
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  __pyx_v_kwargs = PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return -1;
  __Pyx_GOTREF(__pyx_v_kwargs);
  if (PyTuple_GET_SIZE(__pyx_args) > 5) {
    __pyx_v_args = PyTuple_GetSlice(__pyx_args, 5, PyTuple_GET_SIZE(__pyx_args));
    if (unlikely(!__pyx_v_args)) {
      __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
      __Pyx_RefNannyFinishContext();
      return -1;
    }
    __Pyx_GOTREF(__pyx_v_args);
  } else {
    __pyx_v_args = __pyx_empty_tuple; __Pyx_INCREF(__pyx_empty_tuple);
  }
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_count,&__pyx_n_s_timestamps,&__pyx_n_s_buffer,&__pyx_n_s_timebase,&__pyx_n_s_time_anim,0};
    PyObject* values[5] = {0,0,0,0,0};
    values[3] = ((PyObject *)Py_None);
    values[4] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        default:
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_count)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_timestamps)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 3, 5, 1); __PYX_ERR(0, 2571, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_buffer)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 3, 5, 2); __PYX_ERR(0, 2571, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_timebase);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_time_anim);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t used_pos_args = (pos_args < 5) ? pos_args : 5;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_kwargs, values, used_pos_args, "__init__") < 0)) __PYX_ERR(0, 2571, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        default:
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        case  2:
        case  1:
        case  0:
        goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_count = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_count == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2571, __pyx_L3_error)
    __pyx_v_timestamps = ((struct __pyx_obj_8pynodegl__Node *)values[1]);
    __pyx_v_buffer = ((struct __pyx_obj_8pynodegl__Node *)values[2]);
    __pyx_v_timebase = values[3];
    __pyx_v_time_anim = values[4];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 3, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2571, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_args); __pyx_v_args = 0;
  __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
  __Pyx_AddTraceback("pynodegl.StreamedBufferMat4.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_timestamps), __pyx_ptype_8pynodegl__Node, 1, "timestamps", 0))) __PYX_ERR(0, 2571, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_buffer), __pyx_ptype_8pynodegl__Node, 1, "buffer", 0))) __PYX_ERR(0, 2571, __pyx_L1_error)
  __pyx_r = __pyx_pf_8pynodegl_18StreamedBufferMat4___init__(((struct __pyx_obj_8pynodegl_StreamedBufferMat4 *)__pyx_v_self), __pyx_v_count, __pyx_v_timestamps, __pyx_v_buffer, __pyx_v_timebase, __pyx_v_time_anim, __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pynodegl_18StreamedBufferMat4___init__(struct __pyx_obj_8pynodegl_StreamedBufferMat4 *__pyx_v_self, int __pyx_v_count, struct __pyx_obj_8pynodegl__Node *__pyx_v_timestamps, struct __pyx_obj_8pynodegl__Node *__pyx_v_buffer, PyObject *__pyx_v_timebase, PyObject *__pyx_v_time_anim, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "nodes_def.pyx":2572
 * 
 *     def __init__(self, int count, _Node timestamps, _Node buffer, timebase=None, time_anim=None, *args, **kwargs):
 *         assert timestamps is not None             # <<<<<<<<<<<<<<
 * 
 *         assert buffer is not None
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = (((PyObject *)__pyx_v_timestamps) != Py_None);
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 2572, __pyx_L1_error)
    }
  }
  #endif

  /* "nodes_def.pyx":2574
 *         assert timestamps is not None
 * 
 *         assert buffer is not None             # <<<<<<<<<<<<<<
 * 
 *         assert self.ctx is NULL
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = (((PyObject *)__pyx_v_buffer) != Py_None);
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 2574, __pyx_L1_error)
    }
  }
  #endif

  /* "nodes_def.pyx":2576
 *         assert buffer is not None
 * 
 *         assert self.ctx is NULL             # <<<<<<<<<<<<<<
 *         self.ctx = ngl_node_create(NGL_NODE_STREAMEDBUFFERMAT4, count, timestamps.ctx, buffer.ctx)
 *         if self.ctx is NULL:
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!((__pyx_v_self->__pyx_base.ctx == NULL) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 2576, __pyx_L1_error)
    }
  }
  #endif

  /* "nodes_def.pyx":2577
 * 
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_STREAMEDBUFFERMAT4, count, timestamps.ctx, buffer.ctx)             # <<<<<<<<<<<<<<
 *         if self.ctx is NULL:
 *             raise MemoryError()
 */
  __pyx_v_self->__pyx_base.ctx = ngl_node_create(NGL_NODE_STREAMEDBUFFERMAT4, __pyx_v_count, __pyx_v_timestamps->ctx, __pyx_v_buffer->ctx);

  /* "nodes_def.pyx":2578
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_STREAMEDBUFFERMAT4, count, timestamps.ctx, buffer.ctx)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         _Node._init_params(self, *args, **kwargs)
 */
  __pyx_t_1 = ((__pyx_v_self->__pyx_base.ctx == NULL) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "nodes_def.pyx":2579
 *         self.ctx = ngl_node_create(NGL_NODE_STREAMEDBUFFERMAT4, count, timestamps.ctx, buffer.ctx)
 *         if self.ctx is NULL:
 *             raise MemoryError()             # <<<<<<<<<<<<<<
 *         _Node._init_params(self, *args, **kwargs)
 * 
 */
    PyErr_NoMemory(); __PYX_ERR(0, 2579, __pyx_L1_error)

    /* "nodes_def.pyx":2578
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_STREAMEDBUFFERMAT4, count, timestamps.ctx, buffer.ctx)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         _Node._init_params(self, *args, **kwargs)
 */
  }

  /* "nodes_def.pyx":2580
 *         if self.ctx is NULL:
 *             raise MemoryError()
 *         _Node._init_params(self, *args, **kwargs)             # <<<<<<<<<<<<<<
 * 
 *         if timebase is not None:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_8pynodegl__Node), __pyx_n_s_init_params); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2580, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2580, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_v_self));
  __pyx_t_4 = PyNumber_Add(__pyx_t_3, __pyx_v_args); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2580, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, __pyx_v_kwargs); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2580, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "nodes_def.pyx":2582
 *         _Node._init_params(self, *args, **kwargs)
 * 
 *         if timebase is not None:             # <<<<<<<<<<<<<<
 *             self.set_timebase(timebase)
 *         if time_anim is not None:
 */
  __pyx_t_1 = (__pyx_v_timebase != Py_None);
  __pyx_t_5 = (__pyx_t_1 != 0);
  if (__pyx_t_5) {

    /* "nodes_def.pyx":2583
 * 
 *         if timebase is not None:
 *             self.set_timebase(timebase)             # <<<<<<<<<<<<<<
 *         if time_anim is not None:
 *             self.set_time_anim(time_anim)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_timebase); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2583, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_2, __pyx_v_timebase) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_timebase);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2583, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "nodes_def.pyx":2582
 *         _Node._init_params(self, *args, **kwargs)
 * 
 *         if timebase is not None:             # <<<<<<<<<<<<<<
 *             self.set_timebase(timebase)
 *         if time_anim is not None:
 */
  }

  /* "nodes_def.pyx":2584
 *         if timebase is not None:
 *             self.set_timebase(timebase)
 *         if time_anim is not None:             # <<<<<<<<<<<<<<
 *             self.set_time_anim(time_anim)
 * 
 */
  __pyx_t_5 = (__pyx_v_time_anim != Py_None);
  __pyx_t_1 = (__pyx_t_5 != 0);
  if (__pyx_t_1) {

    /* "nodes_def.pyx":2585
 *             self.set_timebase(timebase)
 *         if time_anim is not None:
 *             self.set_time_anim(time_anim)             # <<<<<<<<<<<<<<
 * 
 *     def set_timebase(self, tuple timebase):
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_time_anim); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2585, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_2, __pyx_v_time_anim) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_time_anim);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2585, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "nodes_def.pyx":2584
 *         if timebase is not None:
 *             self.set_timebase(timebase)
 *         if time_anim is not None:             # <<<<<<<<<<<<<<
 *             self.set_time_anim(time_anim)
 * 
 */
  }

  /* "nodes_def.pyx":2571
 * cdef class StreamedBufferMat4(_Node):
 * 
 *     def __init__(self, int count, _Node timestamps, _Node buffer, timebase=None, time_anim=None, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         assert timestamps is not None
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pynodegl.StreamedBufferMat4.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":2587
 *             self.set_time_anim(time_anim)
 * 
 *     def set_timebase(self, tuple timebase):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx,
 *                                   "timebase",
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_18StreamedBufferMat4_3set_timebase(PyObject *__pyx_v_self, PyObject *__pyx_v_timebase); /*proto*/
static PyObject *__pyx_pw_8pynodegl_18StreamedBufferMat4_3set_timebase(PyObject *__pyx_v_self, PyObject *__pyx_v_timebase) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_timebase (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_timebase), (&PyTuple_Type), 1, "timebase", 1))) __PYX_ERR(0, 2587, __pyx_L1_error)
  __pyx_r = __pyx_pf_8pynodegl_18StreamedBufferMat4_2set_timebase(((struct __pyx_obj_8pynodegl_StreamedBufferMat4 *)__pyx_v_self), ((PyObject*)__pyx_v_timebase));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_18StreamedBufferMat4_2set_timebase(struct __pyx_obj_8pynodegl_StreamedBufferMat4 *__pyx_v_self, PyObject *__pyx_v_timebase) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  __Pyx_RefNannySetupContext("set_timebase", 0);

  /* "nodes_def.pyx":2588
 * 
 *     def set_timebase(self, tuple timebase):
 *         return ngl_node_param_set(self.ctx,             # <<<<<<<<<<<<<<
 *                                   "timebase",
 *                                   <int>timebase[0],
 */
  __Pyx_XDECREF(__pyx_r);

  /* "nodes_def.pyx":2590
 *         return ngl_node_param_set(self.ctx,
 *                                   "timebase",
 *                                   <int>timebase[0],             # <<<<<<<<<<<<<<
 *                                   <int>timebase[1]);
 * 
 */
  if (unlikely(__pyx_v_timebase == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 2590, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v_timebase, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2590, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2590, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "nodes_def.pyx":2591
 *                                   "timebase",
 *                                   <int>timebase[0],
 *                                   <int>timebase[1]);             # <<<<<<<<<<<<<<
 * 
 *     def set_time_anim(self, _Node time_anim):
 */
  if (unlikely(__pyx_v_timebase == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 2591, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v_timebase, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2591, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2591, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "nodes_def.pyx":2588
 * 
 *     def set_timebase(self, tuple timebase):
 *         return ngl_node_param_set(self.ctx,             # <<<<<<<<<<<<<<
 *                                   "timebase",
 *                                   <int>timebase[0],
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"timebase"), ((int)__pyx_t_2), ((int)__pyx_t_3))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2588, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":2587
 *             self.set_time_anim(time_anim)
 * 
 *     def set_timebase(self, tuple timebase):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx,
 *                                   "timebase",
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.StreamedBufferMat4.set_timebase", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":2593
 *                                   <int>timebase[1]);
 * 
 *     def set_time_anim(self, _Node time_anim):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "time_anim", time_anim.ctx)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_18StreamedBufferMat4_5set_time_anim(PyObject *__pyx_v_self, PyObject *__pyx_v_time_anim); /*proto*/
static PyObject *__pyx_pw_8pynodegl_18StreamedBufferMat4_5set_time_anim(PyObject *__pyx_v_self, PyObject *__pyx_v_time_anim) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_time_anim (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_time_anim), __pyx_ptype_8pynodegl__Node, 1, "time_anim", 0))) __PYX_ERR(0, 2593, __pyx_L1_error)
  __pyx_r = __pyx_pf_8pynodegl_18StreamedBufferMat4_4set_time_anim(((struct __pyx_obj_8pynodegl_StreamedBufferMat4 *)__pyx_v_self), ((struct __pyx_obj_8pynodegl__Node *)__pyx_v_time_anim));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_18StreamedBufferMat4_4set_time_anim(struct __pyx_obj_8pynodegl_StreamedBufferMat4 *__pyx_v_self, struct __pyx_obj_8pynodegl__Node *__pyx_v_time_anim) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("set_time_anim", 0);

  /* "nodes_def.pyx":2594
 * 
 *     def set_time_anim(self, _Node time_anim):
 *         return ngl_node_param_set(self.ctx, "time_anim", time_anim.ctx)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"time_anim"), __pyx_v_time_anim->ctx)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2594, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":2593
 *                                   <int>timebase[1]);
 * 
 *     def set_time_anim(self, _Node time_anim):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "time_anim", time_anim.ctx)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.StreamedBufferMat4.set_time_anim", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_18StreamedBufferMat4_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pynodegl_18StreamedBufferMat4_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_18StreamedBufferMat4_6__reduce_cython__(((struct __pyx_obj_8pynodegl_StreamedBufferMat4 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_18StreamedBufferMat4_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_StreamedBufferMat4 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__185, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.StreamedBufferMat4.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_18StreamedBufferMat4_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8pynodegl_18StreamedBufferMat4_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_18StreamedBufferMat4_8__setstate_cython__(((struct __pyx_obj_8pynodegl_StreamedBufferMat4 *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_18StreamedBufferMat4_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_StreamedBufferMat4 *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__186, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.StreamedBufferMat4.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":2599
 * cdef class UniformInt(_Node):
 * 
 *     def __init__(self, value=None, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_UNIFORMINT)
 */

/* Python wrapper */
static int __pyx_pw_8pynodegl_10UniformInt_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pynodegl_10UniformInt_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_value = 0;
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  __pyx_v_kwargs = PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return -1;
  __Pyx_GOTREF(__pyx_v_kwargs);
  if (PyTuple_GET_SIZE(__pyx_args) > 1) {
    __pyx_v_args = PyTuple_GetSlice(__pyx_args, 1, PyTuple_GET_SIZE(__pyx_args));
    if (unlikely(!__pyx_v_args)) {
      __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
      __Pyx_RefNannyFinishContext();
      return -1;
    }
    __Pyx_GOTREF(__pyx_v_args);
  } else {
    __pyx_v_args = __pyx_empty_tuple; __Pyx_INCREF(__pyx_empty_tuple);
  }
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_value,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        default:
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t used_pos_args = (pos_args < 1) ? pos_args : 1;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_kwargs, values, used_pos_args, "__init__") < 0)) __PYX_ERR(0, 2599, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        default:
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
      }
    }
    __pyx_v_value = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_args); __pyx_v_args = 0;
  __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
  __Pyx_AddTraceback("pynodegl.UniformInt.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pynodegl_10UniformInt___init__(((struct __pyx_obj_8pynodegl_UniformInt *)__pyx_v_self), __pyx_v_value, __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pynodegl_10UniformInt___init__(struct __pyx_obj_8pynodegl_UniformInt *__pyx_v_self, PyObject *__pyx_v_value, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "nodes_def.pyx":2600
 * 
 *     def __init__(self, value=None, *args, **kwargs):
 *         assert self.ctx is NULL             # <<<<<<<<<<<<<<
 *         self.ctx = ngl_node_create(NGL_NODE_UNIFORMINT)
 *         if self.ctx is NULL:
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!((__pyx_v_self->__pyx_base.ctx == NULL) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 2600, __pyx_L1_error)
    }
  }
  #endif

  /* "nodes_def.pyx":2601
 *     def __init__(self, value=None, *args, **kwargs):
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_UNIFORMINT)             # <<<<<<<<<<<<<<
 *         if self.ctx is NULL:
 *             raise MemoryError()
 */
  __pyx_v_self->__pyx_base.ctx = ngl_node_create(NGL_NODE_UNIFORMINT);

  /* "nodes_def.pyx":2602
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_UNIFORMINT)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         _Node._init_params(self, *args, **kwargs)
 */
  __pyx_t_1 = ((__pyx_v_self->__pyx_base.ctx == NULL) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "nodes_def.pyx":2603
 *         self.ctx = ngl_node_create(NGL_NODE_UNIFORMINT)
 *         if self.ctx is NULL:
 *             raise MemoryError()             # <<<<<<<<<<<<<<
 *         _Node._init_params(self, *args, **kwargs)
 * 
 */
    PyErr_NoMemory(); __PYX_ERR(0, 2603, __pyx_L1_error)

    /* "nodes_def.pyx":2602
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_UNIFORMINT)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         _Node._init_params(self, *args, **kwargs)
 */
  }

  /* "nodes_def.pyx":2604
 *         if self.ctx is NULL:
 *             raise MemoryError()
 *         _Node._init_params(self, *args, **kwargs)             # <<<<<<<<<<<<<<
 * 
 *         if value is not None:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_8pynodegl__Node), __pyx_n_s_init_params); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2604, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2604, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_v_self));
  __pyx_t_4 = PyNumber_Add(__pyx_t_3, __pyx_v_args); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2604, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, __pyx_v_kwargs); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2604, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "nodes_def.pyx":2606
 *         _Node._init_params(self, *args, **kwargs)
 * 
 *         if value is not None:             # <<<<<<<<<<<<<<
 *             self.set_value(value)
 * 
 */
  __pyx_t_1 = (__pyx_v_value != Py_None);
  __pyx_t_5 = (__pyx_t_1 != 0);
  if (__pyx_t_5) {

    /* "nodes_def.pyx":2607
 * 
 *         if value is not None:
 *             self.set_value(value)             # <<<<<<<<<<<<<<
 * 
 *     def set_value(self, int value):
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_value); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2607, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_2, __pyx_v_value) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_value);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2607, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "nodes_def.pyx":2606
 *         _Node._init_params(self, *args, **kwargs)
 * 
 *         if value is not None:             # <<<<<<<<<<<<<<
 *             self.set_value(value)
 * 
 */
  }

  /* "nodes_def.pyx":2599
 * cdef class UniformInt(_Node):
 * 
 *     def __init__(self, value=None, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_UNIFORMINT)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pynodegl.UniformInt.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":2609
 *             self.set_value(value)
 * 
 *     def set_value(self, int value):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "value", value)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_10UniformInt_3set_value(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static PyObject *__pyx_pw_8pynodegl_10UniformInt_3set_value(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  int __pyx_v_value;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_value (wrapper)", 0);
  assert(__pyx_arg_value); {
    __pyx_v_value = __Pyx_PyInt_As_int(__pyx_arg_value); if (unlikely((__pyx_v_value == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2609, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pynodegl.UniformInt.set_value", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pynodegl_10UniformInt_2set_value(((struct __pyx_obj_8pynodegl_UniformInt *)__pyx_v_self), ((int)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_10UniformInt_2set_value(struct __pyx_obj_8pynodegl_UniformInt *__pyx_v_self, int __pyx_v_value) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("set_value", 0);

  /* "nodes_def.pyx":2610
 * 
 *     def set_value(self, int value):
 *         return ngl_node_param_set(self.ctx, "value", value)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"value"), __pyx_v_value)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2610, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":2609
 *             self.set_value(value)
 * 
 *     def set_value(self, int value):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "value", value)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.UniformInt.set_value", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_10UniformInt_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pynodegl_10UniformInt_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_10UniformInt_4__reduce_cython__(((struct __pyx_obj_8pynodegl_UniformInt *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_10UniformInt_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_UniformInt *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__187, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.UniformInt.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_10UniformInt_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8pynodegl_10UniformInt_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_10UniformInt_6__setstate_cython__(((struct __pyx_obj_8pynodegl_UniformInt *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_10UniformInt_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_UniformInt *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__188, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.UniformInt.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":2615
 * cdef class UniformMat4(_Node):
 * 
 *     def __init__(self, value=None, transform=None, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_UNIFORMMAT4)
 */

/* Python wrapper */
static int __pyx_pw_8pynodegl_11UniformMat4_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pynodegl_11UniformMat4_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_value = 0;
  PyObject *__pyx_v_transform = 0;
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  __pyx_v_kwargs = PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return -1;
  __Pyx_GOTREF(__pyx_v_kwargs);
  if (PyTuple_GET_SIZE(__pyx_args) > 2) {
    __pyx_v_args = PyTuple_GetSlice(__pyx_args, 2, PyTuple_GET_SIZE(__pyx_args));
    if (unlikely(!__pyx_v_args)) {
      __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
      __Pyx_RefNannyFinishContext();
      return -1;
    }
    __Pyx_GOTREF(__pyx_v_args);
  } else {
    __pyx_v_args = __pyx_empty_tuple; __Pyx_INCREF(__pyx_empty_tuple);
  }
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_value,&__pyx_n_s_transform,0};
    PyObject* values[2] = {0,0};
    values[0] = ((PyObject *)Py_None);
    values[1] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        default:
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_transform);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t used_pos_args = (pos_args < 2) ? pos_args : 2;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_kwargs, values, used_pos_args, "__init__") < 0)) __PYX_ERR(0, 2615, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        default:
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
      }
    }
    __pyx_v_value = values[0];
    __pyx_v_transform = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_args); __pyx_v_args = 0;
  __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
  __Pyx_AddTraceback("pynodegl.UniformMat4.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pynodegl_11UniformMat4___init__(((struct __pyx_obj_8pynodegl_UniformMat4 *)__pyx_v_self), __pyx_v_value, __pyx_v_transform, __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pynodegl_11UniformMat4___init__(struct __pyx_obj_8pynodegl_UniformMat4 *__pyx_v_self, PyObject *__pyx_v_value, PyObject *__pyx_v_transform, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "nodes_def.pyx":2616
 * 
 *     def __init__(self, value=None, transform=None, *args, **kwargs):
 *         assert self.ctx is NULL             # <<<<<<<<<<<<<<
 *         self.ctx = ngl_node_create(NGL_NODE_UNIFORMMAT4)
 *         if self.ctx is NULL:
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!((__pyx_v_self->__pyx_base.ctx == NULL) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 2616, __pyx_L1_error)
    }
  }
  #endif

  /* "nodes_def.pyx":2617
 *     def __init__(self, value=None, transform=None, *args, **kwargs):
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_UNIFORMMAT4)             # <<<<<<<<<<<<<<
 *         if self.ctx is NULL:
 *             raise MemoryError()
 */
  __pyx_v_self->__pyx_base.ctx = ngl_node_create(NGL_NODE_UNIFORMMAT4);

  /* "nodes_def.pyx":2618
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_UNIFORMMAT4)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         _Node._init_params(self, *args, **kwargs)
 */
  __pyx_t_1 = ((__pyx_v_self->__pyx_base.ctx == NULL) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "nodes_def.pyx":2619
 *         self.ctx = ngl_node_create(NGL_NODE_UNIFORMMAT4)
 *         if self.ctx is NULL:
 *             raise MemoryError()             # <<<<<<<<<<<<<<
 *         _Node._init_params(self, *args, **kwargs)
 * 
 */
    PyErr_NoMemory(); __PYX_ERR(0, 2619, __pyx_L1_error)

    /* "nodes_def.pyx":2618
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_UNIFORMMAT4)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         _Node._init_params(self, *args, **kwargs)
 */
  }

  /* "nodes_def.pyx":2620
 *         if self.ctx is NULL:
 *             raise MemoryError()
 *         _Node._init_params(self, *args, **kwargs)             # <<<<<<<<<<<<<<
 * 
 *         if value is not None:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_8pynodegl__Node), __pyx_n_s_init_params); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2620, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2620, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_v_self));
  __pyx_t_4 = PyNumber_Add(__pyx_t_3, __pyx_v_args); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2620, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, __pyx_v_kwargs); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2620, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "nodes_def.pyx":2622
 *         _Node._init_params(self, *args, **kwargs)
 * 
 *         if value is not None:             # <<<<<<<<<<<<<<
 *             self.set_value(*value)
 *         if transform is not None:
 */
  __pyx_t_1 = (__pyx_v_value != Py_None);
  __pyx_t_5 = (__pyx_t_1 != 0);
  if (__pyx_t_5) {

    /* "nodes_def.pyx":2623
 * 
 *         if value is not None:
 *             self.set_value(*value)             # <<<<<<<<<<<<<<
 *         if transform is not None:
 *             self.set_transform(transform)
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_value); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2623, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PySequence_Tuple(__pyx_v_value); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2623, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2623, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "nodes_def.pyx":2622
 *         _Node._init_params(self, *args, **kwargs)
 * 
 *         if value is not None:             # <<<<<<<<<<<<<<
 *             self.set_value(*value)
 *         if transform is not None:
 */
  }

  /* "nodes_def.pyx":2624
 *         if value is not None:
 *             self.set_value(*value)
 *         if transform is not None:             # <<<<<<<<<<<<<<
 *             self.set_transform(transform)
 * 
 */
  __pyx_t_5 = (__pyx_v_transform != Py_None);
  __pyx_t_1 = (__pyx_t_5 != 0);
  if (__pyx_t_1) {

    /* "nodes_def.pyx":2625
 *             self.set_value(*value)
 *         if transform is not None:
 *             self.set_transform(transform)             # <<<<<<<<<<<<<<
 * 
 *     def set_value(self, *value):
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_transform); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2625, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_2 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_3, __pyx_v_transform) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_transform);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2625, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "nodes_def.pyx":2624
 *         if value is not None:
 *             self.set_value(*value)
 *         if transform is not None:             # <<<<<<<<<<<<<<
 *             self.set_transform(transform)
 * 
 */
  }

  /* "nodes_def.pyx":2615
 * cdef class UniformMat4(_Node):
 * 
 *     def __init__(self, value=None, transform=None, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_UNIFORMMAT4)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pynodegl.UniformMat4.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":2627
 *             self.set_transform(transform)
 * 
 *     def set_value(self, *value):             # <<<<<<<<<<<<<<
 *         cdef float[16] value_c
 *         cdef int value_i
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_11UniformMat4_3set_value(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_8pynodegl_11UniformMat4_3set_value(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_value = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_value (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "set_value", 0))) return NULL;
  __Pyx_INCREF(__pyx_args);
  __pyx_v_value = __pyx_args;
  __pyx_r = __pyx_pf_8pynodegl_11UniformMat4_2set_value(((struct __pyx_obj_8pynodegl_UniformMat4 *)__pyx_v_self), __pyx_v_value);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_value);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_11UniformMat4_2set_value(struct __pyx_obj_8pynodegl_UniformMat4 *__pyx_v_self, PyObject *__pyx_v_value) {
  float __pyx_v_value_c[16];
  int __pyx_v_value_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  Py_UCS4 __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  int __pyx_t_7;
  float __pyx_t_8;
  __Pyx_RefNannySetupContext("set_value", 0);

  /* "nodes_def.pyx":2630
 *         cdef float[16] value_c
 *         cdef int value_i
 *         if len(value) != 16:             # <<<<<<<<<<<<<<
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (
 *                             "value", 16, len(value)))
 */
  __pyx_t_1 = PyTuple_GET_SIZE(__pyx_v_value); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 2630, __pyx_L1_error)
  __pyx_t_2 = ((__pyx_t_1 != 16) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "nodes_def.pyx":2631
 *         cdef int value_i
 *         if len(value) != 16:
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (             # <<<<<<<<<<<<<<
 *                             "value", 16, len(value)))
 *         for value_i in range(16):
 */
    __pyx_t_3 = PyTuple_New(5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2631, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = 0;
    __pyx_t_4 = 127;
    __Pyx_INCREF(__pyx_kp_u_value_parameter_is_expected_to_b);
    __pyx_t_1 += 37;
    __Pyx_GIVEREF(__pyx_kp_u_value_parameter_is_expected_to_b);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_kp_u_value_parameter_is_expected_to_b);

    /* "nodes_def.pyx":2632
 *         if len(value) != 16:
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (
 *                             "value", 16, len(value)))             # <<<<<<<<<<<<<<
 *         for value_i in range(16):
 *             value_c[value_i] = value[value_i]
 */
    __pyx_t_5 = __Pyx_PyUnicode_From_long(16, 0, ' ', 'd'); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2632, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_INCREF(__pyx_kp_u_but_got);
    __pyx_t_1 += 9;
    __Pyx_GIVEREF(__pyx_kp_u_but_got);
    PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_kp_u_but_got);
    __pyx_t_6 = PyTuple_GET_SIZE(__pyx_v_value); if (unlikely(__pyx_t_6 == ((Py_ssize_t)-1))) __PYX_ERR(0, 2632, __pyx_L1_error)
    __pyx_t_5 = __Pyx_PyUnicode_From_Py_ssize_t(__pyx_t_6, 0, ' ', 'd'); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2632, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_3, 3, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_INCREF(__pyx_kp_u_values);
    __pyx_t_1 += 7;
    __Pyx_GIVEREF(__pyx_kp_u_values);
    PyTuple_SET_ITEM(__pyx_t_3, 4, __pyx_kp_u_values);

    /* "nodes_def.pyx":2631
 *         cdef int value_i
 *         if len(value) != 16:
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (             # <<<<<<<<<<<<<<
 *                             "value", 16, len(value)))
 *         for value_i in range(16):
 */
    __pyx_t_5 = __Pyx_PyUnicode_Join(__pyx_t_3, 5, __pyx_t_1, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2631, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2631, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 2631, __pyx_L1_error)

    /* "nodes_def.pyx":2630
 *         cdef float[16] value_c
 *         cdef int value_i
 *         if len(value) != 16:             # <<<<<<<<<<<<<<
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (
 *                             "value", 16, len(value)))
 */
  }

  /* "nodes_def.pyx":2633
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (
 *                             "value", 16, len(value)))
 *         for value_i in range(16):             # <<<<<<<<<<<<<<
 *             value_c[value_i] = value[value_i]
 * 
 */
  for (__pyx_t_7 = 0; __pyx_t_7 < 16; __pyx_t_7+=1) {
    __pyx_v_value_i = __pyx_t_7;

    /* "nodes_def.pyx":2634
 *                             "value", 16, len(value)))
 *         for value_i in range(16):
 *             value_c[value_i] = value[value_i]             # <<<<<<<<<<<<<<
 * 
 *         return ngl_node_param_set(self.ctx, "value", value_c)
 */
    __pyx_t_3 = __Pyx_GetItemInt_Tuple(__pyx_v_value, __pyx_v_value_i, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2634, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_8 = __pyx_PyFloat_AsFloat(__pyx_t_3); if (unlikely((__pyx_t_8 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 2634, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    (__pyx_v_value_c[__pyx_v_value_i]) = __pyx_t_8;
  }

  /* "nodes_def.pyx":2636
 *             value_c[value_i] = value[value_i]
 * 
 *         return ngl_node_param_set(self.ctx, "value", value_c)             # <<<<<<<<<<<<<<
 * 
 *     def set_transform(self, _Node transform):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"value"), __pyx_v_value_c)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2636, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":2627
 *             self.set_transform(transform)
 * 
 *     def set_value(self, *value):             # <<<<<<<<<<<<<<
 *         cdef float[16] value_c
 *         cdef int value_i
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pynodegl.UniformMat4.set_value", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":2638
 *         return ngl_node_param_set(self.ctx, "value", value_c)
 * 
 *     def set_transform(self, _Node transform):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "transform", transform.ctx)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_11UniformMat4_5set_transform(PyObject *__pyx_v_self, PyObject *__pyx_v_transform); /*proto*/
static PyObject *__pyx_pw_8pynodegl_11UniformMat4_5set_transform(PyObject *__pyx_v_self, PyObject *__pyx_v_transform) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_transform (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_transform), __pyx_ptype_8pynodegl__Node, 1, "transform", 0))) __PYX_ERR(0, 2638, __pyx_L1_error)
  __pyx_r = __pyx_pf_8pynodegl_11UniformMat4_4set_transform(((struct __pyx_obj_8pynodegl_UniformMat4 *)__pyx_v_self), ((struct __pyx_obj_8pynodegl__Node *)__pyx_v_transform));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_11UniformMat4_4set_transform(struct __pyx_obj_8pynodegl_UniformMat4 *__pyx_v_self, struct __pyx_obj_8pynodegl__Node *__pyx_v_transform) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("set_transform", 0);

  /* "nodes_def.pyx":2639
 * 
 *     def set_transform(self, _Node transform):
 *         return ngl_node_param_set(self.ctx, "transform", transform.ctx)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"transform"), __pyx_v_transform->ctx)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2639, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":2638
 *         return ngl_node_param_set(self.ctx, "value", value_c)
 * 
 *     def set_transform(self, _Node transform):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "transform", transform.ctx)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.UniformMat4.set_transform", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_11UniformMat4_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pynodegl_11UniformMat4_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_11UniformMat4_6__reduce_cython__(((struct __pyx_obj_8pynodegl_UniformMat4 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_11UniformMat4_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_UniformMat4 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__189, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.UniformMat4.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_11UniformMat4_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8pynodegl_11UniformMat4_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_11UniformMat4_8__setstate_cython__(((struct __pyx_obj_8pynodegl_UniformMat4 *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_11UniformMat4_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_UniformMat4 *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__190, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.UniformMat4.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":2644
 * cdef class UniformFloat(_Node):
 * 
 *     def __init__(self, value=None, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_UNIFORMFLOAT)
 */

/* Python wrapper */
static int __pyx_pw_8pynodegl_12UniformFloat_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pynodegl_12UniformFloat_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_value = 0;
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  __pyx_v_kwargs = PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return -1;
  __Pyx_GOTREF(__pyx_v_kwargs);
  if (PyTuple_GET_SIZE(__pyx_args) > 1) {
    __pyx_v_args = PyTuple_GetSlice(__pyx_args, 1, PyTuple_GET_SIZE(__pyx_args));
    if (unlikely(!__pyx_v_args)) {
      __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
      __Pyx_RefNannyFinishContext();
      return -1;
    }
    __Pyx_GOTREF(__pyx_v_args);
  } else {
    __pyx_v_args = __pyx_empty_tuple; __Pyx_INCREF(__pyx_empty_tuple);
  }
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_value,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        default:
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t used_pos_args = (pos_args < 1) ? pos_args : 1;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_kwargs, values, used_pos_args, "__init__") < 0)) __PYX_ERR(0, 2644, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        default:
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
      }
    }
    __pyx_v_value = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_args); __pyx_v_args = 0;
  __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
  __Pyx_AddTraceback("pynodegl.UniformFloat.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pynodegl_12UniformFloat___init__(((struct __pyx_obj_8pynodegl_UniformFloat *)__pyx_v_self), __pyx_v_value, __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pynodegl_12UniformFloat___init__(struct __pyx_obj_8pynodegl_UniformFloat *__pyx_v_self, PyObject *__pyx_v_value, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "nodes_def.pyx":2645
 * 
 *     def __init__(self, value=None, *args, **kwargs):
 *         assert self.ctx is NULL             # <<<<<<<<<<<<<<
 *         self.ctx = ngl_node_create(NGL_NODE_UNIFORMFLOAT)
 *         if self.ctx is NULL:
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!((__pyx_v_self->__pyx_base.ctx == NULL) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 2645, __pyx_L1_error)
    }
  }
  #endif

  /* "nodes_def.pyx":2646
 *     def __init__(self, value=None, *args, **kwargs):
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_UNIFORMFLOAT)             # <<<<<<<<<<<<<<
 *         if self.ctx is NULL:
 *             raise MemoryError()
 */
  __pyx_v_self->__pyx_base.ctx = ngl_node_create(NGL_NODE_UNIFORMFLOAT);

  /* "nodes_def.pyx":2647
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_UNIFORMFLOAT)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         _Node._init_params(self, *args, **kwargs)
 */
  __pyx_t_1 = ((__pyx_v_self->__pyx_base.ctx == NULL) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "nodes_def.pyx":2648
 *         self.ctx = ngl_node_create(NGL_NODE_UNIFORMFLOAT)
 *         if self.ctx is NULL:
 *             raise MemoryError()             # <<<<<<<<<<<<<<
 *         _Node._init_params(self, *args, **kwargs)
 * 
 */
    PyErr_NoMemory(); __PYX_ERR(0, 2648, __pyx_L1_error)

    /* "nodes_def.pyx":2647
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_UNIFORMFLOAT)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         _Node._init_params(self, *args, **kwargs)
 */
  }

  /* "nodes_def.pyx":2649
 *         if self.ctx is NULL:
 *             raise MemoryError()
 *         _Node._init_params(self, *args, **kwargs)             # <<<<<<<<<<<<<<
 * 
 *         if value is not None:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_8pynodegl__Node), __pyx_n_s_init_params); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2649, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2649, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_v_self));
  __pyx_t_4 = PyNumber_Add(__pyx_t_3, __pyx_v_args); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2649, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, __pyx_v_kwargs); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2649, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "nodes_def.pyx":2651
 *         _Node._init_params(self, *args, **kwargs)
 * 
 *         if value is not None:             # <<<<<<<<<<<<<<
 *             self.set_value(value)
 * 
 */
  __pyx_t_1 = (__pyx_v_value != Py_None);
  __pyx_t_5 = (__pyx_t_1 != 0);
  if (__pyx_t_5) {

    /* "nodes_def.pyx":2652
 * 
 *         if value is not None:
 *             self.set_value(value)             # <<<<<<<<<<<<<<
 * 
 *     def set_value(self, double value):
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_value); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2652, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_2, __pyx_v_value) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_value);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2652, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "nodes_def.pyx":2651
 *         _Node._init_params(self, *args, **kwargs)
 * 
 *         if value is not None:             # <<<<<<<<<<<<<<
 *             self.set_value(value)
 * 
 */
  }

  /* "nodes_def.pyx":2644
 * cdef class UniformFloat(_Node):
 * 
 *     def __init__(self, value=None, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_UNIFORMFLOAT)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pynodegl.UniformFloat.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":2654
 *             self.set_value(value)
 * 
 *     def set_value(self, double value):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "value", value)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_12UniformFloat_3set_value(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static PyObject *__pyx_pw_8pynodegl_12UniformFloat_3set_value(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  double __pyx_v_value;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_value (wrapper)", 0);
  assert(__pyx_arg_value); {
    __pyx_v_value = __pyx_PyFloat_AsDouble(__pyx_arg_value); if (unlikely((__pyx_v_value == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2654, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pynodegl.UniformFloat.set_value", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pynodegl_12UniformFloat_2set_value(((struct __pyx_obj_8pynodegl_UniformFloat *)__pyx_v_self), ((double)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_12UniformFloat_2set_value(struct __pyx_obj_8pynodegl_UniformFloat *__pyx_v_self, double __pyx_v_value) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("set_value", 0);

  /* "nodes_def.pyx":2655
 * 
 *     def set_value(self, double value):
 *         return ngl_node_param_set(self.ctx, "value", value)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"value"), __pyx_v_value)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2655, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":2654
 *             self.set_value(value)
 * 
 *     def set_value(self, double value):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "value", value)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.UniformFloat.set_value", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_12UniformFloat_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pynodegl_12UniformFloat_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_12UniformFloat_4__reduce_cython__(((struct __pyx_obj_8pynodegl_UniformFloat *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_12UniformFloat_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_UniformFloat *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__191, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.UniformFloat.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_12UniformFloat_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8pynodegl_12UniformFloat_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_12UniformFloat_6__setstate_cython__(((struct __pyx_obj_8pynodegl_UniformFloat *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_12UniformFloat_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_UniformFloat *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__192, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.UniformFloat.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":2660
 * cdef class UniformVec2(_Node):
 * 
 *     def __init__(self, value=None, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_UNIFORMVEC2)
 */

/* Python wrapper */
static int __pyx_pw_8pynodegl_11UniformVec2_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pynodegl_11UniformVec2_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_value = 0;
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  __pyx_v_kwargs = PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return -1;
  __Pyx_GOTREF(__pyx_v_kwargs);
  if (PyTuple_GET_SIZE(__pyx_args) > 1) {
    __pyx_v_args = PyTuple_GetSlice(__pyx_args, 1, PyTuple_GET_SIZE(__pyx_args));
    if (unlikely(!__pyx_v_args)) {
      __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
      __Pyx_RefNannyFinishContext();
      return -1;
    }
    __Pyx_GOTREF(__pyx_v_args);
  } else {
    __pyx_v_args = __pyx_empty_tuple; __Pyx_INCREF(__pyx_empty_tuple);
  }
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_value,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        default:
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t used_pos_args = (pos_args < 1) ? pos_args : 1;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_kwargs, values, used_pos_args, "__init__") < 0)) __PYX_ERR(0, 2660, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        default:
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
      }
    }
    __pyx_v_value = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_args); __pyx_v_args = 0;
  __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
  __Pyx_AddTraceback("pynodegl.UniformVec2.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pynodegl_11UniformVec2___init__(((struct __pyx_obj_8pynodegl_UniformVec2 *)__pyx_v_self), __pyx_v_value, __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pynodegl_11UniformVec2___init__(struct __pyx_obj_8pynodegl_UniformVec2 *__pyx_v_self, PyObject *__pyx_v_value, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "nodes_def.pyx":2661
 * 
 *     def __init__(self, value=None, *args, **kwargs):
 *         assert self.ctx is NULL             # <<<<<<<<<<<<<<
 *         self.ctx = ngl_node_create(NGL_NODE_UNIFORMVEC2)
 *         if self.ctx is NULL:
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!((__pyx_v_self->__pyx_base.ctx == NULL) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 2661, __pyx_L1_error)
    }
  }
  #endif

  /* "nodes_def.pyx":2662
 *     def __init__(self, value=None, *args, **kwargs):
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_UNIFORMVEC2)             # <<<<<<<<<<<<<<
 *         if self.ctx is NULL:
 *             raise MemoryError()
 */
  __pyx_v_self->__pyx_base.ctx = ngl_node_create(NGL_NODE_UNIFORMVEC2);

  /* "nodes_def.pyx":2663
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_UNIFORMVEC2)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         _Node._init_params(self, *args, **kwargs)
 */
  __pyx_t_1 = ((__pyx_v_self->__pyx_base.ctx == NULL) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "nodes_def.pyx":2664
 *         self.ctx = ngl_node_create(NGL_NODE_UNIFORMVEC2)
 *         if self.ctx is NULL:
 *             raise MemoryError()             # <<<<<<<<<<<<<<
 *         _Node._init_params(self, *args, **kwargs)
 * 
 */
    PyErr_NoMemory(); __PYX_ERR(0, 2664, __pyx_L1_error)

    /* "nodes_def.pyx":2663
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_UNIFORMVEC2)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         _Node._init_params(self, *args, **kwargs)
 */
  }

  /* "nodes_def.pyx":2665
 *         if self.ctx is NULL:
 *             raise MemoryError()
 *         _Node._init_params(self, *args, **kwargs)             # <<<<<<<<<<<<<<
 * 
 *         if value is not None:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_8pynodegl__Node), __pyx_n_s_init_params); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2665, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2665, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_v_self));
  __pyx_t_4 = PyNumber_Add(__pyx_t_3, __pyx_v_args); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2665, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, __pyx_v_kwargs); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2665, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "nodes_def.pyx":2667
 *         _Node._init_params(self, *args, **kwargs)
 * 
 *         if value is not None:             # <<<<<<<<<<<<<<
 *             self.set_value(*value)
 * 
 */
  __pyx_t_1 = (__pyx_v_value != Py_None);
  __pyx_t_5 = (__pyx_t_1 != 0);
  if (__pyx_t_5) {

    /* "nodes_def.pyx":2668
 * 
 *         if value is not None:
 *             self.set_value(*value)             # <<<<<<<<<<<<<<
 * 
 *     def set_value(self, *value):
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_value); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2668, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PySequence_Tuple(__pyx_v_value); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2668, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2668, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "nodes_def.pyx":2667
 *         _Node._init_params(self, *args, **kwargs)
 * 
 *         if value is not None:             # <<<<<<<<<<<<<<
 *             self.set_value(*value)
 * 
 */
  }

  /* "nodes_def.pyx":2660
 * cdef class UniformVec2(_Node):
 * 
 *     def __init__(self, value=None, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_UNIFORMVEC2)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pynodegl.UniformVec2.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":2670
 *             self.set_value(*value)
 * 
 *     def set_value(self, *value):             # <<<<<<<<<<<<<<
 *         cdef float[2] value_c
 *         cdef int value_i
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_11UniformVec2_3set_value(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_8pynodegl_11UniformVec2_3set_value(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_value = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_value (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "set_value", 0))) return NULL;
  __Pyx_INCREF(__pyx_args);
  __pyx_v_value = __pyx_args;
  __pyx_r = __pyx_pf_8pynodegl_11UniformVec2_2set_value(((struct __pyx_obj_8pynodegl_UniformVec2 *)__pyx_v_self), __pyx_v_value);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_value);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_11UniformVec2_2set_value(struct __pyx_obj_8pynodegl_UniformVec2 *__pyx_v_self, PyObject *__pyx_v_value) {
  float __pyx_v_value_c[2];
  int __pyx_v_value_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  Py_UCS4 __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  int __pyx_t_7;
  float __pyx_t_8;
  __Pyx_RefNannySetupContext("set_value", 0);

  /* "nodes_def.pyx":2673
 *         cdef float[2] value_c
 *         cdef int value_i
 *         if len(value) != 2:             # <<<<<<<<<<<<<<
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (
 *                             "value", 2, len(value)))
 */
  __pyx_t_1 = PyTuple_GET_SIZE(__pyx_v_value); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 2673, __pyx_L1_error)
  __pyx_t_2 = ((__pyx_t_1 != 2) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "nodes_def.pyx":2674
 *         cdef int value_i
 *         if len(value) != 2:
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (             # <<<<<<<<<<<<<<
 *                             "value", 2, len(value)))
 *         for value_i in range(2):
 */
    __pyx_t_3 = PyTuple_New(5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2674, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = 0;
    __pyx_t_4 = 127;
    __Pyx_INCREF(__pyx_kp_u_value_parameter_is_expected_to_b);
    __pyx_t_1 += 37;
    __Pyx_GIVEREF(__pyx_kp_u_value_parameter_is_expected_to_b);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_kp_u_value_parameter_is_expected_to_b);

    /* "nodes_def.pyx":2675
 *         if len(value) != 2:
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (
 *                             "value", 2, len(value)))             # <<<<<<<<<<<<<<
 *         for value_i in range(2):
 *             value_c[value_i] = value[value_i]
 */
    __pyx_t_5 = __Pyx_PyUnicode_From_long(2, 0, ' ', 'd'); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2675, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_INCREF(__pyx_kp_u_but_got);
    __pyx_t_1 += 9;
    __Pyx_GIVEREF(__pyx_kp_u_but_got);
    PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_kp_u_but_got);
    __pyx_t_6 = PyTuple_GET_SIZE(__pyx_v_value); if (unlikely(__pyx_t_6 == ((Py_ssize_t)-1))) __PYX_ERR(0, 2675, __pyx_L1_error)
    __pyx_t_5 = __Pyx_PyUnicode_From_Py_ssize_t(__pyx_t_6, 0, ' ', 'd'); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2675, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_3, 3, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_INCREF(__pyx_kp_u_values);
    __pyx_t_1 += 7;
    __Pyx_GIVEREF(__pyx_kp_u_values);
    PyTuple_SET_ITEM(__pyx_t_3, 4, __pyx_kp_u_values);

    /* "nodes_def.pyx":2674
 *         cdef int value_i
 *         if len(value) != 2:
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (             # <<<<<<<<<<<<<<
 *                             "value", 2, len(value)))
 *         for value_i in range(2):
 */
    __pyx_t_5 = __Pyx_PyUnicode_Join(__pyx_t_3, 5, __pyx_t_1, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2674, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2674, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 2674, __pyx_L1_error)

    /* "nodes_def.pyx":2673
 *         cdef float[2] value_c
 *         cdef int value_i
 *         if len(value) != 2:             # <<<<<<<<<<<<<<
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (
 *                             "value", 2, len(value)))
 */
  }

  /* "nodes_def.pyx":2676
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (
 *                             "value", 2, len(value)))
 *         for value_i in range(2):             # <<<<<<<<<<<<<<
 *             value_c[value_i] = value[value_i]
 * 
 */
  for (__pyx_t_7 = 0; __pyx_t_7 < 2; __pyx_t_7+=1) {
    __pyx_v_value_i = __pyx_t_7;

    /* "nodes_def.pyx":2677
 *                             "value", 2, len(value)))
 *         for value_i in range(2):
 *             value_c[value_i] = value[value_i]             # <<<<<<<<<<<<<<
 * 
 *         return ngl_node_param_set(self.ctx, "value", value_c)
 */
    __pyx_t_3 = __Pyx_GetItemInt_Tuple(__pyx_v_value, __pyx_v_value_i, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2677, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_8 = __pyx_PyFloat_AsFloat(__pyx_t_3); if (unlikely((__pyx_t_8 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 2677, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    (__pyx_v_value_c[__pyx_v_value_i]) = __pyx_t_8;
  }

  /* "nodes_def.pyx":2679
 *             value_c[value_i] = value[value_i]
 * 
 *         return ngl_node_param_set(self.ctx, "value", value_c)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"value"), __pyx_v_value_c)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2679, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":2670
 *             self.set_value(*value)
 * 
 *     def set_value(self, *value):             # <<<<<<<<<<<<<<
 *         cdef float[2] value_c
 *         cdef int value_i
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pynodegl.UniformVec2.set_value", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_11UniformVec2_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pynodegl_11UniformVec2_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_11UniformVec2_4__reduce_cython__(((struct __pyx_obj_8pynodegl_UniformVec2 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_11UniformVec2_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_UniformVec2 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__193, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.UniformVec2.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_11UniformVec2_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8pynodegl_11UniformVec2_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_11UniformVec2_6__setstate_cython__(((struct __pyx_obj_8pynodegl_UniformVec2 *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_11UniformVec2_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_UniformVec2 *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__194, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.UniformVec2.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":2684
 * cdef class UniformVec3(_Node):
 * 
 *     def __init__(self, value=None, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_UNIFORMVEC3)
 */

/* Python wrapper */
static int __pyx_pw_8pynodegl_11UniformVec3_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pynodegl_11UniformVec3_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_value = 0;
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  __pyx_v_kwargs = PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return -1;
  __Pyx_GOTREF(__pyx_v_kwargs);
  if (PyTuple_GET_SIZE(__pyx_args) > 1) {
    __pyx_v_args = PyTuple_GetSlice(__pyx_args, 1, PyTuple_GET_SIZE(__pyx_args));
    if (unlikely(!__pyx_v_args)) {
      __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
      __Pyx_RefNannyFinishContext();
      return -1;
    }
    __Pyx_GOTREF(__pyx_v_args);
  } else {
    __pyx_v_args = __pyx_empty_tuple; __Pyx_INCREF(__pyx_empty_tuple);
  }
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_value,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        default:
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t used_pos_args = (pos_args < 1) ? pos_args : 1;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_kwargs, values, used_pos_args, "__init__") < 0)) __PYX_ERR(0, 2684, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        default:
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
      }
    }
    __pyx_v_value = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_args); __pyx_v_args = 0;
  __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
  __Pyx_AddTraceback("pynodegl.UniformVec3.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pynodegl_11UniformVec3___init__(((struct __pyx_obj_8pynodegl_UniformVec3 *)__pyx_v_self), __pyx_v_value, __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pynodegl_11UniformVec3___init__(struct __pyx_obj_8pynodegl_UniformVec3 *__pyx_v_self, PyObject *__pyx_v_value, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "nodes_def.pyx":2685
 * 
 *     def __init__(self, value=None, *args, **kwargs):
 *         assert self.ctx is NULL             # <<<<<<<<<<<<<<
 *         self.ctx = ngl_node_create(NGL_NODE_UNIFORMVEC3)
 *         if self.ctx is NULL:
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!((__pyx_v_self->__pyx_base.ctx == NULL) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 2685, __pyx_L1_error)
    }
  }
  #endif

  /* "nodes_def.pyx":2686
 *     def __init__(self, value=None, *args, **kwargs):
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_UNIFORMVEC3)             # <<<<<<<<<<<<<<
 *         if self.ctx is NULL:
 *             raise MemoryError()
 */
  __pyx_v_self->__pyx_base.ctx = ngl_node_create(NGL_NODE_UNIFORMVEC3);

  /* "nodes_def.pyx":2687
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_UNIFORMVEC3)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         _Node._init_params(self, *args, **kwargs)
 */
  __pyx_t_1 = ((__pyx_v_self->__pyx_base.ctx == NULL) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "nodes_def.pyx":2688
 *         self.ctx = ngl_node_create(NGL_NODE_UNIFORMVEC3)
 *         if self.ctx is NULL:
 *             raise MemoryError()             # <<<<<<<<<<<<<<
 *         _Node._init_params(self, *args, **kwargs)
 * 
 */
    PyErr_NoMemory(); __PYX_ERR(0, 2688, __pyx_L1_error)

    /* "nodes_def.pyx":2687
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_UNIFORMVEC3)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         _Node._init_params(self, *args, **kwargs)
 */
  }

  /* "nodes_def.pyx":2689
 *         if self.ctx is NULL:
 *             raise MemoryError()
 *         _Node._init_params(self, *args, **kwargs)             # <<<<<<<<<<<<<<
 * 
 *         if value is not None:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_8pynodegl__Node), __pyx_n_s_init_params); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2689, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2689, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_v_self));
  __pyx_t_4 = PyNumber_Add(__pyx_t_3, __pyx_v_args); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2689, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, __pyx_v_kwargs); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2689, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "nodes_def.pyx":2691
 *         _Node._init_params(self, *args, **kwargs)
 * 
 *         if value is not None:             # <<<<<<<<<<<<<<
 *             self.set_value(*value)
 * 
 */
  __pyx_t_1 = (__pyx_v_value != Py_None);
  __pyx_t_5 = (__pyx_t_1 != 0);
  if (__pyx_t_5) {

    /* "nodes_def.pyx":2692
 * 
 *         if value is not None:
 *             self.set_value(*value)             # <<<<<<<<<<<<<<
 * 
 *     def set_value(self, *value):
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_value); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2692, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PySequence_Tuple(__pyx_v_value); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2692, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2692, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "nodes_def.pyx":2691
 *         _Node._init_params(self, *args, **kwargs)
 * 
 *         if value is not None:             # <<<<<<<<<<<<<<
 *             self.set_value(*value)
 * 
 */
  }

  /* "nodes_def.pyx":2684
 * cdef class UniformVec3(_Node):
 * 
 *     def __init__(self, value=None, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_UNIFORMVEC3)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pynodegl.UniformVec3.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":2694
 *             self.set_value(*value)
 * 
 *     def set_value(self, *value):             # <<<<<<<<<<<<<<
 *         cdef float[3] value_c
 *         cdef int value_i
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_11UniformVec3_3set_value(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_8pynodegl_11UniformVec3_3set_value(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_value = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_value (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "set_value", 0))) return NULL;
  __Pyx_INCREF(__pyx_args);
  __pyx_v_value = __pyx_args;
  __pyx_r = __pyx_pf_8pynodegl_11UniformVec3_2set_value(((struct __pyx_obj_8pynodegl_UniformVec3 *)__pyx_v_self), __pyx_v_value);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_value);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_11UniformVec3_2set_value(struct __pyx_obj_8pynodegl_UniformVec3 *__pyx_v_self, PyObject *__pyx_v_value) {
  float __pyx_v_value_c[3];
  int __pyx_v_value_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  Py_UCS4 __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  int __pyx_t_7;
  float __pyx_t_8;
  __Pyx_RefNannySetupContext("set_value", 0);

  /* "nodes_def.pyx":2697
 *         cdef float[3] value_c
 *         cdef int value_i
 *         if len(value) != 3:             # <<<<<<<<<<<<<<
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (
 *                             "value", 3, len(value)))
 */
  __pyx_t_1 = PyTuple_GET_SIZE(__pyx_v_value); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 2697, __pyx_L1_error)
  __pyx_t_2 = ((__pyx_t_1 != 3) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "nodes_def.pyx":2698
 *         cdef int value_i
 *         if len(value) != 3:
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (             # <<<<<<<<<<<<<<
 *                             "value", 3, len(value)))
 *         for value_i in range(3):
 */
    __pyx_t_3 = PyTuple_New(5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2698, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = 0;
    __pyx_t_4 = 127;
    __Pyx_INCREF(__pyx_kp_u_value_parameter_is_expected_to_b);
    __pyx_t_1 += 37;
    __Pyx_GIVEREF(__pyx_kp_u_value_parameter_is_expected_to_b);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_kp_u_value_parameter_is_expected_to_b);

    /* "nodes_def.pyx":2699
 *         if len(value) != 3:
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (
 *                             "value", 3, len(value)))             # <<<<<<<<<<<<<<
 *         for value_i in range(3):
 *             value_c[value_i] = value[value_i]
 */
    __pyx_t_5 = __Pyx_PyUnicode_From_long(3, 0, ' ', 'd'); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2699, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_INCREF(__pyx_kp_u_but_got);
    __pyx_t_1 += 9;
    __Pyx_GIVEREF(__pyx_kp_u_but_got);
    PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_kp_u_but_got);
    __pyx_t_6 = PyTuple_GET_SIZE(__pyx_v_value); if (unlikely(__pyx_t_6 == ((Py_ssize_t)-1))) __PYX_ERR(0, 2699, __pyx_L1_error)
    __pyx_t_5 = __Pyx_PyUnicode_From_Py_ssize_t(__pyx_t_6, 0, ' ', 'd'); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2699, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_3, 3, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_INCREF(__pyx_kp_u_values);
    __pyx_t_1 += 7;
    __Pyx_GIVEREF(__pyx_kp_u_values);
    PyTuple_SET_ITEM(__pyx_t_3, 4, __pyx_kp_u_values);

    /* "nodes_def.pyx":2698
 *         cdef int value_i
 *         if len(value) != 3:
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (             # <<<<<<<<<<<<<<
 *                             "value", 3, len(value)))
 *         for value_i in range(3):
 */
    __pyx_t_5 = __Pyx_PyUnicode_Join(__pyx_t_3, 5, __pyx_t_1, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2698, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2698, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 2698, __pyx_L1_error)

    /* "nodes_def.pyx":2697
 *         cdef float[3] value_c
 *         cdef int value_i
 *         if len(value) != 3:             # <<<<<<<<<<<<<<
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (
 *                             "value", 3, len(value)))
 */
  }

  /* "nodes_def.pyx":2700
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (
 *                             "value", 3, len(value)))
 *         for value_i in range(3):             # <<<<<<<<<<<<<<
 *             value_c[value_i] = value[value_i]
 * 
 */
  for (__pyx_t_7 = 0; __pyx_t_7 < 3; __pyx_t_7+=1) {
    __pyx_v_value_i = __pyx_t_7;

    /* "nodes_def.pyx":2701
 *                             "value", 3, len(value)))
 *         for value_i in range(3):
 *             value_c[value_i] = value[value_i]             # <<<<<<<<<<<<<<
 * 
 *         return ngl_node_param_set(self.ctx, "value", value_c)
 */
    __pyx_t_3 = __Pyx_GetItemInt_Tuple(__pyx_v_value, __pyx_v_value_i, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2701, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_8 = __pyx_PyFloat_AsFloat(__pyx_t_3); if (unlikely((__pyx_t_8 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 2701, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    (__pyx_v_value_c[__pyx_v_value_i]) = __pyx_t_8;
  }

  /* "nodes_def.pyx":2703
 *             value_c[value_i] = value[value_i]
 * 
 *         return ngl_node_param_set(self.ctx, "value", value_c)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"value"), __pyx_v_value_c)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2703, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":2694
 *             self.set_value(*value)
 * 
 *     def set_value(self, *value):             # <<<<<<<<<<<<<<
 *         cdef float[3] value_c
 *         cdef int value_i
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pynodegl.UniformVec3.set_value", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_11UniformVec3_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pynodegl_11UniformVec3_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_11UniformVec3_4__reduce_cython__(((struct __pyx_obj_8pynodegl_UniformVec3 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_11UniformVec3_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_UniformVec3 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__195, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.UniformVec3.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_11UniformVec3_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8pynodegl_11UniformVec3_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_11UniformVec3_6__setstate_cython__(((struct __pyx_obj_8pynodegl_UniformVec3 *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_11UniformVec3_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_UniformVec3 *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__196, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.UniformVec3.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":2708
 * cdef class UniformVec4(_Node):
 * 
 *     def __init__(self, value=None, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_UNIFORMVEC4)
 */

/* Python wrapper */
static int __pyx_pw_8pynodegl_11UniformVec4_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pynodegl_11UniformVec4_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_value = 0;
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  __pyx_v_kwargs = PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return -1;
  __Pyx_GOTREF(__pyx_v_kwargs);
  if (PyTuple_GET_SIZE(__pyx_args) > 1) {
    __pyx_v_args = PyTuple_GetSlice(__pyx_args, 1, PyTuple_GET_SIZE(__pyx_args));
    if (unlikely(!__pyx_v_args)) {
      __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
      __Pyx_RefNannyFinishContext();
      return -1;
    }
    __Pyx_GOTREF(__pyx_v_args);
  } else {
    __pyx_v_args = __pyx_empty_tuple; __Pyx_INCREF(__pyx_empty_tuple);
  }
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_value,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        default:
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t used_pos_args = (pos_args < 1) ? pos_args : 1;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_kwargs, values, used_pos_args, "__init__") < 0)) __PYX_ERR(0, 2708, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        default:
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
      }
    }
    __pyx_v_value = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_args); __pyx_v_args = 0;
  __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
  __Pyx_AddTraceback("pynodegl.UniformVec4.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pynodegl_11UniformVec4___init__(((struct __pyx_obj_8pynodegl_UniformVec4 *)__pyx_v_self), __pyx_v_value, __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pynodegl_11UniformVec4___init__(struct __pyx_obj_8pynodegl_UniformVec4 *__pyx_v_self, PyObject *__pyx_v_value, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "nodes_def.pyx":2709
 * 
 *     def __init__(self, value=None, *args, **kwargs):
 *         assert self.ctx is NULL             # <<<<<<<<<<<<<<
 *         self.ctx = ngl_node_create(NGL_NODE_UNIFORMVEC4)
 *         if self.ctx is NULL:
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!((__pyx_v_self->__pyx_base.ctx == NULL) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 2709, __pyx_L1_error)
    }
  }
  #endif

  /* "nodes_def.pyx":2710
 *     def __init__(self, value=None, *args, **kwargs):
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_UNIFORMVEC4)             # <<<<<<<<<<<<<<
 *         if self.ctx is NULL:
 *             raise MemoryError()
 */
  __pyx_v_self->__pyx_base.ctx = ngl_node_create(NGL_NODE_UNIFORMVEC4);

  /* "nodes_def.pyx":2711
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_UNIFORMVEC4)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         _Node._init_params(self, *args, **kwargs)
 */
  __pyx_t_1 = ((__pyx_v_self->__pyx_base.ctx == NULL) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "nodes_def.pyx":2712
 *         self.ctx = ngl_node_create(NGL_NODE_UNIFORMVEC4)
 *         if self.ctx is NULL:
 *             raise MemoryError()             # <<<<<<<<<<<<<<
 *         _Node._init_params(self, *args, **kwargs)
 * 
 */
    PyErr_NoMemory(); __PYX_ERR(0, 2712, __pyx_L1_error)

    /* "nodes_def.pyx":2711
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_UNIFORMVEC4)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         _Node._init_params(self, *args, **kwargs)
 */
  }

  /* "nodes_def.pyx":2713
 *         if self.ctx is NULL:
 *             raise MemoryError()
 *         _Node._init_params(self, *args, **kwargs)             # <<<<<<<<<<<<<<
 * 
 *         if value is not None:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_8pynodegl__Node), __pyx_n_s_init_params); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2713, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2713, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_v_self));
  __pyx_t_4 = PyNumber_Add(__pyx_t_3, __pyx_v_args); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2713, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, __pyx_v_kwargs); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2713, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "nodes_def.pyx":2715
 *         _Node._init_params(self, *args, **kwargs)
 * 
 *         if value is not None:             # <<<<<<<<<<<<<<
 *             self.set_value(*value)
 * 
 */
  __pyx_t_1 = (__pyx_v_value != Py_None);
  __pyx_t_5 = (__pyx_t_1 != 0);
  if (__pyx_t_5) {

    /* "nodes_def.pyx":2716
 * 
 *         if value is not None:
 *             self.set_value(*value)             # <<<<<<<<<<<<<<
 * 
 *     def set_value(self, *value):
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_value); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2716, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PySequence_Tuple(__pyx_v_value); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2716, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2716, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "nodes_def.pyx":2715
 *         _Node._init_params(self, *args, **kwargs)
 * 
 *         if value is not None:             # <<<<<<<<<<<<<<
 *             self.set_value(*value)
 * 
 */
  }

  /* "nodes_def.pyx":2708
 * cdef class UniformVec4(_Node):
 * 
 *     def __init__(self, value=None, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_UNIFORMVEC4)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pynodegl.UniformVec4.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":2718
 *             self.set_value(*value)
 * 
 *     def set_value(self, *value):             # <<<<<<<<<<<<<<
 *         cdef float[4] value_c
 *         cdef int value_i
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_11UniformVec4_3set_value(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_8pynodegl_11UniformVec4_3set_value(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_value = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_value (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "set_value", 0))) return NULL;
  __Pyx_INCREF(__pyx_args);
  __pyx_v_value = __pyx_args;
  __pyx_r = __pyx_pf_8pynodegl_11UniformVec4_2set_value(((struct __pyx_obj_8pynodegl_UniformVec4 *)__pyx_v_self), __pyx_v_value);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_value);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_11UniformVec4_2set_value(struct __pyx_obj_8pynodegl_UniformVec4 *__pyx_v_self, PyObject *__pyx_v_value) {
  float __pyx_v_value_c[4];
  int __pyx_v_value_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  Py_UCS4 __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  int __pyx_t_7;
  float __pyx_t_8;
  __Pyx_RefNannySetupContext("set_value", 0);

  /* "nodes_def.pyx":2721
 *         cdef float[4] value_c
 *         cdef int value_i
 *         if len(value) != 4:             # <<<<<<<<<<<<<<
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (
 *                             "value", 4, len(value)))
 */
  __pyx_t_1 = PyTuple_GET_SIZE(__pyx_v_value); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 2721, __pyx_L1_error)
  __pyx_t_2 = ((__pyx_t_1 != 4) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "nodes_def.pyx":2722
 *         cdef int value_i
 *         if len(value) != 4:
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (             # <<<<<<<<<<<<<<
 *                             "value", 4, len(value)))
 *         for value_i in range(4):
 */
    __pyx_t_3 = PyTuple_New(5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2722, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = 0;
    __pyx_t_4 = 127;
    __Pyx_INCREF(__pyx_kp_u_value_parameter_is_expected_to_b);
    __pyx_t_1 += 37;
    __Pyx_GIVEREF(__pyx_kp_u_value_parameter_is_expected_to_b);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_kp_u_value_parameter_is_expected_to_b);

    /* "nodes_def.pyx":2723
 *         if len(value) != 4:
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (
 *                             "value", 4, len(value)))             # <<<<<<<<<<<<<<
 *         for value_i in range(4):
 *             value_c[value_i] = value[value_i]
 */
    __pyx_t_5 = __Pyx_PyUnicode_From_long(4, 0, ' ', 'd'); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2723, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_INCREF(__pyx_kp_u_but_got);
    __pyx_t_1 += 9;
    __Pyx_GIVEREF(__pyx_kp_u_but_got);
    PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_kp_u_but_got);
    __pyx_t_6 = PyTuple_GET_SIZE(__pyx_v_value); if (unlikely(__pyx_t_6 == ((Py_ssize_t)-1))) __PYX_ERR(0, 2723, __pyx_L1_error)
    __pyx_t_5 = __Pyx_PyUnicode_From_Py_ssize_t(__pyx_t_6, 0, ' ', 'd'); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2723, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_3, 3, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_INCREF(__pyx_kp_u_values);
    __pyx_t_1 += 7;
    __Pyx_GIVEREF(__pyx_kp_u_values);
    PyTuple_SET_ITEM(__pyx_t_3, 4, __pyx_kp_u_values);

    /* "nodes_def.pyx":2722
 *         cdef int value_i
 *         if len(value) != 4:
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (             # <<<<<<<<<<<<<<
 *                             "value", 4, len(value)))
 *         for value_i in range(4):
 */
    __pyx_t_5 = __Pyx_PyUnicode_Join(__pyx_t_3, 5, __pyx_t_1, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2722, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2722, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 2722, __pyx_L1_error)

    /* "nodes_def.pyx":2721
 *         cdef float[4] value_c
 *         cdef int value_i
 *         if len(value) != 4:             # <<<<<<<<<<<<<<
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (
 *                             "value", 4, len(value)))
 */
  }

  /* "nodes_def.pyx":2724
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (
 *                             "value", 4, len(value)))
 *         for value_i in range(4):             # <<<<<<<<<<<<<<
 *             value_c[value_i] = value[value_i]
 * 
 */
  for (__pyx_t_7 = 0; __pyx_t_7 < 4; __pyx_t_7+=1) {
    __pyx_v_value_i = __pyx_t_7;

    /* "nodes_def.pyx":2725
 *                             "value", 4, len(value)))
 *         for value_i in range(4):
 *             value_c[value_i] = value[value_i]             # <<<<<<<<<<<<<<
 * 
 *         return ngl_node_param_set(self.ctx, "value", value_c)
 */
    __pyx_t_3 = __Pyx_GetItemInt_Tuple(__pyx_v_value, __pyx_v_value_i, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2725, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_8 = __pyx_PyFloat_AsFloat(__pyx_t_3); if (unlikely((__pyx_t_8 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 2725, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    (__pyx_v_value_c[__pyx_v_value_i]) = __pyx_t_8;
  }

  /* "nodes_def.pyx":2727
 *             value_c[value_i] = value[value_i]
 * 
 *         return ngl_node_param_set(self.ctx, "value", value_c)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"value"), __pyx_v_value_c)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2727, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":2718
 *             self.set_value(*value)
 * 
 *     def set_value(self, *value):             # <<<<<<<<<<<<<<
 *         cdef float[4] value_c
 *         cdef int value_i
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pynodegl.UniformVec4.set_value", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_11UniformVec4_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pynodegl_11UniformVec4_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_11UniformVec4_4__reduce_cython__(((struct __pyx_obj_8pynodegl_UniformVec4 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_11UniformVec4_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_UniformVec4 *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__197, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.UniformVec4.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_11UniformVec4_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8pynodegl_11UniformVec4_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_11UniformVec4_6__setstate_cython__(((struct __pyx_obj_8pynodegl_UniformVec4 *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_11UniformVec4_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_UniformVec4 *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__198, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.UniformVec4.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":2732
 * cdef class UniformQuat(_Node):
 * 
 *     def __init__(self, value=None, as_mat4=None, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_UNIFORMQUAT)
 */

/* Python wrapper */
static int __pyx_pw_8pynodegl_11UniformQuat_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pynodegl_11UniformQuat_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_value = 0;
  PyObject *__pyx_v_as_mat4 = 0;
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  __pyx_v_kwargs = PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return -1;
  __Pyx_GOTREF(__pyx_v_kwargs);
  if (PyTuple_GET_SIZE(__pyx_args) > 2) {
    __pyx_v_args = PyTuple_GetSlice(__pyx_args, 2, PyTuple_GET_SIZE(__pyx_args));
    if (unlikely(!__pyx_v_args)) {
      __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
      __Pyx_RefNannyFinishContext();
      return -1;
    }
    __Pyx_GOTREF(__pyx_v_args);
  } else {
    __pyx_v_args = __pyx_empty_tuple; __Pyx_INCREF(__pyx_empty_tuple);
  }
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_value,&__pyx_n_s_as_mat4,0};
    PyObject* values[2] = {0,0};
    values[0] = ((PyObject *)Py_None);
    values[1] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        default:
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_as_mat4);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t used_pos_args = (pos_args < 2) ? pos_args : 2;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_kwargs, values, used_pos_args, "__init__") < 0)) __PYX_ERR(0, 2732, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        default:
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
      }
    }
    __pyx_v_value = values[0];
    __pyx_v_as_mat4 = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_args); __pyx_v_args = 0;
  __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
  __Pyx_AddTraceback("pynodegl.UniformQuat.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pynodegl_11UniformQuat___init__(((struct __pyx_obj_8pynodegl_UniformQuat *)__pyx_v_self), __pyx_v_value, __pyx_v_as_mat4, __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pynodegl_11UniformQuat___init__(struct __pyx_obj_8pynodegl_UniformQuat *__pyx_v_self, PyObject *__pyx_v_value, PyObject *__pyx_v_as_mat4, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "nodes_def.pyx":2733
 * 
 *     def __init__(self, value=None, as_mat4=None, *args, **kwargs):
 *         assert self.ctx is NULL             # <<<<<<<<<<<<<<
 *         self.ctx = ngl_node_create(NGL_NODE_UNIFORMQUAT)
 *         if self.ctx is NULL:
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!((__pyx_v_self->__pyx_base.ctx == NULL) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 2733, __pyx_L1_error)
    }
  }
  #endif

  /* "nodes_def.pyx":2734
 *     def __init__(self, value=None, as_mat4=None, *args, **kwargs):
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_UNIFORMQUAT)             # <<<<<<<<<<<<<<
 *         if self.ctx is NULL:
 *             raise MemoryError()
 */
  __pyx_v_self->__pyx_base.ctx = ngl_node_create(NGL_NODE_UNIFORMQUAT);

  /* "nodes_def.pyx":2735
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_UNIFORMQUAT)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         _Node._init_params(self, *args, **kwargs)
 */
  __pyx_t_1 = ((__pyx_v_self->__pyx_base.ctx == NULL) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "nodes_def.pyx":2736
 *         self.ctx = ngl_node_create(NGL_NODE_UNIFORMQUAT)
 *         if self.ctx is NULL:
 *             raise MemoryError()             # <<<<<<<<<<<<<<
 *         _Node._init_params(self, *args, **kwargs)
 * 
 */
    PyErr_NoMemory(); __PYX_ERR(0, 2736, __pyx_L1_error)

    /* "nodes_def.pyx":2735
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_UNIFORMQUAT)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         _Node._init_params(self, *args, **kwargs)
 */
  }

  /* "nodes_def.pyx":2737
 *         if self.ctx is NULL:
 *             raise MemoryError()
 *         _Node._init_params(self, *args, **kwargs)             # <<<<<<<<<<<<<<
 * 
 *         if value is not None:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_8pynodegl__Node), __pyx_n_s_init_params); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2737, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2737, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_v_self));
  __pyx_t_4 = PyNumber_Add(__pyx_t_3, __pyx_v_args); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2737, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, __pyx_v_kwargs); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2737, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "nodes_def.pyx":2739
 *         _Node._init_params(self, *args, **kwargs)
 * 
 *         if value is not None:             # <<<<<<<<<<<<<<
 *             self.set_value(*value)
 *         if as_mat4 is not None:
 */
  __pyx_t_1 = (__pyx_v_value != Py_None);
  __pyx_t_5 = (__pyx_t_1 != 0);
  if (__pyx_t_5) {

    /* "nodes_def.pyx":2740
 * 
 *         if value is not None:
 *             self.set_value(*value)             # <<<<<<<<<<<<<<
 *         if as_mat4 is not None:
 *             self.set_as_mat4(as_mat4)
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_value); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2740, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PySequence_Tuple(__pyx_v_value); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2740, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2740, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "nodes_def.pyx":2739
 *         _Node._init_params(self, *args, **kwargs)
 * 
 *         if value is not None:             # <<<<<<<<<<<<<<
 *             self.set_value(*value)
 *         if as_mat4 is not None:
 */
  }

  /* "nodes_def.pyx":2741
 *         if value is not None:
 *             self.set_value(*value)
 *         if as_mat4 is not None:             # <<<<<<<<<<<<<<
 *             self.set_as_mat4(as_mat4)
 * 
 */
  __pyx_t_5 = (__pyx_v_as_mat4 != Py_None);
  __pyx_t_1 = (__pyx_t_5 != 0);
  if (__pyx_t_1) {

    /* "nodes_def.pyx":2742
 *             self.set_value(*value)
 *         if as_mat4 is not None:
 *             self.set_as_mat4(as_mat4)             # <<<<<<<<<<<<<<
 * 
 *     def set_value(self, *value):
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_as_mat4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2742, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_2 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_3, __pyx_v_as_mat4) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_as_mat4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2742, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "nodes_def.pyx":2741
 *         if value is not None:
 *             self.set_value(*value)
 *         if as_mat4 is not None:             # <<<<<<<<<<<<<<
 *             self.set_as_mat4(as_mat4)
 * 
 */
  }

  /* "nodes_def.pyx":2732
 * cdef class UniformQuat(_Node):
 * 
 *     def __init__(self, value=None, as_mat4=None, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_UNIFORMQUAT)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pynodegl.UniformQuat.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":2744
 *             self.set_as_mat4(as_mat4)
 * 
 *     def set_value(self, *value):             # <<<<<<<<<<<<<<
 *         cdef float[4] value_c
 *         cdef int value_i
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_11UniformQuat_3set_value(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_8pynodegl_11UniformQuat_3set_value(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_value = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_value (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "set_value", 0))) return NULL;
  __Pyx_INCREF(__pyx_args);
  __pyx_v_value = __pyx_args;
  __pyx_r = __pyx_pf_8pynodegl_11UniformQuat_2set_value(((struct __pyx_obj_8pynodegl_UniformQuat *)__pyx_v_self), __pyx_v_value);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_value);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_11UniformQuat_2set_value(struct __pyx_obj_8pynodegl_UniformQuat *__pyx_v_self, PyObject *__pyx_v_value) {
  float __pyx_v_value_c[4];
  int __pyx_v_value_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  Py_UCS4 __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  int __pyx_t_7;
  float __pyx_t_8;
  __Pyx_RefNannySetupContext("set_value", 0);

  /* "nodes_def.pyx":2747
 *         cdef float[4] value_c
 *         cdef int value_i
 *         if len(value) != 4:             # <<<<<<<<<<<<<<
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (
 *                             "value", 4, len(value)))
 */
  __pyx_t_1 = PyTuple_GET_SIZE(__pyx_v_value); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 2747, __pyx_L1_error)
  __pyx_t_2 = ((__pyx_t_1 != 4) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "nodes_def.pyx":2748
 *         cdef int value_i
 *         if len(value) != 4:
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (             # <<<<<<<<<<<<<<
 *                             "value", 4, len(value)))
 *         for value_i in range(4):
 */
    __pyx_t_3 = PyTuple_New(5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2748, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = 0;
    __pyx_t_4 = 127;
    __Pyx_INCREF(__pyx_kp_u_value_parameter_is_expected_to_b);
    __pyx_t_1 += 37;
    __Pyx_GIVEREF(__pyx_kp_u_value_parameter_is_expected_to_b);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_kp_u_value_parameter_is_expected_to_b);

    /* "nodes_def.pyx":2749
 *         if len(value) != 4:
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (
 *                             "value", 4, len(value)))             # <<<<<<<<<<<<<<
 *         for value_i in range(4):
 *             value_c[value_i] = value[value_i]
 */
    __pyx_t_5 = __Pyx_PyUnicode_From_long(4, 0, ' ', 'd'); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2749, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_INCREF(__pyx_kp_u_but_got);
    __pyx_t_1 += 9;
    __Pyx_GIVEREF(__pyx_kp_u_but_got);
    PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_kp_u_but_got);
    __pyx_t_6 = PyTuple_GET_SIZE(__pyx_v_value); if (unlikely(__pyx_t_6 == ((Py_ssize_t)-1))) __PYX_ERR(0, 2749, __pyx_L1_error)
    __pyx_t_5 = __Pyx_PyUnicode_From_Py_ssize_t(__pyx_t_6, 0, ' ', 'd'); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2749, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_3, 3, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_INCREF(__pyx_kp_u_values);
    __pyx_t_1 += 7;
    __Pyx_GIVEREF(__pyx_kp_u_values);
    PyTuple_SET_ITEM(__pyx_t_3, 4, __pyx_kp_u_values);

    /* "nodes_def.pyx":2748
 *         cdef int value_i
 *         if len(value) != 4:
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (             # <<<<<<<<<<<<<<
 *                             "value", 4, len(value)))
 *         for value_i in range(4):
 */
    __pyx_t_5 = __Pyx_PyUnicode_Join(__pyx_t_3, 5, __pyx_t_1, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2748, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2748, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 2748, __pyx_L1_error)

    /* "nodes_def.pyx":2747
 *         cdef float[4] value_c
 *         cdef int value_i
 *         if len(value) != 4:             # <<<<<<<<<<<<<<
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (
 *                             "value", 4, len(value)))
 */
  }

  /* "nodes_def.pyx":2750
 *             raise TypeError("%s parameter is expected to be vec%d but got %d values" % (
 *                             "value", 4, len(value)))
 *         for value_i in range(4):             # <<<<<<<<<<<<<<
 *             value_c[value_i] = value[value_i]
 * 
 */
  for (__pyx_t_7 = 0; __pyx_t_7 < 4; __pyx_t_7+=1) {
    __pyx_v_value_i = __pyx_t_7;

    /* "nodes_def.pyx":2751
 *                             "value", 4, len(value)))
 *         for value_i in range(4):
 *             value_c[value_i] = value[value_i]             # <<<<<<<<<<<<<<
 * 
 *         return ngl_node_param_set(self.ctx, "value", value_c)
 */
    __pyx_t_3 = __Pyx_GetItemInt_Tuple(__pyx_v_value, __pyx_v_value_i, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2751, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_8 = __pyx_PyFloat_AsFloat(__pyx_t_3); if (unlikely((__pyx_t_8 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 2751, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    (__pyx_v_value_c[__pyx_v_value_i]) = __pyx_t_8;
  }

  /* "nodes_def.pyx":2753
 *             value_c[value_i] = value[value_i]
 * 
 *         return ngl_node_param_set(self.ctx, "value", value_c)             # <<<<<<<<<<<<<<
 * 
 *     def set_as_mat4(self, bint as_mat4):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"value"), __pyx_v_value_c)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2753, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":2744
 *             self.set_as_mat4(as_mat4)
 * 
 *     def set_value(self, *value):             # <<<<<<<<<<<<<<
 *         cdef float[4] value_c
 *         cdef int value_i
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pynodegl.UniformQuat.set_value", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":2755
 *         return ngl_node_param_set(self.ctx, "value", value_c)
 * 
 *     def set_as_mat4(self, bint as_mat4):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "as_mat4", as_mat4)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_11UniformQuat_5set_as_mat4(PyObject *__pyx_v_self, PyObject *__pyx_arg_as_mat4); /*proto*/
static PyObject *__pyx_pw_8pynodegl_11UniformQuat_5set_as_mat4(PyObject *__pyx_v_self, PyObject *__pyx_arg_as_mat4) {
  int __pyx_v_as_mat4;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_as_mat4 (wrapper)", 0);
  assert(__pyx_arg_as_mat4); {
    __pyx_v_as_mat4 = __Pyx_PyObject_IsTrue(__pyx_arg_as_mat4); if (unlikely((__pyx_v_as_mat4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2755, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pynodegl.UniformQuat.set_as_mat4", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pynodegl_11UniformQuat_4set_as_mat4(((struct __pyx_obj_8pynodegl_UniformQuat *)__pyx_v_self), ((int)__pyx_v_as_mat4));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_11UniformQuat_4set_as_mat4(struct __pyx_obj_8pynodegl_UniformQuat *__pyx_v_self, int __pyx_v_as_mat4) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("set_as_mat4", 0);

  /* "nodes_def.pyx":2756
 * 
 *     def set_as_mat4(self, bint as_mat4):
 *         return ngl_node_param_set(self.ctx, "as_mat4", as_mat4)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"as_mat4"), __pyx_v_as_mat4)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2756, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":2755
 *         return ngl_node_param_set(self.ctx, "value", value_c)
 * 
 *     def set_as_mat4(self, bint as_mat4):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "as_mat4", as_mat4)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.UniformQuat.set_as_mat4", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_11UniformQuat_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pynodegl_11UniformQuat_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_11UniformQuat_6__reduce_cython__(((struct __pyx_obj_8pynodegl_UniformQuat *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_11UniformQuat_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_UniformQuat *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__199, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.UniformQuat.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_11UniformQuat_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8pynodegl_11UniformQuat_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_11UniformQuat_8__setstate_cython__(((struct __pyx_obj_8pynodegl_UniformQuat *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_11UniformQuat_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_UniformQuat *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__200, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.UniformQuat.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":2761
 * cdef class UserSwitch(_Node):
 * 
 *     def __init__(self, _Node child, enabled=None, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         assert child is not None
 * 
 */

/* Python wrapper */
static int __pyx_pw_8pynodegl_10UserSwitch_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pynodegl_10UserSwitch_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_8pynodegl__Node *__pyx_v_child = 0;
  PyObject *__pyx_v_enabled = 0;
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  __pyx_v_kwargs = PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return -1;
  __Pyx_GOTREF(__pyx_v_kwargs);
  if (PyTuple_GET_SIZE(__pyx_args) > 2) {
    __pyx_v_args = PyTuple_GetSlice(__pyx_args, 2, PyTuple_GET_SIZE(__pyx_args));
    if (unlikely(!__pyx_v_args)) {
      __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
      __Pyx_RefNannyFinishContext();
      return -1;
    }
    __Pyx_GOTREF(__pyx_v_args);
  } else {
    __pyx_v_args = __pyx_empty_tuple; __Pyx_INCREF(__pyx_empty_tuple);
  }
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_child,&__pyx_n_s_enabled,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        default:
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_child)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_enabled);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t used_pos_args = (pos_args < 2) ? pos_args : 2;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, __pyx_v_kwargs, values, used_pos_args, "__init__") < 0)) __PYX_ERR(0, 2761, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        default:
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        case  0:
        goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_child = ((struct __pyx_obj_8pynodegl__Node *)values[0]);
    __pyx_v_enabled = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2761, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_args); __pyx_v_args = 0;
  __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
  __Pyx_AddTraceback("pynodegl.UserSwitch.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_child), __pyx_ptype_8pynodegl__Node, 1, "child", 0))) __PYX_ERR(0, 2761, __pyx_L1_error)
  __pyx_r = __pyx_pf_8pynodegl_10UserSwitch___init__(((struct __pyx_obj_8pynodegl_UserSwitch *)__pyx_v_self), __pyx_v_child, __pyx_v_enabled, __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pynodegl_10UserSwitch___init__(struct __pyx_obj_8pynodegl_UserSwitch *__pyx_v_self, struct __pyx_obj_8pynodegl__Node *__pyx_v_child, PyObject *__pyx_v_enabled, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "nodes_def.pyx":2762
 * 
 *     def __init__(self, _Node child, enabled=None, *args, **kwargs):
 *         assert child is not None             # <<<<<<<<<<<<<<
 * 
 *         assert self.ctx is NULL
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = (((PyObject *)__pyx_v_child) != Py_None);
    if (unlikely(!(__pyx_t_1 != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 2762, __pyx_L1_error)
    }
  }
  #endif

  /* "nodes_def.pyx":2764
 *         assert child is not None
 * 
 *         assert self.ctx is NULL             # <<<<<<<<<<<<<<
 *         self.ctx = ngl_node_create(NGL_NODE_USERSWITCH, child.ctx)
 *         if self.ctx is NULL:
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!((__pyx_v_self->__pyx_base.ctx == NULL) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(0, 2764, __pyx_L1_error)
    }
  }
  #endif

  /* "nodes_def.pyx":2765
 * 
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_USERSWITCH, child.ctx)             # <<<<<<<<<<<<<<
 *         if self.ctx is NULL:
 *             raise MemoryError()
 */
  __pyx_v_self->__pyx_base.ctx = ngl_node_create(NGL_NODE_USERSWITCH, __pyx_v_child->ctx);

  /* "nodes_def.pyx":2766
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_USERSWITCH, child.ctx)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         _Node._init_params(self, *args, **kwargs)
 */
  __pyx_t_1 = ((__pyx_v_self->__pyx_base.ctx == NULL) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "nodes_def.pyx":2767
 *         self.ctx = ngl_node_create(NGL_NODE_USERSWITCH, child.ctx)
 *         if self.ctx is NULL:
 *             raise MemoryError()             # <<<<<<<<<<<<<<
 *         _Node._init_params(self, *args, **kwargs)
 * 
 */
    PyErr_NoMemory(); __PYX_ERR(0, 2767, __pyx_L1_error)

    /* "nodes_def.pyx":2766
 *         assert self.ctx is NULL
 *         self.ctx = ngl_node_create(NGL_NODE_USERSWITCH, child.ctx)
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 *         _Node._init_params(self, *args, **kwargs)
 */
  }

  /* "nodes_def.pyx":2768
 *         if self.ctx is NULL:
 *             raise MemoryError()
 *         _Node._init_params(self, *args, **kwargs)             # <<<<<<<<<<<<<<
 * 
 *         if enabled is not None:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_8pynodegl__Node), __pyx_n_s_init_params); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2768, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2768, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_v_self));
  __pyx_t_4 = PyNumber_Add(__pyx_t_3, __pyx_v_args); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2768, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, __pyx_v_kwargs); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2768, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "nodes_def.pyx":2770
 *         _Node._init_params(self, *args, **kwargs)
 * 
 *         if enabled is not None:             # <<<<<<<<<<<<<<
 *             self.set_enabled(enabled)
 * 
 */
  __pyx_t_1 = (__pyx_v_enabled != Py_None);
  __pyx_t_5 = (__pyx_t_1 != 0);
  if (__pyx_t_5) {

    /* "nodes_def.pyx":2771
 * 
 *         if enabled is not None:
 *             self.set_enabled(enabled)             # <<<<<<<<<<<<<<
 * 
 *     def set_enabled(self, bint enabled):
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_enabled); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2771, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_2, __pyx_v_enabled) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_enabled);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2771, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "nodes_def.pyx":2770
 *         _Node._init_params(self, *args, **kwargs)
 * 
 *         if enabled is not None:             # <<<<<<<<<<<<<<
 *             self.set_enabled(enabled)
 * 
 */
  }

  /* "nodes_def.pyx":2761
 * cdef class UserSwitch(_Node):
 * 
 *     def __init__(self, _Node child, enabled=None, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         assert child is not None
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pynodegl.UserSwitch.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "nodes_def.pyx":2773
 *             self.set_enabled(enabled)
 * 
 *     def set_enabled(self, bint enabled):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "enabled", enabled)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_10UserSwitch_3set_enabled(PyObject *__pyx_v_self, PyObject *__pyx_arg_enabled); /*proto*/
static PyObject *__pyx_pw_8pynodegl_10UserSwitch_3set_enabled(PyObject *__pyx_v_self, PyObject *__pyx_arg_enabled) {
  int __pyx_v_enabled;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_enabled (wrapper)", 0);
  assert(__pyx_arg_enabled); {
    __pyx_v_enabled = __Pyx_PyObject_IsTrue(__pyx_arg_enabled); if (unlikely((__pyx_v_enabled == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2773, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pynodegl.UserSwitch.set_enabled", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pynodegl_10UserSwitch_2set_enabled(((struct __pyx_obj_8pynodegl_UserSwitch *)__pyx_v_self), ((int)__pyx_v_enabled));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_10UserSwitch_2set_enabled(struct __pyx_obj_8pynodegl_UserSwitch *__pyx_v_self, int __pyx_v_enabled) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("set_enabled", 0);

  /* "nodes_def.pyx":2774
 * 
 *     def set_enabled(self, bint enabled):
 *         return ngl_node_param_set(self.ctx, "enabled", enabled)             # <<<<<<<<<<<<<<
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(ngl_node_param_set(__pyx_v_self->__pyx_base.ctx, ((char const *)"enabled"), __pyx_v_enabled)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2774, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "nodes_def.pyx":2773
 *             self.set_enabled(enabled)
 * 
 *     def set_enabled(self, bint enabled):             # <<<<<<<<<<<<<<
 *         return ngl_node_param_set(self.ctx, "enabled", enabled)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.UserSwitch.set_enabled", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_10UserSwitch_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pynodegl_10UserSwitch_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_10UserSwitch_4__reduce_cython__(((struct __pyx_obj_8pynodegl_UserSwitch *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_10UserSwitch_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_UserSwitch *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__201, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.UserSwitch.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_10UserSwitch_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8pynodegl_10UserSwitch_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_10UserSwitch_6__setstate_cython__(((struct __pyx_obj_8pynodegl_UserSwitch *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_10UserSwitch_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_UserSwitch *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__202, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.UserSwitch.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynodegl.pyx":124
 * include "nodes_def.pyx"
 * 
 * def log_set_min_level(int level):             # <<<<<<<<<<<<<<
 *     ngl_log_set_min_level(level)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_1log_set_min_level(PyObject *__pyx_self, PyObject *__pyx_arg_level); /*proto*/
static PyMethodDef __pyx_mdef_8pynodegl_1log_set_min_level = {"log_set_min_level", (PyCFunction)__pyx_pw_8pynodegl_1log_set_min_level, METH_O, 0};
static PyObject *__pyx_pw_8pynodegl_1log_set_min_level(PyObject *__pyx_self, PyObject *__pyx_arg_level) {
  int __pyx_v_level;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("log_set_min_level (wrapper)", 0);
  assert(__pyx_arg_level); {
    __pyx_v_level = __Pyx_PyInt_As_int(__pyx_arg_level); if (unlikely((__pyx_v_level == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 124, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pynodegl.log_set_min_level", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pynodegl_log_set_min_level(__pyx_self, ((int)__pyx_v_level));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_log_set_min_level(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_level) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("log_set_min_level", 0);

  /* "pynodegl.pyx":125
 * 
 * def log_set_min_level(int level):
 *     ngl_log_set_min_level(level)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  ngl_log_set_min_level(__pyx_v_level);

  /* "pynodegl.pyx":124
 * include "nodes_def.pyx"
 * 
 * def log_set_min_level(int level):             # <<<<<<<<<<<<<<
 *     ngl_log_set_min_level(level)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynodegl.pyx":128
 * 
 * 
 * cdef _eval_solve(name, src, args, offsets, evaluate):             # <<<<<<<<<<<<<<
 *     cdef double c_args[2]
 *     cdef double *c_args_param = NULL
 */

static PyObject *__pyx_f_8pynodegl__eval_solve(PyObject *__pyx_v_name, PyObject *__pyx_v_src, PyObject *__pyx_v_args, PyObject *__pyx_v_offsets, PyObject *__pyx_v_evaluate) {
  double __pyx_v_c_args[2];
  double *__pyx_v_c_args_param;
  int __pyx_v_nb_args;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_v_arg = NULL;
  double __pyx_v_c_offsets[2];
  double *__pyx_v_c_offsets_param;
  double __pyx_v_dst;
  int __pyx_v_ret;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *(*__pyx_t_6)(PyObject *);
  PyObject *__pyx_t_7 = NULL;
  double __pyx_t_8;
  Py_ssize_t __pyx_t_9;
  char const *__pyx_t_10;
  char const *__pyx_t_11;
  __Pyx_RefNannySetupContext("_eval_solve", 0);

  /* "pynodegl.pyx":130
 * cdef _eval_solve(name, src, args, offsets, evaluate):
 *     cdef double c_args[2]
 *     cdef double *c_args_param = NULL             # <<<<<<<<<<<<<<
 *     cdef int nb_args = 0
 *     if args is not None:
 */
  __pyx_v_c_args_param = NULL;

  /* "pynodegl.pyx":131
 *     cdef double c_args[2]
 *     cdef double *c_args_param = NULL
 *     cdef int nb_args = 0             # <<<<<<<<<<<<<<
 *     if args is not None:
 *         nb_args = len(args)
 */
  __pyx_v_nb_args = 0;

  /* "pynodegl.pyx":132
 *     cdef double *c_args_param = NULL
 *     cdef int nb_args = 0
 *     if args is not None:             # <<<<<<<<<<<<<<
 *         nb_args = len(args)
 *         if nb_args > 2:
 */
  __pyx_t_1 = (__pyx_v_args != Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "pynodegl.pyx":133
 *     cdef int nb_args = 0
 *     if args is not None:
 *         nb_args = len(args)             # <<<<<<<<<<<<<<
 *         if nb_args > 2:
 *             raise Exception("Easings do not support more than 2 arguments")
 */
    __pyx_t_3 = PyObject_Length(__pyx_v_args); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(1, 133, __pyx_L1_error)
    __pyx_v_nb_args = __pyx_t_3;

    /* "pynodegl.pyx":134
 *     if args is not None:
 *         nb_args = len(args)
 *         if nb_args > 2:             # <<<<<<<<<<<<<<
 *             raise Exception("Easings do not support more than 2 arguments")
 *         for i, arg in enumerate(args):
 */
    __pyx_t_2 = ((__pyx_v_nb_args > 2) != 0);
    if (unlikely(__pyx_t_2)) {

      /* "pynodegl.pyx":135
 *         nb_args = len(args)
 *         if nb_args > 2:
 *             raise Exception("Easings do not support more than 2 arguments")             # <<<<<<<<<<<<<<
 *         for i, arg in enumerate(args):
 *             c_args[i] = arg
 */
      __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__203, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 135, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_Raise(__pyx_t_4, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __PYX_ERR(1, 135, __pyx_L1_error)

      /* "pynodegl.pyx":134
 *     if args is not None:
 *         nb_args = len(args)
 *         if nb_args > 2:             # <<<<<<<<<<<<<<
 *             raise Exception("Easings do not support more than 2 arguments")
 *         for i, arg in enumerate(args):
 */
    }

    /* "pynodegl.pyx":136
 *         if nb_args > 2:
 *             raise Exception("Easings do not support more than 2 arguments")
 *         for i, arg in enumerate(args):             # <<<<<<<<<<<<<<
 *             c_args[i] = arg
 *         c_args_param = c_args
 */
    __Pyx_INCREF(__pyx_int_0);
    __pyx_t_4 = __pyx_int_0;
    if (likely(PyList_CheckExact(__pyx_v_args)) || PyTuple_CheckExact(__pyx_v_args)) {
      __pyx_t_5 = __pyx_v_args; __Pyx_INCREF(__pyx_t_5); __pyx_t_3 = 0;
      __pyx_t_6 = NULL;
    } else {
      __pyx_t_3 = -1; __pyx_t_5 = PyObject_GetIter(__pyx_v_args); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 136, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = Py_TYPE(__pyx_t_5)->tp_iternext; if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 136, __pyx_L1_error)
    }
    for (;;) {
      if (likely(!__pyx_t_6)) {
        if (likely(PyList_CheckExact(__pyx_t_5))) {
          if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_5)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_7 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_3); __Pyx_INCREF(__pyx_t_7); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(1, 136, __pyx_L1_error)
          #else
          __pyx_t_7 = PySequence_ITEM(__pyx_t_5, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 136, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          #endif
        } else {
          if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_5)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_7 = PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_3); __Pyx_INCREF(__pyx_t_7); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(1, 136, __pyx_L1_error)
          #else
          __pyx_t_7 = PySequence_ITEM(__pyx_t_5, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 136, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          #endif
        }
      } else {
        __pyx_t_7 = __pyx_t_6(__pyx_t_5);
        if (unlikely(!__pyx_t_7)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(1, 136, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_7);
      }
      __Pyx_XDECREF_SET(__pyx_v_arg, __pyx_t_7);
      __pyx_t_7 = 0;
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_4);
      __pyx_t_7 = __Pyx_PyInt_AddObjC(__pyx_t_4, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 136, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_4);
      __pyx_t_4 = __pyx_t_7;
      __pyx_t_7 = 0;

      /* "pynodegl.pyx":137
 *             raise Exception("Easings do not support more than 2 arguments")
 *         for i, arg in enumerate(args):
 *             c_args[i] = arg             # <<<<<<<<<<<<<<
 *         c_args_param = c_args
 * 
 */
      __pyx_t_8 = __pyx_PyFloat_AsDouble(__pyx_v_arg); if (unlikely((__pyx_t_8 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 137, __pyx_L1_error)
      __pyx_t_9 = __Pyx_PyIndex_AsSsize_t(__pyx_v_i); if (unlikely((__pyx_t_9 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 137, __pyx_L1_error)
      (__pyx_v_c_args[__pyx_t_9]) = __pyx_t_8;

      /* "pynodegl.pyx":136
 *         if nb_args > 2:
 *             raise Exception("Easings do not support more than 2 arguments")
 *         for i, arg in enumerate(args):             # <<<<<<<<<<<<<<
 *             c_args[i] = arg
 *         c_args_param = c_args
 */
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "pynodegl.pyx":138
 *         for i, arg in enumerate(args):
 *             c_args[i] = arg
 *         c_args_param = c_args             # <<<<<<<<<<<<<<
 * 
 *     cdef double c_offsets[2]
 */
    __pyx_v_c_args_param = __pyx_v_c_args;

    /* "pynodegl.pyx":132
 *     cdef double *c_args_param = NULL
 *     cdef int nb_args = 0
 *     if args is not None:             # <<<<<<<<<<<<<<
 *         nb_args = len(args)
 *         if nb_args > 2:
 */
  }

  /* "pynodegl.pyx":141
 * 
 *     cdef double c_offsets[2]
 *     cdef double *c_offsets_param = NULL             # <<<<<<<<<<<<<<
 *     if offsets is not None:
 *         c_offsets[0] = offsets[0]
 */
  __pyx_v_c_offsets_param = NULL;

  /* "pynodegl.pyx":142
 *     cdef double c_offsets[2]
 *     cdef double *c_offsets_param = NULL
 *     if offsets is not None:             # <<<<<<<<<<<<<<
 *         c_offsets[0] = offsets[0]
 *         c_offsets[1] = offsets[1]
 */
  __pyx_t_2 = (__pyx_v_offsets != Py_None);
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "pynodegl.pyx":143
 *     cdef double *c_offsets_param = NULL
 *     if offsets is not None:
 *         c_offsets[0] = offsets[0]             # <<<<<<<<<<<<<<
 *         c_offsets[1] = offsets[1]
 *         c_offsets_param = c_offsets
 */
    __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_offsets, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 143, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_8 = __pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_8 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 143, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    (__pyx_v_c_offsets[0]) = __pyx_t_8;

    /* "pynodegl.pyx":144
 *     if offsets is not None:
 *         c_offsets[0] = offsets[0]
 *         c_offsets[1] = offsets[1]             # <<<<<<<<<<<<<<
 *         c_offsets_param = c_offsets
 * 
 */
    __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_offsets, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 144, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_8 = __pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_8 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 144, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    (__pyx_v_c_offsets[1]) = __pyx_t_8;

    /* "pynodegl.pyx":145
 *         c_offsets[0] = offsets[0]
 *         c_offsets[1] = offsets[1]
 *         c_offsets_param = c_offsets             # <<<<<<<<<<<<<<
 * 
 *     cdef double dst
 */
    __pyx_v_c_offsets_param = __pyx_v_c_offsets;

    /* "pynodegl.pyx":142
 *     cdef double c_offsets[2]
 *     cdef double *c_offsets_param = NULL
 *     if offsets is not None:             # <<<<<<<<<<<<<<
 *         c_offsets[0] = offsets[0]
 *         c_offsets[1] = offsets[1]
 */
  }

  /* "pynodegl.pyx":149
 *     cdef double dst
 *     cdef int ret
 *     if evaluate:             # <<<<<<<<<<<<<<
 *         ret = ngl_easing_evaluate(name, c_args_param, nb_args, c_offsets_param, src, &dst)
 *         if ret < 0:
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_evaluate); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(1, 149, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "pynodegl.pyx":150
 *     cdef int ret
 *     if evaluate:
 *         ret = ngl_easing_evaluate(name, c_args_param, nb_args, c_offsets_param, src, &dst)             # <<<<<<<<<<<<<<
 *         if ret < 0:
 *             raise Exception("Error evaluating %s" % name)
 */
    __pyx_t_10 = __Pyx_PyObject_AsString(__pyx_v_name); if (unlikely((!__pyx_t_10) && PyErr_Occurred())) __PYX_ERR(1, 150, __pyx_L1_error)
    __pyx_t_8 = __pyx_PyFloat_AsDouble(__pyx_v_src); if (unlikely((__pyx_t_8 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 150, __pyx_L1_error)
    __pyx_v_ret = ngl_easing_evaluate(__pyx_t_10, __pyx_v_c_args_param, __pyx_v_nb_args, __pyx_v_c_offsets_param, __pyx_t_8, (&__pyx_v_dst));

    /* "pynodegl.pyx":151
 *     if evaluate:
 *         ret = ngl_easing_evaluate(name, c_args_param, nb_args, c_offsets_param, src, &dst)
 *         if ret < 0:             # <<<<<<<<<<<<<<
 *             raise Exception("Error evaluating %s" % name)
 *     else:
 */
    __pyx_t_1 = ((__pyx_v_ret < 0) != 0);
    if (unlikely(__pyx_t_1)) {

      /* "pynodegl.pyx":152
 *         ret = ngl_easing_evaluate(name, c_args_param, nb_args, c_offsets_param, src, &dst)
 *         if ret < 0:
 *             raise Exception("Error evaluating %s" % name)             # <<<<<<<<<<<<<<
 *     else:
 *         ret = ngl_easing_solve(name, c_args_param, nb_args, c_offsets_param, src, &dst)
 */
      __pyx_t_4 = __Pyx_PyUnicode_FormatSafe(__pyx_kp_u_Error_evaluating_s, __pyx_v_name); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 152, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = __Pyx_PyObject_CallOneArg(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 152, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_Raise(__pyx_t_5, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __PYX_ERR(1, 152, __pyx_L1_error)

      /* "pynodegl.pyx":151
 *     if evaluate:
 *         ret = ngl_easing_evaluate(name, c_args_param, nb_args, c_offsets_param, src, &dst)
 *         if ret < 0:             # <<<<<<<<<<<<<<
 *             raise Exception("Error evaluating %s" % name)
 *     else:
 */
    }

    /* "pynodegl.pyx":149
 *     cdef double dst
 *     cdef int ret
 *     if evaluate:             # <<<<<<<<<<<<<<
 *         ret = ngl_easing_evaluate(name, c_args_param, nb_args, c_offsets_param, src, &dst)
 *         if ret < 0:
 */
    goto __pyx_L8;
  }

  /* "pynodegl.pyx":154
 *             raise Exception("Error evaluating %s" % name)
 *     else:
 *         ret = ngl_easing_solve(name, c_args_param, nb_args, c_offsets_param, src, &dst)             # <<<<<<<<<<<<<<
 *         if ret < 0:
 *             raise Exception("Error solving %s" % name)
 */
  /*else*/ {
    __pyx_t_11 = __Pyx_PyObject_AsString(__pyx_v_name); if (unlikely((!__pyx_t_11) && PyErr_Occurred())) __PYX_ERR(1, 154, __pyx_L1_error)
    __pyx_t_8 = __pyx_PyFloat_AsDouble(__pyx_v_src); if (unlikely((__pyx_t_8 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 154, __pyx_L1_error)
    __pyx_v_ret = ngl_easing_solve(__pyx_t_11, __pyx_v_c_args_param, __pyx_v_nb_args, __pyx_v_c_offsets_param, __pyx_t_8, (&__pyx_v_dst));

    /* "pynodegl.pyx":155
 *     else:
 *         ret = ngl_easing_solve(name, c_args_param, nb_args, c_offsets_param, src, &dst)
 *         if ret < 0:             # <<<<<<<<<<<<<<
 *             raise Exception("Error solving %s" % name)
 * 
 */
    __pyx_t_1 = ((__pyx_v_ret < 0) != 0);
    if (unlikely(__pyx_t_1)) {

      /* "pynodegl.pyx":156
 *         ret = ngl_easing_solve(name, c_args_param, nb_args, c_offsets_param, src, &dst)
 *         if ret < 0:
 *             raise Exception("Error solving %s" % name)             # <<<<<<<<<<<<<<
 * 
 *     return dst
 */
      __pyx_t_5 = __Pyx_PyUnicode_FormatSafe(__pyx_kp_u_Error_solving_s, __pyx_v_name); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 156, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_4 = __Pyx_PyObject_CallOneArg(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 156, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_Raise(__pyx_t_4, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __PYX_ERR(1, 156, __pyx_L1_error)

      /* "pynodegl.pyx":155
 *     else:
 *         ret = ngl_easing_solve(name, c_args_param, nb_args, c_offsets_param, src, &dst)
 *         if ret < 0:             # <<<<<<<<<<<<<<
 *             raise Exception("Error solving %s" % name)
 * 
 */
    }
  }
  __pyx_L8:;

  /* "pynodegl.pyx":158
 *             raise Exception("Error solving %s" % name)
 * 
 *     return dst             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_dst); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 158, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "pynodegl.pyx":128
 * 
 * 
 * cdef _eval_solve(name, src, args, offsets, evaluate):             # <<<<<<<<<<<<<<
 *     cdef double c_args[2]
 *     cdef double *c_args_param = NULL
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("pynodegl._eval_solve", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_arg);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynodegl.pyx":161
 * 
 * 
 * def easing_evaluate(name, t, args=None, offsets=None):             # <<<<<<<<<<<<<<
 *     return _eval_solve(name, t, args, offsets, True)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_3easing_evaluate(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_8pynodegl_3easing_evaluate = {"easing_evaluate", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pynodegl_3easing_evaluate, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_8pynodegl_3easing_evaluate(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_name = 0;
  PyObject *__pyx_v_t = 0;
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_offsets = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("easing_evaluate (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_name,&__pyx_n_s_t,&__pyx_n_s_args,&__pyx_n_s_offsets,0};
    PyObject* values[4] = {0,0,0,0};
    values[2] = ((PyObject *)Py_None);
    values[3] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_name)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_t)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("easing_evaluate", 0, 2, 4, 1); __PYX_ERR(1, 161, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_args);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_offsets);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "easing_evaluate") < 0)) __PYX_ERR(1, 161, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_name = values[0];
    __pyx_v_t = values[1];
    __pyx_v_args = values[2];
    __pyx_v_offsets = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("easing_evaluate", 0, 2, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 161, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pynodegl.easing_evaluate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pynodegl_2easing_evaluate(__pyx_self, __pyx_v_name, __pyx_v_t, __pyx_v_args, __pyx_v_offsets);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_2easing_evaluate(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_name, PyObject *__pyx_v_t, PyObject *__pyx_v_args, PyObject *__pyx_v_offsets) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("easing_evaluate", 0);

  /* "pynodegl.pyx":162
 * 
 * def easing_evaluate(name, t, args=None, offsets=None):
 *     return _eval_solve(name, t, args, offsets, True)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8pynodegl__eval_solve(__pyx_v_name, __pyx_v_t, __pyx_v_args, __pyx_v_offsets, Py_True); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 162, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pynodegl.pyx":161
 * 
 * 
 * def easing_evaluate(name, t, args=None, offsets=None):             # <<<<<<<<<<<<<<
 *     return _eval_solve(name, t, args, offsets, True)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.easing_evaluate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynodegl.pyx":165
 * 
 * 
 * def easing_solve(name, v, args=None, offsets=None):             # <<<<<<<<<<<<<<
 *     return _eval_solve(name, v, args, offsets, False)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_5easing_solve(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_8pynodegl_5easing_solve = {"easing_solve", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pynodegl_5easing_solve, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_8pynodegl_5easing_solve(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_name = 0;
  PyObject *__pyx_v_v = 0;
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_offsets = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("easing_solve (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_name,&__pyx_n_s_v,&__pyx_n_s_args,&__pyx_n_s_offsets,0};
    PyObject* values[4] = {0,0,0,0};
    values[2] = ((PyObject *)Py_None);
    values[3] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_name)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_v)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("easing_solve", 0, 2, 4, 1); __PYX_ERR(1, 165, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_args);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_offsets);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "easing_solve") < 0)) __PYX_ERR(1, 165, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_name = values[0];
    __pyx_v_v = values[1];
    __pyx_v_args = values[2];
    __pyx_v_offsets = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("easing_solve", 0, 2, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 165, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pynodegl.easing_solve", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pynodegl_4easing_solve(__pyx_self, __pyx_v_name, __pyx_v_v, __pyx_v_args, __pyx_v_offsets);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_4easing_solve(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_name, PyObject *__pyx_v_v, PyObject *__pyx_v_args, PyObject *__pyx_v_offsets) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("easing_solve", 0);

  /* "pynodegl.pyx":166
 * 
 * def easing_solve(name, v, args=None, offsets=None):
 *     return _eval_solve(name, v, args, offsets, False)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_8pynodegl__eval_solve(__pyx_v_name, __pyx_v_v, __pyx_v_args, __pyx_v_offsets, Py_False); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 166, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pynodegl.pyx":165
 * 
 * 
 * def easing_solve(name, v, args=None, offsets=None):             # <<<<<<<<<<<<<<
 *     return _eval_solve(name, v, args, offsets, False)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.easing_solve", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynodegl.pyx":173
 *     cdef object capture_buffer
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.ctx = ngl_create()
 *         if self.ctx is NULL:
 */

/* Python wrapper */
static int __pyx_pw_8pynodegl_6Viewer_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8pynodegl_6Viewer_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_8pynodegl_6Viewer___cinit__(((struct __pyx_obj_8pynodegl_Viewer *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8pynodegl_6Viewer___cinit__(struct __pyx_obj_8pynodegl_Viewer *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "pynodegl.pyx":174
 * 
 *     def __cinit__(self):
 *         self.ctx = ngl_create()             # <<<<<<<<<<<<<<
 *         if self.ctx is NULL:
 *             raise MemoryError()
 */
  __pyx_v_self->ctx = ngl_create();

  /* "pynodegl.pyx":175
 *     def __cinit__(self):
 *         self.ctx = ngl_create()
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 * 
 */
  __pyx_t_1 = ((__pyx_v_self->ctx == NULL) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "pynodegl.pyx":176
 *         self.ctx = ngl_create()
 *         if self.ctx is NULL:
 *             raise MemoryError()             # <<<<<<<<<<<<<<
 * 
 *     def configure(self, **kwargs):
 */
    PyErr_NoMemory(); __PYX_ERR(1, 176, __pyx_L1_error)

    /* "pynodegl.pyx":175
 *     def __cinit__(self):
 *         self.ctx = ngl_create()
 *         if self.ctx is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError()
 * 
 */
  }

  /* "pynodegl.pyx":173
 *     cdef object capture_buffer
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.ctx = ngl_create()
 *         if self.ctx is NULL:
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("pynodegl.Viewer.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynodegl.pyx":178
 *             raise MemoryError()
 * 
 *     def configure(self, **kwargs):             # <<<<<<<<<<<<<<
 *         cdef ngl_config config
 *         memset(&config, 0, sizeof(config));
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_6Viewer_3configure(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_8pynodegl_6Viewer_3configure(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_kwargs = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("configure (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("configure", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (__pyx_kwds && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "configure", 1))) return NULL;
  __pyx_v_kwargs = (__pyx_kwds) ? PyDict_Copy(__pyx_kwds) : PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return NULL;
  __Pyx_GOTREF(__pyx_v_kwargs);
  __pyx_r = __pyx_pf_8pynodegl_6Viewer_2configure(((struct __pyx_obj_8pynodegl_Viewer *)__pyx_v_self), __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_6Viewer_2configure(struct __pyx_obj_8pynodegl_Viewer *__pyx_v_self, PyObject *__pyx_v_kwargs) {
  struct ngl_config __pyx_v_config;
  PyObject *__pyx_v_viewport = NULL;
  long __pyx_v_i;
  PyObject *__pyx_v_clear_color = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  uintptr_t __pyx_t_4;
  long __pyx_t_5;
  float __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  uint8_t *__pyx_t_9;
  __Pyx_RefNannySetupContext("configure", 0);

  /* "pynodegl.pyx":180
 *     def configure(self, **kwargs):
 *         cdef ngl_config config
 *         memset(&config, 0, sizeof(config));             # <<<<<<<<<<<<<<
 *         config.platform = kwargs.get('platform', PLATFORM_AUTO)
 *         config.backend = kwargs.get('backend', BACKEND_AUTO)
 */
  (void)(memset((&__pyx_v_config), 0, (sizeof(__pyx_v_config))));

  /* "pynodegl.pyx":181
 *         cdef ngl_config config
 *         memset(&config, 0, sizeof(config));
 *         config.platform = kwargs.get('platform', PLATFORM_AUTO)             # <<<<<<<<<<<<<<
 *         config.backend = kwargs.get('backend', BACKEND_AUTO)
 *         config.display = kwargs.get('display', 0)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_PLATFORM_AUTO); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 181, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyDict_GetItemDefault(__pyx_v_kwargs, __pyx_n_u_platform, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 181, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 181, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_config.platform = __pyx_t_3;

  /* "pynodegl.pyx":182
 *         memset(&config, 0, sizeof(config));
 *         config.platform = kwargs.get('platform', PLATFORM_AUTO)
 *         config.backend = kwargs.get('backend', BACKEND_AUTO)             # <<<<<<<<<<<<<<
 *         config.display = kwargs.get('display', 0)
 *         config.window = kwargs.get('window', 0)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_BACKEND_AUTO); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 182, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyDict_GetItemDefault(__pyx_v_kwargs, __pyx_n_u_backend, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 182, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 182, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_config.backend = __pyx_t_3;

  /* "pynodegl.pyx":183
 *         config.platform = kwargs.get('platform', PLATFORM_AUTO)
 *         config.backend = kwargs.get('backend', BACKEND_AUTO)
 *         config.display = kwargs.get('display', 0)             # <<<<<<<<<<<<<<
 *         config.window = kwargs.get('window', 0)
 *         config.handle = kwargs.get('handle', 0)
 */
  __pyx_t_1 = __Pyx_PyDict_GetItemDefault(__pyx_v_kwargs, __pyx_n_u_display, __pyx_int_0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 183, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyInt_As_size_t(__pyx_t_1); if (unlikely((__pyx_t_4 == ((uintptr_t)-1)) && PyErr_Occurred())) __PYX_ERR(1, 183, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_config.display = __pyx_t_4;

  /* "pynodegl.pyx":184
 *         config.backend = kwargs.get('backend', BACKEND_AUTO)
 *         config.display = kwargs.get('display', 0)
 *         config.window = kwargs.get('window', 0)             # <<<<<<<<<<<<<<
 *         config.handle = kwargs.get('handle', 0)
 *         config.swap_interval = kwargs.get('swap_interval', -1)
 */
  __pyx_t_1 = __Pyx_PyDict_GetItemDefault(__pyx_v_kwargs, __pyx_n_u_window, __pyx_int_0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 184, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyInt_As_size_t(__pyx_t_1); if (unlikely((__pyx_t_4 == ((uintptr_t)-1)) && PyErr_Occurred())) __PYX_ERR(1, 184, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_config.window = __pyx_t_4;

  /* "pynodegl.pyx":185
 *         config.display = kwargs.get('display', 0)
 *         config.window = kwargs.get('window', 0)
 *         config.handle = kwargs.get('handle', 0)             # <<<<<<<<<<<<<<
 *         config.swap_interval = kwargs.get('swap_interval', -1)
 *         config.offscreen = kwargs.get('offscreen', 0)
 */
  __pyx_t_1 = __Pyx_PyDict_GetItemDefault(__pyx_v_kwargs, __pyx_n_u_handle, __pyx_int_0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 185, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyInt_As_size_t(__pyx_t_1); if (unlikely((__pyx_t_4 == ((uintptr_t)-1)) && PyErr_Occurred())) __PYX_ERR(1, 185, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_config.handle = __pyx_t_4;

  /* "pynodegl.pyx":186
 *         config.window = kwargs.get('window', 0)
 *         config.handle = kwargs.get('handle', 0)
 *         config.swap_interval = kwargs.get('swap_interval', -1)             # <<<<<<<<<<<<<<
 *         config.offscreen = kwargs.get('offscreen', 0)
 *         config.width = kwargs.get('width', 0)
 */
  __pyx_t_1 = __Pyx_PyDict_GetItemDefault(__pyx_v_kwargs, __pyx_n_u_swap_interval, __pyx_int_neg_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 186, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 186, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_config.swap_interval = __pyx_t_3;

  /* "pynodegl.pyx":187
 *         config.handle = kwargs.get('handle', 0)
 *         config.swap_interval = kwargs.get('swap_interval', -1)
 *         config.offscreen = kwargs.get('offscreen', 0)             # <<<<<<<<<<<<<<
 *         config.width = kwargs.get('width', 0)
 *         config.height = kwargs.get('height', 0)
 */
  __pyx_t_1 = __Pyx_PyDict_GetItemDefault(__pyx_v_kwargs, __pyx_n_u_offscreen, __pyx_int_0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 187, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 187, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_config.offscreen = __pyx_t_3;

  /* "pynodegl.pyx":188
 *         config.swap_interval = kwargs.get('swap_interval', -1)
 *         config.offscreen = kwargs.get('offscreen', 0)
 *         config.width = kwargs.get('width', 0)             # <<<<<<<<<<<<<<
 *         config.height = kwargs.get('height', 0)
 *         viewport = kwargs.get('viewport', (0, 0, 0, 0))
 */
  __pyx_t_1 = __Pyx_PyDict_GetItemDefault(__pyx_v_kwargs, __pyx_n_u_width, __pyx_int_0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 188, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 188, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_config.width = __pyx_t_3;

  /* "pynodegl.pyx":189
 *         config.offscreen = kwargs.get('offscreen', 0)
 *         config.width = kwargs.get('width', 0)
 *         config.height = kwargs.get('height', 0)             # <<<<<<<<<<<<<<
 *         viewport = kwargs.get('viewport', (0, 0, 0, 0))
 *         for i in range(4):
 */
  __pyx_t_1 = __Pyx_PyDict_GetItemDefault(__pyx_v_kwargs, __pyx_n_u_height, __pyx_int_0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 189, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 189, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_config.height = __pyx_t_3;

  /* "pynodegl.pyx":190
 *         config.width = kwargs.get('width', 0)
 *         config.height = kwargs.get('height', 0)
 *         viewport = kwargs.get('viewport', (0, 0, 0, 0))             # <<<<<<<<<<<<<<
 *         for i in range(4):
 *             config.viewport[i] = viewport[i]
 */
  __pyx_t_1 = __Pyx_PyDict_GetItemDefault(__pyx_v_kwargs, __pyx_n_u_viewport, __pyx_tuple__204); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 190, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_viewport = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pynodegl.pyx":191
 *         config.height = kwargs.get('height', 0)
 *         viewport = kwargs.get('viewport', (0, 0, 0, 0))
 *         for i in range(4):             # <<<<<<<<<<<<<<
 *             config.viewport[i] = viewport[i]
 *         config.samples = kwargs.get('samples', 0)
 */
  for (__pyx_t_5 = 0; __pyx_t_5 < 4; __pyx_t_5+=1) {
    __pyx_v_i = __pyx_t_5;

    /* "pynodegl.pyx":192
 *         viewport = kwargs.get('viewport', (0, 0, 0, 0))
 *         for i in range(4):
 *             config.viewport[i] = viewport[i]             # <<<<<<<<<<<<<<
 *         config.samples = kwargs.get('samples', 0)
 *         config.set_surface_pts = kwargs.get('set_surface_pts', 0)
 */
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_viewport, __pyx_v_i, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 192, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 192, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    (__pyx_v_config.viewport[__pyx_v_i]) = __pyx_t_3;
  }

  /* "pynodegl.pyx":193
 *         for i in range(4):
 *             config.viewport[i] = viewport[i]
 *         config.samples = kwargs.get('samples', 0)             # <<<<<<<<<<<<<<
 *         config.set_surface_pts = kwargs.get('set_surface_pts', 0)
 *         clear_color = kwargs.get('clear_color', (0.0, 0.0, 0.0, 1.0))
 */
  __pyx_t_1 = __Pyx_PyDict_GetItemDefault(__pyx_v_kwargs, __pyx_n_u_samples, __pyx_int_0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 193, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 193, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_config.samples = __pyx_t_3;

  /* "pynodegl.pyx":194
 *             config.viewport[i] = viewport[i]
 *         config.samples = kwargs.get('samples', 0)
 *         config.set_surface_pts = kwargs.get('set_surface_pts', 0)             # <<<<<<<<<<<<<<
 *         clear_color = kwargs.get('clear_color', (0.0, 0.0, 0.0, 1.0))
 *         for i in range(4):
 */
  __pyx_t_1 = __Pyx_PyDict_GetItemDefault(__pyx_v_kwargs, __pyx_n_u_set_surface_pts, __pyx_int_0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 194, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 194, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_config.set_surface_pts = __pyx_t_3;

  /* "pynodegl.pyx":195
 *         config.samples = kwargs.get('samples', 0)
 *         config.set_surface_pts = kwargs.get('set_surface_pts', 0)
 *         clear_color = kwargs.get('clear_color', (0.0, 0.0, 0.0, 1.0))             # <<<<<<<<<<<<<<
 *         for i in range(4):
 *             config.clear_color[i] = clear_color[i]
 */
  __pyx_t_1 = __Pyx_PyDict_GetItemDefault(__pyx_v_kwargs, __pyx_n_u_clear_color, __pyx_tuple__205); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 195, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_clear_color = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pynodegl.pyx":196
 *         config.set_surface_pts = kwargs.get('set_surface_pts', 0)
 *         clear_color = kwargs.get('clear_color', (0.0, 0.0, 0.0, 1.0))
 *         for i in range(4):             # <<<<<<<<<<<<<<
 *             config.clear_color[i] = clear_color[i]
 *         self.capture_buffer = kwargs.get('capture_buffer')
 */
  for (__pyx_t_5 = 0; __pyx_t_5 < 4; __pyx_t_5+=1) {
    __pyx_v_i = __pyx_t_5;

    /* "pynodegl.pyx":197
 *         clear_color = kwargs.get('clear_color', (0.0, 0.0, 0.0, 1.0))
 *         for i in range(4):
 *             config.clear_color[i] = clear_color[i]             # <<<<<<<<<<<<<<
 *         self.capture_buffer = kwargs.get('capture_buffer')
 *         if self.capture_buffer is not None:
 */
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_clear_color, __pyx_v_i, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 197, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_6 == (float)-1) && PyErr_Occurred())) __PYX_ERR(1, 197, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    (__pyx_v_config.clear_color[__pyx_v_i]) = __pyx_t_6;
  }

  /* "pynodegl.pyx":198
 *         for i in range(4):
 *             config.clear_color[i] = clear_color[i]
 *         self.capture_buffer = kwargs.get('capture_buffer')             # <<<<<<<<<<<<<<
 *         if self.capture_buffer is not None:
 *             config.capture_buffer = self.capture_buffer
 */
  __pyx_t_1 = __Pyx_PyDict_GetItemDefault(__pyx_v_kwargs, __pyx_n_u_capture_buffer, Py_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 198, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->capture_buffer);
  __Pyx_DECREF(__pyx_v_self->capture_buffer);
  __pyx_v_self->capture_buffer = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "pynodegl.pyx":199
 *             config.clear_color[i] = clear_color[i]
 *         self.capture_buffer = kwargs.get('capture_buffer')
 *         if self.capture_buffer is not None:             # <<<<<<<<<<<<<<
 *             config.capture_buffer = self.capture_buffer
 *         return ngl_configure(self.ctx, &config)
 */
  __pyx_t_7 = (__pyx_v_self->capture_buffer != Py_None);
  __pyx_t_8 = (__pyx_t_7 != 0);
  if (__pyx_t_8) {

    /* "pynodegl.pyx":200
 *         self.capture_buffer = kwargs.get('capture_buffer')
 *         if self.capture_buffer is not None:
 *             config.capture_buffer = self.capture_buffer             # <<<<<<<<<<<<<<
 *         return ngl_configure(self.ctx, &config)
 * 
 */
    __pyx_t_9 = __Pyx_PyObject_AsWritableUString(__pyx_v_self->capture_buffer); if (unlikely((!__pyx_t_9) && PyErr_Occurred())) __PYX_ERR(1, 200, __pyx_L1_error)
    __pyx_v_config.capture_buffer = __pyx_t_9;

    /* "pynodegl.pyx":199
 *             config.clear_color[i] = clear_color[i]
 *         self.capture_buffer = kwargs.get('capture_buffer')
 *         if self.capture_buffer is not None:             # <<<<<<<<<<<<<<
 *             config.capture_buffer = self.capture_buffer
 *         return ngl_configure(self.ctx, &config)
 */
  }

  /* "pynodegl.pyx":201
 *         if self.capture_buffer is not None:
 *             config.capture_buffer = self.capture_buffer
 *         return ngl_configure(self.ctx, &config)             # <<<<<<<<<<<<<<
 * 
 *     def resize(self, width, height, viewport=None):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(ngl_configure(__pyx_v_self->ctx, (&__pyx_v_config))); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 201, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pynodegl.pyx":178
 *             raise MemoryError()
 * 
 *     def configure(self, **kwargs):             # <<<<<<<<<<<<<<
 *         cdef ngl_config config
 *         memset(&config, 0, sizeof(config));
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pynodegl.Viewer.configure", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_viewport);
  __Pyx_XDECREF(__pyx_v_clear_color);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynodegl.pyx":203
 *         return ngl_configure(self.ctx, &config)
 * 
 *     def resize(self, width, height, viewport=None):             # <<<<<<<<<<<<<<
 *         if viewport is None:
 *             return ngl_resize(self.ctx, width, height, NULL)
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_6Viewer_5resize(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_8pynodegl_6Viewer_5resize(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_width = 0;
  PyObject *__pyx_v_height = 0;
  PyObject *__pyx_v_viewport = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("resize (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_width,&__pyx_n_s_height,&__pyx_n_s_viewport,0};
    PyObject* values[3] = {0,0,0};
    values[2] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_width)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_height)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("resize", 0, 2, 3, 1); __PYX_ERR(1, 203, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_viewport);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "resize") < 0)) __PYX_ERR(1, 203, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_width = values[0];
    __pyx_v_height = values[1];
    __pyx_v_viewport = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("resize", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 203, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("pynodegl.Viewer.resize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pynodegl_6Viewer_4resize(((struct __pyx_obj_8pynodegl_Viewer *)__pyx_v_self), __pyx_v_width, __pyx_v_height, __pyx_v_viewport);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_6Viewer_4resize(struct __pyx_obj_8pynodegl_Viewer *__pyx_v_self, PyObject *__pyx_v_width, PyObject *__pyx_v_height, PyObject *__pyx_v_viewport) {
  int __pyx_v_c_viewport[4];
  long __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  long __pyx_t_6;
  __Pyx_RefNannySetupContext("resize", 0);

  /* "pynodegl.pyx":204
 * 
 *     def resize(self, width, height, viewport=None):
 *         if viewport is None:             # <<<<<<<<<<<<<<
 *             return ngl_resize(self.ctx, width, height, NULL)
 *         cdef int c_viewport[4]
 */
  __pyx_t_1 = (__pyx_v_viewport == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "pynodegl.pyx":205
 *     def resize(self, width, height, viewport=None):
 *         if viewport is None:
 *             return ngl_resize(self.ctx, width, height, NULL)             # <<<<<<<<<<<<<<
 *         cdef int c_viewport[4]
 *         for i in range(4):
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_v_width); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 205, __pyx_L1_error)
    __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_v_height); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 205, __pyx_L1_error)
    __pyx_t_5 = __Pyx_PyInt_From_int(ngl_resize(__pyx_v_self->ctx, __pyx_t_3, __pyx_t_4, NULL)); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 205, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;

    /* "pynodegl.pyx":204
 * 
 *     def resize(self, width, height, viewport=None):
 *         if viewport is None:             # <<<<<<<<<<<<<<
 *             return ngl_resize(self.ctx, width, height, NULL)
 *         cdef int c_viewport[4]
 */
  }

  /* "pynodegl.pyx":207
 *             return ngl_resize(self.ctx, width, height, NULL)
 *         cdef int c_viewport[4]
 *         for i in range(4):             # <<<<<<<<<<<<<<
 *             c_viewport[i] = viewport[i]
 *         return ngl_resize(self.ctx, width, height, c_viewport)
 */
  for (__pyx_t_6 = 0; __pyx_t_6 < 4; __pyx_t_6+=1) {
    __pyx_v_i = __pyx_t_6;

    /* "pynodegl.pyx":208
 *         cdef int c_viewport[4]
 *         for i in range(4):
 *             c_viewport[i] = viewport[i]             # <<<<<<<<<<<<<<
 *         return ngl_resize(self.ctx, width, height, c_viewport)
 * 
 */
    __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_viewport, __pyx_v_i, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 208, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_t_5); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 208, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    (__pyx_v_c_viewport[__pyx_v_i]) = __pyx_t_4;
  }

  /* "pynodegl.pyx":209
 *         for i in range(4):
 *             c_viewport[i] = viewport[i]
 *         return ngl_resize(self.ctx, width, height, c_viewport)             # <<<<<<<<<<<<<<
 * 
 *     def set_scene(self, _Node scene):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_v_width); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 209, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_v_height); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 209, __pyx_L1_error)
  __pyx_t_5 = __Pyx_PyInt_From_int(ngl_resize(__pyx_v_self->ctx, __pyx_t_4, __pyx_t_3, __pyx_v_c_viewport)); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 209, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "pynodegl.pyx":203
 *         return ngl_configure(self.ctx, &config)
 * 
 *     def resize(self, width, height, viewport=None):             # <<<<<<<<<<<<<<
 *         if viewport is None:
 *             return ngl_resize(self.ctx, width, height, NULL)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pynodegl.Viewer.resize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynodegl.pyx":211
 *         return ngl_resize(self.ctx, width, height, c_viewport)
 * 
 *     def set_scene(self, _Node scene):             # <<<<<<<<<<<<<<
 *         return ngl_set_scene(self.ctx, <ngl_node*> (NULL if scene is None else scene.ctx))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_6Viewer_7set_scene(PyObject *__pyx_v_self, PyObject *__pyx_v_scene); /*proto*/
static PyObject *__pyx_pw_8pynodegl_6Viewer_7set_scene(PyObject *__pyx_v_self, PyObject *__pyx_v_scene) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_scene (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_scene), __pyx_ptype_8pynodegl__Node, 1, "scene", 0))) __PYX_ERR(1, 211, __pyx_L1_error)
  __pyx_r = __pyx_pf_8pynodegl_6Viewer_6set_scene(((struct __pyx_obj_8pynodegl_Viewer *)__pyx_v_self), ((struct __pyx_obj_8pynodegl__Node *)__pyx_v_scene));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_6Viewer_6set_scene(struct __pyx_obj_8pynodegl_Viewer *__pyx_v_self, struct __pyx_obj_8pynodegl__Node *__pyx_v_scene) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  void *__pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("set_scene", 0);

  /* "pynodegl.pyx":212
 * 
 *     def set_scene(self, _Node scene):
 *         return ngl_set_scene(self.ctx, <ngl_node*> (NULL if scene is None else scene.ctx))             # <<<<<<<<<<<<<<
 * 
 *     def set_scene_from_string(self, s):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = (((PyObject *)__pyx_v_scene) == Py_None);
  if ((__pyx_t_2 != 0)) {
    __pyx_t_1 = NULL;
  } else {
    __pyx_t_1 = __pyx_v_scene->ctx;
  }
  __pyx_t_3 = __Pyx_PyInt_From_int(ngl_set_scene(__pyx_v_self->ctx, ((struct ngl_node *)__pyx_t_1))); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 212, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "pynodegl.pyx":211
 *         return ngl_resize(self.ctx, width, height, c_viewport)
 * 
 *     def set_scene(self, _Node scene):             # <<<<<<<<<<<<<<
 *         return ngl_set_scene(self.ctx, <ngl_node*> (NULL if scene is None else scene.ctx))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("pynodegl.Viewer.set_scene", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynodegl.pyx":214
 *         return ngl_set_scene(self.ctx, <ngl_node*> (NULL if scene is None else scene.ctx))
 * 
 *     def set_scene_from_string(self, s):             # <<<<<<<<<<<<<<
 *         cdef ngl_node *scene = ngl_node_deserialize(s);
 *         ret = ngl_set_scene(self.ctx, scene)
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_6Viewer_9set_scene_from_string(PyObject *__pyx_v_self, PyObject *__pyx_v_s); /*proto*/
static PyObject *__pyx_pw_8pynodegl_6Viewer_9set_scene_from_string(PyObject *__pyx_v_self, PyObject *__pyx_v_s) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_scene_from_string (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_6Viewer_8set_scene_from_string(((struct __pyx_obj_8pynodegl_Viewer *)__pyx_v_self), ((PyObject *)__pyx_v_s));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_6Viewer_8set_scene_from_string(struct __pyx_obj_8pynodegl_Viewer *__pyx_v_self, PyObject *__pyx_v_s) {
  struct ngl_node *__pyx_v_scene;
  int __pyx_v_ret;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  char const *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("set_scene_from_string", 0);

  /* "pynodegl.pyx":215
 * 
 *     def set_scene_from_string(self, s):
 *         cdef ngl_node *scene = ngl_node_deserialize(s);             # <<<<<<<<<<<<<<
 *         ret = ngl_set_scene(self.ctx, scene)
 *         ngl_node_unrefp(&scene)
 */
  __pyx_t_1 = __Pyx_PyObject_AsString(__pyx_v_s); if (unlikely((!__pyx_t_1) && PyErr_Occurred())) __PYX_ERR(1, 215, __pyx_L1_error)
  __pyx_v_scene = ngl_node_deserialize(__pyx_t_1);

  /* "pynodegl.pyx":216
 *     def set_scene_from_string(self, s):
 *         cdef ngl_node *scene = ngl_node_deserialize(s);
 *         ret = ngl_set_scene(self.ctx, scene)             # <<<<<<<<<<<<<<
 *         ngl_node_unrefp(&scene)
 *         return ret
 */
  __pyx_v_ret = ngl_set_scene(__pyx_v_self->ctx, __pyx_v_scene);

  /* "pynodegl.pyx":217
 *         cdef ngl_node *scene = ngl_node_deserialize(s);
 *         ret = ngl_set_scene(self.ctx, scene)
 *         ngl_node_unrefp(&scene)             # <<<<<<<<<<<<<<
 *         return ret
 * 
 */
  ngl_node_unrefp((&__pyx_v_scene));

  /* "pynodegl.pyx":218
 *         ret = ngl_set_scene(self.ctx, scene)
 *         ngl_node_unrefp(&scene)
 *         return ret             # <<<<<<<<<<<<<<
 * 
 *     def draw(self, double t):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_ret); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 218, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "pynodegl.pyx":214
 *         return ngl_set_scene(self.ctx, <ngl_node*> (NULL if scene is None else scene.ctx))
 * 
 *     def set_scene_from_string(self, s):             # <<<<<<<<<<<<<<
 *         cdef ngl_node *scene = ngl_node_deserialize(s);
 *         ret = ngl_set_scene(self.ctx, scene)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pynodegl.Viewer.set_scene_from_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynodegl.pyx":220
 *         return ret
 * 
 *     def draw(self, double t):             # <<<<<<<<<<<<<<
 *         with nogil:
 *             ngl_draw(self.ctx, t)
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_6Viewer_11draw(PyObject *__pyx_v_self, PyObject *__pyx_arg_t); /*proto*/
static PyObject *__pyx_pw_8pynodegl_6Viewer_11draw(PyObject *__pyx_v_self, PyObject *__pyx_arg_t) {
  double __pyx_v_t;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("draw (wrapper)", 0);
  assert(__pyx_arg_t); {
    __pyx_v_t = __pyx_PyFloat_AsDouble(__pyx_arg_t); if (unlikely((__pyx_v_t == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 220, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pynodegl.Viewer.draw", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pynodegl_6Viewer_10draw(((struct __pyx_obj_8pynodegl_Viewer *)__pyx_v_self), ((double)__pyx_v_t));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_6Viewer_10draw(struct __pyx_obj_8pynodegl_Viewer *__pyx_v_self, double __pyx_v_t) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("draw", 0);

  /* "pynodegl.pyx":221
 * 
 *     def draw(self, double t):
 *         with nogil:             # <<<<<<<<<<<<<<
 *             ngl_draw(self.ctx, t)
 * 
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "pynodegl.pyx":222
 *     def draw(self, double t):
 *         with nogil:
 *             ngl_draw(self.ctx, t)             # <<<<<<<<<<<<<<
 * 
 *     def dot(self, double t):
 */
        (void)(ngl_draw(__pyx_v_self->ctx, __pyx_v_t));
      }

      /* "pynodegl.pyx":221
 * 
 *     def draw(self, double t):
 *         with nogil:             # <<<<<<<<<<<<<<
 *             ngl_draw(self.ctx, t)
 * 
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "pynodegl.pyx":220
 *         return ret
 * 
 *     def draw(self, double t):             # <<<<<<<<<<<<<<
 *         with nogil:
 *             ngl_draw(self.ctx, t)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynodegl.pyx":224
 *             ngl_draw(self.ctx, t)
 * 
 *     def dot(self, double t):             # <<<<<<<<<<<<<<
 *         cdef char *s;
 *         with nogil:
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_6Viewer_13dot(PyObject *__pyx_v_self, PyObject *__pyx_arg_t); /*proto*/
static PyObject *__pyx_pw_8pynodegl_6Viewer_13dot(PyObject *__pyx_v_self, PyObject *__pyx_arg_t) {
  double __pyx_v_t;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("dot (wrapper)", 0);
  assert(__pyx_arg_t); {
    __pyx_v_t = __pyx_PyFloat_AsDouble(__pyx_arg_t); if (unlikely((__pyx_v_t == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 224, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pynodegl.Viewer.dot", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8pynodegl_6Viewer_12dot(((struct __pyx_obj_8pynodegl_Viewer *)__pyx_v_self), ((double)__pyx_v_t));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_6Viewer_12dot(struct __pyx_obj_8pynodegl_Viewer *__pyx_v_self, double __pyx_v_t) {
  char *__pyx_v_s;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("dot", 0);

  /* "pynodegl.pyx":226
 *     def dot(self, double t):
 *         cdef char *s;
 *         with nogil:             # <<<<<<<<<<<<<<
 *             s = ngl_dot(self.ctx, t)
 *         return _ret_pystr(s) if s else None
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "pynodegl.pyx":227
 *         cdef char *s;
 *         with nogil:
 *             s = ngl_dot(self.ctx, t)             # <<<<<<<<<<<<<<
 *         return _ret_pystr(s) if s else None
 * 
 */
        __pyx_v_s = ngl_dot(__pyx_v_self->ctx, __pyx_v_t);
      }

      /* "pynodegl.pyx":226
 *     def dot(self, double t):
 *         cdef char *s;
 *         with nogil:             # <<<<<<<<<<<<<<
 *             s = ngl_dot(self.ctx, t)
 *         return _ret_pystr(s) if s else None
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "pynodegl.pyx":228
 *         with nogil:
 *             s = ngl_dot(self.ctx, t)
 *         return _ret_pystr(s) if s else None             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  if ((__pyx_v_s != 0)) {
    __pyx_t_2 = __pyx_f_8pynodegl__ret_pystr(__pyx_v_s); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 228, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __pyx_t_2;
    __pyx_t_2 = 0;
  } else {
    __Pyx_INCREF(Py_None);
    __pyx_t_1 = Py_None;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pynodegl.pyx":224
 *             ngl_draw(self.ctx, t)
 * 
 *     def dot(self, double t):             # <<<<<<<<<<<<<<
 *         cdef char *s;
 *         with nogil:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("pynodegl.Viewer.dot", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pynodegl.pyx":230
 *         return _ret_pystr(s) if s else None
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         ngl_freep(&self.ctx)
 */

/* Python wrapper */
static void __pyx_pw_8pynodegl_6Viewer_15__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_8pynodegl_6Viewer_15__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_8pynodegl_6Viewer_14__dealloc__(((struct __pyx_obj_8pynodegl_Viewer *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_8pynodegl_6Viewer_14__dealloc__(struct __pyx_obj_8pynodegl_Viewer *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "pynodegl.pyx":231
 * 
 *     def __dealloc__(self):
 *         ngl_freep(&self.ctx)             # <<<<<<<<<<<<<<
 */
  ngl_freep((&__pyx_v_self->ctx));

  /* "pynodegl.pyx":230
 *         return _ret_pystr(s) if s else None
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         ngl_freep(&self.ctx)
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_6Viewer_17__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8pynodegl_6Viewer_17__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_6Viewer_16__reduce_cython__(((struct __pyx_obj_8pynodegl_Viewer *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_6Viewer_16__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_Viewer *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__206, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.Viewer.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8pynodegl_6Viewer_19__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8pynodegl_6Viewer_19__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8pynodegl_6Viewer_18__setstate_cython__(((struct __pyx_obj_8pynodegl_Viewer *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8pynodegl_6Viewer_18__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_8pynodegl_Viewer *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__207, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(2, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pynodegl.Viewer.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "array.pxd":93
 *             __data_union data
 * 
 *         def __getbuffer__(self, Py_buffer* info, int flags):             # <<<<<<<<<<<<<<
 *             # This implementation of getbuffer is geared towards Cython
 *             # requirements, and does not yet fulfill the PEP.
 */

/* Python wrapper */
static CYTHON_UNUSED int __pyx_pw_7cpython_5array_5array_1__getbuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /*proto*/
static CYTHON_UNUSED int __pyx_pw_7cpython_5array_5array_1__getbuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getbuffer__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7cpython_5array_5array___getbuffer__(((arrayobject *)__pyx_v_self), ((Py_buffer *)__pyx_v_info), ((int)__pyx_v_flags));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cpython_5array_5array___getbuffer__(arrayobject *__pyx_v_self, Py_buffer *__pyx_v_info, CYTHON_UNUSED int __pyx_v_flags) {
  PyObject *__pyx_v_item_count = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  char *__pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  int __pyx_t_6;
  char __pyx_t_7;
  if (__pyx_v_info == NULL) {
    PyErr_SetString(PyExc_BufferError, "PyObject_GetBuffer: view==NULL argument is obsolete");
    return -1;
  }
  __Pyx_RefNannySetupContext("__getbuffer__", 0);
  __pyx_v_info->obj = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(__pyx_v_info->obj);

  /* "array.pxd":98
 *             # In particular strided access is always provided regardless
 *             # of flags
 *             item_count = Py_SIZE(self)             # <<<<<<<<<<<<<<
 * 
 *             info.suboffsets = NULL
 */
  __pyx_t_1 = PyInt_FromSsize_t(Py_SIZE(((PyObject *)__pyx_v_self))); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 98, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_item_count = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "array.pxd":100
 *             item_count = Py_SIZE(self)
 * 
 *             info.suboffsets = NULL             # <<<<<<<<<<<<<<
 *             info.buf = self.data.as_chars
 *             info.readonly = 0
 */
  __pyx_v_info->suboffsets = NULL;

  /* "array.pxd":101
 * 
 *             info.suboffsets = NULL
 *             info.buf = self.data.as_chars             # <<<<<<<<<<<<<<
 *             info.readonly = 0
 *             info.ndim = 1
 */
  __pyx_t_2 = __pyx_v_self->data.as_chars;
  __pyx_v_info->buf = __pyx_t_2;

  /* "array.pxd":102
 *             info.suboffsets = NULL
 *             info.buf = self.data.as_chars
 *             info.readonly = 0             # <<<<<<<<<<<<<<
 *             info.ndim = 1
 *             info.itemsize = self.ob_descr.itemsize   # e.g. sizeof(float)
 */
  __pyx_v_info->readonly = 0;

  /* "array.pxd":103
 *             info.buf = self.data.as_chars
 *             info.readonly = 0
 *             info.ndim = 1             # <<<<<<<<<<<<<<
 *             info.itemsize = self.ob_descr.itemsize   # e.g. sizeof(float)
 *             info.len = info.itemsize * item_count
 */
  __pyx_v_info->ndim = 1;

  /* "array.pxd":104
 *             info.readonly = 0
 *             info.ndim = 1
 *             info.itemsize = self.ob_descr.itemsize   # e.g. sizeof(float)             # <<<<<<<<<<<<<<
 *             info.len = info.itemsize * item_count
 * 
 */
  __pyx_t_3 = __pyx_v_self->ob_descr->itemsize;
  __pyx_v_info->itemsize = __pyx_t_3;

  /* "array.pxd":105
 *             info.ndim = 1
 *             info.itemsize = self.ob_descr.itemsize   # e.g. sizeof(float)
 *             info.len = info.itemsize * item_count             # <<<<<<<<<<<<<<
 * 
 *             info.shape = <Py_ssize_t*> PyObject_Malloc(sizeof(Py_ssize_t) + 2)
 */
  __pyx_t_1 = PyInt_FromSsize_t(__pyx_v_info->itemsize); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 105, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = PyNumber_Multiply(__pyx_t_1, __pyx_v_item_count); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 105, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_5 = __Pyx_PyIndex_AsSsize_t(__pyx_t_4); if (unlikely((__pyx_t_5 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(3, 105, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_info->len = __pyx_t_5;

  /* "array.pxd":107
 *             info.len = info.itemsize * item_count
 * 
 *             info.shape = <Py_ssize_t*> PyObject_Malloc(sizeof(Py_ssize_t) + 2)             # <<<<<<<<<<<<<<
 *             if not info.shape:
 *                 raise MemoryError()
 */
  __pyx_v_info->shape = ((Py_ssize_t *)PyObject_Malloc(((sizeof(Py_ssize_t)) + 2)));

  /* "array.pxd":108
 * 
 *             info.shape = <Py_ssize_t*> PyObject_Malloc(sizeof(Py_ssize_t) + 2)
 *             if not info.shape:             # <<<<<<<<<<<<<<
 *                 raise MemoryError()
 *             info.shape[0] = item_count      # constant regardless of resizing
 */
  __pyx_t_6 = ((!(__pyx_v_info->shape != 0)) != 0);
  if (unlikely(__pyx_t_6)) {

    /* "array.pxd":109
 *             info.shape = <Py_ssize_t*> PyObject_Malloc(sizeof(Py_ssize_t) + 2)
 *             if not info.shape:
 *                 raise MemoryError()             # <<<<<<<<<<<<<<
 *             info.shape[0] = item_count      # constant regardless of resizing
 *             info.strides = &info.itemsize
 */
    PyErr_NoMemory(); __PYX_ERR(3, 109, __pyx_L1_error)

    /* "array.pxd":108
 * 
 *             info.shape = <Py_ssize_t*> PyObject_Malloc(sizeof(Py_ssize_t) + 2)
 *             if not info.shape:             # <<<<<<<<<<<<<<
 *                 raise MemoryError()
 *             info.shape[0] = item_count      # constant regardless of resizing
 */
  }

  /* "array.pxd":110
 *             if not info.shape:
 *                 raise MemoryError()
 *             info.shape[0] = item_count      # constant regardless of resizing             # <<<<<<<<<<<<<<
 *             info.strides = &info.itemsize
 * 
 */
  __pyx_t_5 = __Pyx_PyIndex_AsSsize_t(__pyx_v_item_count); if (unlikely((__pyx_t_5 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(3, 110, __pyx_L1_error)
  (__pyx_v_info->shape[0]) = __pyx_t_5;

  /* "array.pxd":111
 *                 raise MemoryError()
 *             info.shape[0] = item_count      # constant regardless of resizing
 *             info.strides = &info.itemsize             # <<<<<<<<<<<<<<
 * 
 *             info.format = <char*> (info.shape + 1)
 */
  __pyx_v_info->strides = (&__pyx_v_info->itemsize);

  /* "array.pxd":113
 *             info.strides = &info.itemsize
 * 
 *             info.format = <char*> (info.shape + 1)             # <<<<<<<<<<<<<<
 *             info.format[0] = self.ob_descr.typecode
 *             info.format[1] = 0
 */
  __pyx_v_info->format = ((char *)(__pyx_v_info->shape + 1));

  /* "array.pxd":114
 * 
 *             info.format = <char*> (info.shape + 1)
 *             info.format[0] = self.ob_descr.typecode             # <<<<<<<<<<<<<<
 *             info.format[1] = 0
 *             info.obj = self
 */
  __pyx_t_7 = __pyx_v_self->ob_descr->typecode;
  (__pyx_v_info->format[0]) = __pyx_t_7;

  /* "array.pxd":115
 *             info.format = <char*> (info.shape + 1)
 *             info.format[0] = self.ob_descr.typecode
 *             info.format[1] = 0             # <<<<<<<<<<<<<<
 *             info.obj = self
 * 
 */
  (__pyx_v_info->format[1]) = 0;

  /* "array.pxd":116
 *             info.format[0] = self.ob_descr.typecode
 *             info.format[1] = 0
 *             info.obj = self             # <<<<<<<<<<<<<<
 * 
 *         def __releasebuffer__(self, Py_buffer* info):
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  __Pyx_GOTREF(__pyx_v_info->obj);
  __Pyx_DECREF(__pyx_v_info->obj);
  __pyx_v_info->obj = ((PyObject *)__pyx_v_self);

  /* "array.pxd":93
 *             __data_union data
 * 
 *         def __getbuffer__(self, Py_buffer* info, int flags):             # <<<<<<<<<<<<<<
 *             # This implementation of getbuffer is geared towards Cython
 *             # requirements, and does not yet fulfill the PEP.
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("cpython.array.array.__getbuffer__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  if (__pyx_v_info->obj != NULL) {
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj); __pyx_v_info->obj = 0;
  }
  goto __pyx_L2;
  __pyx_L0:;
  if (__pyx_v_info->obj == Py_None) {
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj); __pyx_v_info->obj = 0;
  }
  __pyx_L2:;
  __Pyx_XDECREF(__pyx_v_item_count);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "array.pxd":118
 *             info.obj = self
 * 
 *         def __releasebuffer__(self, Py_buffer* info):             # <<<<<<<<<<<<<<
 *             PyObject_Free(info.shape)
 * 
 */

/* Python wrapper */
static CYTHON_UNUSED void __pyx_pw_7cpython_5array_5array_3__releasebuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info); /*proto*/
static CYTHON_UNUSED void __pyx_pw_7cpython_5array_5array_3__releasebuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__releasebuffer__ (wrapper)", 0);
  __pyx_pf_7cpython_5array_5array_2__releasebuffer__(((arrayobject *)__pyx_v_self), ((Py_buffer *)__pyx_v_info));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_7cpython_5array_5array_2__releasebuffer__(CYTHON_UNUSED arrayobject *__pyx_v_self, Py_buffer *__pyx_v_info) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__releasebuffer__", 0);

  /* "array.pxd":119
 * 
 *         def __releasebuffer__(self, Py_buffer* info):
 *             PyObject_Free(info.shape)             # <<<<<<<<<<<<<<
 * 
 *     array newarrayobject(PyTypeObject* type, Py_ssize_t size, arraydescr *descr)
 */
  PyObject_Free(__pyx_v_info->shape);

  /* "array.pxd":118
 *             info.obj = self
 * 
 *         def __releasebuffer__(self, Py_buffer* info):             # <<<<<<<<<<<<<<
 *             PyObject_Free(info.shape)
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "array.pxd":130
 * 
 * 
 * cdef inline array clone(array template, Py_ssize_t length, bint zero):             # <<<<<<<<<<<<<<
 *     """ fast creation of a new array, given a template array.
 *     type will be same as template.
 */

static CYTHON_INLINE arrayobject *__pyx_f_7cpython_5array_clone(arrayobject *__pyx_v_template, Py_ssize_t __pyx_v_length, int __pyx_v_zero) {
  arrayobject *__pyx_v_op = NULL;
  arrayobject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  __Pyx_RefNannySetupContext("clone", 0);

  /* "array.pxd":134
 *     type will be same as template.
 *     if zero is true, new array will be initialized with zeroes."""
 *     op = newarrayobject(Py_TYPE(template), length, template.ob_descr)             # <<<<<<<<<<<<<<
 *     if zero and op is not None:
 *         memset(op.data.as_chars, 0, length * op.ob_descr.itemsize)
 */
  __pyx_t_1 = ((PyObject *)newarrayobject(Py_TYPE(((PyObject *)__pyx_v_template)), __pyx_v_length, __pyx_v_template->ob_descr)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 134, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_op = ((arrayobject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "array.pxd":135
 *     if zero is true, new array will be initialized with zeroes."""
 *     op = newarrayobject(Py_TYPE(template), length, template.ob_descr)
 *     if zero and op is not None:             # <<<<<<<<<<<<<<
 *         memset(op.data.as_chars, 0, length * op.ob_descr.itemsize)
 *     return op
 */
  __pyx_t_3 = (__pyx_v_zero != 0);
  if (__pyx_t_3) {
  } else {
    __pyx_t_2 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = (((PyObject *)__pyx_v_op) != Py_None);
  __pyx_t_4 = (__pyx_t_3 != 0);
  __pyx_t_2 = __pyx_t_4;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_2) {

    /* "array.pxd":136
 *     op = newarrayobject(Py_TYPE(template), length, template.ob_descr)
 *     if zero and op is not None:
 *         memset(op.data.as_chars, 0, length * op.ob_descr.itemsize)             # <<<<<<<<<<<<<<
 *     return op
 * 
 */
    (void)(memset(__pyx_v_op->data.as_chars, 0, (__pyx_v_length * __pyx_v_op->ob_descr->itemsize)));

    /* "array.pxd":135
 *     if zero is true, new array will be initialized with zeroes."""
 *     op = newarrayobject(Py_TYPE(template), length, template.ob_descr)
 *     if zero and op is not None:             # <<<<<<<<<<<<<<
 *         memset(op.data.as_chars, 0, length * op.ob_descr.itemsize)
 *     return op
 */
  }

  /* "array.pxd":137
 *     if zero and op is not None:
 *         memset(op.data.as_chars, 0, length * op.ob_descr.itemsize)
 *     return op             # <<<<<<<<<<<<<<
 * 
 * cdef inline array copy(array self):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_op));
  __pyx_r = __pyx_v_op;
  goto __pyx_L0;

  /* "array.pxd":130
 * 
 * 
 * cdef inline array clone(array template, Py_ssize_t length, bint zero):             # <<<<<<<<<<<<<<
 *     """ fast creation of a new array, given a template array.
 *     type will be same as template.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cpython.array.clone", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_op);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "array.pxd":139
 *     return op
 * 
 * cdef inline array copy(array self):             # <<<<<<<<<<<<<<
 *     """ make a copy of an array. """
 *     op = newarrayobject(Py_TYPE(self), Py_SIZE(self), self.ob_descr)
 */

static CYTHON_INLINE arrayobject *__pyx_f_7cpython_5array_copy(arrayobject *__pyx_v_self) {
  arrayobject *__pyx_v_op = NULL;
  arrayobject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("copy", 0);

  /* "array.pxd":141
 * cdef inline array copy(array self):
 *     """ make a copy of an array. """
 *     op = newarrayobject(Py_TYPE(self), Py_SIZE(self), self.ob_descr)             # <<<<<<<<<<<<<<
 *     memcpy(op.data.as_chars, self.data.as_chars, Py_SIZE(op) * op.ob_descr.itemsize)
 *     return op
 */
  __pyx_t_1 = ((PyObject *)newarrayobject(Py_TYPE(((PyObject *)__pyx_v_self)), Py_SIZE(((PyObject *)__pyx_v_self)), __pyx_v_self->ob_descr)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 141, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_op = ((arrayobject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "array.pxd":142
 *     """ make a copy of an array. """
 *     op = newarrayobject(Py_TYPE(self), Py_SIZE(self), self.ob_descr)
 *     memcpy(op.data.as_chars, self.data.as_chars, Py_SIZE(op) * op.ob_descr.itemsize)             # <<<<<<<<<<<<<<
 *     return op
 * 
 */
  (void)(memcpy(__pyx_v_op->data.as_chars, __pyx_v_self->data.as_chars, (Py_SIZE(((PyObject *)__pyx_v_op)) * __pyx_v_op->ob_descr->itemsize)));

  /* "array.pxd":143
 *     op = newarrayobject(Py_TYPE(self), Py_SIZE(self), self.ob_descr)
 *     memcpy(op.data.as_chars, self.data.as_chars, Py_SIZE(op) * op.ob_descr.itemsize)
 *     return op             # <<<<<<<<<<<<<<
 * 
 * cdef inline int extend_buffer(array self, char* stuff, Py_ssize_t n) except -1:
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_op));
  __pyx_r = __pyx_v_op;
  goto __pyx_L0;

  /* "array.pxd":139
 *     return op
 * 
 * cdef inline array copy(array self):             # <<<<<<<<<<<<<<
 *     """ make a copy of an array. """
 *     op = newarrayobject(Py_TYPE(self), Py_SIZE(self), self.ob_descr)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cpython.array.copy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_op);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "array.pxd":145
 *     return op
 * 
 * cdef inline int extend_buffer(array self, char* stuff, Py_ssize_t n) except -1:             # <<<<<<<<<<<<<<
 *     """ efficient appending of new stuff of same type
 *     (e.g. of same array type)
 */

static CYTHON_INLINE int __pyx_f_7cpython_5array_extend_buffer(arrayobject *__pyx_v_self, char *__pyx_v_stuff, Py_ssize_t __pyx_v_n) {
  Py_ssize_t __pyx_v_itemsize;
  Py_ssize_t __pyx_v_origsize;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("extend_buffer", 0);

  /* "array.pxd":149
 *     (e.g. of same array type)
 *     n: number of elements (not number of bytes!) """
 *     cdef Py_ssize_t itemsize = self.ob_descr.itemsize             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t origsize = Py_SIZE(self)
 *     resize_smart(self, origsize + n)
 */
  __pyx_t_1 = __pyx_v_self->ob_descr->itemsize;
  __pyx_v_itemsize = __pyx_t_1;

  /* "array.pxd":150
 *     n: number of elements (not number of bytes!) """
 *     cdef Py_ssize_t itemsize = self.ob_descr.itemsize
 *     cdef Py_ssize_t origsize = Py_SIZE(self)             # <<<<<<<<<<<<<<
 *     resize_smart(self, origsize + n)
 *     memcpy(self.data.as_chars + origsize * itemsize, stuff, n * itemsize)
 */
  __pyx_v_origsize = Py_SIZE(((PyObject *)__pyx_v_self));

  /* "array.pxd":151
 *     cdef Py_ssize_t itemsize = self.ob_descr.itemsize
 *     cdef Py_ssize_t origsize = Py_SIZE(self)
 *     resize_smart(self, origsize + n)             # <<<<<<<<<<<<<<
 *     memcpy(self.data.as_chars + origsize * itemsize, stuff, n * itemsize)
 *     return 0
 */
  __pyx_t_1 = resize_smart(__pyx_v_self, (__pyx_v_origsize + __pyx_v_n)); if (unlikely(__pyx_t_1 == ((int)-1))) __PYX_ERR(3, 151, __pyx_L1_error)

  /* "array.pxd":152
 *     cdef Py_ssize_t origsize = Py_SIZE(self)
 *     resize_smart(self, origsize + n)
 *     memcpy(self.data.as_chars + origsize * itemsize, stuff, n * itemsize)             # <<<<<<<<<<<<<<
 *     return 0
 * 
 */
  (void)(memcpy((__pyx_v_self->data.as_chars + (__pyx_v_origsize * __pyx_v_itemsize)), __pyx_v_stuff, (__pyx_v_n * __pyx_v_itemsize)));

  /* "array.pxd":153
 *     resize_smart(self, origsize + n)
 *     memcpy(self.data.as_chars + origsize * itemsize, stuff, n * itemsize)
 *     return 0             # <<<<<<<<<<<<<<
 * 
 * cdef inline int extend(array self, array other) except -1:
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "array.pxd":145
 *     return op
 * 
 * cdef inline int extend_buffer(array self, char* stuff, Py_ssize_t n) except -1:             # <<<<<<<<<<<<<<
 *     """ efficient appending of new stuff of same type
 *     (e.g. of same array type)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("cpython.array.extend_buffer", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "array.pxd":155
 *     return 0
 * 
 * cdef inline int extend(array self, array other) except -1:             # <<<<<<<<<<<<<<
 *     """ extend array with data from another array; types must match. """
 *     if self.ob_descr.typecode != other.ob_descr.typecode:
 */

static CYTHON_INLINE int __pyx_f_7cpython_5array_extend(arrayobject *__pyx_v_self, arrayobject *__pyx_v_other) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("extend", 0);

  /* "array.pxd":157
 * cdef inline int extend(array self, array other) except -1:
 *     """ extend array with data from another array; types must match. """
 *     if self.ob_descr.typecode != other.ob_descr.typecode:             # <<<<<<<<<<<<<<
 *         PyErr_BadArgument()
 *     return extend_buffer(self, other.data.as_chars, Py_SIZE(other))
 */
  __pyx_t_1 = ((__pyx_v_self->ob_descr->typecode != __pyx_v_other->ob_descr->typecode) != 0);
  if (__pyx_t_1) {

    /* "array.pxd":158
 *     """ extend array with data from another array; types must match. """
 *     if self.ob_descr.typecode != other.ob_descr.typecode:
 *         PyErr_BadArgument()             # <<<<<<<<<<<<<<
 *     return extend_buffer(self, other.data.as_chars, Py_SIZE(other))
 * 
 */
    __pyx_t_2 = PyErr_BadArgument(); if (unlikely(__pyx_t_2 == ((int)0))) __PYX_ERR(3, 158, __pyx_L1_error)

    /* "array.pxd":157
 * cdef inline int extend(array self, array other) except -1:
 *     """ extend array with data from another array; types must match. """
 *     if self.ob_descr.typecode != other.ob_descr.typecode:             # <<<<<<<<<<<<<<
 *         PyErr_BadArgument()
 *     return extend_buffer(self, other.data.as_chars, Py_SIZE(other))
 */
  }

  /* "array.pxd":159
 *     if self.ob_descr.typecode != other.ob_descr.typecode:
 *         PyErr_BadArgument()
 *     return extend_buffer(self, other.data.as_chars, Py_SIZE(other))             # <<<<<<<<<<<<<<
 * 
 * cdef inline void zero(array self):
 */
  __pyx_t_2 = __pyx_f_7cpython_5array_extend_buffer(__pyx_v_self, __pyx_v_other->data.as_chars, Py_SIZE(((PyObject *)__pyx_v_other))); if (unlikely(__pyx_t_2 == ((int)-1))) __PYX_ERR(3, 159, __pyx_L1_error)
  __pyx_r = __pyx_t_2;
  goto __pyx_L0;

  /* "array.pxd":155
 *     return 0
 * 
 * cdef inline int extend(array self, array other) except -1:             # <<<<<<<<<<<<<<
 *     """ extend array with data from another array; types must match. """
 *     if self.ob_descr.typecode != other.ob_descr.typecode:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("cpython.array.extend", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "array.pxd":161
 *     return extend_buffer(self, other.data.as_chars, Py_SIZE(other))
 * 
 * cdef inline void zero(array self):             # <<<<<<<<<<<<<<
 *     """ set all elements of array to zero. """
 *     memset(self.data.as_chars, 0, Py_SIZE(self) * self.ob_descr.itemsize)
 */

static CYTHON_INLINE void __pyx_f_7cpython_5array_zero(arrayobject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("zero", 0);

  /* "array.pxd":163
 * cdef inline void zero(array self):
 *     """ set all elements of array to zero. """
 *     memset(self.data.as_chars, 0, Py_SIZE(self) * self.ob_descr.itemsize)             # <<<<<<<<<<<<<<
 */
  (void)(memset(__pyx_v_self->data.as_chars, 0, (Py_SIZE(((PyObject *)__pyx_v_self)) * __pyx_v_self->ob_descr->itemsize)));

  /* "array.pxd":161
 *     return extend_buffer(self, other.data.as_chars, Py_SIZE(other))
 * 
 * cdef inline void zero(array self):             # <<<<<<<<<<<<<<
 *     """ set all elements of array to zero. """
 *     memset(self.data.as_chars, 0, Py_SIZE(self) * self.ob_descr.itemsize)
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static PyObject *__pyx_tp_new_8pynodegl__Node(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  return o;
}

static void __pyx_tp_dealloc_8pynodegl__Node(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_8pynodegl_5_Node_5__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_getprop_8pynodegl_5_Node_cptr(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_8pynodegl_5_Node_4cptr_1__get__(o);
}

static PyMethodDef __pyx_methods_8pynodegl__Node[] = {
  {"serialize", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pynodegl_5_Node_1serialize, METH_VARARGS|METH_KEYWORDS, 0},
  {"dot", (PyCFunction)__pyx_pw_8pynodegl_5_Node_3dot, METH_NOARGS, 0},
  {"_update_dict", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pynodegl_5_Node_7_update_dict, METH_VARARGS|METH_KEYWORDS, 0},
  {"_init_params", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pynodegl_5_Node_9_init_params, METH_VARARGS|METH_KEYWORDS, 0},
  {"_add_nodelist", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pynodegl_5_Node_11_add_nodelist, METH_VARARGS|METH_KEYWORDS, 0},
  {"_add_doublelist", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pynodegl_5_Node_13_add_doublelist, METH_VARARGS|METH_KEYWORDS, 0},
  {"set_label", (PyCFunction)__pyx_pw_8pynodegl_5_Node_15set_label, METH_O, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8pynodegl_5_Node_17__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8pynodegl_5_Node_19__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_8pynodegl__Node[] = {
  {(char *)"cptr", __pyx_getprop_8pynodegl_5_Node_cptr, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8pynodegl__Node = {
  PyVarObject_HEAD_INIT(0, 0)
  "pynodegl._Node", /*tp_name*/
  sizeof(struct __pyx_obj_8pynodegl__Node), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pynodegl__Node, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pynodegl__Node, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_8pynodegl__Node, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pynodegl__Node, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_8pynodegl__AnimatedBuffer(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_8pynodegl__Node(t, a, k);
  if (unlikely(!o)) return 0;
  return o;
}

static PyMethodDef __pyx_methods_8pynodegl__AnimatedBuffer[] = {
  {"_init_params", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pynodegl_15_AnimatedBuffer_1_init_params, METH_VARARGS|METH_KEYWORDS, 0},
  {"add_keyframes", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pynodegl_15_AnimatedBuffer_3add_keyframes, METH_VARARGS|METH_KEYWORDS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8pynodegl_15_AnimatedBuffer_5__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8pynodegl_15_AnimatedBuffer_7__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8pynodegl__AnimatedBuffer = {
  PyVarObject_HEAD_INIT(0, 0)
  "pynodegl._AnimatedBuffer", /*tp_name*/
  sizeof(struct __pyx_obj_8pynodegl__AnimatedBuffer), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pynodegl__Node, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pynodegl__AnimatedBuffer, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pynodegl__AnimatedBuffer, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_8pynodegl_AnimatedBufferFloat(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_8pynodegl__AnimatedBuffer(t, a, k);
  if (unlikely(!o)) return 0;
  return o;
}

static PyMethodDef __pyx_methods_8pynodegl_AnimatedBufferFloat[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8pynodegl_19AnimatedBufferFloat_3__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8pynodegl_19AnimatedBufferFloat_5__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8pynodegl_AnimatedBufferFloat = {
  PyVarObject_HEAD_INIT(0, 0)
  "pynodegl.AnimatedBufferFloat", /*tp_name*/
  sizeof(struct __pyx_obj_8pynodegl_AnimatedBufferFloat), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pynodegl__Node, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pynodegl_AnimatedBufferFloat, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_8pynodegl_19AnimatedBufferFloat_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pynodegl_AnimatedBufferFloat, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_8pynodegl_AnimatedBufferVec2(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_8pynodegl__AnimatedBuffer(t, a, k);
  if (unlikely(!o)) return 0;
  return o;
}

static PyMethodDef __pyx_methods_8pynodegl_AnimatedBufferVec2[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8pynodegl_18AnimatedBufferVec2_3__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8pynodegl_18AnimatedBufferVec2_5__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8pynodegl_AnimatedBufferVec2 = {
  PyVarObject_HEAD_INIT(0, 0)
  "pynodegl.AnimatedBufferVec2", /*tp_name*/
  sizeof(struct __pyx_obj_8pynodegl_AnimatedBufferVec2), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pynodegl__Node, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pynodegl_AnimatedBufferVec2, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_8pynodegl_18AnimatedBufferVec2_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pynodegl_AnimatedBufferVec2, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_8pynodegl_AnimatedBufferVec3(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_8pynodegl__AnimatedBuffer(t, a, k);
  if (unlikely(!o)) return 0;
  return o;
}

static PyMethodDef __pyx_methods_8pynodegl_AnimatedBufferVec3[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8pynodegl_18AnimatedBufferVec3_3__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8pynodegl_18AnimatedBufferVec3_5__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8pynodegl_AnimatedBufferVec3 = {
  PyVarObject_HEAD_INIT(0, 0)
  "pynodegl.AnimatedBufferVec3", /*tp_name*/
  sizeof(struct __pyx_obj_8pynodegl_AnimatedBufferVec3), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pynodegl__Node, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pynodegl_AnimatedBufferVec3, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_8pynodegl_18AnimatedBufferVec3_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pynodegl_AnimatedBufferVec3, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_8pynodegl_AnimatedBufferVec4(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_8pynodegl__AnimatedBuffer(t, a, k);
  if (unlikely(!o)) return 0;
  return o;
}

static PyMethodDef __pyx_methods_8pynodegl_AnimatedBufferVec4[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8pynodegl_18AnimatedBufferVec4_3__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8pynodegl_18AnimatedBufferVec4_5__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8pynodegl_AnimatedBufferVec4 = {
  PyVarObject_HEAD_INIT(0, 0)
  "pynodegl.AnimatedBufferVec4", /*tp_name*/
  sizeof(struct __pyx_obj_8pynodegl_AnimatedBufferVec4), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pynodegl__Node, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pynodegl_AnimatedBufferVec4, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_8pynodegl_18AnimatedBufferVec4_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pynodegl_AnimatedBufferVec4, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_8pynodegl_AnimatedTime(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_8pynodegl__Node(t, a, k);
  if (unlikely(!o)) return 0;
  return o;
}

static PyMethodDef __pyx_methods_8pynodegl_AnimatedTime[] = {
  {"add_keyframes", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pynodegl_12AnimatedTime_3add_keyframes, METH_VARARGS|METH_KEYWORDS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8pynodegl_12AnimatedTime_5__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8pynodegl_12AnimatedTime_7__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8pynodegl_AnimatedTime = {
  PyVarObject_HEAD_INIT(0, 0)
  "pynodegl.AnimatedTime", /*tp_name*/
  sizeof(struct __pyx_obj_8pynodegl_AnimatedTime), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pynodegl__Node, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pynodegl_AnimatedTime, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_8pynodegl_12AnimatedTime_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pynodegl_AnimatedTime, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_8pynodegl_AnimatedFloat(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_8pynodegl__Node(t, a, k);
  if (unlikely(!o)) return 0;
  return o;
}

static PyMethodDef __pyx_methods_8pynodegl_AnimatedFloat[] = {
  {"evaluate", (PyCFunction)__pyx_pw_8pynodegl_13AnimatedFloat_3evaluate, METH_O, 0},
  {"add_keyframes", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pynodegl_13AnimatedFloat_5add_keyframes, METH_VARARGS|METH_KEYWORDS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8pynodegl_13AnimatedFloat_7__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8pynodegl_13AnimatedFloat_9__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8pynodegl_AnimatedFloat = {
  PyVarObject_HEAD_INIT(0, 0)
  "pynodegl.AnimatedFloat", /*tp_name*/
  sizeof(struct __pyx_obj_8pynodegl_AnimatedFloat), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pynodegl__Node, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pynodegl_AnimatedFloat, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_8pynodegl_13AnimatedFloat_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pynodegl_AnimatedFloat, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_8pynodegl_AnimatedVec2(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_8pynodegl__Node(t, a, k);
  if (unlikely(!o)) return 0;
  return o;
}

static PyMethodDef __pyx_methods_8pynodegl_AnimatedVec2[] = {
  {"evaluate", (PyCFunction)__pyx_pw_8pynodegl_12AnimatedVec2_3evaluate, METH_O, 0},
  {"add_keyframes", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pynodegl_12AnimatedVec2_5add_keyframes, METH_VARARGS|METH_KEYWORDS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8pynodegl_12AnimatedVec2_7__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8pynodegl_12AnimatedVec2_9__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8pynodegl_AnimatedVec2 = {
  PyVarObject_HEAD_INIT(0, 0)
  "pynodegl.AnimatedVec2", /*tp_name*/
  sizeof(struct __pyx_obj_8pynodegl_AnimatedVec2), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pynodegl__Node, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pynodegl_AnimatedVec2, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_8pynodegl_12AnimatedVec2_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pynodegl_AnimatedVec2, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_8pynodegl_AnimatedVec3(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_8pynodegl__Node(t, a, k);
  if (unlikely(!o)) return 0;
  return o;
}

static PyMethodDef __pyx_methods_8pynodegl_AnimatedVec3[] = {
  {"evaluate", (PyCFunction)__pyx_pw_8pynodegl_12AnimatedVec3_3evaluate, METH_O, 0},
  {"add_keyframes", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pynodegl_12AnimatedVec3_5add_keyframes, METH_VARARGS|METH_KEYWORDS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8pynodegl_12AnimatedVec3_7__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8pynodegl_12AnimatedVec3_9__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8pynodegl_AnimatedVec3 = {
  PyVarObject_HEAD_INIT(0, 0)
  "pynodegl.AnimatedVec3", /*tp_name*/
  sizeof(struct __pyx_obj_8pynodegl_AnimatedVec3), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pynodegl__Node, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pynodegl_AnimatedVec3, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_8pynodegl_12AnimatedVec3_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pynodegl_AnimatedVec3, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_8pynodegl_AnimatedVec4(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_8pynodegl__Node(t, a, k);
  if (unlikely(!o)) return 0;
  return o;
}

static PyMethodDef __pyx_methods_8pynodegl_AnimatedVec4[] = {
  {"evaluate", (PyCFunction)__pyx_pw_8pynodegl_12AnimatedVec4_3evaluate, METH_O, 0},
  {"add_keyframes", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pynodegl_12AnimatedVec4_5add_keyframes, METH_VARARGS|METH_KEYWORDS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8pynodegl_12AnimatedVec4_7__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8pynodegl_12AnimatedVec4_9__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8pynodegl_AnimatedVec4 = {
  PyVarObject_HEAD_INIT(0, 0)
  "pynodegl.AnimatedVec4", /*tp_name*/
  sizeof(struct __pyx_obj_8pynodegl_AnimatedVec4), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pynodegl__Node, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pynodegl_AnimatedVec4, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_8pynodegl_12AnimatedVec4_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pynodegl_AnimatedVec4, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_8pynodegl_AnimatedQuat(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_8pynodegl__Node(t, a, k);
  if (unlikely(!o)) return 0;
  return o;
}

static PyMethodDef __pyx_methods_8pynodegl_AnimatedQuat[] = {
  {"evaluate", (PyCFunction)__pyx_pw_8pynodegl_12AnimatedQuat_3evaluate, METH_O, 0},
  {"add_keyframes", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pynodegl_12AnimatedQuat_5add_keyframes, METH_VARARGS|METH_KEYWORDS, 0},
  {"set_as_mat4", (PyCFunction)__pyx_pw_8pynodegl_12AnimatedQuat_7set_as_mat4, METH_O, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8pynodegl_12AnimatedQuat_9__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8pynodegl_12AnimatedQuat_11__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8pynodegl_AnimatedQuat = {
  PyVarObject_HEAD_INIT(0, 0)
  "pynodegl.AnimatedQuat", /*tp_name*/
  sizeof(struct __pyx_obj_8pynodegl_AnimatedQuat), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pynodegl__Node, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pynodegl_AnimatedQuat, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_8pynodegl_12AnimatedQuat_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pynodegl_AnimatedQuat, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_8pynodegl_AnimKeyFrameFloat(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_8pynodegl__Node(t, a, k);
  if (unlikely(!o)) return 0;
  return o;
}

static PyMethodDef __pyx_methods_8pynodegl_AnimKeyFrameFloat[] = {
  {"set_easing", (PyCFunction)__pyx_pw_8pynodegl_17AnimKeyFrameFloat_3set_easing, METH_O, 0},
  {"add_easing_args", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pynodegl_17AnimKeyFrameFloat_5add_easing_args, METH_VARARGS|METH_KEYWORDS, 0},
  {"set_easing_start_offset", (PyCFunction)__pyx_pw_8pynodegl_17AnimKeyFrameFloat_7set_easing_start_offset, METH_O, 0},
  {"set_easing_end_offset", (PyCFunction)__pyx_pw_8pynodegl_17AnimKeyFrameFloat_9set_easing_end_offset, METH_O, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8pynodegl_17AnimKeyFrameFloat_11__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8pynodegl_17AnimKeyFrameFloat_13__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8pynodegl_AnimKeyFrameFloat = {
  PyVarObject_HEAD_INIT(0, 0)
  "pynodegl.AnimKeyFrameFloat", /*tp_name*/
  sizeof(struct __pyx_obj_8pynodegl_AnimKeyFrameFloat), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pynodegl__Node, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pynodegl_AnimKeyFrameFloat, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_8pynodegl_17AnimKeyFrameFloat_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pynodegl_AnimKeyFrameFloat, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_8pynodegl_AnimKeyFrameVec2(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_8pynodegl__Node(t, a, k);
  if (unlikely(!o)) return 0;
  return o;
}

static PyMethodDef __pyx_methods_8pynodegl_AnimKeyFrameVec2[] = {
  {"set_easing", (PyCFunction)__pyx_pw_8pynodegl_16AnimKeyFrameVec2_3set_easing, METH_O, 0},
  {"add_easing_args", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pynodegl_16AnimKeyFrameVec2_5add_easing_args, METH_VARARGS|METH_KEYWORDS, 0},
  {"set_easing_start_offset", (PyCFunction)__pyx_pw_8pynodegl_16AnimKeyFrameVec2_7set_easing_start_offset, METH_O, 0},
  {"set_easing_end_offset", (PyCFunction)__pyx_pw_8pynodegl_16AnimKeyFrameVec2_9set_easing_end_offset, METH_O, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8pynodegl_16AnimKeyFrameVec2_11__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8pynodegl_16AnimKeyFrameVec2_13__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8pynodegl_AnimKeyFrameVec2 = {
  PyVarObject_HEAD_INIT(0, 0)
  "pynodegl.AnimKeyFrameVec2", /*tp_name*/
  sizeof(struct __pyx_obj_8pynodegl_AnimKeyFrameVec2), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pynodegl__Node, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pynodegl_AnimKeyFrameVec2, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_8pynodegl_16AnimKeyFrameVec2_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pynodegl_AnimKeyFrameVec2, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_8pynodegl_AnimKeyFrameVec3(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_8pynodegl__Node(t, a, k);
  if (unlikely(!o)) return 0;
  return o;
}

static PyMethodDef __pyx_methods_8pynodegl_AnimKeyFrameVec3[] = {
  {"set_easing", (PyCFunction)__pyx_pw_8pynodegl_16AnimKeyFrameVec3_3set_easing, METH_O, 0},
  {"add_easing_args", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pynodegl_16AnimKeyFrameVec3_5add_easing_args, METH_VARARGS|METH_KEYWORDS, 0},
  {"set_easing_start_offset", (PyCFunction)__pyx_pw_8pynodegl_16AnimKeyFrameVec3_7set_easing_start_offset, METH_O, 0},
  {"set_easing_end_offset", (PyCFunction)__pyx_pw_8pynodegl_16AnimKeyFrameVec3_9set_easing_end_offset, METH_O, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8pynodegl_16AnimKeyFrameVec3_11__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8pynodegl_16AnimKeyFrameVec3_13__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8pynodegl_AnimKeyFrameVec3 = {
  PyVarObject_HEAD_INIT(0, 0)
  "pynodegl.AnimKeyFrameVec3", /*tp_name*/
  sizeof(struct __pyx_obj_8pynodegl_AnimKeyFrameVec3), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pynodegl__Node, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pynodegl_AnimKeyFrameVec3, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_8pynodegl_16AnimKeyFrameVec3_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pynodegl_AnimKeyFrameVec3, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_8pynodegl_AnimKeyFrameVec4(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_8pynodegl__Node(t, a, k);
  if (unlikely(!o)) return 0;
  return o;
}

static PyMethodDef __pyx_methods_8pynodegl_AnimKeyFrameVec4[] = {
  {"set_easing", (PyCFunction)__pyx_pw_8pynodegl_16AnimKeyFrameVec4_3set_easing, METH_O, 0},
  {"add_easing_args", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pynodegl_16AnimKeyFrameVec4_5add_easing_args, METH_VARARGS|METH_KEYWORDS, 0},
  {"set_easing_start_offset", (PyCFunction)__pyx_pw_8pynodegl_16AnimKeyFrameVec4_7set_easing_start_offset, METH_O, 0},
  {"set_easing_end_offset", (PyCFunction)__pyx_pw_8pynodegl_16AnimKeyFrameVec4_9set_easing_end_offset, METH_O, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8pynodegl_16AnimKeyFrameVec4_11__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8pynodegl_16AnimKeyFrameVec4_13__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8pynodegl_AnimKeyFrameVec4 = {
  PyVarObject_HEAD_INIT(0, 0)
  "pynodegl.AnimKeyFrameVec4", /*tp_name*/
  sizeof(struct __pyx_obj_8pynodegl_AnimKeyFrameVec4), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pynodegl__Node, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pynodegl_AnimKeyFrameVec4, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_8pynodegl_16AnimKeyFrameVec4_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pynodegl_AnimKeyFrameVec4, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_8pynodegl_AnimKeyFrameQuat(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_8pynodegl__Node(t, a, k);
  if (unlikely(!o)) return 0;
  return o;
}

static PyMethodDef __pyx_methods_8pynodegl_AnimKeyFrameQuat[] = {
  {"set_easing", (PyCFunction)__pyx_pw_8pynodegl_16AnimKeyFrameQuat_3set_easing, METH_O, 0},
  {"add_easing_args", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pynodegl_16AnimKeyFrameQuat_5add_easing_args, METH_VARARGS|METH_KEYWORDS, 0},
  {"set_easing_start_offset", (PyCFunction)__pyx_pw_8pynodegl_16AnimKeyFrameQuat_7set_easing_start_offset, METH_O, 0},
  {"set_easing_end_offset", (PyCFunction)__pyx_pw_8pynodegl_16AnimKeyFrameQuat_9set_easing_end_offset, METH_O, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8pynodegl_16AnimKeyFrameQuat_11__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8pynodegl_16AnimKeyFrameQuat_13__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8pynodegl_AnimKeyFrameQuat = {
  PyVarObject_HEAD_INIT(0, 0)
  "pynodegl.AnimKeyFrameQuat", /*tp_name*/
  sizeof(struct __pyx_obj_8pynodegl_AnimKeyFrameQuat), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pynodegl__Node, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pynodegl_AnimKeyFrameQuat, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_8pynodegl_16AnimKeyFrameQuat_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pynodegl_AnimKeyFrameQuat, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_8pynodegl_AnimKeyFrameBuffer(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_8pynodegl__Node(t, a, k);
  if (unlikely(!o)) return 0;
  return o;
}

static PyMethodDef __pyx_methods_8pynodegl_AnimKeyFrameBuffer[] = {
  {"set_data", (PyCFunction)__pyx_pw_8pynodegl_18AnimKeyFrameBuffer_3set_data, METH_O, 0},
  {"set_easing", (PyCFunction)__pyx_pw_8pynodegl_18AnimKeyFrameBuffer_5set_easing, METH_O, 0},
  {"add_easing_args", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pynodegl_18AnimKeyFrameBuffer_7add_easing_args, METH_VARARGS|METH_KEYWORDS, 0},
  {"set_easing_start_offset", (PyCFunction)__pyx_pw_8pynodegl_18AnimKeyFrameBuffer_9set_easing_start_offset, METH_O, 0},
  {"set_easing_end_offset", (PyCFunction)__pyx_pw_8pynodegl_18AnimKeyFrameBuffer_11set_easing_end_offset, METH_O, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8pynodegl_18AnimKeyFrameBuffer_13__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8pynodegl_18AnimKeyFrameBuffer_15__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8pynodegl_AnimKeyFrameBuffer = {
  PyVarObject_HEAD_INIT(0, 0)
  "pynodegl.AnimKeyFrameBuffer", /*tp_name*/
  sizeof(struct __pyx_obj_8pynodegl_AnimKeyFrameBuffer), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pynodegl__Node, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pynodegl_AnimKeyFrameBuffer, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_8pynodegl_18AnimKeyFrameBuffer_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pynodegl_AnimKeyFrameBuffer, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_8pynodegl_Block(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_8pynodegl__Node(t, a, k);
  if (unlikely(!o)) return 0;
  return o;
}

static PyMethodDef __pyx_methods_8pynodegl_Block[] = {
  {"update_fields", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pynodegl_5Block_3update_fields, METH_VARARGS|METH_KEYWORDS, 0},
  {"set_layout", (PyCFunction)__pyx_pw_8pynodegl_5Block_5set_layout, METH_O, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8pynodegl_5Block_7__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8pynodegl_5Block_9__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8pynodegl_Block = {
  PyVarObject_HEAD_INIT(0, 0)
  "pynodegl.Block", /*tp_name*/
  sizeof(struct __pyx_obj_8pynodegl_Block), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pynodegl__Node, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pynodegl_Block, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_8pynodegl_5Block_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pynodegl_Block, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_8pynodegl__Buffer(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_8pynodegl__Node(t, a, k);
  if (unlikely(!o)) return 0;
  return o;
}

static PyMethodDef __pyx_methods_8pynodegl__Buffer[] = {
  {"_init_params", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pynodegl_7_Buffer_1_init_params, METH_VARARGS|METH_KEYWORDS, 0},
  {"set_count", (PyCFunction)__pyx_pw_8pynodegl_7_Buffer_3set_count, METH_O, 0},
  {"set_data", (PyCFunction)__pyx_pw_8pynodegl_7_Buffer_5set_data, METH_O, 0},
  {"set_filename", (PyCFunction)__pyx_pw_8pynodegl_7_Buffer_7set_filename, METH_O, 0},
  {"set_block", (PyCFunction)__pyx_pw_8pynodegl_7_Buffer_9set_block, METH_O, 0},
  {"set_block_field", (PyCFunction)__pyx_pw_8pynodegl_7_Buffer_11set_block_field, METH_O, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8pynodegl_7_Buffer_13__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8pynodegl_7_Buffer_15__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8pynodegl__Buffer = {
  PyVarObject_HEAD_INIT(0, 0)
  "pynodegl._Buffer", /*tp_name*/
  sizeof(struct __pyx_obj_8pynodegl__Buffer), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pynodegl__Node, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pynodegl__Buffer, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pynodegl__Buffer, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_8pynodegl_BufferByte(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_8pynodegl__Buffer(t, a, k);
  if (unlikely(!o)) return 0;
  return o;
}

static PyMethodDef __pyx_methods_8pynodegl_BufferByte[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8pynodegl_10BufferByte_3__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8pynodegl_10BufferByte_5__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8pynodegl_BufferByte = {
  PyVarObject_HEAD_INIT(0, 0)
  "pynodegl.BufferByte", /*tp_name*/
  sizeof(struct __pyx_obj_8pynodegl_BufferByte), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pynodegl__Node, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pynodegl_BufferByte, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_8pynodegl_10BufferByte_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pynodegl_BufferByte, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_8pynodegl_BufferBVec2(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_8pynodegl__Buffer(t, a, k);
  if (unlikely(!o)) return 0;
  return o;
}

static PyMethodDef __pyx_methods_8pynodegl_BufferBVec2[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8pynodegl_11BufferBVec2_3__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8pynodegl_11BufferBVec2_5__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8pynodegl_BufferBVec2 = {
  PyVarObject_HEAD_INIT(0, 0)
  "pynodegl.BufferBVec2", /*tp_name*/
  sizeof(struct __pyx_obj_8pynodegl_BufferBVec2), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pynodegl__Node, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pynodegl_BufferBVec2, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_8pynodegl_11BufferBVec2_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pynodegl_BufferBVec2, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_8pynodegl_BufferBVec3(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_8pynodegl__Buffer(t, a, k);
  if (unlikely(!o)) return 0;
  return o;
}

static PyMethodDef __pyx_methods_8pynodegl_BufferBVec3[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8pynodegl_11BufferBVec3_3__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8pynodegl_11BufferBVec3_5__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8pynodegl_BufferBVec3 = {
  PyVarObject_HEAD_INIT(0, 0)
  "pynodegl.BufferBVec3", /*tp_name*/
  sizeof(struct __pyx_obj_8pynodegl_BufferBVec3), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pynodegl__Node, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pynodegl_BufferBVec3, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_8pynodegl_11BufferBVec3_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pynodegl_BufferBVec3, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_8pynodegl_BufferBVec4(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_8pynodegl__Buffer(t, a, k);
  if (unlikely(!o)) return 0;
  return o;
}

static PyMethodDef __pyx_methods_8pynodegl_BufferBVec4[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8pynodegl_11BufferBVec4_3__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8pynodegl_11BufferBVec4_5__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8pynodegl_BufferBVec4 = {
  PyVarObject_HEAD_INIT(0, 0)
  "pynodegl.BufferBVec4", /*tp_name*/
  sizeof(struct __pyx_obj_8pynodegl_BufferBVec4), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pynodegl__Node, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pynodegl_BufferBVec4, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_8pynodegl_11BufferBVec4_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pynodegl_BufferBVec4, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_8pynodegl_BufferInt(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_8pynodegl__Buffer(t, a, k);
  if (unlikely(!o)) return 0;
  return o;
}

static PyMethodDef __pyx_methods_8pynodegl_BufferInt[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8pynodegl_9BufferInt_3__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8pynodegl_9BufferInt_5__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8pynodegl_BufferInt = {
  PyVarObject_HEAD_INIT(0, 0)
  "pynodegl.BufferInt", /*tp_name*/
  sizeof(struct __pyx_obj_8pynodegl_BufferInt), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pynodegl__Node, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pynodegl_BufferInt, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_8pynodegl_9BufferInt_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pynodegl_BufferInt, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_8pynodegl_BufferInt64(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_8pynodegl__Buffer(t, a, k);
  if (unlikely(!o)) return 0;
  return o;
}

static PyMethodDef __pyx_methods_8pynodegl_BufferInt64[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8pynodegl_11BufferInt64_3__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8pynodegl_11BufferInt64_5__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8pynodegl_BufferInt64 = {
  PyVarObject_HEAD_INIT(0, 0)
  "pynodegl.BufferInt64", /*tp_name*/
  sizeof(struct __pyx_obj_8pynodegl_BufferInt64), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pynodegl__Node, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pynodegl_BufferInt64, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_8pynodegl_11BufferInt64_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pynodegl_BufferInt64, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_8pynodegl_BufferIVec2(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_8pynodegl__Buffer(t, a, k);
  if (unlikely(!o)) return 0;
  return o;
}

static PyMethodDef __pyx_methods_8pynodegl_BufferIVec2[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8pynodegl_11BufferIVec2_3__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8pynodegl_11BufferIVec2_5__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8pynodegl_BufferIVec2 = {
  PyVarObject_HEAD_INIT(0, 0)
  "pynodegl.BufferIVec2", /*tp_name*/
  sizeof(struct __pyx_obj_8pynodegl_BufferIVec2), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pynodegl__Node, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pynodegl_BufferIVec2, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_8pynodegl_11BufferIVec2_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pynodegl_BufferIVec2, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_8pynodegl_BufferIVec3(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_8pynodegl__Buffer(t, a, k);
  if (unlikely(!o)) return 0;
  return o;
}

static PyMethodDef __pyx_methods_8pynodegl_BufferIVec3[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8pynodegl_11BufferIVec3_3__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8pynodegl_11BufferIVec3_5__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8pynodegl_BufferIVec3 = {
  PyVarObject_HEAD_INIT(0, 0)
  "pynodegl.BufferIVec3", /*tp_name*/
  sizeof(struct __pyx_obj_8pynodegl_BufferIVec3), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pynodegl__Node, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pynodegl_BufferIVec3, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_8pynodegl_11BufferIVec3_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pynodegl_BufferIVec3, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_8pynodegl_BufferIVec4(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_8pynodegl__Buffer(t, a, k);
  if (unlikely(!o)) return 0;
  return o;
}

static PyMethodDef __pyx_methods_8pynodegl_BufferIVec4[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8pynodegl_11BufferIVec4_3__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8pynodegl_11BufferIVec4_5__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8pynodegl_BufferIVec4 = {
  PyVarObject_HEAD_INIT(0, 0)
  "pynodegl.BufferIVec4", /*tp_name*/
  sizeof(struct __pyx_obj_8pynodegl_BufferIVec4), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pynodegl__Node, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pynodegl_BufferIVec4, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_8pynodegl_11BufferIVec4_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pynodegl_BufferIVec4, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_8pynodegl_BufferShort(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_8pynodegl__Buffer(t, a, k);
  if (unlikely(!o)) return 0;
  return o;
}

static PyMethodDef __pyx_methods_8pynodegl_BufferShort[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8pynodegl_11BufferShort_3__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8pynodegl_11BufferShort_5__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8pynodegl_BufferShort = {
  PyVarObject_HEAD_INIT(0, 0)
  "pynodegl.BufferShort", /*tp_name*/
  sizeof(struct __pyx_obj_8pynodegl_BufferShort), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pynodegl__Node, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pynodegl_BufferShort, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_8pynodegl_11BufferShort_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pynodegl_BufferShort, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_8pynodegl_BufferSVec2(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_8pynodegl__Buffer(t, a, k);
  if (unlikely(!o)) return 0;
  return o;
}

static PyMethodDef __pyx_methods_8pynodegl_BufferSVec2[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8pynodegl_11BufferSVec2_3__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8pynodegl_11BufferSVec2_5__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8pynodegl_BufferSVec2 = {
  PyVarObject_HEAD_INIT(0, 0)
  "pynodegl.BufferSVec2", /*tp_name*/
  sizeof(struct __pyx_obj_8pynodegl_BufferSVec2), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pynodegl__Node, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pynodegl_BufferSVec2, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_8pynodegl_11BufferSVec2_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pynodegl_BufferSVec2, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_8pynodegl_BufferSVec3(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_8pynodegl__Buffer(t, a, k);
  if (unlikely(!o)) return 0;
  return o;
}

static PyMethodDef __pyx_methods_8pynodegl_BufferSVec3[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8pynodegl_11BufferSVec3_3__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8pynodegl_11BufferSVec3_5__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8pynodegl_BufferSVec3 = {
  PyVarObject_HEAD_INIT(0, 0)
  "pynodegl.BufferSVec3", /*tp_name*/
  sizeof(struct __pyx_obj_8pynodegl_BufferSVec3), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pynodegl__Node, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pynodegl_BufferSVec3, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_8pynodegl_11BufferSVec3_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pynodegl_BufferSVec3, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_8pynodegl_BufferSVec4(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_8pynodegl__Buffer(t, a, k);
  if (unlikely(!o)) return 0;
  return o;
}

static PyMethodDef __pyx_methods_8pynodegl_BufferSVec4[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8pynodegl_11BufferSVec4_3__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8pynodegl_11BufferSVec4_5__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8pynodegl_BufferSVec4 = {
  PyVarObject_HEAD_INIT(0, 0)
  "pynodegl.BufferSVec4", /*tp_name*/
  sizeof(struct __pyx_obj_8pynodegl_BufferSVec4), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pynodegl__Node, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pynodegl_BufferSVec4, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_8pynodegl_11BufferSVec4_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pynodegl_BufferSVec4, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_8pynodegl_BufferUByte(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_8pynodegl__Buffer(t, a, k);
  if (unlikely(!o)) return 0;
  return o;
}

static PyMethodDef __pyx_methods_8pynodegl_BufferUByte[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8pynodegl_11BufferUByte_3__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8pynodegl_11BufferUByte_5__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8pynodegl_BufferUByte = {
  PyVarObject_HEAD_INIT(0, 0)
  "pynodegl.BufferUByte", /*tp_name*/
  sizeof(struct __pyx_obj_8pynodegl_BufferUByte), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pynodegl__Node, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pynodegl_BufferUByte, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_8pynodegl_11BufferUByte_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pynodegl_BufferUByte, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_8pynodegl_BufferUBVec2(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_8pynodegl__Buffer(t, a, k);
  if (unlikely(!o)) return 0;
  return o;
}

static PyMethodDef __pyx_methods_8pynodegl_BufferUBVec2[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8pynodegl_12BufferUBVec2_3__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8pynodegl_12BufferUBVec2_5__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8pynodegl_BufferUBVec2 = {
  PyVarObject_HEAD_INIT(0, 0)
  "pynodegl.BufferUBVec2", /*tp_name*/
  sizeof(struct __pyx_obj_8pynodegl_BufferUBVec2), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pynodegl__Node, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pynodegl_BufferUBVec2, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_8pynodegl_12BufferUBVec2_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pynodegl_BufferUBVec2, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_8pynodegl_BufferUBVec3(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_8pynodegl__Buffer(t, a, k);
  if (unlikely(!o)) return 0;
  return o;
}

static PyMethodDef __pyx_methods_8pynodegl_BufferUBVec3[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8pynodegl_12BufferUBVec3_3__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8pynodegl_12BufferUBVec3_5__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8pynodegl_BufferUBVec3 = {
  PyVarObject_HEAD_INIT(0, 0)
  "pynodegl.BufferUBVec3", /*tp_name*/
  sizeof(struct __pyx_obj_8pynodegl_BufferUBVec3), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pynodegl__Node, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pynodegl_BufferUBVec3, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_8pynodegl_12BufferUBVec3_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pynodegl_BufferUBVec3, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_8pynodegl_BufferUBVec4(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_8pynodegl__Buffer(t, a, k);
  if (unlikely(!o)) return 0;
  return o;
}

static PyMethodDef __pyx_methods_8pynodegl_BufferUBVec4[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8pynodegl_12BufferUBVec4_3__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8pynodegl_12BufferUBVec4_5__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8pynodegl_BufferUBVec4 = {
  PyVarObject_HEAD_INIT(0, 0)
  "pynodegl.BufferUBVec4", /*tp_name*/
  sizeof(struct __pyx_obj_8pynodegl_BufferUBVec4), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pynodegl__Node, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pynodegl_BufferUBVec4, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_8pynodegl_12BufferUBVec4_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pynodegl_BufferUBVec4, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_8pynodegl_BufferUInt(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_8pynodegl__Buffer(t, a, k);
  if (unlikely(!o)) return 0;
  return o;
}

static PyMethodDef __pyx_methods_8pynodegl_BufferUInt[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8pynodegl_10BufferUInt_3__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8pynodegl_10BufferUInt_5__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8pynodegl_BufferUInt = {
  PyVarObject_HEAD_INIT(0, 0)
  "pynodegl.BufferUInt", /*tp_name*/
  sizeof(struct __pyx_obj_8pynodegl_BufferUInt), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pynodegl__Node, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pynodegl_BufferUInt, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_8pynodegl_10BufferUInt_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pynodegl_BufferUInt, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_8pynodegl_BufferUIVec2(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_8pynodegl__Buffer(t, a, k);
  if (unlikely(!o)) return 0;
  return o;
}

static PyMethodDef __pyx_methods_8pynodegl_BufferUIVec2[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8pynodegl_12BufferUIVec2_3__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8pynodegl_12BufferUIVec2_5__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8pynodegl_BufferUIVec2 = {
  PyVarObject_HEAD_INIT(0, 0)
  "pynodegl.BufferUIVec2", /*tp_name*/
  sizeof(struct __pyx_obj_8pynodegl_BufferUIVec2), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pynodegl__Node, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pynodegl_BufferUIVec2, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_8pynodegl_12BufferUIVec2_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pynodegl_BufferUIVec2, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_8pynodegl_BufferUIVec3(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_8pynodegl__Buffer(t, a, k);
  if (unlikely(!o)) return 0;
  return o;
}

static PyMethodDef __pyx_methods_8pynodegl_BufferUIVec3[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8pynodegl_12BufferUIVec3_3__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8pynodegl_12BufferUIVec3_5__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8pynodegl_BufferUIVec3 = {
  PyVarObject_HEAD_INIT(0, 0)
  "pynodegl.BufferUIVec3", /*tp_name*/
  sizeof(struct __pyx_obj_8pynodegl_BufferUIVec3), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pynodegl__Node, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pynodegl_BufferUIVec3, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_8pynodegl_12BufferUIVec3_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pynodegl_BufferUIVec3, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_8pynodegl_BufferUIVec4(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_8pynodegl__Buffer(t, a, k);
  if (unlikely(!o)) return 0;
  return o;
}

static PyMethodDef __pyx_methods_8pynodegl_BufferUIVec4[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8pynodegl_12BufferUIVec4_3__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8pynodegl_12BufferUIVec4_5__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8pynodegl_BufferUIVec4 = {
  PyVarObject_HEAD_INIT(0, 0)
  "pynodegl.BufferUIVec4", /*tp_name*/
  sizeof(struct __pyx_obj_8pynodegl_BufferUIVec4), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pynodegl__Node, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pynodegl_BufferUIVec4, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_8pynodegl_12BufferUIVec4_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pynodegl_BufferUIVec4, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_8pynodegl_BufferUShort(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_8pynodegl__Buffer(t, a, k);
  if (unlikely(!o)) return 0;
  return o;
}

static PyMethodDef __pyx_methods_8pynodegl_BufferUShort[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8pynodegl_12BufferUShort_3__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8pynodegl_12BufferUShort_5__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8pynodegl_BufferUShort = {
  PyVarObject_HEAD_INIT(0, 0)
  "pynodegl.BufferUShort", /*tp_name*/
  sizeof(struct __pyx_obj_8pynodegl_BufferUShort), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pynodegl__Node, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pynodegl_BufferUShort, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_8pynodegl_12BufferUShort_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pynodegl_BufferUShort, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_8pynodegl_BufferUSVec2(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_8pynodegl__Buffer(t, a, k);
  if (unlikely(!o)) return 0;
  return o;
}

static PyMethodDef __pyx_methods_8pynodegl_BufferUSVec2[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8pynodegl_12BufferUSVec2_3__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8pynodegl_12BufferUSVec2_5__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8pynodegl_BufferUSVec2 = {
  PyVarObject_HEAD_INIT(0, 0)
  "pynodegl.BufferUSVec2", /*tp_name*/
  sizeof(struct __pyx_obj_8pynodegl_BufferUSVec2), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pynodegl__Node, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pynodegl_BufferUSVec2, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_8pynodegl_12BufferUSVec2_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pynodegl_BufferUSVec2, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_8pynodegl_BufferUSVec3(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_8pynodegl__Buffer(t, a, k);
  if (unlikely(!o)) return 0;
  return o;
}

static PyMethodDef __pyx_methods_8pynodegl_BufferUSVec3[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8pynodegl_12BufferUSVec3_3__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8pynodegl_12BufferUSVec3_5__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8pynodegl_BufferUSVec3 = {
  PyVarObject_HEAD_INIT(0, 0)
  "pynodegl.BufferUSVec3", /*tp_name*/
  sizeof(struct __pyx_obj_8pynodegl_BufferUSVec3), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pynodegl__Node, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pynodegl_BufferUSVec3, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_8pynodegl_12BufferUSVec3_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pynodegl_BufferUSVec3, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_8pynodegl_BufferUSVec4(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_8pynodegl__Buffer(t, a, k);
  if (unlikely(!o)) return 0;
  return o;
}

static PyMethodDef __pyx_methods_8pynodegl_BufferUSVec4[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8pynodegl_12BufferUSVec4_3__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8pynodegl_12BufferUSVec4_5__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8pynodegl_BufferUSVec4 = {
  PyVarObject_HEAD_INIT(0, 0)
  "pynodegl.BufferUSVec4", /*tp_name*/
  sizeof(struct __pyx_obj_8pynodegl_BufferUSVec4), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pynodegl__Node, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pynodegl_BufferUSVec4, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_8pynodegl_12BufferUSVec4_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pynodegl_BufferUSVec4, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_8pynodegl_BufferFloat(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_8pynodegl__Buffer(t, a, k);
  if (unlikely(!o)) return 0;
  return o;
}

static PyMethodDef __pyx_methods_8pynodegl_BufferFloat[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8pynodegl_11BufferFloat_3__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8pynodegl_11BufferFloat_5__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8pynodegl_BufferFloat = {
  PyVarObject_HEAD_INIT(0, 0)
  "pynodegl.BufferFloat", /*tp_name*/
  sizeof(struct __pyx_obj_8pynodegl_BufferFloat), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pynodegl__Node, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pynodegl_BufferFloat, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_8pynodegl_11BufferFloat_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pynodegl_BufferFloat, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_8pynodegl_BufferVec2(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_8pynodegl__Buffer(t, a, k);
  if (unlikely(!o)) return 0;
  return o;
}

static PyMethodDef __pyx_methods_8pynodegl_BufferVec2[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8pynodegl_10BufferVec2_3__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8pynodegl_10BufferVec2_5__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8pynodegl_BufferVec2 = {
  PyVarObject_HEAD_INIT(0, 0)
  "pynodegl.BufferVec2", /*tp_name*/
  sizeof(struct __pyx_obj_8pynodegl_BufferVec2), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pynodegl__Node, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pynodegl_BufferVec2, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_8pynodegl_10BufferVec2_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pynodegl_BufferVec2, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_8pynodegl_BufferVec3(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_8pynodegl__Buffer(t, a, k);
  if (unlikely(!o)) return 0;
  return o;
}

static PyMethodDef __pyx_methods_8pynodegl_BufferVec3[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8pynodegl_10BufferVec3_3__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8pynodegl_10BufferVec3_5__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8pynodegl_BufferVec3 = {
  PyVarObject_HEAD_INIT(0, 0)
  "pynodegl.BufferVec3", /*tp_name*/
  sizeof(struct __pyx_obj_8pynodegl_BufferVec3), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pynodegl__Node, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pynodegl_BufferVec3, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_8pynodegl_10BufferVec3_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pynodegl_BufferVec3, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_8pynodegl_BufferVec4(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_8pynodegl__Buffer(t, a, k);
  if (unlikely(!o)) return 0;
  return o;
}

static PyMethodDef __pyx_methods_8pynodegl_BufferVec4[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8pynodegl_10BufferVec4_3__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8pynodegl_10BufferVec4_5__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8pynodegl_BufferVec4 = {
  PyVarObject_HEAD_INIT(0, 0)
  "pynodegl.BufferVec4", /*tp_name*/
  sizeof(struct __pyx_obj_8pynodegl_BufferVec4), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pynodegl__Node, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pynodegl_BufferVec4, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_8pynodegl_10BufferVec4_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pynodegl_BufferVec4, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_8pynodegl_BufferMat4(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_8pynodegl__Buffer(t, a, k);
  if (unlikely(!o)) return 0;
  return o;
}

static PyMethodDef __pyx_methods_8pynodegl_BufferMat4[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8pynodegl_10BufferMat4_3__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8pynodegl_10BufferMat4_5__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8pynodegl_BufferMat4 = {
  PyVarObject_HEAD_INIT(0, 0)
  "pynodegl.BufferMat4", /*tp_name*/
  sizeof(struct __pyx_obj_8pynodegl_BufferMat4), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pynodegl__Node, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pynodegl_BufferMat4, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_8pynodegl_10BufferMat4_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pynodegl_BufferMat4, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_8pynodegl_Camera(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_8pynodegl__Node(t, a, k);
  if (unlikely(!o)) return 0;
  return o;
}

static PyMethodDef __pyx_methods_8pynodegl_Camera[] = {
  {"set_eye", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pynodegl_6Camera_3set_eye, METH_VARARGS|METH_KEYWORDS, 0},
  {"set_center", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pynodegl_6Camera_5set_center, METH_VARARGS|METH_KEYWORDS, 0},
  {"set_up", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pynodegl_6Camera_7set_up, METH_VARARGS|METH_KEYWORDS, 0},
  {"set_perspective", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pynodegl_6Camera_9set_perspective, METH_VARARGS|METH_KEYWORDS, 0},
  {"set_orthographic", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pynodegl_6Camera_11set_orthographic, METH_VARARGS|METH_KEYWORDS, 0},
  {"set_clipping", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pynodegl_6Camera_13set_clipping, METH_VARARGS|METH_KEYWORDS, 0},
  {"set_eye_transform", (PyCFunction)__pyx_pw_8pynodegl_6Camera_15set_eye_transform, METH_O, 0},
  {"set_center_transform", (PyCFunction)__pyx_pw_8pynodegl_6Camera_17set_center_transform, METH_O, 0},
  {"set_up_transform", (PyCFunction)__pyx_pw_8pynodegl_6Camera_19set_up_transform, METH_O, 0},
  {"set_fov_anim", (PyCFunction)__pyx_pw_8pynodegl_6Camera_21set_fov_anim, METH_O, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8pynodegl_6Camera_23__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8pynodegl_6Camera_25__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8pynodegl_Camera = {
  PyVarObject_HEAD_INIT(0, 0)
  "pynodegl.Camera", /*tp_name*/
  sizeof(struct __pyx_obj_8pynodegl_Camera), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pynodegl__Node, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pynodegl_Camera, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_8pynodegl_6Camera_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pynodegl_Camera, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_8pynodegl_Circle(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_8pynodegl__Node(t, a, k);
  if (unlikely(!o)) return 0;
  return o;
}

static PyMethodDef __pyx_methods_8pynodegl_Circle[] = {
  {"set_radius", (PyCFunction)__pyx_pw_8pynodegl_6Circle_3set_radius, METH_O, 0},
  {"set_npoints", (PyCFunction)__pyx_pw_8pynodegl_6Circle_5set_npoints, METH_O, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8pynodegl_6Circle_7__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8pynodegl_6Circle_9__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8pynodegl_Circle = {
  PyVarObject_HEAD_INIT(0, 0)
  "pynodegl.Circle", /*tp_name*/
  sizeof(struct __pyx_obj_8pynodegl_Circle), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pynodegl__Node, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pynodegl_Circle, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_8pynodegl_6Circle_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pynodegl_Circle, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_8pynodegl_Compute(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_8pynodegl__Node(t, a, k);
  if (unlikely(!o)) return 0;
  return o;
}

static PyMethodDef __pyx_methods_8pynodegl_Compute[] = {
  {"update_textures", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pynodegl_7Compute_3update_textures, METH_VARARGS|METH_KEYWORDS, 0},
  {"update_uniforms", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pynodegl_7Compute_5update_uniforms, METH_VARARGS|METH_KEYWORDS, 0},
  {"update_blocks", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pynodegl_7Compute_7update_blocks, METH_VARARGS|METH_KEYWORDS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8pynodegl_7Compute_9__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8pynodegl_7Compute_11__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8pynodegl_Compute = {
  PyVarObject_HEAD_INIT(0, 0)
  "pynodegl.Compute", /*tp_name*/
  sizeof(struct __pyx_obj_8pynodegl_Compute), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pynodegl__Node, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pynodegl_Compute, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_8pynodegl_7Compute_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pynodegl_Compute, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_8pynodegl_ComputeProgram(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_8pynodegl__Node(t, a, k);
  if (unlikely(!o)) return 0;
  return o;
}

static PyMethodDef __pyx_methods_8pynodegl_ComputeProgram[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8pynodegl_14ComputeProgram_3__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8pynodegl_14ComputeProgram_5__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8pynodegl_ComputeProgram = {
  PyVarObject_HEAD_INIT(0, 0)
  "pynodegl.ComputeProgram", /*tp_name*/
  sizeof(struct __pyx_obj_8pynodegl_ComputeProgram), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pynodegl__Node, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pynodegl_ComputeProgram, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_8pynodegl_14ComputeProgram_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pynodegl_ComputeProgram, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_8pynodegl_Geometry(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_8pynodegl__Node(t, a, k);
  if (unlikely(!o)) return 0;
  return o;
}

static PyMethodDef __pyx_methods_8pynodegl_Geometry[] = {
  {"set_uvcoords", (PyCFunction)__pyx_pw_8pynodegl_8Geometry_3set_uvcoords, METH_O, 0},
  {"set_normals", (PyCFunction)__pyx_pw_8pynodegl_8Geometry_5set_normals, METH_O, 0},
  {"set_indices", (PyCFunction)__pyx_pw_8pynodegl_8Geometry_7set_indices, METH_O, 0},
  {"set_topology", (PyCFunction)__pyx_pw_8pynodegl_8Geometry_9set_topology, METH_O, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8pynodegl_8Geometry_11__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8pynodegl_8Geometry_13__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8pynodegl_Geometry = {
  PyVarObject_HEAD_INIT(0, 0)
  "pynodegl.Geometry", /*tp_name*/
  sizeof(struct __pyx_obj_8pynodegl_Geometry), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pynodegl__Node, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pynodegl_Geometry, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_8pynodegl_8Geometry_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pynodegl_Geometry, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_8pynodegl_GraphicConfig(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_8pynodegl__Node(t, a, k);
  if (unlikely(!o)) return 0;
  return o;
}

static PyMethodDef __pyx_methods_8pynodegl_GraphicConfig[] = {
  {"set_blend", (PyCFunction)__pyx_pw_8pynodegl_13GraphicConfig_3set_blend, METH_O, 0},
  {"set_blend_src_factor", (PyCFunction)__pyx_pw_8pynodegl_13GraphicConfig_5set_blend_src_factor, METH_O, 0},
  {"set_blend_dst_factor", (PyCFunction)__pyx_pw_8pynodegl_13GraphicConfig_7set_blend_dst_factor, METH_O, 0},
  {"set_blend_src_factor_a", (PyCFunction)__pyx_pw_8pynodegl_13GraphicConfig_9set_blend_src_factor_a, METH_O, 0},
  {"set_blend_dst_factor_a", (PyCFunction)__pyx_pw_8pynodegl_13GraphicConfig_11set_blend_dst_factor_a, METH_O, 0},
  {"set_blend_op", (PyCFunction)__pyx_pw_8pynodegl_13GraphicConfig_13set_blend_op, METH_O, 0},
  {"set_blend_op_a", (PyCFunction)__pyx_pw_8pynodegl_13GraphicConfig_15set_blend_op_a, METH_O, 0},
  {"set_color_write_mask", (PyCFunction)__pyx_pw_8pynodegl_13GraphicConfig_17set_color_write_mask, METH_O, 0},
  {"set_depth_test", (PyCFunction)__pyx_pw_8pynodegl_13GraphicConfig_19set_depth_test, METH_O, 0},
  {"set_depth_write_mask", (PyCFunction)__pyx_pw_8pynodegl_13GraphicConfig_21set_depth_write_mask, METH_O, 0},
  {"set_depth_func", (PyCFunction)__pyx_pw_8pynodegl_13GraphicConfig_23set_depth_func, METH_O, 0},
  {"set_stencil_test", (PyCFunction)__pyx_pw_8pynodegl_13GraphicConfig_25set_stencil_test, METH_O, 0},
  {"set_stencil_write_mask", (PyCFunction)__pyx_pw_8pynodegl_13GraphicConfig_27set_stencil_write_mask, METH_O, 0},
  {"set_stencil_func", (PyCFunction)__pyx_pw_8pynodegl_13GraphicConfig_29set_stencil_func, METH_O, 0},
  {"set_stencil_ref", (PyCFunction)__pyx_pw_8pynodegl_13GraphicConfig_31set_stencil_ref, METH_O, 0},
  {"set_stencil_read_mask", (PyCFunction)__pyx_pw_8pynodegl_13GraphicConfig_33set_stencil_read_mask, METH_O, 0},
  {"set_stencil_fail", (PyCFunction)__pyx_pw_8pynodegl_13GraphicConfig_35set_stencil_fail, METH_O, 0},
  {"set_stencil_depth_fail", (PyCFunction)__pyx_pw_8pynodegl_13GraphicConfig_37set_stencil_depth_fail, METH_O, 0},
  {"set_stencil_depth_pass", (PyCFunction)__pyx_pw_8pynodegl_13GraphicConfig_39set_stencil_depth_pass, METH_O, 0},
  {"set_cull_face", (PyCFunction)__pyx_pw_8pynodegl_13GraphicConfig_41set_cull_face, METH_O, 0},
  {"set_cull_face_mode", (PyCFunction)__pyx_pw_8pynodegl_13GraphicConfig_43set_cull_face_mode, METH_O, 0},
  {"set_scissor_test", (PyCFunction)__pyx_pw_8pynodegl_13GraphicConfig_45set_scissor_test, METH_O, 0},
  {"set_scissor", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pynodegl_13GraphicConfig_47set_scissor, METH_VARARGS|METH_KEYWORDS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8pynodegl_13GraphicConfig_49__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8pynodegl_13GraphicConfig_51__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8pynodegl_GraphicConfig = {
  PyVarObject_HEAD_INIT(0, 0)
  "pynodegl.GraphicConfig", /*tp_name*/
  sizeof(struct __pyx_obj_8pynodegl_GraphicConfig), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pynodegl__Node, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pynodegl_GraphicConfig, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_8pynodegl_13GraphicConfig_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pynodegl_GraphicConfig, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_8pynodegl_Group(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_8pynodegl__Node(t, a, k);
  if (unlikely(!o)) return 0;
  return o;
}

static PyMethodDef __pyx_methods_8pynodegl_Group[] = {
  {"add_children", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pynodegl_5Group_3add_children, METH_VARARGS|METH_KEYWORDS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8pynodegl_5Group_5__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8pynodegl_5Group_7__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8pynodegl_Group = {
  PyVarObject_HEAD_INIT(0, 0)
  "pynodegl.Group", /*tp_name*/
  sizeof(struct __pyx_obj_8pynodegl_Group), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pynodegl__Node, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pynodegl_Group, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_8pynodegl_5Group_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pynodegl_Group, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_8pynodegl_HUD(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_8pynodegl__Node(t, a, k);
  if (unlikely(!o)) return 0;
  return o;
}

static PyMethodDef __pyx_methods_8pynodegl_HUD[] = {
  {"set_measure_window", (PyCFunction)__pyx_pw_8pynodegl_3HUD_3set_measure_window, METH_O, 0},
  {"set_refresh_rate", (PyCFunction)__pyx_pw_8pynodegl_3HUD_5set_refresh_rate, METH_O, 0},
  {"set_export_filename", (PyCFunction)__pyx_pw_8pynodegl_3HUD_7set_export_filename, METH_O, 0},
  {"set_bg_color", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pynodegl_3HUD_9set_bg_color, METH_VARARGS|METH_KEYWORDS, 0},
  {"set_aspect_ratio", (PyCFunction)__pyx_pw_8pynodegl_3HUD_11set_aspect_ratio, METH_O, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8pynodegl_3HUD_13__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8pynodegl_3HUD_15__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8pynodegl_HUD = {
  PyVarObject_HEAD_INIT(0, 0)
  "pynodegl.HUD", /*tp_name*/
  sizeof(struct __pyx_obj_8pynodegl_HUD), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pynodegl__Node, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pynodegl_HUD, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_8pynodegl_3HUD_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pynodegl_HUD, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_8pynodegl_Identity(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_8pynodegl__Node(t, a, k);
  if (unlikely(!o)) return 0;
  return o;
}

static PyMethodDef __pyx_methods_8pynodegl_Identity[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8pynodegl_8Identity_3__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8pynodegl_8Identity_5__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8pynodegl_Identity = {
  PyVarObject_HEAD_INIT(0, 0)
  "pynodegl.Identity", /*tp_name*/
  sizeof(struct __pyx_obj_8pynodegl_Identity), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pynodegl__Node, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pynodegl_Identity, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_8pynodegl_8Identity_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pynodegl_Identity, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_8pynodegl_Media(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_8pynodegl__Node(t, a, k);
  if (unlikely(!o)) return 0;
  return o;
}

static PyMethodDef __pyx_methods_8pynodegl_Media[] = {
  {"set_sxplayer_min_level", (PyCFunction)__pyx_pw_8pynodegl_5Media_3set_sxplayer_min_level, METH_O, 0},
  {"set_time_anim", (PyCFunction)__pyx_pw_8pynodegl_5Media_5set_time_anim, METH_O, 0},
  {"set_audio_tex", (PyCFunction)__pyx_pw_8pynodegl_5Media_7set_audio_tex, METH_O, 0},
  {"set_max_nb_packets", (PyCFunction)__pyx_pw_8pynodegl_5Media_9set_max_nb_packets, METH_O, 0},
  {"set_max_nb_frames", (PyCFunction)__pyx_pw_8pynodegl_5Media_11set_max_nb_frames, METH_O, 0},
  {"set_max_nb_sink", (PyCFunction)__pyx_pw_8pynodegl_5Media_13set_max_nb_sink, METH_O, 0},
  {"set_max_pixels", (PyCFunction)__pyx_pw_8pynodegl_5Media_15set_max_pixels, METH_O, 0},
  {"set_stream_idx", (PyCFunction)__pyx_pw_8pynodegl_5Media_17set_stream_idx, METH_O, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8pynodegl_5Media_19__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8pynodegl_5Media_21__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8pynodegl_Media = {
  PyVarObject_HEAD_INIT(0, 0)
  "pynodegl.Media", /*tp_name*/
  sizeof(struct __pyx_obj_8pynodegl_Media), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pynodegl__Node, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pynodegl_Media, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_8pynodegl_5Media_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pynodegl_Media, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_8pynodegl_Program(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_8pynodegl__Node(t, a, k);
  if (unlikely(!o)) return 0;
  return o;
}

static PyMethodDef __pyx_methods_8pynodegl_Program[] = {
  {"set_vertex", (PyCFunction)__pyx_pw_8pynodegl_7Program_3set_vertex, METH_O, 0},
  {"set_fragment", (PyCFunction)__pyx_pw_8pynodegl_7Program_5set_fragment, METH_O, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8pynodegl_7Program_7__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8pynodegl_7Program_9__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8pynodegl_Program = {
  PyVarObject_HEAD_INIT(0, 0)
  "pynodegl.Program", /*tp_name*/
  sizeof(struct __pyx_obj_8pynodegl_Program), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pynodegl__Node, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pynodegl_Program, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_8pynodegl_7Program_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pynodegl_Program, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_8pynodegl_Quad(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_8pynodegl__Node(t, a, k);
  if (unlikely(!o)) return 0;
  return o;
}

static PyMethodDef __pyx_methods_8pynodegl_Quad[] = {
  {"set_corner", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pynodegl_4Quad_3set_corner, METH_VARARGS|METH_KEYWORDS, 0},
  {"set_width", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pynodegl_4Quad_5set_width, METH_VARARGS|METH_KEYWORDS, 0},
  {"set_height", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pynodegl_4Quad_7set_height, METH_VARARGS|METH_KEYWORDS, 0},
  {"set_uv_corner", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pynodegl_4Quad_9set_uv_corner, METH_VARARGS|METH_KEYWORDS, 0},
  {"set_uv_width", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pynodegl_4Quad_11set_uv_width, METH_VARARGS|METH_KEYWORDS, 0},
  {"set_uv_height", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pynodegl_4Quad_13set_uv_height, METH_VARARGS|METH_KEYWORDS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8pynodegl_4Quad_15__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8pynodegl_4Quad_17__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8pynodegl_Quad = {
  PyVarObject_HEAD_INIT(0, 0)
  "pynodegl.Quad", /*tp_name*/
  sizeof(struct __pyx_obj_8pynodegl_Quad), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pynodegl__Node, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pynodegl_Quad, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_8pynodegl_4Quad_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pynodegl_Quad, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_8pynodegl_Render(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_8pynodegl__Node(t, a, k);
  if (unlikely(!o)) return 0;
  return o;
}

static PyMethodDef __pyx_methods_8pynodegl_Render[] = {
  {"set_program", (PyCFunction)__pyx_pw_8pynodegl_6Render_3set_program, METH_O, 0},
  {"update_textures", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pynodegl_6Render_5update_textures, METH_VARARGS|METH_KEYWORDS, 0},
  {"update_uniforms", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pynodegl_6Render_7update_uniforms, METH_VARARGS|METH_KEYWORDS, 0},
  {"update_blocks", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pynodegl_6Render_9update_blocks, METH_VARARGS|METH_KEYWORDS, 0},
  {"update_attributes", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pynodegl_6Render_11update_attributes, METH_VARARGS|METH_KEYWORDS, 0},
  {"update_instance_attributes", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pynodegl_6Render_13update_instance_attributes, METH_VARARGS|METH_KEYWORDS, 0},
  {"set_nb_instances", (PyCFunction)__pyx_pw_8pynodegl_6Render_15set_nb_instances, METH_O, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8pynodegl_6Render_17__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8pynodegl_6Render_19__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8pynodegl_Render = {
  PyVarObject_HEAD_INIT(0, 0)
  "pynodegl.Render", /*tp_name*/
  sizeof(struct __pyx_obj_8pynodegl_Render), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pynodegl__Node, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pynodegl_Render, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_8pynodegl_6Render_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pynodegl_Render, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_8pynodegl_RenderToTexture(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_8pynodegl__Node(t, a, k);
  if (unlikely(!o)) return 0;
  return o;
}

static PyMethodDef __pyx_methods_8pynodegl_RenderToTexture[] = {
  {"add_color_textures", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pynodegl_15RenderToTexture_3add_color_textures, METH_VARARGS|METH_KEYWORDS, 0},
  {"set_depth_texture", (PyCFunction)__pyx_pw_8pynodegl_15RenderToTexture_5set_depth_texture, METH_O, 0},
  {"set_samples", (PyCFunction)__pyx_pw_8pynodegl_15RenderToTexture_7set_samples, METH_O, 0},
  {"set_clear_color", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pynodegl_15RenderToTexture_9set_clear_color, METH_VARARGS|METH_KEYWORDS, 0},
  {"set_features", (PyCFunction)__pyx_pw_8pynodegl_15RenderToTexture_11set_features, METH_O, 0},
  {"set_vflip", (PyCFunction)__pyx_pw_8pynodegl_15RenderToTexture_13set_vflip, METH_O, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8pynodegl_15RenderToTexture_15__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8pynodegl_15RenderToTexture_17__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8pynodegl_RenderToTexture = {
  PyVarObject_HEAD_INIT(0, 0)
  "pynodegl.RenderToTexture", /*tp_name*/
  sizeof(struct __pyx_obj_8pynodegl_RenderToTexture), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pynodegl__Node, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pynodegl_RenderToTexture, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_8pynodegl_15RenderToTexture_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pynodegl_RenderToTexture, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_8pynodegl_Rotate(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_8pynodegl__Node(t, a, k);
  if (unlikely(!o)) return 0;
  return o;
}

static PyMethodDef __pyx_methods_8pynodegl_Rotate[] = {
  {"set_angle", (PyCFunction)__pyx_pw_8pynodegl_6Rotate_3set_angle, METH_O, 0},
  {"set_axis", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pynodegl_6Rotate_5set_axis, METH_VARARGS|METH_KEYWORDS, 0},
  {"set_anchor", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pynodegl_6Rotate_7set_anchor, METH_VARARGS|METH_KEYWORDS, 0},
  {"set_anim", (PyCFunction)__pyx_pw_8pynodegl_6Rotate_9set_anim, METH_O, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8pynodegl_6Rotate_11__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8pynodegl_6Rotate_13__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8pynodegl_Rotate = {
  PyVarObject_HEAD_INIT(0, 0)
  "pynodegl.Rotate", /*tp_name*/
  sizeof(struct __pyx_obj_8pynodegl_Rotate), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pynodegl__Node, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pynodegl_Rotate, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_8pynodegl_6Rotate_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pynodegl_Rotate, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_8pynodegl_RotateQuat(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_8pynodegl__Node(t, a, k);
  if (unlikely(!o)) return 0;
  return o;
}

static PyMethodDef __pyx_methods_8pynodegl_RotateQuat[] = {
  {"set_quat", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pynodegl_10RotateQuat_3set_quat, METH_VARARGS|METH_KEYWORDS, 0},
  {"set_anchor", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pynodegl_10RotateQuat_5set_anchor, METH_VARARGS|METH_KEYWORDS, 0},
  {"set_anim", (PyCFunction)__pyx_pw_8pynodegl_10RotateQuat_7set_anim, METH_O, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8pynodegl_10RotateQuat_9__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8pynodegl_10RotateQuat_11__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8pynodegl_RotateQuat = {
  PyVarObject_HEAD_INIT(0, 0)
  "pynodegl.RotateQuat", /*tp_name*/
  sizeof(struct __pyx_obj_8pynodegl_RotateQuat), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pynodegl__Node, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pynodegl_RotateQuat, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_8pynodegl_10RotateQuat_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pynodegl_RotateQuat, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_8pynodegl_Scale(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_8pynodegl__Node(t, a, k);
  if (unlikely(!o)) return 0;
  return o;
}

static PyMethodDef __pyx_methods_8pynodegl_Scale[] = {
  {"set_factors", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pynodegl_5Scale_3set_factors, METH_VARARGS|METH_KEYWORDS, 0},
  {"set_anchor", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pynodegl_5Scale_5set_anchor, METH_VARARGS|METH_KEYWORDS, 0},
  {"set_anim", (PyCFunction)__pyx_pw_8pynodegl_5Scale_7set_anim, METH_O, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8pynodegl_5Scale_9__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8pynodegl_5Scale_11__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8pynodegl_Scale = {
  PyVarObject_HEAD_INIT(0, 0)
  "pynodegl.Scale", /*tp_name*/
  sizeof(struct __pyx_obj_8pynodegl_Scale), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pynodegl__Node, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pynodegl_Scale, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_8pynodegl_5Scale_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pynodegl_Scale, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_8pynodegl_Text(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_8pynodegl__Node(t, a, k);
  if (unlikely(!o)) return 0;
  return o;
}

static PyMethodDef __pyx_methods_8pynodegl_Text[] = {
  {"set_fg_color", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pynodegl_4Text_3set_fg_color, METH_VARARGS|METH_KEYWORDS, 0},
  {"set_bg_color", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pynodegl_4Text_5set_bg_color, METH_VARARGS|METH_KEYWORDS, 0},
  {"set_box_corner", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pynodegl_4Text_7set_box_corner, METH_VARARGS|METH_KEYWORDS, 0},
  {"set_box_width", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pynodegl_4Text_9set_box_width, METH_VARARGS|METH_KEYWORDS, 0},
  {"set_box_height", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pynodegl_4Text_11set_box_height, METH_VARARGS|METH_KEYWORDS, 0},
  {"set_padding", (PyCFunction)__pyx_pw_8pynodegl_4Text_13set_padding, METH_O, 0},
  {"set_font_scale", (PyCFunction)__pyx_pw_8pynodegl_4Text_15set_font_scale, METH_O, 0},
  {"set_valign", (PyCFunction)__pyx_pw_8pynodegl_4Text_17set_valign, METH_O, 0},
  {"set_halign", (PyCFunction)__pyx_pw_8pynodegl_4Text_19set_halign, METH_O, 0},
  {"set_aspect_ratio", (PyCFunction)__pyx_pw_8pynodegl_4Text_21set_aspect_ratio, METH_O, 0},
  {"set_min_filter", (PyCFunction)__pyx_pw_8pynodegl_4Text_23set_min_filter, METH_O, 0},
  {"set_mag_filter", (PyCFunction)__pyx_pw_8pynodegl_4Text_25set_mag_filter, METH_O, 0},
  {"set_mipmap_filter", (PyCFunction)__pyx_pw_8pynodegl_4Text_27set_mipmap_filter, METH_O, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8pynodegl_4Text_29__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8pynodegl_4Text_31__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8pynodegl_Text = {
  PyVarObject_HEAD_INIT(0, 0)
  "pynodegl.Text", /*tp_name*/
  sizeof(struct __pyx_obj_8pynodegl_Text), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pynodegl__Node, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pynodegl_Text, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_8pynodegl_4Text_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pynodegl_Text, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_8pynodegl_Texture2D(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_8pynodegl__Node(t, a, k);
  if (unlikely(!o)) return 0;
  return o;
}

static PyMethodDef __pyx_methods_8pynodegl_Texture2D[] = {
  {"set_format", (PyCFunction)__pyx_pw_8pynodegl_9Texture2D_3set_format, METH_O, 0},
  {"set_width", (PyCFunction)__pyx_pw_8pynodegl_9Texture2D_5set_width, METH_O, 0},
  {"set_height", (PyCFunction)__pyx_pw_8pynodegl_9Texture2D_7set_height, METH_O, 0},
  {"set_min_filter", (PyCFunction)__pyx_pw_8pynodegl_9Texture2D_9set_min_filter, METH_O, 0},
  {"set_mag_filter", (PyCFunction)__pyx_pw_8pynodegl_9Texture2D_11set_mag_filter, METH_O, 0},
  {"set_mipmap_filter", (PyCFunction)__pyx_pw_8pynodegl_9Texture2D_13set_mipmap_filter, METH_O, 0},
  {"set_wrap_s", (PyCFunction)__pyx_pw_8pynodegl_9Texture2D_15set_wrap_s, METH_O, 0},
  {"set_wrap_t", (PyCFunction)__pyx_pw_8pynodegl_9Texture2D_17set_wrap_t, METH_O, 0},
  {"set_access", (PyCFunction)__pyx_pw_8pynodegl_9Texture2D_19set_access, METH_O, 0},
  {"set_data_src", (PyCFunction)__pyx_pw_8pynodegl_9Texture2D_21set_data_src, METH_O, 0},
  {"set_direct_rendering", (PyCFunction)__pyx_pw_8pynodegl_9Texture2D_23set_direct_rendering, METH_O, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8pynodegl_9Texture2D_25__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8pynodegl_9Texture2D_27__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8pynodegl_Texture2D = {
  PyVarObject_HEAD_INIT(0, 0)
  "pynodegl.Texture2D", /*tp_name*/
  sizeof(struct __pyx_obj_8pynodegl_Texture2D), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pynodegl__Node, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pynodegl_Texture2D, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_8pynodegl_9Texture2D_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pynodegl_Texture2D, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_8pynodegl_Texture3D(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_8pynodegl__Node(t, a, k);
  if (unlikely(!o)) return 0;
  return o;
}

static PyMethodDef __pyx_methods_8pynodegl_Texture3D[] = {
  {"set_format", (PyCFunction)__pyx_pw_8pynodegl_9Texture3D_3set_format, METH_O, 0},
  {"set_width", (PyCFunction)__pyx_pw_8pynodegl_9Texture3D_5set_width, METH_O, 0},
  {"set_height", (PyCFunction)__pyx_pw_8pynodegl_9Texture3D_7set_height, METH_O, 0},
  {"set_depth", (PyCFunction)__pyx_pw_8pynodegl_9Texture3D_9set_depth, METH_O, 0},
  {"set_min_filter", (PyCFunction)__pyx_pw_8pynodegl_9Texture3D_11set_min_filter, METH_O, 0},
  {"set_mag_filter", (PyCFunction)__pyx_pw_8pynodegl_9Texture3D_13set_mag_filter, METH_O, 0},
  {"set_mipmap_filter", (PyCFunction)__pyx_pw_8pynodegl_9Texture3D_15set_mipmap_filter, METH_O, 0},
  {"set_wrap_s", (PyCFunction)__pyx_pw_8pynodegl_9Texture3D_17set_wrap_s, METH_O, 0},
  {"set_wrap_t", (PyCFunction)__pyx_pw_8pynodegl_9Texture3D_19set_wrap_t, METH_O, 0},
  {"set_wrap_r", (PyCFunction)__pyx_pw_8pynodegl_9Texture3D_21set_wrap_r, METH_O, 0},
  {"set_access", (PyCFunction)__pyx_pw_8pynodegl_9Texture3D_23set_access, METH_O, 0},
  {"set_data_src", (PyCFunction)__pyx_pw_8pynodegl_9Texture3D_25set_data_src, METH_O, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8pynodegl_9Texture3D_27__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8pynodegl_9Texture3D_29__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8pynodegl_Texture3D = {
  PyVarObject_HEAD_INIT(0, 0)
  "pynodegl.Texture3D", /*tp_name*/
  sizeof(struct __pyx_obj_8pynodegl_Texture3D), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pynodegl__Node, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pynodegl_Texture3D, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_8pynodegl_9Texture3D_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pynodegl_Texture3D, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_8pynodegl_TextureCube(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_8pynodegl__Node(t, a, k);
  if (unlikely(!o)) return 0;
  return o;
}

static PyMethodDef __pyx_methods_8pynodegl_TextureCube[] = {
  {"set_format", (PyCFunction)__pyx_pw_8pynodegl_11TextureCube_3set_format, METH_O, 0},
  {"set_size", (PyCFunction)__pyx_pw_8pynodegl_11TextureCube_5set_size, METH_O, 0},
  {"set_min_filter", (PyCFunction)__pyx_pw_8pynodegl_11TextureCube_7set_min_filter, METH_O, 0},
  {"set_mag_filter", (PyCFunction)__pyx_pw_8pynodegl_11TextureCube_9set_mag_filter, METH_O, 0},
  {"set_mipmap_filter", (PyCFunction)__pyx_pw_8pynodegl_11TextureCube_11set_mipmap_filter, METH_O, 0},
  {"set_wrap_s", (PyCFunction)__pyx_pw_8pynodegl_11TextureCube_13set_wrap_s, METH_O, 0},
  {"set_wrap_t", (PyCFunction)__pyx_pw_8pynodegl_11TextureCube_15set_wrap_t, METH_O, 0},
  {"set_wrap_r", (PyCFunction)__pyx_pw_8pynodegl_11TextureCube_17set_wrap_r, METH_O, 0},
  {"set_access", (PyCFunction)__pyx_pw_8pynodegl_11TextureCube_19set_access, METH_O, 0},
  {"set_data_src", (PyCFunction)__pyx_pw_8pynodegl_11TextureCube_21set_data_src, METH_O, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8pynodegl_11TextureCube_23__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8pynodegl_11TextureCube_25__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8pynodegl_TextureCube = {
  PyVarObject_HEAD_INIT(0, 0)
  "pynodegl.TextureCube", /*tp_name*/
  sizeof(struct __pyx_obj_8pynodegl_TextureCube), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pynodegl__Node, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pynodegl_TextureCube, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_8pynodegl_11TextureCube_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pynodegl_TextureCube, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_8pynodegl_TimeRangeFilter(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_8pynodegl__Node(t, a, k);
  if (unlikely(!o)) return 0;
  return o;
}

static PyMethodDef __pyx_methods_8pynodegl_TimeRangeFilter[] = {
  {"add_ranges", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pynodegl_15TimeRangeFilter_3add_ranges, METH_VARARGS|METH_KEYWORDS, 0},
  {"set_prefetch_time", (PyCFunction)__pyx_pw_8pynodegl_15TimeRangeFilter_5set_prefetch_time, METH_O, 0},
  {"set_max_idle_time", (PyCFunction)__pyx_pw_8pynodegl_15TimeRangeFilter_7set_max_idle_time, METH_O, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8pynodegl_15TimeRangeFilter_9__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8pynodegl_15TimeRangeFilter_11__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8pynodegl_TimeRangeFilter = {
  PyVarObject_HEAD_INIT(0, 0)
  "pynodegl.TimeRangeFilter", /*tp_name*/
  sizeof(struct __pyx_obj_8pynodegl_TimeRangeFilter), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pynodegl__Node, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pynodegl_TimeRangeFilter, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_8pynodegl_15TimeRangeFilter_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pynodegl_TimeRangeFilter, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_8pynodegl_TimeRangeModeCont(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_8pynodegl__Node(t, a, k);
  if (unlikely(!o)) return 0;
  return o;
}

static PyMethodDef __pyx_methods_8pynodegl_TimeRangeModeCont[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8pynodegl_17TimeRangeModeCont_3__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8pynodegl_17TimeRangeModeCont_5__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8pynodegl_TimeRangeModeCont = {
  PyVarObject_HEAD_INIT(0, 0)
  "pynodegl.TimeRangeModeCont", /*tp_name*/
  sizeof(struct __pyx_obj_8pynodegl_TimeRangeModeCont), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pynodegl__Node, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pynodegl_TimeRangeModeCont, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_8pynodegl_17TimeRangeModeCont_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pynodegl_TimeRangeModeCont, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_8pynodegl_TimeRangeModeNoop(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_8pynodegl__Node(t, a, k);
  if (unlikely(!o)) return 0;
  return o;
}

static PyMethodDef __pyx_methods_8pynodegl_TimeRangeModeNoop[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8pynodegl_17TimeRangeModeNoop_3__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8pynodegl_17TimeRangeModeNoop_5__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8pynodegl_TimeRangeModeNoop = {
  PyVarObject_HEAD_INIT(0, 0)
  "pynodegl.TimeRangeModeNoop", /*tp_name*/
  sizeof(struct __pyx_obj_8pynodegl_TimeRangeModeNoop), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pynodegl__Node, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pynodegl_TimeRangeModeNoop, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_8pynodegl_17TimeRangeModeNoop_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pynodegl_TimeRangeModeNoop, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_8pynodegl_TimeRangeModeOnce(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_8pynodegl__Node(t, a, k);
  if (unlikely(!o)) return 0;
  return o;
}

static PyMethodDef __pyx_methods_8pynodegl_TimeRangeModeOnce[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8pynodegl_17TimeRangeModeOnce_3__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8pynodegl_17TimeRangeModeOnce_5__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8pynodegl_TimeRangeModeOnce = {
  PyVarObject_HEAD_INIT(0, 0)
  "pynodegl.TimeRangeModeOnce", /*tp_name*/
  sizeof(struct __pyx_obj_8pynodegl_TimeRangeModeOnce), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pynodegl__Node, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pynodegl_TimeRangeModeOnce, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_8pynodegl_17TimeRangeModeOnce_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pynodegl_TimeRangeModeOnce, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_8pynodegl_Transform(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_8pynodegl__Node(t, a, k);
  if (unlikely(!o)) return 0;
  return o;
}

static PyMethodDef __pyx_methods_8pynodegl_Transform[] = {
  {"set_matrix", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pynodegl_9Transform_3set_matrix, METH_VARARGS|METH_KEYWORDS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8pynodegl_9Transform_5__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8pynodegl_9Transform_7__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8pynodegl_Transform = {
  PyVarObject_HEAD_INIT(0, 0)
  "pynodegl.Transform", /*tp_name*/
  sizeof(struct __pyx_obj_8pynodegl_Transform), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pynodegl__Node, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pynodegl_Transform, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_8pynodegl_9Transform_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pynodegl_Transform, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_8pynodegl_Translate(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_8pynodegl__Node(t, a, k);
  if (unlikely(!o)) return 0;
  return o;
}

static PyMethodDef __pyx_methods_8pynodegl_Translate[] = {
  {"set_vector", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pynodegl_9Translate_3set_vector, METH_VARARGS|METH_KEYWORDS, 0},
  {"set_anim", (PyCFunction)__pyx_pw_8pynodegl_9Translate_5set_anim, METH_O, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8pynodegl_9Translate_7__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8pynodegl_9Translate_9__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8pynodegl_Translate = {
  PyVarObject_HEAD_INIT(0, 0)
  "pynodegl.Translate", /*tp_name*/
  sizeof(struct __pyx_obj_8pynodegl_Translate), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pynodegl__Node, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pynodegl_Translate, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_8pynodegl_9Translate_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pynodegl_Translate, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_8pynodegl_Triangle(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_8pynodegl__Node(t, a, k);
  if (unlikely(!o)) return 0;
  return o;
}

static PyMethodDef __pyx_methods_8pynodegl_Triangle[] = {
  {"set_uv_edge0", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pynodegl_8Triangle_3set_uv_edge0, METH_VARARGS|METH_KEYWORDS, 0},
  {"set_uv_edge1", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pynodegl_8Triangle_5set_uv_edge1, METH_VARARGS|METH_KEYWORDS, 0},
  {"set_uv_edge2", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pynodegl_8Triangle_7set_uv_edge2, METH_VARARGS|METH_KEYWORDS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8pynodegl_8Triangle_9__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8pynodegl_8Triangle_11__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8pynodegl_Triangle = {
  PyVarObject_HEAD_INIT(0, 0)
  "pynodegl.Triangle", /*tp_name*/
  sizeof(struct __pyx_obj_8pynodegl_Triangle), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pynodegl__Node, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pynodegl_Triangle, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_8pynodegl_8Triangle_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pynodegl_Triangle, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_8pynodegl_StreamedInt(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_8pynodegl__Node(t, a, k);
  if (unlikely(!o)) return 0;
  return o;
}

static PyMethodDef __pyx_methods_8pynodegl_StreamedInt[] = {
  {"set_timebase", (PyCFunction)__pyx_pw_8pynodegl_11StreamedInt_3set_timebase, METH_O, 0},
  {"set_time_anim", (PyCFunction)__pyx_pw_8pynodegl_11StreamedInt_5set_time_anim, METH_O, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8pynodegl_11StreamedInt_7__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8pynodegl_11StreamedInt_9__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8pynodegl_StreamedInt = {
  PyVarObject_HEAD_INIT(0, 0)
  "pynodegl.StreamedInt", /*tp_name*/
  sizeof(struct __pyx_obj_8pynodegl_StreamedInt), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pynodegl__Node, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pynodegl_StreamedInt, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_8pynodegl_11StreamedInt_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pynodegl_StreamedInt, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_8pynodegl_StreamedFloat(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_8pynodegl__Node(t, a, k);
  if (unlikely(!o)) return 0;
  return o;
}

static PyMethodDef __pyx_methods_8pynodegl_StreamedFloat[] = {
  {"set_timebase", (PyCFunction)__pyx_pw_8pynodegl_13StreamedFloat_3set_timebase, METH_O, 0},
  {"set_time_anim", (PyCFunction)__pyx_pw_8pynodegl_13StreamedFloat_5set_time_anim, METH_O, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8pynodegl_13StreamedFloat_7__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8pynodegl_13StreamedFloat_9__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8pynodegl_StreamedFloat = {
  PyVarObject_HEAD_INIT(0, 0)
  "pynodegl.StreamedFloat", /*tp_name*/
  sizeof(struct __pyx_obj_8pynodegl_StreamedFloat), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pynodegl__Node, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pynodegl_StreamedFloat, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_8pynodegl_13StreamedFloat_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pynodegl_StreamedFloat, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_8pynodegl_StreamedVec2(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_8pynodegl__Node(t, a, k);
  if (unlikely(!o)) return 0;
  return o;
}

static PyMethodDef __pyx_methods_8pynodegl_StreamedVec2[] = {
  {"set_timebase", (PyCFunction)__pyx_pw_8pynodegl_12StreamedVec2_3set_timebase, METH_O, 0},
  {"set_time_anim", (PyCFunction)__pyx_pw_8pynodegl_12StreamedVec2_5set_time_anim, METH_O, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8pynodegl_12StreamedVec2_7__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8pynodegl_12StreamedVec2_9__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8pynodegl_StreamedVec2 = {
  PyVarObject_HEAD_INIT(0, 0)
  "pynodegl.StreamedVec2", /*tp_name*/
  sizeof(struct __pyx_obj_8pynodegl_StreamedVec2), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pynodegl__Node, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pynodegl_StreamedVec2, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_8pynodegl_12StreamedVec2_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pynodegl_StreamedVec2, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_8pynodegl_StreamedVec3(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_8pynodegl__Node(t, a, k);
  if (unlikely(!o)) return 0;
  return o;
}

static PyMethodDef __pyx_methods_8pynodegl_StreamedVec3[] = {
  {"set_timebase", (PyCFunction)__pyx_pw_8pynodegl_12StreamedVec3_3set_timebase, METH_O, 0},
  {"set_time_anim", (PyCFunction)__pyx_pw_8pynodegl_12StreamedVec3_5set_time_anim, METH_O, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8pynodegl_12StreamedVec3_7__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8pynodegl_12StreamedVec3_9__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8pynodegl_StreamedVec3 = {
  PyVarObject_HEAD_INIT(0, 0)
  "pynodegl.StreamedVec3", /*tp_name*/
  sizeof(struct __pyx_obj_8pynodegl_StreamedVec3), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pynodegl__Node, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pynodegl_StreamedVec3, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_8pynodegl_12StreamedVec3_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pynodegl_StreamedVec3, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_8pynodegl_StreamedVec4(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_8pynodegl__Node(t, a, k);
  if (unlikely(!o)) return 0;
  return o;
}

static PyMethodDef __pyx_methods_8pynodegl_StreamedVec4[] = {
  {"set_timebase", (PyCFunction)__pyx_pw_8pynodegl_12StreamedVec4_3set_timebase, METH_O, 0},
  {"set_time_anim", (PyCFunction)__pyx_pw_8pynodegl_12StreamedVec4_5set_time_anim, METH_O, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8pynodegl_12StreamedVec4_7__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8pynodegl_12StreamedVec4_9__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8pynodegl_StreamedVec4 = {
  PyVarObject_HEAD_INIT(0, 0)
  "pynodegl.StreamedVec4", /*tp_name*/
  sizeof(struct __pyx_obj_8pynodegl_StreamedVec4), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pynodegl__Node, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pynodegl_StreamedVec4, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_8pynodegl_12StreamedVec4_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pynodegl_StreamedVec4, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_8pynodegl_StreamedMat4(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_8pynodegl__Node(t, a, k);
  if (unlikely(!o)) return 0;
  return o;
}

static PyMethodDef __pyx_methods_8pynodegl_StreamedMat4[] = {
  {"set_timebase", (PyCFunction)__pyx_pw_8pynodegl_12StreamedMat4_3set_timebase, METH_O, 0},
  {"set_time_anim", (PyCFunction)__pyx_pw_8pynodegl_12StreamedMat4_5set_time_anim, METH_O, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8pynodegl_12StreamedMat4_7__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8pynodegl_12StreamedMat4_9__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8pynodegl_StreamedMat4 = {
  PyVarObject_HEAD_INIT(0, 0)
  "pynodegl.StreamedMat4", /*tp_name*/
  sizeof(struct __pyx_obj_8pynodegl_StreamedMat4), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pynodegl__Node, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pynodegl_StreamedMat4, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_8pynodegl_12StreamedMat4_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pynodegl_StreamedMat4, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_8pynodegl_StreamedBufferInt(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_8pynodegl__Node(t, a, k);
  if (unlikely(!o)) return 0;
  return o;
}

static PyMethodDef __pyx_methods_8pynodegl_StreamedBufferInt[] = {
  {"set_timebase", (PyCFunction)__pyx_pw_8pynodegl_17StreamedBufferInt_3set_timebase, METH_O, 0},
  {"set_time_anim", (PyCFunction)__pyx_pw_8pynodegl_17StreamedBufferInt_5set_time_anim, METH_O, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8pynodegl_17StreamedBufferInt_7__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8pynodegl_17StreamedBufferInt_9__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8pynodegl_StreamedBufferInt = {
  PyVarObject_HEAD_INIT(0, 0)
  "pynodegl.StreamedBufferInt", /*tp_name*/
  sizeof(struct __pyx_obj_8pynodegl_StreamedBufferInt), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pynodegl__Node, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pynodegl_StreamedBufferInt, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_8pynodegl_17StreamedBufferInt_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pynodegl_StreamedBufferInt, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_8pynodegl_StreamedBufferFloat(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_8pynodegl__Node(t, a, k);
  if (unlikely(!o)) return 0;
  return o;
}

static PyMethodDef __pyx_methods_8pynodegl_StreamedBufferFloat[] = {
  {"set_timebase", (PyCFunction)__pyx_pw_8pynodegl_19StreamedBufferFloat_3set_timebase, METH_O, 0},
  {"set_time_anim", (PyCFunction)__pyx_pw_8pynodegl_19StreamedBufferFloat_5set_time_anim, METH_O, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8pynodegl_19StreamedBufferFloat_7__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8pynodegl_19StreamedBufferFloat_9__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8pynodegl_StreamedBufferFloat = {
  PyVarObject_HEAD_INIT(0, 0)
  "pynodegl.StreamedBufferFloat", /*tp_name*/
  sizeof(struct __pyx_obj_8pynodegl_StreamedBufferFloat), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pynodegl__Node, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pynodegl_StreamedBufferFloat, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_8pynodegl_19StreamedBufferFloat_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pynodegl_StreamedBufferFloat, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_8pynodegl_StreamedBufferVec2(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_8pynodegl__Node(t, a, k);
  if (unlikely(!o)) return 0;
  return o;
}

static PyMethodDef __pyx_methods_8pynodegl_StreamedBufferVec2[] = {
  {"set_timebase", (PyCFunction)__pyx_pw_8pynodegl_18StreamedBufferVec2_3set_timebase, METH_O, 0},
  {"set_time_anim", (PyCFunction)__pyx_pw_8pynodegl_18StreamedBufferVec2_5set_time_anim, METH_O, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8pynodegl_18StreamedBufferVec2_7__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8pynodegl_18StreamedBufferVec2_9__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8pynodegl_StreamedBufferVec2 = {
  PyVarObject_HEAD_INIT(0, 0)
  "pynodegl.StreamedBufferVec2", /*tp_name*/
  sizeof(struct __pyx_obj_8pynodegl_StreamedBufferVec2), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pynodegl__Node, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pynodegl_StreamedBufferVec2, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_8pynodegl_18StreamedBufferVec2_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pynodegl_StreamedBufferVec2, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_8pynodegl_StreamedBufferVec3(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_8pynodegl__Node(t, a, k);
  if (unlikely(!o)) return 0;
  return o;
}

static PyMethodDef __pyx_methods_8pynodegl_StreamedBufferVec3[] = {
  {"set_timebase", (PyCFunction)__pyx_pw_8pynodegl_18StreamedBufferVec3_3set_timebase, METH_O, 0},
  {"set_time_anim", (PyCFunction)__pyx_pw_8pynodegl_18StreamedBufferVec3_5set_time_anim, METH_O, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8pynodegl_18StreamedBufferVec3_7__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8pynodegl_18StreamedBufferVec3_9__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8pynodegl_StreamedBufferVec3 = {
  PyVarObject_HEAD_INIT(0, 0)
  "pynodegl.StreamedBufferVec3", /*tp_name*/
  sizeof(struct __pyx_obj_8pynodegl_StreamedBufferVec3), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pynodegl__Node, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pynodegl_StreamedBufferVec3, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_8pynodegl_18StreamedBufferVec3_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pynodegl_StreamedBufferVec3, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_8pynodegl_StreamedBufferVec4(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_8pynodegl__Node(t, a, k);
  if (unlikely(!o)) return 0;
  return o;
}

static PyMethodDef __pyx_methods_8pynodegl_StreamedBufferVec4[] = {
  {"set_timebase", (PyCFunction)__pyx_pw_8pynodegl_18StreamedBufferVec4_3set_timebase, METH_O, 0},
  {"set_time_anim", (PyCFunction)__pyx_pw_8pynodegl_18StreamedBufferVec4_5set_time_anim, METH_O, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8pynodegl_18StreamedBufferVec4_7__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8pynodegl_18StreamedBufferVec4_9__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8pynodegl_StreamedBufferVec4 = {
  PyVarObject_HEAD_INIT(0, 0)
  "pynodegl.StreamedBufferVec4", /*tp_name*/
  sizeof(struct __pyx_obj_8pynodegl_StreamedBufferVec4), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pynodegl__Node, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pynodegl_StreamedBufferVec4, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_8pynodegl_18StreamedBufferVec4_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pynodegl_StreamedBufferVec4, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_8pynodegl_StreamedBufferMat4(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_8pynodegl__Node(t, a, k);
  if (unlikely(!o)) return 0;
  return o;
}

static PyMethodDef __pyx_methods_8pynodegl_StreamedBufferMat4[] = {
  {"set_timebase", (PyCFunction)__pyx_pw_8pynodegl_18StreamedBufferMat4_3set_timebase, METH_O, 0},
  {"set_time_anim", (PyCFunction)__pyx_pw_8pynodegl_18StreamedBufferMat4_5set_time_anim, METH_O, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8pynodegl_18StreamedBufferMat4_7__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8pynodegl_18StreamedBufferMat4_9__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8pynodegl_StreamedBufferMat4 = {
  PyVarObject_HEAD_INIT(0, 0)
  "pynodegl.StreamedBufferMat4", /*tp_name*/
  sizeof(struct __pyx_obj_8pynodegl_StreamedBufferMat4), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pynodegl__Node, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pynodegl_StreamedBufferMat4, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_8pynodegl_18StreamedBufferMat4_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pynodegl_StreamedBufferMat4, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_8pynodegl_UniformInt(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_8pynodegl__Node(t, a, k);
  if (unlikely(!o)) return 0;
  return o;
}

static PyMethodDef __pyx_methods_8pynodegl_UniformInt[] = {
  {"set_value", (PyCFunction)__pyx_pw_8pynodegl_10UniformInt_3set_value, METH_O, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8pynodegl_10UniformInt_5__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8pynodegl_10UniformInt_7__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8pynodegl_UniformInt = {
  PyVarObject_HEAD_INIT(0, 0)
  "pynodegl.UniformInt", /*tp_name*/
  sizeof(struct __pyx_obj_8pynodegl_UniformInt), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pynodegl__Node, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pynodegl_UniformInt, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_8pynodegl_10UniformInt_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pynodegl_UniformInt, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_8pynodegl_UniformMat4(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_8pynodegl__Node(t, a, k);
  if (unlikely(!o)) return 0;
  return o;
}

static PyMethodDef __pyx_methods_8pynodegl_UniformMat4[] = {
  {"set_value", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pynodegl_11UniformMat4_3set_value, METH_VARARGS|METH_KEYWORDS, 0},
  {"set_transform", (PyCFunction)__pyx_pw_8pynodegl_11UniformMat4_5set_transform, METH_O, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8pynodegl_11UniformMat4_7__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8pynodegl_11UniformMat4_9__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8pynodegl_UniformMat4 = {
  PyVarObject_HEAD_INIT(0, 0)
  "pynodegl.UniformMat4", /*tp_name*/
  sizeof(struct __pyx_obj_8pynodegl_UniformMat4), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pynodegl__Node, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pynodegl_UniformMat4, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_8pynodegl_11UniformMat4_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pynodegl_UniformMat4, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_8pynodegl_UniformFloat(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_8pynodegl__Node(t, a, k);
  if (unlikely(!o)) return 0;
  return o;
}

static PyMethodDef __pyx_methods_8pynodegl_UniformFloat[] = {
  {"set_value", (PyCFunction)__pyx_pw_8pynodegl_12UniformFloat_3set_value, METH_O, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8pynodegl_12UniformFloat_5__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8pynodegl_12UniformFloat_7__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8pynodegl_UniformFloat = {
  PyVarObject_HEAD_INIT(0, 0)
  "pynodegl.UniformFloat", /*tp_name*/
  sizeof(struct __pyx_obj_8pynodegl_UniformFloat), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pynodegl__Node, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pynodegl_UniformFloat, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_8pynodegl_12UniformFloat_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pynodegl_UniformFloat, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_8pynodegl_UniformVec2(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_8pynodegl__Node(t, a, k);
  if (unlikely(!o)) return 0;
  return o;
}

static PyMethodDef __pyx_methods_8pynodegl_UniformVec2[] = {
  {"set_value", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pynodegl_11UniformVec2_3set_value, METH_VARARGS|METH_KEYWORDS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8pynodegl_11UniformVec2_5__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8pynodegl_11UniformVec2_7__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8pynodegl_UniformVec2 = {
  PyVarObject_HEAD_INIT(0, 0)
  "pynodegl.UniformVec2", /*tp_name*/
  sizeof(struct __pyx_obj_8pynodegl_UniformVec2), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pynodegl__Node, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pynodegl_UniformVec2, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_8pynodegl_11UniformVec2_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pynodegl_UniformVec2, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_8pynodegl_UniformVec3(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_8pynodegl__Node(t, a, k);
  if (unlikely(!o)) return 0;
  return o;
}

static PyMethodDef __pyx_methods_8pynodegl_UniformVec3[] = {
  {"set_value", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pynodegl_11UniformVec3_3set_value, METH_VARARGS|METH_KEYWORDS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8pynodegl_11UniformVec3_5__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8pynodegl_11UniformVec3_7__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8pynodegl_UniformVec3 = {
  PyVarObject_HEAD_INIT(0, 0)
  "pynodegl.UniformVec3", /*tp_name*/
  sizeof(struct __pyx_obj_8pynodegl_UniformVec3), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pynodegl__Node, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pynodegl_UniformVec3, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_8pynodegl_11UniformVec3_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pynodegl_UniformVec3, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_8pynodegl_UniformVec4(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_8pynodegl__Node(t, a, k);
  if (unlikely(!o)) return 0;
  return o;
}

static PyMethodDef __pyx_methods_8pynodegl_UniformVec4[] = {
  {"set_value", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pynodegl_11UniformVec4_3set_value, METH_VARARGS|METH_KEYWORDS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8pynodegl_11UniformVec4_5__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8pynodegl_11UniformVec4_7__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8pynodegl_UniformVec4 = {
  PyVarObject_HEAD_INIT(0, 0)
  "pynodegl.UniformVec4", /*tp_name*/
  sizeof(struct __pyx_obj_8pynodegl_UniformVec4), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pynodegl__Node, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pynodegl_UniformVec4, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_8pynodegl_11UniformVec4_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pynodegl_UniformVec4, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_8pynodegl_UniformQuat(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_8pynodegl__Node(t, a, k);
  if (unlikely(!o)) return 0;
  return o;
}

static PyMethodDef __pyx_methods_8pynodegl_UniformQuat[] = {
  {"set_value", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pynodegl_11UniformQuat_3set_value, METH_VARARGS|METH_KEYWORDS, 0},
  {"set_as_mat4", (PyCFunction)__pyx_pw_8pynodegl_11UniformQuat_5set_as_mat4, METH_O, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8pynodegl_11UniformQuat_7__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8pynodegl_11UniformQuat_9__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8pynodegl_UniformQuat = {
  PyVarObject_HEAD_INIT(0, 0)
  "pynodegl.UniformQuat", /*tp_name*/
  sizeof(struct __pyx_obj_8pynodegl_UniformQuat), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pynodegl__Node, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pynodegl_UniformQuat, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_8pynodegl_11UniformQuat_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pynodegl_UniformQuat, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_8pynodegl_UserSwitch(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_8pynodegl__Node(t, a, k);
  if (unlikely(!o)) return 0;
  return o;
}

static PyMethodDef __pyx_methods_8pynodegl_UserSwitch[] = {
  {"set_enabled", (PyCFunction)__pyx_pw_8pynodegl_10UserSwitch_3set_enabled, METH_O, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8pynodegl_10UserSwitch_5__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8pynodegl_10UserSwitch_7__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8pynodegl_UserSwitch = {
  PyVarObject_HEAD_INIT(0, 0)
  "pynodegl.UserSwitch", /*tp_name*/
  sizeof(struct __pyx_obj_8pynodegl_UserSwitch), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pynodegl__Node, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pynodegl_UserSwitch, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_8pynodegl_10UserSwitch_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pynodegl_UserSwitch, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_8pynodegl_Viewer(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_8pynodegl_Viewer *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_8pynodegl_Viewer *)o);
  p->capture_buffer = Py_None; Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_8pynodegl_6Viewer_1__cinit__(o, __pyx_empty_tuple, NULL) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_8pynodegl_Viewer(PyObject *o) {
  struct __pyx_obj_8pynodegl_Viewer *p = (struct __pyx_obj_8pynodegl_Viewer *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_8pynodegl_6Viewer_15__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->capture_buffer);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_8pynodegl_Viewer(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_8pynodegl_Viewer *p = (struct __pyx_obj_8pynodegl_Viewer *)o;
  if (p->capture_buffer) {
    e = (*v)(p->capture_buffer, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_8pynodegl_Viewer(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_8pynodegl_Viewer *p = (struct __pyx_obj_8pynodegl_Viewer *)o;
  tmp = ((PyObject*)p->capture_buffer);
  p->capture_buffer = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_8pynodegl_Viewer[] = {
  {"configure", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pynodegl_6Viewer_3configure, METH_VARARGS|METH_KEYWORDS, 0},
  {"resize", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8pynodegl_6Viewer_5resize, METH_VARARGS|METH_KEYWORDS, 0},
  {"set_scene", (PyCFunction)__pyx_pw_8pynodegl_6Viewer_7set_scene, METH_O, 0},
  {"set_scene_from_string", (PyCFunction)__pyx_pw_8pynodegl_6Viewer_9set_scene_from_string, METH_O, 0},
  {"draw", (PyCFunction)__pyx_pw_8pynodegl_6Viewer_11draw, METH_O, 0},
  {"dot", (PyCFunction)__pyx_pw_8pynodegl_6Viewer_13dot, METH_O, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8pynodegl_6Viewer_17__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8pynodegl_6Viewer_19__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_8pynodegl_Viewer = {
  PyVarObject_HEAD_INIT(0, 0)
  "pynodegl.Viewer", /*tp_name*/
  sizeof(struct __pyx_obj_8pynodegl_Viewer), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8pynodegl_Viewer, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_8pynodegl_Viewer, /*tp_traverse*/
  __pyx_tp_clear_8pynodegl_Viewer, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8pynodegl_Viewer, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8pynodegl_Viewer, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec_pynodegl(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec_pynodegl},
  {0, NULL}
};
#endif

static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    "pynodegl",
    0, /* m_doc */
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    0, /* m_size */
  #else
    -1, /* m_size */
  #endif
    __pyx_methods /* m_methods */,
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    __pyx_moduledef_slots, /* m_slots */
  #else
    NULL, /* m_reload */
  #endif
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3))
    #define CYTHON_SMALL_CODE __attribute__((cold))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_kp_u_, __pyx_k_, sizeof(__pyx_k_), 0, 1, 0, 0},
  {&__pyx_n_s_AnimKeyFrameBuffer, __pyx_k_AnimKeyFrameBuffer, sizeof(__pyx_k_AnimKeyFrameBuffer), 0, 0, 1, 1},
  {&__pyx_n_s_AnimKeyFrameFloat, __pyx_k_AnimKeyFrameFloat, sizeof(__pyx_k_AnimKeyFrameFloat), 0, 0, 1, 1},
  {&__pyx_n_s_AnimKeyFrameQuat, __pyx_k_AnimKeyFrameQuat, sizeof(__pyx_k_AnimKeyFrameQuat), 0, 0, 1, 1},
  {&__pyx_n_s_AnimKeyFrameVec2, __pyx_k_AnimKeyFrameVec2, sizeof(__pyx_k_AnimKeyFrameVec2), 0, 0, 1, 1},
  {&__pyx_n_s_AnimKeyFrameVec3, __pyx_k_AnimKeyFrameVec3, sizeof(__pyx_k_AnimKeyFrameVec3), 0, 0, 1, 1},
  {&__pyx_n_s_AnimKeyFrameVec4, __pyx_k_AnimKeyFrameVec4, sizeof(__pyx_k_AnimKeyFrameVec4), 0, 0, 1, 1},
  {&__pyx_n_s_AnimatedBuffer, __pyx_k_AnimatedBuffer, sizeof(__pyx_k_AnimatedBuffer), 0, 0, 1, 1},
  {&__pyx_n_s_AnimatedBufferFloat, __pyx_k_AnimatedBufferFloat, sizeof(__pyx_k_AnimatedBufferFloat), 0, 0, 1, 1},
  {&__pyx_n_s_AnimatedBufferVec2, __pyx_k_AnimatedBufferVec2, sizeof(__pyx_k_AnimatedBufferVec2), 0, 0, 1, 1},
  {&__pyx_n_s_AnimatedBufferVec3, __pyx_k_AnimatedBufferVec3, sizeof(__pyx_k_AnimatedBufferVec3), 0, 0, 1, 1},
  {&__pyx_n_s_AnimatedBufferVec4, __pyx_k_AnimatedBufferVec4, sizeof(__pyx_k_AnimatedBufferVec4), 0, 0, 1, 1},
  {&__pyx_n_s_AnimatedFloat, __pyx_k_AnimatedFloat, sizeof(__pyx_k_AnimatedFloat), 0, 0, 1, 1},
  {&__pyx_n_s_AnimatedQuat, __pyx_k_AnimatedQuat, sizeof(__pyx_k_AnimatedQuat), 0, 0, 1, 1},
  {&__pyx_n_s_AnimatedTime, __pyx_k_AnimatedTime, sizeof(__pyx_k_AnimatedTime), 0, 0, 1, 1},
  {&__pyx_n_s_AnimatedVec2, __pyx_k_AnimatedVec2, sizeof(__pyx_k_AnimatedVec2), 0, 0, 1, 1},
  {&__pyx_n_s_AnimatedVec3, __pyx_k_AnimatedVec3, sizeof(__pyx_k_AnimatedVec3), 0, 0, 1, 1},
  {&__pyx_n_s_AnimatedVec4, __pyx_k_AnimatedVec4, sizeof(__pyx_k_AnimatedVec4), 0, 0, 1, 1},
  {&__pyx_n_s_BACKEND_AUTO, __pyx_k_BACKEND_AUTO, sizeof(__pyx_k_BACKEND_AUTO), 0, 0, 1, 1},
  {&__pyx_n_s_BACKEND_NGFX, __pyx_k_BACKEND_NGFX, sizeof(__pyx_k_BACKEND_NGFX), 0, 0, 1, 1},
  {&__pyx_n_s_BACKEND_OPENGL, __pyx_k_BACKEND_OPENGL, sizeof(__pyx_k_BACKEND_OPENGL), 0, 0, 1, 1},
  {&__pyx_n_s_BACKEND_OPENGLES, __pyx_k_BACKEND_OPENGLES, sizeof(__pyx_k_BACKEND_OPENGLES), 0, 0, 1, 1},
  {&__pyx_n_s_Block, __pyx_k_Block, sizeof(__pyx_k_Block), 0, 0, 1, 1},
  {&__pyx_n_s_Buffer, __pyx_k_Buffer, sizeof(__pyx_k_Buffer), 0, 0, 1, 1},
  {&__pyx_n_s_BufferBVec2, __pyx_k_BufferBVec2, sizeof(__pyx_k_BufferBVec2), 0, 0, 1, 1},
  {&__pyx_n_s_BufferBVec3, __pyx_k_BufferBVec3, sizeof(__pyx_k_BufferBVec3), 0, 0, 1, 1},
  {&__pyx_n_s_BufferBVec4, __pyx_k_BufferBVec4, sizeof(__pyx_k_BufferBVec4), 0, 0, 1, 1},
  {&__pyx_n_s_BufferByte, __pyx_k_BufferByte, sizeof(__pyx_k_BufferByte), 0, 0, 1, 1},
  {&__pyx_n_s_BufferFloat, __pyx_k_BufferFloat, sizeof(__pyx_k_BufferFloat), 0, 0, 1, 1},
  {&__pyx_n_s_BufferIVec2, __pyx_k_BufferIVec2, sizeof(__pyx_k_BufferIVec2), 0, 0, 1, 1},
  {&__pyx_n_s_BufferIVec3, __pyx_k_BufferIVec3, sizeof(__pyx_k_BufferIVec3), 0, 0, 1, 1},
  {&__pyx_n_s_BufferIVec4, __pyx_k_BufferIVec4, sizeof(__pyx_k_BufferIVec4), 0, 0, 1, 1},
  {&__pyx_n_s_BufferInt, __pyx_k_BufferInt, sizeof(__pyx_k_BufferInt), 0, 0, 1, 1},
  {&__pyx_n_s_BufferInt64, __pyx_k_BufferInt64, sizeof(__pyx_k_BufferInt64), 0, 0, 1, 1},
  {&__pyx_n_s_BufferMat4, __pyx_k_BufferMat4, sizeof(__pyx_k_BufferMat4), 0, 0, 1, 1},
  {&__pyx_n_s_BufferSVec2, __pyx_k_BufferSVec2, sizeof(__pyx_k_BufferSVec2), 0, 0, 1, 1},
  {&__pyx_n_s_BufferSVec3, __pyx_k_BufferSVec3, sizeof(__pyx_k_BufferSVec3), 0, 0, 1, 1},
  {&__pyx_n_s_BufferSVec4, __pyx_k_BufferSVec4, sizeof(__pyx_k_BufferSVec4), 0, 0, 1, 1},
  {&__pyx_n_s_BufferShort, __pyx_k_BufferShort, sizeof(__pyx_k_BufferShort), 0, 0, 1, 1},
  {&__pyx_n_s_BufferUBVec2, __pyx_k_BufferUBVec2, sizeof(__pyx_k_BufferUBVec2), 0, 0, 1, 1},
  {&__pyx_n_s_BufferUBVec3, __pyx_k_BufferUBVec3, sizeof(__pyx_k_BufferUBVec3), 0, 0, 1, 1},
  {&__pyx_n_s_BufferUBVec4, __pyx_k_BufferUBVec4, sizeof(__pyx_k_BufferUBVec4), 0, 0, 1, 1},
  {&__pyx_n_s_BufferUByte, __pyx_k_BufferUByte, sizeof(__pyx_k_BufferUByte), 0, 0, 1, 1},
  {&__pyx_n_s_BufferUIVec2, __pyx_k_BufferUIVec2, sizeof(__pyx_k_BufferUIVec2), 0, 0, 1, 1},
  {&__pyx_n_s_BufferUIVec3, __pyx_k_BufferUIVec3, sizeof(__pyx_k_BufferUIVec3), 0, 0, 1, 1},
  {&__pyx_n_s_BufferUIVec4, __pyx_k_BufferUIVec4, sizeof(__pyx_k_BufferUIVec4), 0, 0, 1, 1},
  {&__pyx_n_s_BufferUInt, __pyx_k_BufferUInt, sizeof(__pyx_k_BufferUInt), 0, 0, 1, 1},
  {&__pyx_n_s_BufferUSVec2, __pyx_k_BufferUSVec2, sizeof(__pyx_k_BufferUSVec2), 0, 0, 1, 1},
  {&__pyx_n_s_BufferUSVec3, __pyx_k_BufferUSVec3, sizeof(__pyx_k_BufferUSVec3), 0, 0, 1, 1},
  {&__pyx_n_s_BufferUSVec4, __pyx_k_BufferUSVec4, sizeof(__pyx_k_BufferUSVec4), 0, 0, 1, 1},
  {&__pyx_n_s_BufferUShort, __pyx_k_BufferUShort, sizeof(__pyx_k_BufferUShort), 0, 0, 1, 1},
  {&__pyx_n_s_BufferVec2, __pyx_k_BufferVec2, sizeof(__pyx_k_BufferVec2), 0, 0, 1, 1},
  {&__pyx_n_s_BufferVec3, __pyx_k_BufferVec3, sizeof(__pyx_k_BufferVec3), 0, 0, 1, 1},
  {&__pyx_n_s_BufferVec4, __pyx_k_BufferVec4, sizeof(__pyx_k_BufferVec4), 0, 0, 1, 1},
  {&__pyx_n_s_Camera, __pyx_k_Camera, sizeof(__pyx_k_Camera), 0, 0, 1, 1},
  {&__pyx_n_s_Circle, __pyx_k_Circle, sizeof(__pyx_k_Circle), 0, 0, 1, 1},
  {&__pyx_n_s_Compute, __pyx_k_Compute, sizeof(__pyx_k_Compute), 0, 0, 1, 1},
  {&__pyx_n_s_ComputeProgram, __pyx_k_ComputeProgram, sizeof(__pyx_k_ComputeProgram), 0, 0, 1, 1},
  {&__pyx_kp_u_Easings_do_not_support_more_than, __pyx_k_Easings_do_not_support_more_than, sizeof(__pyx_k_Easings_do_not_support_more_than), 0, 1, 0, 0},
  {&__pyx_kp_u_Error_evaluating_s, __pyx_k_Error_evaluating_s, sizeof(__pyx_k_Error_evaluating_s), 0, 1, 0, 0},
  {&__pyx_kp_u_Error_solving_s, __pyx_k_Error_solving_s, sizeof(__pyx_k_Error_solving_s), 0, 1, 0, 0},
  {&__pyx_n_s_Geometry, __pyx_k_Geometry, sizeof(__pyx_k_Geometry), 0, 0, 1, 1},
  {&__pyx_n_s_GraphicConfig, __pyx_k_GraphicConfig, sizeof(__pyx_k_GraphicConfig), 0, 0, 1, 1},
  {&__pyx_n_s_Group, __pyx_k_Group, sizeof(__pyx_k_Group), 0, 0, 1, 1},
  {&__pyx_n_s_HUD, __pyx_k_HUD, sizeof(__pyx_k_HUD), 0, 0, 1, 1},
  {&__pyx_n_s_Identity, __pyx_k_Identity, sizeof(__pyx_k_Identity), 0, 0, 1, 1},
  {&__pyx_n_s_LOG_DEBUG, __pyx_k_LOG_DEBUG, sizeof(__pyx_k_LOG_DEBUG), 0, 0, 1, 1},
  {&__pyx_n_s_LOG_ERROR, __pyx_k_LOG_ERROR, sizeof(__pyx_k_LOG_ERROR), 0, 0, 1, 1},
  {&__pyx_n_s_LOG_INFO, __pyx_k_LOG_INFO, sizeof(__pyx_k_LOG_INFO), 0, 0, 1, 1},
  {&__pyx_n_s_LOG_VERBOSE, __pyx_k_LOG_VERBOSE, sizeof(__pyx_k_LOG_VERBOSE), 0, 0, 1, 1},
  {&__pyx_n_s_LOG_WARNING, __pyx_k_LOG_WARNING, sizeof(__pyx_k_LOG_WARNING), 0, 0, 1, 1},
  {&__pyx_n_s_Media, __pyx_k_Media, sizeof(__pyx_k_Media), 0, 0, 1, 1},
  {&__pyx_n_s_MemoryError, __pyx_k_MemoryError, sizeof(__pyx_k_MemoryError), 0, 0, 1, 1},
  {&__pyx_n_s_Node, __pyx_k_Node, sizeof(__pyx_k_Node), 0, 0, 1, 1},
  {&__pyx_n_s_PLATFORM_ANDROID, __pyx_k_PLATFORM_ANDROID, sizeof(__pyx_k_PLATFORM_ANDROID), 0, 0, 1, 1},
  {&__pyx_n_s_PLATFORM_AUTO, __pyx_k_PLATFORM_AUTO, sizeof(__pyx_k_PLATFORM_AUTO), 0, 0, 1, 1},
  {&__pyx_n_s_PLATFORM_IOS, __pyx_k_PLATFORM_IOS, sizeof(__pyx_k_PLATFORM_IOS), 0, 0, 1, 1},
  {&__pyx_n_s_PLATFORM_MACOS, __pyx_k_PLATFORM_MACOS, sizeof(__pyx_k_PLATFORM_MACOS), 0, 0, 1, 1},
  {&__pyx_n_s_PLATFORM_WINDOWS, __pyx_k_PLATFORM_WINDOWS, sizeof(__pyx_k_PLATFORM_WINDOWS), 0, 0, 1, 1},
  {&__pyx_n_s_PLATFORM_XLIB, __pyx_k_PLATFORM_XLIB, sizeof(__pyx_k_PLATFORM_XLIB), 0, 0, 1, 1},
  {&__pyx_n_s_Program, __pyx_k_Program, sizeof(__pyx_k_Program), 0, 0, 1, 1},
  {&__pyx_n_s_Quad, __pyx_k_Quad, sizeof(__pyx_k_Quad), 0, 0, 1, 1},
  {&__pyx_n_s_Render, __pyx_k_Render, sizeof(__pyx_k_Render), 0, 0, 1, 1},
  {&__pyx_n_s_RenderToTexture, __pyx_k_RenderToTexture, sizeof(__pyx_k_RenderToTexture), 0, 0, 1, 1},
  {&__pyx_n_s_Rotate, __pyx_k_Rotate, sizeof(__pyx_k_Rotate), 0, 0, 1, 1},
  {&__pyx_n_s_RotateQuat, __pyx_k_RotateQuat, sizeof(__pyx_k_RotateQuat), 0, 0, 1, 1},
  {&__pyx_n_s_Scale, __pyx_k_Scale, sizeof(__pyx_k_Scale), 0, 0, 1, 1},
  {&__pyx_n_s_StreamedBufferFloat, __pyx_k_StreamedBufferFloat, sizeof(__pyx_k_StreamedBufferFloat), 0, 0, 1, 1},
  {&__pyx_n_s_StreamedBufferInt, __pyx_k_StreamedBufferInt, sizeof(__pyx_k_StreamedBufferInt), 0, 0, 1, 1},
  {&__pyx_n_s_StreamedBufferMat4, __pyx_k_StreamedBufferMat4, sizeof(__pyx_k_StreamedBufferMat4), 0, 0, 1, 1},
  {&__pyx_n_s_StreamedBufferVec2, __pyx_k_StreamedBufferVec2, sizeof(__pyx_k_StreamedBufferVec2), 0, 0, 1, 1},
  {&__pyx_n_s_StreamedBufferVec3, __pyx_k_StreamedBufferVec3, sizeof(__pyx_k_StreamedBufferVec3), 0, 0, 1, 1},
  {&__pyx_n_s_StreamedBufferVec4, __pyx_k_StreamedBufferVec4, sizeof(__pyx_k_StreamedBufferVec4), 0, 0, 1, 1},
  {&__pyx_n_s_StreamedFloat, __pyx_k_StreamedFloat, sizeof(__pyx_k_StreamedFloat), 0, 0, 1, 1},
  {&__pyx_n_s_StreamedInt, __pyx_k_StreamedInt, sizeof(__pyx_k_StreamedInt), 0, 0, 1, 1},
  {&__pyx_n_s_StreamedMat4, __pyx_k_StreamedMat4, sizeof(__pyx_k_StreamedMat4), 0, 0, 1, 1},
  {&__pyx_n_s_StreamedVec2, __pyx_k_StreamedVec2, sizeof(__pyx_k_StreamedVec2), 0, 0, 1, 1},
  {&__pyx_n_s_StreamedVec3, __pyx_k_StreamedVec3, sizeof(__pyx_k_StreamedVec3), 0, 0, 1, 1},
  {&__pyx_n_s_StreamedVec4, __pyx_k_StreamedVec4, sizeof(__pyx_k_StreamedVec4), 0, 0, 1, 1},
  {&__pyx_n_s_Text, __pyx_k_Text, sizeof(__pyx_k_Text), 0, 0, 1, 1},
  {&__pyx_n_s_Texture2D, __pyx_k_Texture2D, sizeof(__pyx_k_Texture2D), 0, 0, 1, 1},
  {&__pyx_n_s_Texture3D, __pyx_k_Texture3D, sizeof(__pyx_k_Texture3D), 0, 0, 1, 1},
  {&__pyx_n_s_TextureCube, __pyx_k_TextureCube, sizeof(__pyx_k_TextureCube), 0, 0, 1, 1},
  {&__pyx_n_s_TimeRangeFilter, __pyx_k_TimeRangeFilter, sizeof(__pyx_k_TimeRangeFilter), 0, 0, 1, 1},
  {&__pyx_n_s_TimeRangeModeCont, __pyx_k_TimeRangeModeCont, sizeof(__pyx_k_TimeRangeModeCont), 0, 0, 1, 1},
  {&__pyx_n_s_TimeRangeModeNoop, __pyx_k_TimeRangeModeNoop, sizeof(__pyx_k_TimeRangeModeNoop), 0, 0, 1, 1},
  {&__pyx_n_s_TimeRangeModeOnce, __pyx_k_TimeRangeModeOnce, sizeof(__pyx_k_TimeRangeModeOnce), 0, 0, 1, 1},
  {&__pyx_n_s_Transform, __pyx_k_Transform, sizeof(__pyx_k_Transform), 0, 0, 1, 1},
  {&__pyx_n_s_Translate, __pyx_k_Translate, sizeof(__pyx_k_Translate), 0, 0, 1, 1},
  {&__pyx_n_s_Triangle, __pyx_k_Triangle, sizeof(__pyx_k_Triangle), 0, 0, 1, 1},
  {&__pyx_n_s_TypeError, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 0, 1, 1},
  {&__pyx_n_s_UniformFloat, __pyx_k_UniformFloat, sizeof(__pyx_k_UniformFloat), 0, 0, 1, 1},
  {&__pyx_n_s_UniformInt, __pyx_k_UniformInt, sizeof(__pyx_k_UniformInt), 0, 0, 1, 1},
  {&__pyx_n_s_UniformMat4, __pyx_k_UniformMat4, sizeof(__pyx_k_UniformMat4), 0, 0, 1, 1},
  {&__pyx_n_s_UniformQuat, __pyx_k_UniformQuat, sizeof(__pyx_k_UniformQuat), 0, 0, 1, 1},
  {&__pyx_n_s_UniformVec2, __pyx_k_UniformVec2, sizeof(__pyx_k_UniformVec2), 0, 0, 1, 1},
  {&__pyx_n_s_UniformVec3, __pyx_k_UniformVec3, sizeof(__pyx_k_UniformVec3), 0, 0, 1, 1},
  {&__pyx_n_s_UniformVec4, __pyx_k_UniformVec4, sizeof(__pyx_k_UniformVec4), 0, 0, 1, 1},
  {&__pyx_n_s_UserSwitch, __pyx_k_UserSwitch, sizeof(__pyx_k_UserSwitch), 0, 0, 1, 1},
  {&__pyx_n_s_Viewer, __pyx_k_Viewer, sizeof(__pyx_k_Viewer), 0, 0, 1, 1},
  {&__pyx_n_s_access, __pyx_k_access, sizeof(__pyx_k_access), 0, 0, 1, 1},
  {&__pyx_kp_u_add__s_takes_elements_as_positio, __pyx_k_add__s_takes_elements_as_positio, sizeof(__pyx_k_add__s_takes_elements_as_positio), 0, 1, 0, 0},
  {&__pyx_n_s_add_children, __pyx_k_add_children, sizeof(__pyx_k_add_children), 0, 0, 1, 1},
  {&__pyx_n_s_add_color_textures, __pyx_k_add_color_textures, sizeof(__pyx_k_add_color_textures), 0, 0, 1, 1},
  {&__pyx_n_s_add_doublelist, __pyx_k_add_doublelist, sizeof(__pyx_k_add_doublelist), 0, 0, 1, 1},
  {&__pyx_n_s_add_easing_args, __pyx_k_add_easing_args, sizeof(__pyx_k_add_easing_args), 0, 0, 1, 1},
  {&__pyx_n_s_add_keyframes, __pyx_k_add_keyframes, sizeof(__pyx_k_add_keyframes), 0, 0, 1, 1},
  {&__pyx_n_s_add_nodelist, __pyx_k_add_nodelist, sizeof(__pyx_k_add_nodelist), 0, 0, 1, 1},
  {&__pyx_n_s_add_ranges, __pyx_k_add_ranges, sizeof(__pyx_k_add_ranges), 0, 0, 1, 1},
  {&__pyx_n_s_anchor, __pyx_k_anchor, sizeof(__pyx_k_anchor), 0, 0, 1, 1},
  {&__pyx_kp_u_anchor_parameter_is_expected_to, __pyx_k_anchor_parameter_is_expected_to, sizeof(__pyx_k_anchor_parameter_is_expected_to), 0, 1, 0, 0},
  {&__pyx_n_s_angle, __pyx_k_angle, sizeof(__pyx_k_angle), 0, 0, 1, 1},
  {&__pyx_n_s_anim, __pyx_k_anim, sizeof(__pyx_k_anim), 0, 0, 1, 1},
  {&__pyx_n_s_arg, __pyx_k_arg, sizeof(__pyx_k_arg), 0, 0, 1, 1},
  {&__pyx_n_s_args, __pyx_k_args, sizeof(__pyx_k_args), 0, 0, 1, 1},
  {&__pyx_n_s_as_mat4, __pyx_k_as_mat4, sizeof(__pyx_k_as_mat4), 0, 0, 1, 1},
  {&__pyx_n_s_aspect_ratio, __pyx_k_aspect_ratio, sizeof(__pyx_k_aspect_ratio), 0, 0, 1, 1},
  {&__pyx_n_s_attributes, __pyx_k_attributes, sizeof(__pyx_k_attributes), 0, 0, 1, 1},
  {&__pyx_n_u_attributes, __pyx_k_attributes, sizeof(__pyx_k_attributes), 0, 1, 0, 1},
  {&__pyx_n_s_audio_tex, __pyx_k_audio_tex, sizeof(__pyx_k_audio_tex), 0, 0, 1, 1},
  {&__pyx_n_s_axis, __pyx_k_axis, sizeof(__pyx_k_axis), 0, 0, 1, 1},
  {&__pyx_kp_u_axis_parameter_is_expected_to_be, __pyx_k_axis_parameter_is_expected_to_be, sizeof(__pyx_k_axis_parameter_is_expected_to_be), 0, 1, 0, 0},
  {&__pyx_n_u_backend, __pyx_k_backend, sizeof(__pyx_k_backend), 0, 1, 0, 1},
  {&__pyx_n_s_bg_color, __pyx_k_bg_color, sizeof(__pyx_k_bg_color), 0, 0, 1, 1},
  {&__pyx_kp_u_bg_color_parameter_is_expected_t, __pyx_k_bg_color_parameter_is_expected_t, sizeof(__pyx_k_bg_color_parameter_is_expected_t), 0, 1, 0, 0},
  {&__pyx_n_s_blend, __pyx_k_blend, sizeof(__pyx_k_blend), 0, 0, 1, 1},
  {&__pyx_n_s_blend_dst_factor, __pyx_k_blend_dst_factor, sizeof(__pyx_k_blend_dst_factor), 0, 0, 1, 1},
  {&__pyx_n_s_blend_dst_factor_a, __pyx_k_blend_dst_factor_a, sizeof(__pyx_k_blend_dst_factor_a), 0, 0, 1, 1},
  {&__pyx_n_s_blend_op, __pyx_k_blend_op, sizeof(__pyx_k_blend_op), 0, 0, 1, 1},
  {&__pyx_n_s_blend_op_a, __pyx_k_blend_op_a, sizeof(__pyx_k_blend_op_a), 0, 0, 1, 1},
  {&__pyx_n_s_blend_src_factor, __pyx_k_blend_src_factor, sizeof(__pyx_k_blend_src_factor), 0, 0, 1, 1},
  {&__pyx_n_s_blend_src_factor_a, __pyx_k_blend_src_factor_a, sizeof(__pyx_k_blend_src_factor_a), 0, 0, 1, 1},
  {&__pyx_n_s_block, __pyx_k_block, sizeof(__pyx_k_block), 0, 0, 1, 1},
  {&__pyx_n_s_block_field, __pyx_k_block_field, sizeof(__pyx_k_block_field), 0, 0, 1, 1},
  {&__pyx_n_s_blocks, __pyx_k_blocks, sizeof(__pyx_k_blocks), 0, 0, 1, 1},
  {&__pyx_n_u_blocks, __pyx_k_blocks, sizeof(__pyx_k_blocks), 0, 1, 0, 1},
  {&__pyx_n_s_box_corner, __pyx_k_box_corner, sizeof(__pyx_k_box_corner), 0, 0, 1, 1},
  {&__pyx_kp_u_box_corner_parameter_is_expected, __pyx_k_box_corner_parameter_is_expected, sizeof(__pyx_k_box_corner_parameter_is_expected), 0, 1, 0, 0},
  {&__pyx_n_s_box_height, __pyx_k_box_height, sizeof(__pyx_k_box_height), 0, 0, 1, 1},
  {&__pyx_kp_u_box_height_parameter_is_expected, __pyx_k_box_height_parameter_is_expected, sizeof(__pyx_k_box_height_parameter_is_expected), 0, 1, 0, 0},
  {&__pyx_n_s_box_width, __pyx_k_box_width, sizeof(__pyx_k_box_width), 0, 0, 1, 1},
  {&__pyx_kp_u_box_width_parameter_is_expected, __pyx_k_box_width_parameter_is_expected, sizeof(__pyx_k_box_width_parameter_is_expected), 0, 1, 0, 0},
  {&__pyx_n_s_buffer, __pyx_k_buffer, sizeof(__pyx_k_buffer), 0, 0, 1, 1},
  {&__pyx_n_s_buffer_info, __pyx_k_buffer_info, sizeof(__pyx_k_buffer_info), 0, 0, 1, 1},
  {&__pyx_kp_u_but_got, __pyx_k_but_got, sizeof(__pyx_k_but_got), 0, 1, 0, 0},
  {&__pyx_n_u_capture_buffer, __pyx_k_capture_buffer, sizeof(__pyx_k_capture_buffer), 0, 1, 0, 1},
  {&__pyx_n_s_center, __pyx_k_center, sizeof(__pyx_k_center), 0, 0, 1, 1},
  {&__pyx_kp_u_center_parameter_is_expected_to, __pyx_k_center_parameter_is_expected_to, sizeof(__pyx_k_center_parameter_is_expected_to), 0, 1, 0, 0},
  {&__pyx_n_s_center_transform, __pyx_k_center_transform, sizeof(__pyx_k_center_transform), 0, 0, 1, 1},
  {&__pyx_n_s_child, __pyx_k_child, sizeof(__pyx_k_child), 0, 0, 1, 1},
  {&__pyx_n_s_children, __pyx_k_children, sizeof(__pyx_k_children), 0, 0, 1, 1},
  {&__pyx_n_u_children, __pyx_k_children, sizeof(__pyx_k_children), 0, 1, 0, 1},
  {&__pyx_n_s_clear_color, __pyx_k_clear_color, sizeof(__pyx_k_clear_color), 0, 0, 1, 1},
  {&__pyx_n_u_clear_color, __pyx_k_clear_color, sizeof(__pyx_k_clear_color), 0, 1, 0, 1},
  {&__pyx_kp_u_clear_color_parameter_is_expecte, __pyx_k_clear_color_parameter_is_expecte, sizeof(__pyx_k_clear_color_parameter_is_expecte), 0, 1, 0, 0},
  {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
  {&__pyx_n_s_clipping, __pyx_k_clipping, sizeof(__pyx_k_clipping), 0, 0, 1, 1},
  {&__pyx_kp_u_clipping_parameter_is_expected_t, __pyx_k_clipping_parameter_is_expected_t, sizeof(__pyx_k_clipping_parameter_is_expected_t), 0, 1, 0, 0},
  {&__pyx_n_s_color_textures, __pyx_k_color_textures, sizeof(__pyx_k_color_textures), 0, 0, 1, 1},
  {&__pyx_n_u_color_textures, __pyx_k_color_textures, sizeof(__pyx_k_color_textures), 0, 1, 0, 1},
  {&__pyx_n_s_color_write_mask, __pyx_k_color_write_mask, sizeof(__pyx_k_color_write_mask), 0, 0, 1, 1},
  {&__pyx_n_s_compute, __pyx_k_compute, sizeof(__pyx_k_compute), 0, 0, 1, 1},
  {&__pyx_n_s_corner, __pyx_k_corner, sizeof(__pyx_k_corner), 0, 0, 1, 1},
  {&__pyx_kp_u_corner_parameter_is_expected_to, __pyx_k_corner_parameter_is_expected_to, sizeof(__pyx_k_corner_parameter_is_expected_to), 0, 1, 0, 0},
  {&__pyx_n_s_count, __pyx_k_count, sizeof(__pyx_k_count), 0, 0, 1, 1},
  {&__pyx_n_s_cull_face, __pyx_k_cull_face, sizeof(__pyx_k_cull_face), 0, 0, 1, 1},
  {&__pyx_n_s_cull_face_mode, __pyx_k_cull_face_mode, sizeof(__pyx_k_cull_face_mode), 0, 0, 1, 1},
  {&__pyx_n_u_d, __pyx_k_d, sizeof(__pyx_k_d), 0, 1, 0, 1},
  {&__pyx_n_s_data, __pyx_k_data, sizeof(__pyx_k_data), 0, 0, 1, 1},
  {&__pyx_n_s_data_src, __pyx_k_data_src, sizeof(__pyx_k_data_src), 0, 0, 1, 1},
  {&__pyx_kp_u_default_frag, __pyx_k_default_frag, sizeof(__pyx_k_default_frag), 0, 1, 0, 0},
  {&__pyx_kp_u_default_vert, __pyx_k_default_vert, sizeof(__pyx_k_default_vert), 0, 1, 0, 0},
  {&__pyx_n_s_depth, __pyx_k_depth, sizeof(__pyx_k_depth), 0, 0, 1, 1},
  {&__pyx_n_s_depth_func, __pyx_k_depth_func, sizeof(__pyx_k_depth_func), 0, 0, 1, 1},
  {&__pyx_n_s_depth_test, __pyx_k_depth_test, sizeof(__pyx_k_depth_test), 0, 0, 1, 1},
  {&__pyx_n_s_depth_texture, __pyx_k_depth_texture, sizeof(__pyx_k_depth_texture), 0, 0, 1, 1},
  {&__pyx_n_s_depth_write_mask, __pyx_k_depth_write_mask, sizeof(__pyx_k_depth_write_mask), 0, 0, 1, 1},
  {&__pyx_n_s_direct_rendering, __pyx_k_direct_rendering, sizeof(__pyx_k_direct_rendering), 0, 0, 1, 1},
  {&__pyx_n_u_display, __pyx_k_display, sizeof(__pyx_k_display), 0, 1, 0, 1},
  {&__pyx_n_s_easing, __pyx_k_easing, sizeof(__pyx_k_easing), 0, 0, 1, 1},
  {&__pyx_n_s_easing_args, __pyx_k_easing_args, sizeof(__pyx_k_easing_args), 0, 0, 1, 1},
  {&__pyx_n_u_easing_args, __pyx_k_easing_args, sizeof(__pyx_k_easing_args), 0, 1, 0, 1},
  {&__pyx_n_s_easing_end_offset, __pyx_k_easing_end_offset, sizeof(__pyx_k_easing_end_offset), 0, 0, 1, 1},
  {&__pyx_n_s_easing_evaluate, __pyx_k_easing_evaluate, sizeof(__pyx_k_easing_evaluate), 0, 0, 1, 1},
  {&__pyx_n_s_easing_solve, __pyx_k_easing_solve, sizeof(__pyx_k_easing_solve), 0, 0, 1, 1},
  {&__pyx_n_s_easing_start_offset, __pyx_k_easing_start_offset, sizeof(__pyx_k_easing_start_offset), 0, 0, 1, 1},
  {&__pyx_n_s_edge0, __pyx_k_edge0, sizeof(__pyx_k_edge0), 0, 0, 1, 1},
  {&__pyx_kp_u_edge0_parameter_is_expected_to_b, __pyx_k_edge0_parameter_is_expected_to_b, sizeof(__pyx_k_edge0_parameter_is_expected_to_b), 0, 1, 0, 0},
  {&__pyx_n_s_edge1, __pyx_k_edge1, sizeof(__pyx_k_edge1), 0, 0, 1, 1},
  {&__pyx_kp_u_edge1_parameter_is_expected_to_b, __pyx_k_edge1_parameter_is_expected_to_b, sizeof(__pyx_k_edge1_parameter_is_expected_to_b), 0, 1, 0, 0},
  {&__pyx_n_s_edge2, __pyx_k_edge2, sizeof(__pyx_k_edge2), 0, 0, 1, 1},
  {&__pyx_kp_u_edge2_parameter_is_expected_to_b, __pyx_k_edge2_parameter_is_expected_to_b, sizeof(__pyx_k_edge2_parameter_is_expected_to_b), 0, 1, 0, 0},
  {&__pyx_n_s_enabled, __pyx_k_enabled, sizeof(__pyx_k_enabled), 0, 0, 1, 1},
  {&__pyx_n_s_enumerate, __pyx_k_enumerate, sizeof(__pyx_k_enumerate), 0, 0, 1, 1},
  {&__pyx_n_s_export_filename, __pyx_k_export_filename, sizeof(__pyx_k_export_filename), 0, 0, 1, 1},
  {&__pyx_n_s_eye, __pyx_k_eye, sizeof(__pyx_k_eye), 0, 0, 1, 1},
  {&__pyx_kp_u_eye_parameter_is_expected_to_be, __pyx_k_eye_parameter_is_expected_to_be, sizeof(__pyx_k_eye_parameter_is_expected_to_be), 0, 1, 0, 0},
  {&__pyx_n_s_eye_transform, __pyx_k_eye_transform, sizeof(__pyx_k_eye_transform), 0, 0, 1, 1},
  {&__pyx_n_s_factors, __pyx_k_factors, sizeof(__pyx_k_factors), 0, 0, 1, 1},
  {&__pyx_kp_u_factors_parameter_is_expected_to, __pyx_k_factors_parameter_is_expected_to, sizeof(__pyx_k_factors_parameter_is_expected_to), 0, 1, 0, 0},
  {&__pyx_n_s_features, __pyx_k_features, sizeof(__pyx_k_features), 0, 0, 1, 1},
  {&__pyx_n_s_fg_color, __pyx_k_fg_color, sizeof(__pyx_k_fg_color), 0, 0, 1, 1},
  {&__pyx_kp_u_fg_color_parameter_is_expected_t, __pyx_k_fg_color_parameter_is_expected_t, sizeof(__pyx_k_fg_color_parameter_is_expected_t), 0, 1, 0, 0},
  {&__pyx_n_s_field_name, __pyx_k_field_name, sizeof(__pyx_k_field_name), 0, 0, 1, 1},
  {&__pyx_n_s_fields, __pyx_k_fields, sizeof(__pyx_k_fields), 0, 0, 1, 1},
  {&__pyx_n_u_fields, __pyx_k_fields, sizeof(__pyx_k_fields), 0, 1, 0, 1},
  {&__pyx_n_s_filename, __pyx_k_filename, sizeof(__pyx_k_filename), 0, 0, 1, 1},
  {&__pyx_n_s_font_scale, __pyx_k_font_scale, sizeof(__pyx_k_font_scale), 0, 0, 1, 1},
  {&__pyx_n_s_format, __pyx_k_format, sizeof(__pyx_k_format), 0, 0, 1, 1},
  {&__pyx_n_s_fov_anim, __pyx_k_fov_anim, sizeof(__pyx_k_fov_anim), 0, 0, 1, 1},
  {&__pyx_n_s_fragment, __pyx_k_fragment, sizeof(__pyx_k_fragment), 0, 0, 1, 1},
  {&__pyx_n_s_geometry, __pyx_k_geometry, sizeof(__pyx_k_geometry), 0, 0, 1, 1},
  {&__pyx_n_s_get, __pyx_k_get, sizeof(__pyx_k_get), 0, 0, 1, 1},
  {&__pyx_n_s_getstate, __pyx_k_getstate, sizeof(__pyx_k_getstate), 0, 0, 1, 1},
  {&__pyx_n_s_halign, __pyx_k_halign, sizeof(__pyx_k_halign), 0, 0, 1, 1},
  {&__pyx_n_u_handle, __pyx_k_handle, sizeof(__pyx_k_handle), 0, 1, 0, 1},
  {&__pyx_n_s_height, __pyx_k_height, sizeof(__pyx_k_height), 0, 0, 1, 1},
  {&__pyx_n_u_height, __pyx_k_height, sizeof(__pyx_k_height), 0, 1, 0, 1},
  {&__pyx_kp_u_height_parameter_is_expected_to, __pyx_k_height_parameter_is_expected_to, sizeof(__pyx_k_height_parameter_is_expected_to), 0, 1, 0, 0},
  {&__pyx_n_s_indices, __pyx_k_indices, sizeof(__pyx_k_indices), 0, 0, 1, 1},
  {&__pyx_n_s_init_params, __pyx_k_init_params, sizeof(__pyx_k_init_params), 0, 0, 1, 1},
  {&__pyx_n_s_instance_attributes, __pyx_k_instance_attributes, sizeof(__pyx_k_instance_attributes), 0, 0, 1, 1},
  {&__pyx_n_u_instance_attributes, __pyx_k_instance_attributes, sizeof(__pyx_k_instance_attributes), 0, 1, 0, 1},
  {&__pyx_n_s_items, __pyx_k_items, sizeof(__pyx_k_items), 0, 0, 1, 1},
  {&__pyx_n_s_itemsize, __pyx_k_itemsize, sizeof(__pyx_k_itemsize), 0, 0, 1, 1},
  {&__pyx_n_u_iter, __pyx_k_iter, sizeof(__pyx_k_iter), 0, 1, 0, 1},
  {&__pyx_n_s_keyframes, __pyx_k_keyframes, sizeof(__pyx_k_keyframes), 0, 0, 1, 1},
  {&__pyx_n_u_keyframes, __pyx_k_keyframes, sizeof(__pyx_k_keyframes), 0, 1, 0, 1},
  {&__pyx_n_s_label, __pyx_k_label, sizeof(__pyx_k_label), 0, 0, 1, 1},
  {&__pyx_n_s_layout, __pyx_k_layout, sizeof(__pyx_k_layout), 0, 0, 1, 1},
  {&__pyx_n_s_level, __pyx_k_level, sizeof(__pyx_k_level), 0, 0, 1, 1},
  {&__pyx_n_s_log_set_min_level, __pyx_k_log_set_min_level, sizeof(__pyx_k_log_set_min_level), 0, 0, 1, 1},
  {&__pyx_n_s_mag_filter, __pyx_k_mag_filter, sizeof(__pyx_k_mag_filter), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_matrix, __pyx_k_matrix, sizeof(__pyx_k_matrix), 0, 0, 1, 1},
  {&__pyx_kp_u_matrix_parameter_is_expected_to, __pyx_k_matrix_parameter_is_expected_to, sizeof(__pyx_k_matrix_parameter_is_expected_to), 0, 1, 0, 0},
  {&__pyx_n_s_max_idle_time, __pyx_k_max_idle_time, sizeof(__pyx_k_max_idle_time), 0, 0, 1, 1},
  {&__pyx_n_s_max_nb_frames, __pyx_k_max_nb_frames, sizeof(__pyx_k_max_nb_frames), 0, 0, 1, 1},
  {&__pyx_n_s_max_nb_packets, __pyx_k_max_nb_packets, sizeof(__pyx_k_max_nb_packets), 0, 0, 1, 1},
  {&__pyx_n_s_max_nb_sink, __pyx_k_max_nb_sink, sizeof(__pyx_k_max_nb_sink), 0, 0, 1, 1},
  {&__pyx_n_s_max_pixels, __pyx_k_max_pixels, sizeof(__pyx_k_max_pixels), 0, 0, 1, 1},
  {&__pyx_n_s_measure_window, __pyx_k_measure_window, sizeof(__pyx_k_measure_window), 0, 0, 1, 1},
  {&__pyx_n_s_min_filter, __pyx_k_min_filter, sizeof(__pyx_k_min_filter), 0, 0, 1, 1},
  {&__pyx_n_s_mipmap_filter, __pyx_k_mipmap_filter, sizeof(__pyx_k_mipmap_filter), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_n_s_name_2, __pyx_k_name_2, sizeof(__pyx_k_name_2), 0, 0, 1, 1},
  {&__pyx_n_s_nb_group_x, __pyx_k_nb_group_x, sizeof(__pyx_k_nb_group_x), 0, 0, 1, 1},
  {&__pyx_n_s_nb_group_y, __pyx_k_nb_group_y, sizeof(__pyx_k_nb_group_y), 0, 0, 1, 1},
  {&__pyx_n_s_nb_group_z, __pyx_k_nb_group_z, sizeof(__pyx_k_nb_group_z), 0, 0, 1, 1},
  {&__pyx_n_s_nb_instances, __pyx_k_nb_instances, sizeof(__pyx_k_nb_instances), 0, 0, 1, 1},
  {&__pyx_kp_s_no_default___reduce___due_to_non, __pyx_k_no_default___reduce___due_to_non, sizeof(__pyx_k_no_default___reduce___due_to_non), 0, 0, 1, 0},
  {&__pyx_n_s_normals, __pyx_k_normals, sizeof(__pyx_k_normals), 0, 0, 1, 1},
  {&__pyx_n_s_npoints, __pyx_k_npoints, sizeof(__pyx_k_npoints), 0, 0, 1, 1},
  {&__pyx_n_u_offscreen, __pyx_k_offscreen, sizeof(__pyx_k_offscreen), 0, 1, 0, 1},
  {&__pyx_n_s_offsets, __pyx_k_offsets, sizeof(__pyx_k_offsets), 0, 0, 1, 1},
  {&__pyx_n_s_orthographic, __pyx_k_orthographic, sizeof(__pyx_k_orthographic), 0, 0, 1, 1},
  {&__pyx_kp_u_orthographic_parameter_is_expect, __pyx_k_orthographic_parameter_is_expect, sizeof(__pyx_k_orthographic_parameter_is_expect), 0, 1, 0, 0},
  {&__pyx_n_s_padding, __pyx_k_padding, sizeof(__pyx_k_padding), 0, 0, 1, 1},
  {&__pyx_n_s_perspective, __pyx_k_perspective, sizeof(__pyx_k_perspective), 0, 0, 1, 1},
  {&__pyx_kp_u_perspective_parameter_is_expecte, __pyx_k_perspective_parameter_is_expecte, sizeof(__pyx_k_perspective_parameter_is_expecte), 0, 1, 0, 0},
  {&__pyx_n_u_platform, __pyx_k_platform, sizeof(__pyx_k_platform), 0, 1, 0, 1},
  {&__pyx_n_s_prefetch_time, __pyx_k_prefetch_time, sizeof(__pyx_k_prefetch_time), 0, 0, 1, 1},
  {&__pyx_n_s_program, __pyx_k_program, sizeof(__pyx_k_program), 0, 0, 1, 1},
  {&__pyx_n_s_pynodegl, __pyx_k_pynodegl, sizeof(__pyx_k_pynodegl), 0, 0, 1, 1},
  {&__pyx_kp_s_pynodegl_pyx, __pyx_k_pynodegl_pyx, sizeof(__pyx_k_pynodegl_pyx), 0, 0, 1, 0},
  {&__pyx_n_s_quat, __pyx_k_quat, sizeof(__pyx_k_quat), 0, 0, 1, 1},
  {&__pyx_kp_u_quat_parameter_is_expected_to_be, __pyx_k_quat_parameter_is_expected_to_be, sizeof(__pyx_k_quat_parameter_is_expected_to_be), 0, 1, 0, 0},
  {&__pyx_n_s_radius, __pyx_k_radius, sizeof(__pyx_k_radius), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_ranges, __pyx_k_ranges, sizeof(__pyx_k_ranges), 0, 0, 1, 1},
  {&__pyx_n_u_ranges, __pyx_k_ranges, sizeof(__pyx_k_ranges), 0, 1, 0, 1},
  {&__pyx_n_s_reduce, __pyx_k_reduce, sizeof(__pyx_k_reduce), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_cython, __pyx_k_reduce_cython, sizeof(__pyx_k_reduce_cython), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_ex, __pyx_k_reduce_ex, sizeof(__pyx_k_reduce_ex), 0, 0, 1, 1},
  {&__pyx_n_s_refresh_rate, __pyx_k_refresh_rate, sizeof(__pyx_k_refresh_rate), 0, 0, 1, 1},
  {&__pyx_n_s_render_time, __pyx_k_render_time, sizeof(__pyx_k_render_time), 0, 0, 1, 1},
  {&__pyx_kp_u_s_must_be_of_type_dict, __pyx_k_s_must_be_of_type_dict, sizeof(__pyx_k_s_must_be_of_type_dict), 0, 1, 0, 0},
  {&__pyx_n_s_samples, __pyx_k_samples, sizeof(__pyx_k_samples), 0, 0, 1, 1},
  {&__pyx_n_u_samples, __pyx_k_samples, sizeof(__pyx_k_samples), 0, 1, 0, 1},
  {&__pyx_n_s_scissor, __pyx_k_scissor, sizeof(__pyx_k_scissor), 0, 0, 1, 1},
  {&__pyx_kp_u_scissor_parameter_is_expected_to, __pyx_k_scissor_parameter_is_expected_to, sizeof(__pyx_k_scissor_parameter_is_expected_to), 0, 1, 0, 0},
  {&__pyx_n_s_scissor_test, __pyx_k_scissor_test, sizeof(__pyx_k_scissor_test), 0, 0, 1, 1},
  {&__pyx_kp_s_self_ctx_cannot_be_converted_to, __pyx_k_self_ctx_cannot_be_converted_to, sizeof(__pyx_k_self_ctx_cannot_be_converted_to), 0, 0, 1, 0},
  {&__pyx_n_s_set_access, __pyx_k_set_access, sizeof(__pyx_k_set_access), 0, 0, 1, 1},
  {&__pyx_n_s_set_anchor, __pyx_k_set_anchor, sizeof(__pyx_k_set_anchor), 0, 0, 1, 1},
  {&__pyx_n_s_set_angle, __pyx_k_set_angle, sizeof(__pyx_k_set_angle), 0, 0, 1, 1},
  {&__pyx_n_s_set_anim, __pyx_k_set_anim, sizeof(__pyx_k_set_anim), 0, 0, 1, 1},
  {&__pyx_n_s_set_as_mat4, __pyx_k_set_as_mat4, sizeof(__pyx_k_set_as_mat4), 0, 0, 1, 1},
  {&__pyx_n_s_set_aspect_ratio, __pyx_k_set_aspect_ratio, sizeof(__pyx_k_set_aspect_ratio), 0, 0, 1, 1},
  {&__pyx_n_s_set_audio_tex, __pyx_k_set_audio_tex, sizeof(__pyx_k_set_audio_tex), 0, 0, 1, 1},
  {&__pyx_n_s_set_axis, __pyx_k_set_axis, sizeof(__pyx_k_set_axis), 0, 0, 1, 1},
  {&__pyx_n_s_set_bg_color, __pyx_k_set_bg_color, sizeof(__pyx_k_set_bg_color), 0, 0, 1, 1},
  {&__pyx_n_s_set_blend, __pyx_k_set_blend, sizeof(__pyx_k_set_blend), 0, 0, 1, 1},
  {&__pyx_n_s_set_blend_dst_factor, __pyx_k_set_blend_dst_factor, sizeof(__pyx_k_set_blend_dst_factor), 0, 0, 1, 1},
  {&__pyx_n_s_set_blend_dst_factor_a, __pyx_k_set_blend_dst_factor_a, sizeof(__pyx_k_set_blend_dst_factor_a), 0, 0, 1, 1},
  {&__pyx_n_s_set_blend_op, __pyx_k_set_blend_op, sizeof(__pyx_k_set_blend_op), 0, 0, 1, 1},
  {&__pyx_n_s_set_blend_op_a, __pyx_k_set_blend_op_a, sizeof(__pyx_k_set_blend_op_a), 0, 0, 1, 1},
  {&__pyx_n_s_set_blend_src_factor, __pyx_k_set_blend_src_factor, sizeof(__pyx_k_set_blend_src_factor), 0, 0, 1, 1},
  {&__pyx_n_s_set_blend_src_factor_a, __pyx_k_set_blend_src_factor_a, sizeof(__pyx_k_set_blend_src_factor_a), 0, 0, 1, 1},
  {&__pyx_n_s_set_block, __pyx_k_set_block, sizeof(__pyx_k_set_block), 0, 0, 1, 1},
  {&__pyx_n_s_set_block_field, __pyx_k_set_block_field, sizeof(__pyx_k_set_block_field), 0, 0, 1, 1},
  {&__pyx_n_s_set_box_corner, __pyx_k_set_box_corner, sizeof(__pyx_k_set_box_corner), 0, 0, 1, 1},
  {&__pyx_n_s_set_box_height, __pyx_k_set_box_height, sizeof(__pyx_k_set_box_height), 0, 0, 1, 1},
  {&__pyx_n_s_set_box_width, __pyx_k_set_box_width, sizeof(__pyx_k_set_box_width), 0, 0, 1, 1},
  {&__pyx_n_s_set_center, __pyx_k_set_center, sizeof(__pyx_k_set_center), 0, 0, 1, 1},
  {&__pyx_n_s_set_center_transform, __pyx_k_set_center_transform, sizeof(__pyx_k_set_center_transform), 0, 0, 1, 1},
  {&__pyx_n_s_set_clear_color, __pyx_k_set_clear_color, sizeof(__pyx_k_set_clear_color), 0, 0, 1, 1},
  {&__pyx_n_s_set_clipping, __pyx_k_set_clipping, sizeof(__pyx_k_set_clipping), 0, 0, 1, 1},
  {&__pyx_n_s_set_color_write_mask, __pyx_k_set_color_write_mask, sizeof(__pyx_k_set_color_write_mask), 0, 0, 1, 1},
  {&__pyx_n_s_set_corner, __pyx_k_set_corner, sizeof(__pyx_k_set_corner), 0, 0, 1, 1},
  {&__pyx_n_s_set_count, __pyx_k_set_count, sizeof(__pyx_k_set_count), 0, 0, 1, 1},
  {&__pyx_n_s_set_cull_face, __pyx_k_set_cull_face, sizeof(__pyx_k_set_cull_face), 0, 0, 1, 1},
  {&__pyx_n_s_set_cull_face_mode, __pyx_k_set_cull_face_mode, sizeof(__pyx_k_set_cull_face_mode), 0, 0, 1, 1},
  {&__pyx_n_s_set_data, __pyx_k_set_data, sizeof(__pyx_k_set_data), 0, 0, 1, 1},
  {&__pyx_n_s_set_data_src, __pyx_k_set_data_src, sizeof(__pyx_k_set_data_src), 0, 0, 1, 1},
  {&__pyx_n_s_set_depth, __pyx_k_set_depth, sizeof(__pyx_k_set_depth), 0, 0, 1, 1},
  {&__pyx_n_s_set_depth_func, __pyx_k_set_depth_func, sizeof(__pyx_k_set_depth_func), 0, 0, 1, 1},
  {&__pyx_n_s_set_depth_test, __pyx_k_set_depth_test, sizeof(__pyx_k_set_depth_test), 0, 0, 1, 1},
  {&__pyx_n_s_set_depth_texture, __pyx_k_set_depth_texture, sizeof(__pyx_k_set_depth_texture), 0, 0, 1, 1},
  {&__pyx_n_s_set_depth_write_mask, __pyx_k_set_depth_write_mask, sizeof(__pyx_k_set_depth_write_mask), 0, 0, 1, 1},
  {&__pyx_n_s_set_direct_rendering, __pyx_k_set_direct_rendering, sizeof(__pyx_k_set_direct_rendering), 0, 0, 1, 1},
  {&__pyx_n_s_set_easing, __pyx_k_set_easing, sizeof(__pyx_k_set_easing), 0, 0, 1, 1},
  {&__pyx_n_s_set_easing_end_offset, __pyx_k_set_easing_end_offset, sizeof(__pyx_k_set_easing_end_offset), 0, 0, 1, 1},
  {&__pyx_n_s_set_easing_start_offset, __pyx_k_set_easing_start_offset, sizeof(__pyx_k_set_easing_start_offset), 0, 0, 1, 1},
  {&__pyx_n_s_set_enabled, __pyx_k_set_enabled, sizeof(__pyx_k_set_enabled), 0, 0, 1, 1},
  {&__pyx_n_s_set_export_filename, __pyx_k_set_export_filename, sizeof(__pyx_k_set_export_filename), 0, 0, 1, 1},
  {&__pyx_n_s_set_eye, __pyx_k_set_eye, sizeof(__pyx_k_set_eye), 0, 0, 1, 1},
  {&__pyx_n_s_set_eye_transform, __pyx_k_set_eye_transform, sizeof(__pyx_k_set_eye_transform), 0, 0, 1, 1},
  {&__pyx_n_s_set_factors, __pyx_k_set_factors, sizeof(__pyx_k_set_factors), 0, 0, 1, 1},
  {&__pyx_n_s_set_features, __pyx_k_set_features, sizeof(__pyx_k_set_features), 0, 0, 1, 1},
  {&__pyx_n_s_set_fg_color, __pyx_k_set_fg_color, sizeof(__pyx_k_set_fg_color), 0, 0, 1, 1},
  {&__pyx_n_s_set_filename, __pyx_k_set_filename, sizeof(__pyx_k_set_filename), 0, 0, 1, 1},
  {&__pyx_n_s_set_font_scale, __pyx_k_set_font_scale, sizeof(__pyx_k_set_font_scale), 0, 0, 1, 1},
  {&__pyx_n_s_set_format, __pyx_k_set_format, sizeof(__pyx_k_set_format), 0, 0, 1, 1},
  {&__pyx_n_s_set_fov_anim, __pyx_k_set_fov_anim, sizeof(__pyx_k_set_fov_anim), 0, 0, 1, 1},
  {&__pyx_n_s_set_fragment, __pyx_k_set_fragment, sizeof(__pyx_k_set_fragment), 0, 0, 1, 1},
  {&__pyx_n_s_set_halign, __pyx_k_set_halign, sizeof(__pyx_k_set_halign), 0, 0, 1, 1},
  {&__pyx_n_s_set_height, __pyx_k_set_height, sizeof(__pyx_k_set_height), 0, 0, 1, 1},
  {&__pyx_n_s_set_indices, __pyx_k_set_indices, sizeof(__pyx_k_set_indices), 0, 0, 1, 1},
  {&__pyx_n_s_set_label, __pyx_k_set_label, sizeof(__pyx_k_set_label), 0, 0, 1, 1},
  {&__pyx_n_s_set_layout, __pyx_k_set_layout, sizeof(__pyx_k_set_layout), 0, 0, 1, 1},
  {&__pyx_n_s_set_mag_filter, __pyx_k_set_mag_filter, sizeof(__pyx_k_set_mag_filter), 0, 0, 1, 1},
  {&__pyx_n_s_set_matrix, __pyx_k_set_matrix, sizeof(__pyx_k_set_matrix), 0, 0, 1, 1},
  {&__pyx_n_s_set_max_idle_time, __pyx_k_set_max_idle_time, sizeof(__pyx_k_set_max_idle_time), 0, 0, 1, 1},
  {&__pyx_n_s_set_max_nb_frames, __pyx_k_set_max_nb_frames, sizeof(__pyx_k_set_max_nb_frames), 0, 0, 1, 1},
  {&__pyx_n_s_set_max_nb_packets, __pyx_k_set_max_nb_packets, sizeof(__pyx_k_set_max_nb_packets), 0, 0, 1, 1},
  {&__pyx_n_s_set_max_nb_sink, __pyx_k_set_max_nb_sink, sizeof(__pyx_k_set_max_nb_sink), 0, 0, 1, 1},
  {&__pyx_n_s_set_max_pixels, __pyx_k_set_max_pixels, sizeof(__pyx_k_set_max_pixels), 0, 0, 1, 1},
  {&__pyx_n_s_set_measure_window, __pyx_k_set_measure_window, sizeof(__pyx_k_set_measure_window), 0, 0, 1, 1},
  {&__pyx_n_s_set_min_filter, __pyx_k_set_min_filter, sizeof(__pyx_k_set_min_filter), 0, 0, 1, 1},
  {&__pyx_n_s_set_mipmap_filter, __pyx_k_set_mipmap_filter, sizeof(__pyx_k_set_mipmap_filter), 0, 0, 1, 1},
  {&__pyx_n_s_set_nb_instances, __pyx_k_set_nb_instances, sizeof(__pyx_k_set_nb_instances), 0, 0, 1, 1},
  {&__pyx_n_s_set_normals, __pyx_k_set_normals, sizeof(__pyx_k_set_normals), 0, 0, 1, 1},
  {&__pyx_n_s_set_npoints, __pyx_k_set_npoints, sizeof(__pyx_k_set_npoints), 0, 0, 1, 1},
  {&__pyx_n_s_set_orthographic, __pyx_k_set_orthographic, sizeof(__pyx_k_set_orthographic), 0, 0, 1, 1},
  {&__pyx_n_s_set_padding, __pyx_k_set_padding, sizeof(__pyx_k_set_padding), 0, 0, 1, 1},
  {&__pyx_n_s_set_perspective, __pyx_k_set_perspective, sizeof(__pyx_k_set_perspective), 0, 0, 1, 1},
  {&__pyx_n_s_set_prefetch_time, __pyx_k_set_prefetch_time, sizeof(__pyx_k_set_prefetch_time), 0, 0, 1, 1},
  {&__pyx_n_s_set_program, __pyx_k_set_program, sizeof(__pyx_k_set_program), 0, 0, 1, 1},
  {&__pyx_n_s_set_quat, __pyx_k_set_quat, sizeof(__pyx_k_set_quat), 0, 0, 1, 1},
  {&__pyx_n_s_set_radius, __pyx_k_set_radius, sizeof(__pyx_k_set_radius), 0, 0, 1, 1},
  {&__pyx_n_s_set_refresh_rate, __pyx_k_set_refresh_rate, sizeof(__pyx_k_set_refresh_rate), 0, 0, 1, 1},
  {&__pyx_n_s_set_samples, __pyx_k_set_samples, sizeof(__pyx_k_set_samples), 0, 0, 1, 1},
  {&__pyx_n_s_set_scissor, __pyx_k_set_scissor, sizeof(__pyx_k_set_scissor), 0, 0, 1, 1},
  {&__pyx_n_s_set_scissor_test, __pyx_k_set_scissor_test, sizeof(__pyx_k_set_scissor_test), 0, 0, 1, 1},
  {&__pyx_n_s_set_size, __pyx_k_set_size, sizeof(__pyx_k_set_size), 0, 0, 1, 1},
  {&__pyx_n_s_set_stencil_depth_fail, __pyx_k_set_stencil_depth_fail, sizeof(__pyx_k_set_stencil_depth_fail), 0, 0, 1, 1},
  {&__pyx_n_s_set_stencil_depth_pass, __pyx_k_set_stencil_depth_pass, sizeof(__pyx_k_set_stencil_depth_pass), 0, 0, 1, 1},
  {&__pyx_n_s_set_stencil_fail, __pyx_k_set_stencil_fail, sizeof(__pyx_k_set_stencil_fail), 0, 0, 1, 1},
  {&__pyx_n_s_set_stencil_func, __pyx_k_set_stencil_func, sizeof(__pyx_k_set_stencil_func), 0, 0, 1, 1},
  {&__pyx_n_s_set_stencil_read_mask, __pyx_k_set_stencil_read_mask, sizeof(__pyx_k_set_stencil_read_mask), 0, 0, 1, 1},
  {&__pyx_n_s_set_stencil_ref, __pyx_k_set_stencil_ref, sizeof(__pyx_k_set_stencil_ref), 0, 0, 1, 1},
  {&__pyx_n_s_set_stencil_test, __pyx_k_set_stencil_test, sizeof(__pyx_k_set_stencil_test), 0, 0, 1, 1},
  {&__pyx_n_s_set_stencil_write_mask, __pyx_k_set_stencil_write_mask, sizeof(__pyx_k_set_stencil_write_mask), 0, 0, 1, 1},
  {&__pyx_n_s_set_stream_idx, __pyx_k_set_stream_idx, sizeof(__pyx_k_set_stream_idx), 0, 0, 1, 1},
  {&__pyx_n_u_set_surface_pts, __pyx_k_set_surface_pts, sizeof(__pyx_k_set_surface_pts), 0, 1, 0, 1},
  {&__pyx_n_s_set_sxplayer_min_level, __pyx_k_set_sxplayer_min_level, sizeof(__pyx_k_set_sxplayer_min_level), 0, 0, 1, 1},
  {&__pyx_n_s_set_time_anim, __pyx_k_set_time_anim, sizeof(__pyx_k_set_time_anim), 0, 0, 1, 1},
  {&__pyx_n_s_set_timebase, __pyx_k_set_timebase, sizeof(__pyx_k_set_timebase), 0, 0, 1, 1},
  {&__pyx_n_s_set_topology, __pyx_k_set_topology, sizeof(__pyx_k_set_topology), 0, 0, 1, 1},
  {&__pyx_n_s_set_transform, __pyx_k_set_transform, sizeof(__pyx_k_set_transform), 0, 0, 1, 1},
  {&__pyx_n_s_set_up, __pyx_k_set_up, sizeof(__pyx_k_set_up), 0, 0, 1, 1},
  {&__pyx_n_s_set_up_transform, __pyx_k_set_up_transform, sizeof(__pyx_k_set_up_transform), 0, 0, 1, 1},
  {&__pyx_n_s_set_uv_corner, __pyx_k_set_uv_corner, sizeof(__pyx_k_set_uv_corner), 0, 0, 1, 1},
  {&__pyx_n_s_set_uv_edge0, __pyx_k_set_uv_edge0, sizeof(__pyx_k_set_uv_edge0), 0, 0, 1, 1},
  {&__pyx_n_s_set_uv_edge1, __pyx_k_set_uv_edge1, sizeof(__pyx_k_set_uv_edge1), 0, 0, 1, 1},
  {&__pyx_n_s_set_uv_edge2, __pyx_k_set_uv_edge2, sizeof(__pyx_k_set_uv_edge2), 0, 0, 1, 1},
  {&__pyx_n_s_set_uv_height, __pyx_k_set_uv_height, sizeof(__pyx_k_set_uv_height), 0, 0, 1, 1},
  {&__pyx_n_s_set_uv_width, __pyx_k_set_uv_width, sizeof(__pyx_k_set_uv_width), 0, 0, 1, 1},
  {&__pyx_n_s_set_uvcoords, __pyx_k_set_uvcoords, sizeof(__pyx_k_set_uvcoords), 0, 0, 1, 1},
  {&__pyx_n_s_set_valign, __pyx_k_set_valign, sizeof(__pyx_k_set_valign), 0, 0, 1, 1},
  {&__pyx_n_s_set_value, __pyx_k_set_value, sizeof(__pyx_k_set_value), 0, 0, 1, 1},
  {&__pyx_n_s_set_vector, __pyx_k_set_vector, sizeof(__pyx_k_set_vector), 0, 0, 1, 1},
  {&__pyx_n_s_set_vertex, __pyx_k_set_vertex, sizeof(__pyx_k_set_vertex), 0, 0, 1, 1},
  {&__pyx_n_s_set_vflip, __pyx_k_set_vflip, sizeof(__pyx_k_set_vflip), 0, 0, 1, 1},
  {&__pyx_n_s_set_width, __pyx_k_set_width, sizeof(__pyx_k_set_width), 0, 0, 1, 1},
  {&__pyx_n_s_set_wrap_r, __pyx_k_set_wrap_r, sizeof(__pyx_k_set_wrap_r), 0, 0, 1, 1},
  {&__pyx_n_s_set_wrap_s, __pyx_k_set_wrap_s, sizeof(__pyx_k_set_wrap_s), 0, 0, 1, 1},
  {&__pyx_n_s_set_wrap_t, __pyx_k_set_wrap_t, sizeof(__pyx_k_set_wrap_t), 0, 0, 1, 1},
  {&__pyx_n_s_setstate, __pyx_k_setstate, sizeof(__pyx_k_setstate), 0, 0, 1, 1},
  {&__pyx_n_s_setstate_cython, __pyx_k_setstate_cython, sizeof(__pyx_k_setstate_cython), 0, 0, 1, 1},
  {&__pyx_n_s_size, __pyx_k_size, sizeof(__pyx_k_size), 0, 0, 1, 1},
  {&__pyx_n_s_start_time, __pyx_k_start_time, sizeof(__pyx_k_start_time), 0, 0, 1, 1},
  {&__pyx_n_s_stencil_depth_fail, __pyx_k_stencil_depth_fail, sizeof(__pyx_k_stencil_depth_fail), 0, 0, 1, 1},
  {&__pyx_n_s_stencil_depth_pass, __pyx_k_stencil_depth_pass, sizeof(__pyx_k_stencil_depth_pass), 0, 0, 1, 1},
  {&__pyx_n_s_stencil_fail, __pyx_k_stencil_fail, sizeof(__pyx_k_stencil_fail), 0, 0, 1, 1},
  {&__pyx_n_s_stencil_func, __pyx_k_stencil_func, sizeof(__pyx_k_stencil_func), 0, 0, 1, 1},
  {&__pyx_n_s_stencil_read_mask, __pyx_k_stencil_read_mask, sizeof(__pyx_k_stencil_read_mask), 0, 0, 1, 1},
  {&__pyx_n_s_stencil_ref, __pyx_k_stencil_ref, sizeof(__pyx_k_stencil_ref), 0, 0, 1, 1},
  {&__pyx_n_s_stencil_test, __pyx_k_stencil_test, sizeof(__pyx_k_stencil_test), 0, 0, 1, 1},
  {&__pyx_n_s_stencil_write_mask, __pyx_k_stencil_write_mask, sizeof(__pyx_k_stencil_write_mask), 0, 0, 1, 1},
  {&__pyx_n_s_stream_idx, __pyx_k_stream_idx, sizeof(__pyx_k_stream_idx), 0, 0, 1, 1},
  {&__pyx_n_u_swap_interval, __pyx_k_swap_interval, sizeof(__pyx_k_swap_interval), 0, 1, 0, 1},
  {&__pyx_n_s_sxplayer_min_level, __pyx_k_sxplayer_min_level, sizeof(__pyx_k_sxplayer_min_level), 0, 0, 1, 1},
  {&__pyx_n_s_t, __pyx_k_t, sizeof(__pyx_k_t), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_text, __pyx_k_text, sizeof(__pyx_k_text), 0, 0, 1, 1},
  {&__pyx_n_s_textures, __pyx_k_textures, sizeof(__pyx_k_textures), 0, 0, 1, 1},
  {&__pyx_n_u_textures, __pyx_k_textures, sizeof(__pyx_k_textures), 0, 1, 0, 1},
  {&__pyx_n_s_time, __pyx_k_time, sizeof(__pyx_k_time), 0, 0, 1, 1},
  {&__pyx_n_s_time_anim, __pyx_k_time_anim, sizeof(__pyx_k_time_anim), 0, 0, 1, 1},
  {&__pyx_n_s_timebase, __pyx_k_timebase, sizeof(__pyx_k_timebase), 0, 0, 1, 1},
  {&__pyx_n_s_timestamps, __pyx_k_timestamps, sizeof(__pyx_k_timestamps), 0, 0, 1, 1},
  {&__pyx_n_s_topology, __pyx_k_topology, sizeof(__pyx_k_topology), 0, 0, 1, 1},
  {&__pyx_n_s_transform, __pyx_k_transform, sizeof(__pyx_k_transform), 0, 0, 1, 1},
  {&__pyx_n_s_uniforms, __pyx_k_uniforms, sizeof(__pyx_k_uniforms), 0, 0, 1, 1},
  {&__pyx_n_u_uniforms, __pyx_k_uniforms, sizeof(__pyx_k_uniforms), 0, 1, 0, 1},
  {&__pyx_n_s_up, __pyx_k_up, sizeof(__pyx_k_up), 0, 0, 1, 1},
  {&__pyx_kp_u_up_parameter_is_expected_to_be_v, __pyx_k_up_parameter_is_expected_to_be_v, sizeof(__pyx_k_up_parameter_is_expected_to_be_v), 0, 1, 0, 0},
  {&__pyx_n_s_up_transform, __pyx_k_up_transform, sizeof(__pyx_k_up_transform), 0, 0, 1, 1},
  {&__pyx_n_s_update, __pyx_k_update, sizeof(__pyx_k_update), 0, 0, 1, 1},
  {&__pyx_kp_u_update__s_takes_a_dictionary_of, __pyx_k_update__s_takes_a_dictionary_of, sizeof(__pyx_k_update__s_takes_a_dictionary_of), 0, 1, 0, 0},
  {&__pyx_n_s_update_attributes, __pyx_k_update_attributes, sizeof(__pyx_k_update_attributes), 0, 0, 1, 1},
  {&__pyx_n_s_update_blocks, __pyx_k_update_blocks, sizeof(__pyx_k_update_blocks), 0, 0, 1, 1},
  {&__pyx_n_s_update_dict, __pyx_k_update_dict, sizeof(__pyx_k_update_dict), 0, 0, 1, 1},
  {&__pyx_n_s_update_fields, __pyx_k_update_fields, sizeof(__pyx_k_update_fields), 0, 0, 1, 1},
  {&__pyx_n_s_update_instance_attributes, __pyx_k_update_instance_attributes, sizeof(__pyx_k_update_instance_attributes), 0, 0, 1, 1},
  {&__pyx_n_s_update_textures, __pyx_k_update_textures, sizeof(__pyx_k_update_textures), 0, 0, 1, 1},
  {&__pyx_n_s_update_uniforms, __pyx_k_update_uniforms, sizeof(__pyx_k_update_uniforms), 0, 0, 1, 1},
  {&__pyx_n_s_uv_corner, __pyx_k_uv_corner, sizeof(__pyx_k_uv_corner), 0, 0, 1, 1},
  {&__pyx_kp_u_uv_corner_parameter_is_expected, __pyx_k_uv_corner_parameter_is_expected, sizeof(__pyx_k_uv_corner_parameter_is_expected), 0, 1, 0, 0},
  {&__pyx_n_s_uv_edge0, __pyx_k_uv_edge0, sizeof(__pyx_k_uv_edge0), 0, 0, 1, 1},
  {&__pyx_kp_u_uv_edge0_parameter_is_expected_t, __pyx_k_uv_edge0_parameter_is_expected_t, sizeof(__pyx_k_uv_edge0_parameter_is_expected_t), 0, 1, 0, 0},
  {&__pyx_n_s_uv_edge1, __pyx_k_uv_edge1, sizeof(__pyx_k_uv_edge1), 0, 0, 1, 1},
  {&__pyx_kp_u_uv_edge1_parameter_is_expected_t, __pyx_k_uv_edge1_parameter_is_expected_t, sizeof(__pyx_k_uv_edge1_parameter_is_expected_t), 0, 1, 0, 0},
  {&__pyx_n_s_uv_edge2, __pyx_k_uv_edge2, sizeof(__pyx_k_uv_edge2), 0, 0, 1, 1},
  {&__pyx_kp_u_uv_edge2_parameter_is_expected_t, __pyx_k_uv_edge2_parameter_is_expected_t, sizeof(__pyx_k_uv_edge2_parameter_is_expected_t), 0, 1, 0, 0},
  {&__pyx_n_s_uv_height, __pyx_k_uv_height, sizeof(__pyx_k_uv_height), 0, 0, 1, 1},
  {&__pyx_kp_u_uv_height_parameter_is_expected, __pyx_k_uv_height_parameter_is_expected, sizeof(__pyx_k_uv_height_parameter_is_expected), 0, 1, 0, 0},
  {&__pyx_n_s_uv_width, __pyx_k_uv_width, sizeof(__pyx_k_uv_width), 0, 0, 1, 1},
  {&__pyx_kp_u_uv_width_parameter_is_expected_t, __pyx_k_uv_width_parameter_is_expected_t, sizeof(__pyx_k_uv_width_parameter_is_expected_t), 0, 1, 0, 0},
  {&__pyx_n_s_uvcoords, __pyx_k_uvcoords, sizeof(__pyx_k_uvcoords), 0, 0, 1, 1},
  {&__pyx_n_s_v, __pyx_k_v, sizeof(__pyx_k_v), 0, 0, 1, 1},
  {&__pyx_n_s_valign, __pyx_k_valign, sizeof(__pyx_k_valign), 0, 0, 1, 1},
  {&__pyx_n_s_value, __pyx_k_value, sizeof(__pyx_k_value), 0, 0, 1, 1},
  {&__pyx_kp_u_value_parameter_is_expected_to_b, __pyx_k_value_parameter_is_expected_to_b, sizeof(__pyx_k_value_parameter_is_expected_to_b), 0, 1, 0, 0},
  {&__pyx_kp_u_values, __pyx_k_values, sizeof(__pyx_k_values), 0, 1, 0, 0},
  {&__pyx_n_s_vector, __pyx_k_vector, sizeof(__pyx_k_vector), 0, 0, 1, 1},
  {&__pyx_kp_u_vector_parameter_is_expected_to, __pyx_k_vector_parameter_is_expected_to, sizeof(__pyx_k_vector_parameter_is_expected_to), 0, 1, 0, 0},
  {&__pyx_n_s_vertex, __pyx_k_vertex, sizeof(__pyx_k_vertex), 0, 0, 1, 1},
  {&__pyx_n_s_vertices, __pyx_k_vertices, sizeof(__pyx_k_vertices), 0, 0, 1, 1},
  {&__pyx_n_s_vflip, __pyx_k_vflip, sizeof(__pyx_k_vflip), 0, 0, 1, 1},
  {&__pyx_n_s_viewport, __pyx_k_viewport, sizeof(__pyx_k_viewport), 0, 0, 1, 1},
  {&__pyx_n_u_viewport, __pyx_k_viewport, sizeof(__pyx_k_viewport), 0, 1, 0, 1},
  {&__pyx_n_s_width, __pyx_k_width, sizeof(__pyx_k_width), 0, 0, 1, 1},
  {&__pyx_n_u_width, __pyx_k_width, sizeof(__pyx_k_width), 0, 1, 0, 1},
  {&__pyx_kp_u_width_parameter_is_expected_to_b, __pyx_k_width_parameter_is_expected_to_b, sizeof(__pyx_k_width_parameter_is_expected_to_b), 0, 1, 0, 0},
  {&__pyx_n_u_window, __pyx_k_window, sizeof(__pyx_k_window), 0, 1, 0, 1},
  {&__pyx_n_s_wrap_r, __pyx_k_wrap_r, sizeof(__pyx_k_wrap_r), 0, 0, 1, 1},
  {&__pyx_n_s_wrap_s, __pyx_k_wrap_s, sizeof(__pyx_k_wrap_s), 0, 0, 1, 1},
  {&__pyx_n_s_wrap_t, __pyx_k_wrap_t, sizeof(__pyx_k_wrap_t), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_TypeError = __Pyx_GetBuiltinName(__pyx_n_s_TypeError); if (!__pyx_builtin_TypeError) __PYX_ERR(0, 123, __pyx_L1_error)
  __pyx_builtin_MemoryError = __Pyx_GetBuiltinName(__pyx_n_s_MemoryError); if (!__pyx_builtin_MemoryError) __PYX_ERR(0, 148, __pyx_L1_error)
  __pyx_builtin_enumerate = __Pyx_GetBuiltinName(__pyx_n_s_enumerate); if (!__pyx_builtin_enumerate) __PYX_ERR(0, 150, __pyx_L1_error)
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(0, 392, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__2 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__2)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__2);
  __Pyx_GIVEREF(__pyx_tuple__2);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__3 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__3)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__3);
  __Pyx_GIVEREF(__pyx_tuple__3);

  /* "nodes_def.pyx":184
 * 
 *     def add_keyframes(self, *keyframes):
 *         return self._add_nodelist("keyframes", *keyframes)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_tuple__4 = PyTuple_Pack(1, __pyx_n_u_keyframes); if (unlikely(!__pyx_tuple__4)) __PYX_ERR(0, 184, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__4);
  __Pyx_GIVEREF(__pyx_tuple__4);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__5 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__5)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__5);
  __Pyx_GIVEREF(__pyx_tuple__5);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__6 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__6)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__6);
  __Pyx_GIVEREF(__pyx_tuple__6);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__7 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__7)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__7);
  __Pyx_GIVEREF(__pyx_tuple__7);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__8 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__8)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__8);
  __Pyx_GIVEREF(__pyx_tuple__8);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__9 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__9)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__9);
  __Pyx_GIVEREF(__pyx_tuple__9);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__10 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__10)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__10);
  __Pyx_GIVEREF(__pyx_tuple__10);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__11 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__11)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__11);
  __Pyx_GIVEREF(__pyx_tuple__11);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__12 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__12)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__12);
  __Pyx_GIVEREF(__pyx_tuple__12);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__13 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__13)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__13);
  __Pyx_GIVEREF(__pyx_tuple__13);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__14 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__14)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__14);
  __Pyx_GIVEREF(__pyx_tuple__14);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__15 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__15)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__15);
  __Pyx_GIVEREF(__pyx_tuple__15);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__16 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__16)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__16);
  __Pyx_GIVEREF(__pyx_tuple__16);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__17 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__17)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__17);
  __Pyx_GIVEREF(__pyx_tuple__17);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__18 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__18)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__18);
  __Pyx_GIVEREF(__pyx_tuple__18);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__19 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__19)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__19);
  __Pyx_GIVEREF(__pyx_tuple__19);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__20 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__20)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__20);
  __Pyx_GIVEREF(__pyx_tuple__20);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__21 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__21)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__21);
  __Pyx_GIVEREF(__pyx_tuple__21);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__22 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__22)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__22);
  __Pyx_GIVEREF(__pyx_tuple__22);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__23 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__23)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__23);
  __Pyx_GIVEREF(__pyx_tuple__23);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__24 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__24)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__24);
  __Pyx_GIVEREF(__pyx_tuple__24);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__25 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__25)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__25);
  __Pyx_GIVEREF(__pyx_tuple__25);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__26 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__26)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__26);
  __Pyx_GIVEREF(__pyx_tuple__26);

  /* "nodes_def.pyx":375
 * 
 *     def add_easing_args(self, *easing_args):
 *         return self._add_doublelist("easing_args", *easing_args)             # <<<<<<<<<<<<<<
 * 
 *     def set_easing_start_offset(self, double easing_start_offset):
 */
  __pyx_tuple__27 = PyTuple_Pack(1, __pyx_n_u_easing_args); if (unlikely(!__pyx_tuple__27)) __PYX_ERR(0, 375, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__27);
  __Pyx_GIVEREF(__pyx_tuple__27);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__28 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__28)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__28);
  __Pyx_GIVEREF(__pyx_tuple__28);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__29 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__29)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__29);
  __Pyx_GIVEREF(__pyx_tuple__29);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__30 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__30)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__30);
  __Pyx_GIVEREF(__pyx_tuple__30);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__31 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__31)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__31);
  __Pyx_GIVEREF(__pyx_tuple__31);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__32 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__32)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__32);
  __Pyx_GIVEREF(__pyx_tuple__32);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__33 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__33)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__33);
  __Pyx_GIVEREF(__pyx_tuple__33);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__34 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__34)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__34);
  __Pyx_GIVEREF(__pyx_tuple__34);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__35 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__35)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__35);
  __Pyx_GIVEREF(__pyx_tuple__35);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__36 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__36)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__36);
  __Pyx_GIVEREF(__pyx_tuple__36);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__37 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__37)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__37);
  __Pyx_GIVEREF(__pyx_tuple__37);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__38 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__38)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__38);
  __Pyx_GIVEREF(__pyx_tuple__38);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__39 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__39)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__39);
  __Pyx_GIVEREF(__pyx_tuple__39);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__40 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__40)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__40);
  __Pyx_GIVEREF(__pyx_tuple__40);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__41 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__41)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__41);
  __Pyx_GIVEREF(__pyx_tuple__41);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__42 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__42)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__42);
  __Pyx_GIVEREF(__pyx_tuple__42);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__43 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__43)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__43);
  __Pyx_GIVEREF(__pyx_tuple__43);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__44 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__44)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__44);
  __Pyx_GIVEREF(__pyx_tuple__44);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__45 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__45)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__45);
  __Pyx_GIVEREF(__pyx_tuple__45);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__46 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__46)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__46);
  __Pyx_GIVEREF(__pyx_tuple__46);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__47 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__47)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__47);
  __Pyx_GIVEREF(__pyx_tuple__47);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__48 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__48)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__48);
  __Pyx_GIVEREF(__pyx_tuple__48);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__49 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__49)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__49);
  __Pyx_GIVEREF(__pyx_tuple__49);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__50 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__50)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__50);
  __Pyx_GIVEREF(__pyx_tuple__50);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__51 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__51)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__51);
  __Pyx_GIVEREF(__pyx_tuple__51);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__52 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__52)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__52);
  __Pyx_GIVEREF(__pyx_tuple__52);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__53 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__53)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__53);
  __Pyx_GIVEREF(__pyx_tuple__53);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__54 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__54)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__54);
  __Pyx_GIVEREF(__pyx_tuple__54);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__55 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__55)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__55);
  __Pyx_GIVEREF(__pyx_tuple__55);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__56 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__56)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__56);
  __Pyx_GIVEREF(__pyx_tuple__56);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__57 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__57)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__57);
  __Pyx_GIVEREF(__pyx_tuple__57);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__58 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__58)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__58);
  __Pyx_GIVEREF(__pyx_tuple__58);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__59 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__59)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__59);
  __Pyx_GIVEREF(__pyx_tuple__59);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__60 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__60)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__60);
  __Pyx_GIVEREF(__pyx_tuple__60);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__61 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__61)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__61);
  __Pyx_GIVEREF(__pyx_tuple__61);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__62 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__62)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__62);
  __Pyx_GIVEREF(__pyx_tuple__62);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__63 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__63)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__63);
  __Pyx_GIVEREF(__pyx_tuple__63);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__64 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__64)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__64);
  __Pyx_GIVEREF(__pyx_tuple__64);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__65 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__65)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__65);
  __Pyx_GIVEREF(__pyx_tuple__65);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__66 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__66)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__66);
  __Pyx_GIVEREF(__pyx_tuple__66);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__67 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__67)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__67);
  __Pyx_GIVEREF(__pyx_tuple__67);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__68 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__68)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__68);
  __Pyx_GIVEREF(__pyx_tuple__68);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__69 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__69)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__69);
  __Pyx_GIVEREF(__pyx_tuple__69);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__70 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__70)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__70);
  __Pyx_GIVEREF(__pyx_tuple__70);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__71 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__71)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__71);
  __Pyx_GIVEREF(__pyx_tuple__71);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__72 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__72)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__72);
  __Pyx_GIVEREF(__pyx_tuple__72);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__73 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__73)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__73);
  __Pyx_GIVEREF(__pyx_tuple__73);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__74 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__74)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__74);
  __Pyx_GIVEREF(__pyx_tuple__74);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__75 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__75)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__75);
  __Pyx_GIVEREF(__pyx_tuple__75);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__76 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__76)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__76);
  __Pyx_GIVEREF(__pyx_tuple__76);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__77 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__77)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__77);
  __Pyx_GIVEREF(__pyx_tuple__77);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__78 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__78)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__78);
  __Pyx_GIVEREF(__pyx_tuple__78);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__79 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__79)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__79);
  __Pyx_GIVEREF(__pyx_tuple__79);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__80 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__80)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__80);
  __Pyx_GIVEREF(__pyx_tuple__80);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__81 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__81)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__81);
  __Pyx_GIVEREF(__pyx_tuple__81);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__82 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__82)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__82);
  __Pyx_GIVEREF(__pyx_tuple__82);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__83 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__83)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__83);
  __Pyx_GIVEREF(__pyx_tuple__83);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__84 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__84)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__84);
  __Pyx_GIVEREF(__pyx_tuple__84);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__85 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__85)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__85);
  __Pyx_GIVEREF(__pyx_tuple__85);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__86 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__86)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__86);
  __Pyx_GIVEREF(__pyx_tuple__86);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__87 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__87)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__87);
  __Pyx_GIVEREF(__pyx_tuple__87);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__88 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__88)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__88);
  __Pyx_GIVEREF(__pyx_tuple__88);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__89 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__89)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__89);
  __Pyx_GIVEREF(__pyx_tuple__89);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__90 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__90)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__90);
  __Pyx_GIVEREF(__pyx_tuple__90);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__91 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__91)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__91);
  __Pyx_GIVEREF(__pyx_tuple__91);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__92 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__92)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__92);
  __Pyx_GIVEREF(__pyx_tuple__92);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__93 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__93)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__93);
  __Pyx_GIVEREF(__pyx_tuple__93);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__94 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__94)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__94);
  __Pyx_GIVEREF(__pyx_tuple__94);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__95 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__95)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__95);
  __Pyx_GIVEREF(__pyx_tuple__95);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__96 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__96)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__96);
  __Pyx_GIVEREF(__pyx_tuple__96);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__97 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__97)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__97);
  __Pyx_GIVEREF(__pyx_tuple__97);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__98 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__98)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__98);
  __Pyx_GIVEREF(__pyx_tuple__98);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__99 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__99)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__99);
  __Pyx_GIVEREF(__pyx_tuple__99);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__100 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__100)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__100);
  __Pyx_GIVEREF(__pyx_tuple__100);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__101 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__101)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__101);
  __Pyx_GIVEREF(__pyx_tuple__101);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__102 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__102)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__102);
  __Pyx_GIVEREF(__pyx_tuple__102);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__103 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__103)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__103);
  __Pyx_GIVEREF(__pyx_tuple__103);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__104 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__104)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__104);
  __Pyx_GIVEREF(__pyx_tuple__104);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__105 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__105)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__105);
  __Pyx_GIVEREF(__pyx_tuple__105);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__106 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__106)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__106);
  __Pyx_GIVEREF(__pyx_tuple__106);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__107 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__107)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__107);
  __Pyx_GIVEREF(__pyx_tuple__107);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__108 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__108)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__108);
  __Pyx_GIVEREF(__pyx_tuple__108);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__109 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__109)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__109);
  __Pyx_GIVEREF(__pyx_tuple__109);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__110 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__110)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__110);
  __Pyx_GIVEREF(__pyx_tuple__110);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__111 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__111)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__111);
  __Pyx_GIVEREF(__pyx_tuple__111);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__112 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__112)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__112);
  __Pyx_GIVEREF(__pyx_tuple__112);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__113 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__113)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__113);
  __Pyx_GIVEREF(__pyx_tuple__113);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__114 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__114)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__114);
  __Pyx_GIVEREF(__pyx_tuple__114);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__115 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__115)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__115);
  __Pyx_GIVEREF(__pyx_tuple__115);

  /* "nodes_def.pyx":1289
 * 
 *     def add_children(self, *children):
 *         return self._add_nodelist("children", *children)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_tuple__116 = PyTuple_Pack(1, __pyx_n_u_children); if (unlikely(!__pyx_tuple__116)) __PYX_ERR(0, 1289, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__116);
  __Pyx_GIVEREF(__pyx_tuple__116);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__117 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__117)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__117);
  __Pyx_GIVEREF(__pyx_tuple__117);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__118 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__118)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__118);
  __Pyx_GIVEREF(__pyx_tuple__118);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__119 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__119)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__119);
  __Pyx_GIVEREF(__pyx_tuple__119);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__120 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__120)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__120);
  __Pyx_GIVEREF(__pyx_tuple__120);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__121 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__121)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__121);
  __Pyx_GIVEREF(__pyx_tuple__121);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__122 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__122)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__122);
  __Pyx_GIVEREF(__pyx_tuple__122);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__123 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__123)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__123);
  __Pyx_GIVEREF(__pyx_tuple__123);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__124 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__124)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__124);
  __Pyx_GIVEREF(__pyx_tuple__124);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__125 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__125)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__125);
  __Pyx_GIVEREF(__pyx_tuple__125);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__126 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__126)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__126);
  __Pyx_GIVEREF(__pyx_tuple__126);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__127 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__127)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__127);
  __Pyx_GIVEREF(__pyx_tuple__127);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__128 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__128)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__128);
  __Pyx_GIVEREF(__pyx_tuple__128);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__129 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__129)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__129);
  __Pyx_GIVEREF(__pyx_tuple__129);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__130 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__130)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__130);
  __Pyx_GIVEREF(__pyx_tuple__130);

  /* "nodes_def.pyx":1589
 * 
 *     def add_color_textures(self, *color_textures):
 *         return self._add_nodelist("color_textures", *color_textures)             # <<<<<<<<<<<<<<
 * 
 *     def set_depth_texture(self, _Node depth_texture):
 */
  __pyx_tuple__131 = PyTuple_Pack(1, __pyx_n_u_color_textures); if (unlikely(!__pyx_tuple__131)) __PYX_ERR(0, 1589, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__131);
  __Pyx_GIVEREF(__pyx_tuple__131);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__132 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__132)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__132);
  __Pyx_GIVEREF(__pyx_tuple__132);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__133 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__133)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__133);
  __Pyx_GIVEREF(__pyx_tuple__133);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__134 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__134)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__134);
  __Pyx_GIVEREF(__pyx_tuple__134);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__135 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__135)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__135);
  __Pyx_GIVEREF(__pyx_tuple__135);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__136 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__136)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__136);
  __Pyx_GIVEREF(__pyx_tuple__136);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__137 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__137)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__137);
  __Pyx_GIVEREF(__pyx_tuple__137);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__138 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__138)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__138);
  __Pyx_GIVEREF(__pyx_tuple__138);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__139 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__139)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__139);
  __Pyx_GIVEREF(__pyx_tuple__139);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__140 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__140)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__140);
  __Pyx_GIVEREF(__pyx_tuple__140);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__141 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__141)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__141);
  __Pyx_GIVEREF(__pyx_tuple__141);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__142 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__142)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__142);
  __Pyx_GIVEREF(__pyx_tuple__142);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__143 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__143)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__143);
  __Pyx_GIVEREF(__pyx_tuple__143);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__144 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__144)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__144);
  __Pyx_GIVEREF(__pyx_tuple__144);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__145 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__145)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__145);
  __Pyx_GIVEREF(__pyx_tuple__145);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__146 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__146)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__146);
  __Pyx_GIVEREF(__pyx_tuple__146);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__147 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__147)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__147);
  __Pyx_GIVEREF(__pyx_tuple__147);

  /* "nodes_def.pyx":2088
 * 
 *     def add_ranges(self, *ranges):
 *         return self._add_nodelist("ranges", *ranges)             # <<<<<<<<<<<<<<
 * 
 *     def set_prefetch_time(self, double prefetch_time):
 */
  __pyx_tuple__148 = PyTuple_Pack(1, __pyx_n_u_ranges); if (unlikely(!__pyx_tuple__148)) __PYX_ERR(0, 2088, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__148);
  __Pyx_GIVEREF(__pyx_tuple__148);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__149 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__149)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__149);
  __Pyx_GIVEREF(__pyx_tuple__149);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__150 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__150)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__150);
  __Pyx_GIVEREF(__pyx_tuple__150);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__151 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__151)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__151);
  __Pyx_GIVEREF(__pyx_tuple__151);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__152 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__152)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__152);
  __Pyx_GIVEREF(__pyx_tuple__152);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__153 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__153)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__153);
  __Pyx_GIVEREF(__pyx_tuple__153);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__154 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__154)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__154);
  __Pyx_GIVEREF(__pyx_tuple__154);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__155 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__155)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__155);
  __Pyx_GIVEREF(__pyx_tuple__155);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__156 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__156)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__156);
  __Pyx_GIVEREF(__pyx_tuple__156);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__157 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__157)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__157);
  __Pyx_GIVEREF(__pyx_tuple__157);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__158 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__158)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__158);
  __Pyx_GIVEREF(__pyx_tuple__158);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__159 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__159)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__159);
  __Pyx_GIVEREF(__pyx_tuple__159);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__160 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__160)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__160);
  __Pyx_GIVEREF(__pyx_tuple__160);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__161 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__161)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__161);
  __Pyx_GIVEREF(__pyx_tuple__161);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__162 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__162)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__162);
  __Pyx_GIVEREF(__pyx_tuple__162);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__163 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__163)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__163);
  __Pyx_GIVEREF(__pyx_tuple__163);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__164 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__164)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__164);
  __Pyx_GIVEREF(__pyx_tuple__164);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__165 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__165)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__165);
  __Pyx_GIVEREF(__pyx_tuple__165);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__166 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__166)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__166);
  __Pyx_GIVEREF(__pyx_tuple__166);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__167 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__167)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__167);
  __Pyx_GIVEREF(__pyx_tuple__167);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__168 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__168)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__168);
  __Pyx_GIVEREF(__pyx_tuple__168);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__169 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__169)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__169);
  __Pyx_GIVEREF(__pyx_tuple__169);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__170 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__170)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__170);
  __Pyx_GIVEREF(__pyx_tuple__170);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__171 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__171)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__171);
  __Pyx_GIVEREF(__pyx_tuple__171);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__172 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__172)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__172);
  __Pyx_GIVEREF(__pyx_tuple__172);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__173 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__173)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__173);
  __Pyx_GIVEREF(__pyx_tuple__173);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__174 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__174)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__174);
  __Pyx_GIVEREF(__pyx_tuple__174);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__175 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__175)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__175);
  __Pyx_GIVEREF(__pyx_tuple__175);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__176 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__176)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__176);
  __Pyx_GIVEREF(__pyx_tuple__176);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__177 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__177)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__177);
  __Pyx_GIVEREF(__pyx_tuple__177);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__178 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__178)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__178);
  __Pyx_GIVEREF(__pyx_tuple__178);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__179 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__179)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__179);
  __Pyx_GIVEREF(__pyx_tuple__179);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__180 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__180)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__180);
  __Pyx_GIVEREF(__pyx_tuple__180);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__181 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__181)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__181);
  __Pyx_GIVEREF(__pyx_tuple__181);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__182 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__182)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__182);
  __Pyx_GIVEREF(__pyx_tuple__182);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__183 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__183)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__183);
  __Pyx_GIVEREF(__pyx_tuple__183);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__184 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__184)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__184);
  __Pyx_GIVEREF(__pyx_tuple__184);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__185 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__185)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__185);
  __Pyx_GIVEREF(__pyx_tuple__185);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__186 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__186)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__186);
  __Pyx_GIVEREF(__pyx_tuple__186);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__187 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__187)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__187);
  __Pyx_GIVEREF(__pyx_tuple__187);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__188 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__188)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__188);
  __Pyx_GIVEREF(__pyx_tuple__188);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__189 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__189)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__189);
  __Pyx_GIVEREF(__pyx_tuple__189);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__190 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__190)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__190);
  __Pyx_GIVEREF(__pyx_tuple__190);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__191 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__191)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__191);
  __Pyx_GIVEREF(__pyx_tuple__191);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__192 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__192)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__192);
  __Pyx_GIVEREF(__pyx_tuple__192);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__193 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__193)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__193);
  __Pyx_GIVEREF(__pyx_tuple__193);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__194 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__194)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__194);
  __Pyx_GIVEREF(__pyx_tuple__194);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__195 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__195)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__195);
  __Pyx_GIVEREF(__pyx_tuple__195);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__196 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__196)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__196);
  __Pyx_GIVEREF(__pyx_tuple__196);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__197 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__197)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__197);
  __Pyx_GIVEREF(__pyx_tuple__197);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__198 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__198)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__198);
  __Pyx_GIVEREF(__pyx_tuple__198);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__199 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__199)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__199);
  __Pyx_GIVEREF(__pyx_tuple__199);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__200 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__200)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__200);
  __Pyx_GIVEREF(__pyx_tuple__200);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 */
  __pyx_tuple__201 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__201)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__201);
  __Pyx_GIVEREF(__pyx_tuple__201);

  /* "(tree fragment)":4
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("self.ctx cannot be converted to a Python object for pickling")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__202 = PyTuple_Pack(1, __pyx_kp_s_self_ctx_cannot_be_converted_to); if (unlikely(!__pyx_tuple__202)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__202);
  __Pyx_GIVEREF(__pyx_tuple__202);

  /* "pynodegl.pyx":135
 *         nb_args = len(args)
 *         if nb_args > 2:
 *             raise Exception("Easings do not support more than 2 arguments")             # <<<<<<<<<<<<<<
 *         for i, arg in enumerate(args):
 *             c_args[i] = arg
 */
  __pyx_tuple__203 = PyTuple_Pack(1, __pyx_kp_u_Easings_do_not_support_more_than); if (unlikely(!__pyx_tuple__203)) __PYX_ERR(1, 135, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__203);
  __Pyx_GIVEREF(__pyx_tuple__203);

  /* "pynodegl.pyx":190
 *         config.width = kwargs.get('width', 0)
 *         config.height = kwargs.get('height', 0)
 *         viewport = kwargs.get('viewport', (0, 0, 0, 0))             # <<<<<<<<<<<<<<
 *         for i in range(4):
 *             config.viewport[i] = viewport[i]
 */
  __pyx_tuple__204 = PyTuple_Pack(4, __pyx_int_0, __pyx_int_0, __pyx_int_0, __pyx_int_0); if (unlikely(!__pyx_tuple__204)) __PYX_ERR(1, 190, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__204);
  __Pyx_GIVEREF(__pyx_tuple__204);

  /* "pynodegl.pyx":195
 *         config.samples = kwargs.get('samples', 0)
 *         config.set_surface_pts = kwargs.get('set_surface_pts', 0)
 *         clear_color = kwargs.get('clear_color', (0.0, 0.0, 0.0, 1.0))             # <<<<<<<<<<<<<<
 *         for i in range(4):
 *             config.clear_color[i] = clear_color[i]
 */
  __pyx_tuple__205 = PyTuple_Pack(4, __pyx_float_0_0, __pyx_float_0_0, __pyx_float_0_0, __pyx_float_1_0); if (unlikely(!__pyx_tuple__205)) __PYX_ERR(1, 195, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__205);
  __Pyx_GIVEREF(__pyx_tuple__205);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__206 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__206)) __PYX_ERR(2, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__206);
  __Pyx_GIVEREF(__pyx_tuple__206);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__207 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__207)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__207);
  __Pyx_GIVEREF(__pyx_tuple__207);

  /* "pynodegl.pyx":124
 * include "nodes_def.pyx"
 * 
 * def log_set_min_level(int level):             # <<<<<<<<<<<<<<
 *     ngl_log_set_min_level(level)
 * 
 */
  __pyx_tuple__208 = PyTuple_Pack(2, __pyx_n_s_level, __pyx_n_s_level); if (unlikely(!__pyx_tuple__208)) __PYX_ERR(1, 124, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__208);
  __Pyx_GIVEREF(__pyx_tuple__208);
  __pyx_codeobj__209 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__208, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pynodegl_pyx, __pyx_n_s_log_set_min_level, 124, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__209)) __PYX_ERR(1, 124, __pyx_L1_error)

  /* "pynodegl.pyx":161
 * 
 * 
 * def easing_evaluate(name, t, args=None, offsets=None):             # <<<<<<<<<<<<<<
 *     return _eval_solve(name, t, args, offsets, True)
 * 
 */
  __pyx_tuple__210 = PyTuple_Pack(4, __pyx_n_s_name, __pyx_n_s_t, __pyx_n_s_args, __pyx_n_s_offsets); if (unlikely(!__pyx_tuple__210)) __PYX_ERR(1, 161, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__210);
  __Pyx_GIVEREF(__pyx_tuple__210);
  __pyx_codeobj__211 = (PyObject*)__Pyx_PyCode_New(4, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__210, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pynodegl_pyx, __pyx_n_s_easing_evaluate, 161, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__211)) __PYX_ERR(1, 161, __pyx_L1_error)

  /* "pynodegl.pyx":165
 * 
 * 
 * def easing_solve(name, v, args=None, offsets=None):             # <<<<<<<<<<<<<<
 *     return _eval_solve(name, v, args, offsets, False)
 * 
 */
  __pyx_tuple__212 = PyTuple_Pack(4, __pyx_n_s_name, __pyx_n_s_v, __pyx_n_s_args, __pyx_n_s_offsets); if (unlikely(!__pyx_tuple__212)) __PYX_ERR(1, 165, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__212);
  __Pyx_GIVEREF(__pyx_tuple__212);
  __pyx_codeobj__213 = (PyObject*)__Pyx_PyCode_New(4, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__212, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_pynodegl_pyx, __pyx_n_s_easing_solve, 165, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__213)) __PYX_ERR(1, 165, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitGlobals(void) {
  __pyx_umethod_PyDict_Type_get.type = (PyObject*)&PyDict_Type;
  __pyx_umethod_PyDict_Type_update.type = (PyObject*)&PyDict_Type;
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(1, 1, __pyx_L1_error);
  __pyx_float_0_0 = PyFloat_FromDouble(0.0); if (unlikely(!__pyx_float_0_0)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_1_0 = PyFloat_FromDouble(1.0); if (unlikely(!__pyx_float_1_0)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_int_neg_1 = PyInt_FromLong(-1); if (unlikely(!__pyx_int_neg_1)) __PYX_ERR(1, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_modinit_global_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_import_code(void); /*proto*/

static int __Pyx_modinit_global_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  if (PyType_Ready(&__pyx_type_8pynodegl__Node) < 0) __PYX_ERR(0, 102, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8pynodegl__Node.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8pynodegl__Node.tp_dictoffset && __pyx_type_8pynodegl__Node.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8pynodegl__Node.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Node, (PyObject *)&__pyx_type_8pynodegl__Node) < 0) __PYX_ERR(0, 102, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8pynodegl__Node) < 0) __PYX_ERR(0, 102, __pyx_L1_error)
  __pyx_ptype_8pynodegl__Node = &__pyx_type_8pynodegl__Node;
  __pyx_type_8pynodegl__AnimatedBuffer.tp_base = __pyx_ptype_8pynodegl__Node;
  if (PyType_Ready(&__pyx_type_8pynodegl__AnimatedBuffer) < 0) __PYX_ERR(0, 176, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8pynodegl__AnimatedBuffer.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8pynodegl__AnimatedBuffer.tp_dictoffset && __pyx_type_8pynodegl__AnimatedBuffer.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8pynodegl__AnimatedBuffer.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_AnimatedBuffer, (PyObject *)&__pyx_type_8pynodegl__AnimatedBuffer) < 0) __PYX_ERR(0, 176, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8pynodegl__AnimatedBuffer) < 0) __PYX_ERR(0, 176, __pyx_L1_error)
  __pyx_ptype_8pynodegl__AnimatedBuffer = &__pyx_type_8pynodegl__AnimatedBuffer;
  __pyx_type_8pynodegl_AnimatedBufferFloat.tp_base = __pyx_ptype_8pynodegl__AnimatedBuffer;
  if (PyType_Ready(&__pyx_type_8pynodegl_AnimatedBufferFloat) < 0) __PYX_ERR(0, 187, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8pynodegl_AnimatedBufferFloat.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8pynodegl_AnimatedBufferFloat.tp_dictoffset && __pyx_type_8pynodegl_AnimatedBufferFloat.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8pynodegl_AnimatedBufferFloat.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_AnimatedBufferFloat, (PyObject *)&__pyx_type_8pynodegl_AnimatedBufferFloat) < 0) __PYX_ERR(0, 187, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8pynodegl_AnimatedBufferFloat) < 0) __PYX_ERR(0, 187, __pyx_L1_error)
  __pyx_ptype_8pynodegl_AnimatedBufferFloat = &__pyx_type_8pynodegl_AnimatedBufferFloat;
  __pyx_type_8pynodegl_AnimatedBufferVec2.tp_base = __pyx_ptype_8pynodegl__AnimatedBuffer;
  if (PyType_Ready(&__pyx_type_8pynodegl_AnimatedBufferVec2) < 0) __PYX_ERR(0, 197, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8pynodegl_AnimatedBufferVec2.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8pynodegl_AnimatedBufferVec2.tp_dictoffset && __pyx_type_8pynodegl_AnimatedBufferVec2.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8pynodegl_AnimatedBufferVec2.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_AnimatedBufferVec2, (PyObject *)&__pyx_type_8pynodegl_AnimatedBufferVec2) < 0) __PYX_ERR(0, 197, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8pynodegl_AnimatedBufferVec2) < 0) __PYX_ERR(0, 197, __pyx_L1_error)
  __pyx_ptype_8pynodegl_AnimatedBufferVec2 = &__pyx_type_8pynodegl_AnimatedBufferVec2;
  __pyx_type_8pynodegl_AnimatedBufferVec3.tp_base = __pyx_ptype_8pynodegl__AnimatedBuffer;
  if (PyType_Ready(&__pyx_type_8pynodegl_AnimatedBufferVec3) < 0) __PYX_ERR(0, 207, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8pynodegl_AnimatedBufferVec3.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8pynodegl_AnimatedBufferVec3.tp_dictoffset && __pyx_type_8pynodegl_AnimatedBufferVec3.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8pynodegl_AnimatedBufferVec3.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_AnimatedBufferVec3, (PyObject *)&__pyx_type_8pynodegl_AnimatedBufferVec3) < 0) __PYX_ERR(0, 207, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8pynodegl_AnimatedBufferVec3) < 0) __PYX_ERR(0, 207, __pyx_L1_error)
  __pyx_ptype_8pynodegl_AnimatedBufferVec3 = &__pyx_type_8pynodegl_AnimatedBufferVec3;
  __pyx_type_8pynodegl_AnimatedBufferVec4.tp_base = __pyx_ptype_8pynodegl__AnimatedBuffer;
  if (PyType_Ready(&__pyx_type_8pynodegl_AnimatedBufferVec4) < 0) __PYX_ERR(0, 217, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8pynodegl_AnimatedBufferVec4.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8pynodegl_AnimatedBufferVec4.tp_dictoffset && __pyx_type_8pynodegl_AnimatedBufferVec4.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8pynodegl_AnimatedBufferVec4.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_AnimatedBufferVec4, (PyObject *)&__pyx_type_8pynodegl_AnimatedBufferVec4) < 0) __PYX_ERR(0, 217, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8pynodegl_AnimatedBufferVec4) < 0) __PYX_ERR(0, 217, __pyx_L1_error)
  __pyx_ptype_8pynodegl_AnimatedBufferVec4 = &__pyx_type_8pynodegl_AnimatedBufferVec4;
  __pyx_type_8pynodegl_AnimatedTime.tp_base = __pyx_ptype_8pynodegl__Node;
  if (PyType_Ready(&__pyx_type_8pynodegl_AnimatedTime) < 0) __PYX_ERR(0, 227, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8pynodegl_AnimatedTime.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8pynodegl_AnimatedTime.tp_dictoffset && __pyx_type_8pynodegl_AnimatedTime.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8pynodegl_AnimatedTime.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_AnimatedTime, (PyObject *)&__pyx_type_8pynodegl_AnimatedTime) < 0) __PYX_ERR(0, 227, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8pynodegl_AnimatedTime) < 0) __PYX_ERR(0, 227, __pyx_L1_error)
  __pyx_ptype_8pynodegl_AnimatedTime = &__pyx_type_8pynodegl_AnimatedTime;
  __pyx_type_8pynodegl_AnimatedFloat.tp_base = __pyx_ptype_8pynodegl__Node;
  if (PyType_Ready(&__pyx_type_8pynodegl_AnimatedFloat) < 0) __PYX_ERR(0, 243, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8pynodegl_AnimatedFloat.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8pynodegl_AnimatedFloat.tp_dictoffset && __pyx_type_8pynodegl_AnimatedFloat.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8pynodegl_AnimatedFloat.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_AnimatedFloat, (PyObject *)&__pyx_type_8pynodegl_AnimatedFloat) < 0) __PYX_ERR(0, 243, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8pynodegl_AnimatedFloat) < 0) __PYX_ERR(0, 243, __pyx_L1_error)
  __pyx_ptype_8pynodegl_AnimatedFloat = &__pyx_type_8pynodegl_AnimatedFloat;
  __pyx_type_8pynodegl_AnimatedVec2.tp_base = __pyx_ptype_8pynodegl__Node;
  if (PyType_Ready(&__pyx_type_8pynodegl_AnimatedVec2) < 0) __PYX_ERR(0, 264, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8pynodegl_AnimatedVec2.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8pynodegl_AnimatedVec2.tp_dictoffset && __pyx_type_8pynodegl_AnimatedVec2.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8pynodegl_AnimatedVec2.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_AnimatedVec2, (PyObject *)&__pyx_type_8pynodegl_AnimatedVec2) < 0) __PYX_ERR(0, 264, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8pynodegl_AnimatedVec2) < 0) __PYX_ERR(0, 264, __pyx_L1_error)
  __pyx_ptype_8pynodegl_AnimatedVec2 = &__pyx_type_8pynodegl_AnimatedVec2;
  __pyx_type_8pynodegl_AnimatedVec3.tp_base = __pyx_ptype_8pynodegl__Node;
  if (PyType_Ready(&__pyx_type_8pynodegl_AnimatedVec3) < 0) __PYX_ERR(0, 285, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8pynodegl_AnimatedVec3.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8pynodegl_AnimatedVec3.tp_dictoffset && __pyx_type_8pynodegl_AnimatedVec3.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8pynodegl_AnimatedVec3.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_AnimatedVec3, (PyObject *)&__pyx_type_8pynodegl_AnimatedVec3) < 0) __PYX_ERR(0, 285, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8pynodegl_AnimatedVec3) < 0) __PYX_ERR(0, 285, __pyx_L1_error)
  __pyx_ptype_8pynodegl_AnimatedVec3 = &__pyx_type_8pynodegl_AnimatedVec3;
  __pyx_type_8pynodegl_AnimatedVec4.tp_base = __pyx_ptype_8pynodegl__Node;
  if (PyType_Ready(&__pyx_type_8pynodegl_AnimatedVec4) < 0) __PYX_ERR(0, 306, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8pynodegl_AnimatedVec4.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8pynodegl_AnimatedVec4.tp_dictoffset && __pyx_type_8pynodegl_AnimatedVec4.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8pynodegl_AnimatedVec4.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_AnimatedVec4, (PyObject *)&__pyx_type_8pynodegl_AnimatedVec4) < 0) __PYX_ERR(0, 306, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8pynodegl_AnimatedVec4) < 0) __PYX_ERR(0, 306, __pyx_L1_error)
  __pyx_ptype_8pynodegl_AnimatedVec4 = &__pyx_type_8pynodegl_AnimatedVec4;
  __pyx_type_8pynodegl_AnimatedQuat.tp_base = __pyx_ptype_8pynodegl__Node;
  if (PyType_Ready(&__pyx_type_8pynodegl_AnimatedQuat) < 0) __PYX_ERR(0, 327, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8pynodegl_AnimatedQuat.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8pynodegl_AnimatedQuat.tp_dictoffset && __pyx_type_8pynodegl_AnimatedQuat.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8pynodegl_AnimatedQuat.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_AnimatedQuat, (PyObject *)&__pyx_type_8pynodegl_AnimatedQuat) < 0) __PYX_ERR(0, 327, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8pynodegl_AnimatedQuat) < 0) __PYX_ERR(0, 327, __pyx_L1_error)
  __pyx_ptype_8pynodegl_AnimatedQuat = &__pyx_type_8pynodegl_AnimatedQuat;
  __pyx_type_8pynodegl_AnimKeyFrameFloat.tp_base = __pyx_ptype_8pynodegl__Node;
  if (PyType_Ready(&__pyx_type_8pynodegl_AnimKeyFrameFloat) < 0) __PYX_ERR(0, 353, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8pynodegl_AnimKeyFrameFloat.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8pynodegl_AnimKeyFrameFloat.tp_dictoffset && __pyx_type_8pynodegl_AnimKeyFrameFloat.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8pynodegl_AnimKeyFrameFloat.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_AnimKeyFrameFloat, (PyObject *)&__pyx_type_8pynodegl_AnimKeyFrameFloat) < 0) __PYX_ERR(0, 353, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8pynodegl_AnimKeyFrameFloat) < 0) __PYX_ERR(0, 353, __pyx_L1_error)
  __pyx_ptype_8pynodegl_AnimKeyFrameFloat = &__pyx_type_8pynodegl_AnimKeyFrameFloat;
  __pyx_type_8pynodegl_AnimKeyFrameVec2.tp_base = __pyx_ptype_8pynodegl__Node;
  if (PyType_Ready(&__pyx_type_8pynodegl_AnimKeyFrameVec2) < 0) __PYX_ERR(0, 384, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8pynodegl_AnimKeyFrameVec2.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8pynodegl_AnimKeyFrameVec2.tp_dictoffset && __pyx_type_8pynodegl_AnimKeyFrameVec2.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8pynodegl_AnimKeyFrameVec2.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_AnimKeyFrameVec2, (PyObject *)&__pyx_type_8pynodegl_AnimKeyFrameVec2) < 0) __PYX_ERR(0, 384, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8pynodegl_AnimKeyFrameVec2) < 0) __PYX_ERR(0, 384, __pyx_L1_error)
  __pyx_ptype_8pynodegl_AnimKeyFrameVec2 = &__pyx_type_8pynodegl_AnimKeyFrameVec2;
  __pyx_type_8pynodegl_AnimKeyFrameVec3.tp_base = __pyx_ptype_8pynodegl__Node;
  if (PyType_Ready(&__pyx_type_8pynodegl_AnimKeyFrameVec3) < 0) __PYX_ERR(0, 423, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8pynodegl_AnimKeyFrameVec3.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8pynodegl_AnimKeyFrameVec3.tp_dictoffset && __pyx_type_8pynodegl_AnimKeyFrameVec3.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8pynodegl_AnimKeyFrameVec3.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_AnimKeyFrameVec3, (PyObject *)&__pyx_type_8pynodegl_AnimKeyFrameVec3) < 0) __PYX_ERR(0, 423, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8pynodegl_AnimKeyFrameVec3) < 0) __PYX_ERR(0, 423, __pyx_L1_error)
  __pyx_ptype_8pynodegl_AnimKeyFrameVec3 = &__pyx_type_8pynodegl_AnimKeyFrameVec3;
  __pyx_type_8pynodegl_AnimKeyFrameVec4.tp_base = __pyx_ptype_8pynodegl__Node;
  if (PyType_Ready(&__pyx_type_8pynodegl_AnimKeyFrameVec4) < 0) __PYX_ERR(0, 462, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8pynodegl_AnimKeyFrameVec4.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8pynodegl_AnimKeyFrameVec4.tp_dictoffset && __pyx_type_8pynodegl_AnimKeyFrameVec4.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8pynodegl_AnimKeyFrameVec4.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_AnimKeyFrameVec4, (PyObject *)&__pyx_type_8pynodegl_AnimKeyFrameVec4) < 0) __PYX_ERR(0, 462, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8pynodegl_AnimKeyFrameVec4) < 0) __PYX_ERR(0, 462, __pyx_L1_error)
  __pyx_ptype_8pynodegl_AnimKeyFrameVec4 = &__pyx_type_8pynodegl_AnimKeyFrameVec4;
  __pyx_type_8pynodegl_AnimKeyFrameQuat.tp_base = __pyx_ptype_8pynodegl__Node;
  if (PyType_Ready(&__pyx_type_8pynodegl_AnimKeyFrameQuat) < 0) __PYX_ERR(0, 501, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8pynodegl_AnimKeyFrameQuat.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8pynodegl_AnimKeyFrameQuat.tp_dictoffset && __pyx_type_8pynodegl_AnimKeyFrameQuat.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8pynodegl_AnimKeyFrameQuat.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_AnimKeyFrameQuat, (PyObject *)&__pyx_type_8pynodegl_AnimKeyFrameQuat) < 0) __PYX_ERR(0, 501, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8pynodegl_AnimKeyFrameQuat) < 0) __PYX_ERR(0, 501, __pyx_L1_error)
  __pyx_ptype_8pynodegl_AnimKeyFrameQuat = &__pyx_type_8pynodegl_AnimKeyFrameQuat;
  __pyx_type_8pynodegl_AnimKeyFrameBuffer.tp_base = __pyx_ptype_8pynodegl__Node;
  if (PyType_Ready(&__pyx_type_8pynodegl_AnimKeyFrameBuffer) < 0) __PYX_ERR(0, 540, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8pynodegl_AnimKeyFrameBuffer.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8pynodegl_AnimKeyFrameBuffer.tp_dictoffset && __pyx_type_8pynodegl_AnimKeyFrameBuffer.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8pynodegl_AnimKeyFrameBuffer.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_AnimKeyFrameBuffer, (PyObject *)&__pyx_type_8pynodegl_AnimKeyFrameBuffer) < 0) __PYX_ERR(0, 540, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8pynodegl_AnimKeyFrameBuffer) < 0) __PYX_ERR(0, 540, __pyx_L1_error)
  __pyx_ptype_8pynodegl_AnimKeyFrameBuffer = &__pyx_type_8pynodegl_AnimKeyFrameBuffer;
  __pyx_type_8pynodegl_Block.tp_base = __pyx_ptype_8pynodegl__Node;
  if (PyType_Ready(&__pyx_type_8pynodegl_Block) < 0) __PYX_ERR(0, 580, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8pynodegl_Block.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8pynodegl_Block.tp_dictoffset && __pyx_type_8pynodegl_Block.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8pynodegl_Block.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Block, (PyObject *)&__pyx_type_8pynodegl_Block) < 0) __PYX_ERR(0, 580, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8pynodegl_Block) < 0) __PYX_ERR(0, 580, __pyx_L1_error)
  __pyx_ptype_8pynodegl_Block = &__pyx_type_8pynodegl_Block;
  __pyx_type_8pynodegl__Buffer.tp_base = __pyx_ptype_8pynodegl__Node;
  if (PyType_Ready(&__pyx_type_8pynodegl__Buffer) < 0) __PYX_ERR(0, 601, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8pynodegl__Buffer.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8pynodegl__Buffer.tp_dictoffset && __pyx_type_8pynodegl__Buffer.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8pynodegl__Buffer.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Buffer, (PyObject *)&__pyx_type_8pynodegl__Buffer) < 0) __PYX_ERR(0, 601, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8pynodegl__Buffer) < 0) __PYX_ERR(0, 601, __pyx_L1_error)
  __pyx_ptype_8pynodegl__Buffer = &__pyx_type_8pynodegl__Buffer;
  __pyx_type_8pynodegl_BufferByte.tp_base = __pyx_ptype_8pynodegl__Buffer;
  if (PyType_Ready(&__pyx_type_8pynodegl_BufferByte) < 0) __PYX_ERR(0, 636, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8pynodegl_BufferByte.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8pynodegl_BufferByte.tp_dictoffset && __pyx_type_8pynodegl_BufferByte.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8pynodegl_BufferByte.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_BufferByte, (PyObject *)&__pyx_type_8pynodegl_BufferByte) < 0) __PYX_ERR(0, 636, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8pynodegl_BufferByte) < 0) __PYX_ERR(0, 636, __pyx_L1_error)
  __pyx_ptype_8pynodegl_BufferByte = &__pyx_type_8pynodegl_BufferByte;
  __pyx_type_8pynodegl_BufferBVec2.tp_base = __pyx_ptype_8pynodegl__Buffer;
  if (PyType_Ready(&__pyx_type_8pynodegl_BufferBVec2) < 0) __PYX_ERR(0, 646, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8pynodegl_BufferBVec2.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8pynodegl_BufferBVec2.tp_dictoffset && __pyx_type_8pynodegl_BufferBVec2.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8pynodegl_BufferBVec2.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_BufferBVec2, (PyObject *)&__pyx_type_8pynodegl_BufferBVec2) < 0) __PYX_ERR(0, 646, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8pynodegl_BufferBVec2) < 0) __PYX_ERR(0, 646, __pyx_L1_error)
  __pyx_ptype_8pynodegl_BufferBVec2 = &__pyx_type_8pynodegl_BufferBVec2;
  __pyx_type_8pynodegl_BufferBVec3.tp_base = __pyx_ptype_8pynodegl__Buffer;
  if (PyType_Ready(&__pyx_type_8pynodegl_BufferBVec3) < 0) __PYX_ERR(0, 656, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8pynodegl_BufferBVec3.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8pynodegl_BufferBVec3.tp_dictoffset && __pyx_type_8pynodegl_BufferBVec3.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8pynodegl_BufferBVec3.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_BufferBVec3, (PyObject *)&__pyx_type_8pynodegl_BufferBVec3) < 0) __PYX_ERR(0, 656, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8pynodegl_BufferBVec3) < 0) __PYX_ERR(0, 656, __pyx_L1_error)
  __pyx_ptype_8pynodegl_BufferBVec3 = &__pyx_type_8pynodegl_BufferBVec3;
  __pyx_type_8pynodegl_BufferBVec4.tp_base = __pyx_ptype_8pynodegl__Buffer;
  if (PyType_Ready(&__pyx_type_8pynodegl_BufferBVec4) < 0) __PYX_ERR(0, 666, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8pynodegl_BufferBVec4.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8pynodegl_BufferBVec4.tp_dictoffset && __pyx_type_8pynodegl_BufferBVec4.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8pynodegl_BufferBVec4.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_BufferBVec4, (PyObject *)&__pyx_type_8pynodegl_BufferBVec4) < 0) __PYX_ERR(0, 666, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8pynodegl_BufferBVec4) < 0) __PYX_ERR(0, 666, __pyx_L1_error)
  __pyx_ptype_8pynodegl_BufferBVec4 = &__pyx_type_8pynodegl_BufferBVec4;
  __pyx_type_8pynodegl_BufferInt.tp_base = __pyx_ptype_8pynodegl__Buffer;
  if (PyType_Ready(&__pyx_type_8pynodegl_BufferInt) < 0) __PYX_ERR(0, 676, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8pynodegl_BufferInt.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8pynodegl_BufferInt.tp_dictoffset && __pyx_type_8pynodegl_BufferInt.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8pynodegl_BufferInt.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_BufferInt, (PyObject *)&__pyx_type_8pynodegl_BufferInt) < 0) __PYX_ERR(0, 676, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8pynodegl_BufferInt) < 0) __PYX_ERR(0, 676, __pyx_L1_error)
  __pyx_ptype_8pynodegl_BufferInt = &__pyx_type_8pynodegl_BufferInt;
  __pyx_type_8pynodegl_BufferInt64.tp_base = __pyx_ptype_8pynodegl__Buffer;
  if (PyType_Ready(&__pyx_type_8pynodegl_BufferInt64) < 0) __PYX_ERR(0, 686, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8pynodegl_BufferInt64.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8pynodegl_BufferInt64.tp_dictoffset && __pyx_type_8pynodegl_BufferInt64.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8pynodegl_BufferInt64.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_BufferInt64, (PyObject *)&__pyx_type_8pynodegl_BufferInt64) < 0) __PYX_ERR(0, 686, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8pynodegl_BufferInt64) < 0) __PYX_ERR(0, 686, __pyx_L1_error)
  __pyx_ptype_8pynodegl_BufferInt64 = &__pyx_type_8pynodegl_BufferInt64;
  __pyx_type_8pynodegl_BufferIVec2.tp_base = __pyx_ptype_8pynodegl__Buffer;
  if (PyType_Ready(&__pyx_type_8pynodegl_BufferIVec2) < 0) __PYX_ERR(0, 696, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8pynodegl_BufferIVec2.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8pynodegl_BufferIVec2.tp_dictoffset && __pyx_type_8pynodegl_BufferIVec2.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8pynodegl_BufferIVec2.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_BufferIVec2, (PyObject *)&__pyx_type_8pynodegl_BufferIVec2) < 0) __PYX_ERR(0, 696, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8pynodegl_BufferIVec2) < 0) __PYX_ERR(0, 696, __pyx_L1_error)
  __pyx_ptype_8pynodegl_BufferIVec2 = &__pyx_type_8pynodegl_BufferIVec2;
  __pyx_type_8pynodegl_BufferIVec3.tp_base = __pyx_ptype_8pynodegl__Buffer;
  if (PyType_Ready(&__pyx_type_8pynodegl_BufferIVec3) < 0) __PYX_ERR(0, 706, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8pynodegl_BufferIVec3.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8pynodegl_BufferIVec3.tp_dictoffset && __pyx_type_8pynodegl_BufferIVec3.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8pynodegl_BufferIVec3.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_BufferIVec3, (PyObject *)&__pyx_type_8pynodegl_BufferIVec3) < 0) __PYX_ERR(0, 706, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8pynodegl_BufferIVec3) < 0) __PYX_ERR(0, 706, __pyx_L1_error)
  __pyx_ptype_8pynodegl_BufferIVec3 = &__pyx_type_8pynodegl_BufferIVec3;
  __pyx_type_8pynodegl_BufferIVec4.tp_base = __pyx_ptype_8pynodegl__Buffer;
  if (PyType_Ready(&__pyx_type_8pynodegl_BufferIVec4) < 0) __PYX_ERR(0, 716, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8pynodegl_BufferIVec4.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8pynodegl_BufferIVec4.tp_dictoffset && __pyx_type_8pynodegl_BufferIVec4.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8pynodegl_BufferIVec4.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_BufferIVec4, (PyObject *)&__pyx_type_8pynodegl_BufferIVec4) < 0) __PYX_ERR(0, 716, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8pynodegl_BufferIVec4) < 0) __PYX_ERR(0, 716, __pyx_L1_error)
  __pyx_ptype_8pynodegl_BufferIVec4 = &__pyx_type_8pynodegl_BufferIVec4;
  __pyx_type_8pynodegl_BufferShort.tp_base = __pyx_ptype_8pynodegl__Buffer;
  if (PyType_Ready(&__pyx_type_8pynodegl_BufferShort) < 0) __PYX_ERR(0, 726, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8pynodegl_BufferShort.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8pynodegl_BufferShort.tp_dictoffset && __pyx_type_8pynodegl_BufferShort.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8pynodegl_BufferShort.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_BufferShort, (PyObject *)&__pyx_type_8pynodegl_BufferShort) < 0) __PYX_ERR(0, 726, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8pynodegl_BufferShort) < 0) __PYX_ERR(0, 726, __pyx_L1_error)
  __pyx_ptype_8pynodegl_BufferShort = &__pyx_type_8pynodegl_BufferShort;
  __pyx_type_8pynodegl_BufferSVec2.tp_base = __pyx_ptype_8pynodegl__Buffer;
  if (PyType_Ready(&__pyx_type_8pynodegl_BufferSVec2) < 0) __PYX_ERR(0, 736, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8pynodegl_BufferSVec2.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8pynodegl_BufferSVec2.tp_dictoffset && __pyx_type_8pynodegl_BufferSVec2.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8pynodegl_BufferSVec2.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_BufferSVec2, (PyObject *)&__pyx_type_8pynodegl_BufferSVec2) < 0) __PYX_ERR(0, 736, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8pynodegl_BufferSVec2) < 0) __PYX_ERR(0, 736, __pyx_L1_error)
  __pyx_ptype_8pynodegl_BufferSVec2 = &__pyx_type_8pynodegl_BufferSVec2;
  __pyx_type_8pynodegl_BufferSVec3.tp_base = __pyx_ptype_8pynodegl__Buffer;
  if (PyType_Ready(&__pyx_type_8pynodegl_BufferSVec3) < 0) __PYX_ERR(0, 746, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8pynodegl_BufferSVec3.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8pynodegl_BufferSVec3.tp_dictoffset && __pyx_type_8pynodegl_BufferSVec3.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8pynodegl_BufferSVec3.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_BufferSVec3, (PyObject *)&__pyx_type_8pynodegl_BufferSVec3) < 0) __PYX_ERR(0, 746, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8pynodegl_BufferSVec3) < 0) __PYX_ERR(0, 746, __pyx_L1_error)
  __pyx_ptype_8pynodegl_BufferSVec3 = &__pyx_type_8pynodegl_BufferSVec3;
  __pyx_type_8pynodegl_BufferSVec4.tp_base = __pyx_ptype_8pynodegl__Buffer;
  if (PyType_Ready(&__pyx_type_8pynodegl_BufferSVec4) < 0) __PYX_ERR(0, 756, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8pynodegl_BufferSVec4.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8pynodegl_BufferSVec4.tp_dictoffset && __pyx_type_8pynodegl_BufferSVec4.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8pynodegl_BufferSVec4.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_BufferSVec4, (PyObject *)&__pyx_type_8pynodegl_BufferSVec4) < 0) __PYX_ERR(0, 756, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8pynodegl_BufferSVec4) < 0) __PYX_ERR(0, 756, __pyx_L1_error)
  __pyx_ptype_8pynodegl_BufferSVec4 = &__pyx_type_8pynodegl_BufferSVec4;
  __pyx_type_8pynodegl_BufferUByte.tp_base = __pyx_ptype_8pynodegl__Buffer;
  if (PyType_Ready(&__pyx_type_8pynodegl_BufferUByte) < 0) __PYX_ERR(0, 766, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8pynodegl_BufferUByte.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8pynodegl_BufferUByte.tp_dictoffset && __pyx_type_8pynodegl_BufferUByte.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8pynodegl_BufferUByte.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_BufferUByte, (PyObject *)&__pyx_type_8pynodegl_BufferUByte) < 0) __PYX_ERR(0, 766, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8pynodegl_BufferUByte) < 0) __PYX_ERR(0, 766, __pyx_L1_error)
  __pyx_ptype_8pynodegl_BufferUByte = &__pyx_type_8pynodegl_BufferUByte;
  __pyx_type_8pynodegl_BufferUBVec2.tp_base = __pyx_ptype_8pynodegl__Buffer;
  if (PyType_Ready(&__pyx_type_8pynodegl_BufferUBVec2) < 0) __PYX_ERR(0, 776, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8pynodegl_BufferUBVec2.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8pynodegl_BufferUBVec2.tp_dictoffset && __pyx_type_8pynodegl_BufferUBVec2.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8pynodegl_BufferUBVec2.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_BufferUBVec2, (PyObject *)&__pyx_type_8pynodegl_BufferUBVec2) < 0) __PYX_ERR(0, 776, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8pynodegl_BufferUBVec2) < 0) __PYX_ERR(0, 776, __pyx_L1_error)
  __pyx_ptype_8pynodegl_BufferUBVec2 = &__pyx_type_8pynodegl_BufferUBVec2;
  __pyx_type_8pynodegl_BufferUBVec3.tp_base = __pyx_ptype_8pynodegl__Buffer;
  if (PyType_Ready(&__pyx_type_8pynodegl_BufferUBVec3) < 0) __PYX_ERR(0, 786, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8pynodegl_BufferUBVec3.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8pynodegl_BufferUBVec3.tp_dictoffset && __pyx_type_8pynodegl_BufferUBVec3.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8pynodegl_BufferUBVec3.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_BufferUBVec3, (PyObject *)&__pyx_type_8pynodegl_BufferUBVec3) < 0) __PYX_ERR(0, 786, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8pynodegl_BufferUBVec3) < 0) __PYX_ERR(0, 786, __pyx_L1_error)
  __pyx_ptype_8pynodegl_BufferUBVec3 = &__pyx_type_8pynodegl_BufferUBVec3;
  __pyx_type_8pynodegl_BufferUBVec4.tp_base = __pyx_ptype_8pynodegl__Buffer;
  if (PyType_Ready(&__pyx_type_8pynodegl_BufferUBVec4) < 0) __PYX_ERR(0, 796, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8pynodegl_BufferUBVec4.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8pynodegl_BufferUBVec4.tp_dictoffset && __pyx_type_8pynodegl_BufferUBVec4.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8pynodegl_BufferUBVec4.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_BufferUBVec4, (PyObject *)&__pyx_type_8pynodegl_BufferUBVec4) < 0) __PYX_ERR(0, 796, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8pynodegl_BufferUBVec4) < 0) __PYX_ERR(0, 796, __pyx_L1_error)
  __pyx_ptype_8pynodegl_BufferUBVec4 = &__pyx_type_8pynodegl_BufferUBVec4;
  __pyx_type_8pynodegl_BufferUInt.tp_base = __pyx_ptype_8pynodegl__Buffer;
  if (PyType_Ready(&__pyx_type_8pynodegl_BufferUInt) < 0) __PYX_ERR(0, 806, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8pynodegl_BufferUInt.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8pynodegl_BufferUInt.tp_dictoffset && __pyx_type_8pynodegl_BufferUInt.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8pynodegl_BufferUInt.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_BufferUInt, (PyObject *)&__pyx_type_8pynodegl_BufferUInt) < 0) __PYX_ERR(0, 806, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8pynodegl_BufferUInt) < 0) __PYX_ERR(0, 806, __pyx_L1_error)
  __pyx_ptype_8pynodegl_BufferUInt = &__pyx_type_8pynodegl_BufferUInt;
  __pyx_type_8pynodegl_BufferUIVec2.tp_base = __pyx_ptype_8pynodegl__Buffer;
  if (PyType_Ready(&__pyx_type_8pynodegl_BufferUIVec2) < 0) __PYX_ERR(0, 816, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8pynodegl_BufferUIVec2.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8pynodegl_BufferUIVec2.tp_dictoffset && __pyx_type_8pynodegl_BufferUIVec2.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8pynodegl_BufferUIVec2.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_BufferUIVec2, (PyObject *)&__pyx_type_8pynodegl_BufferUIVec2) < 0) __PYX_ERR(0, 816, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8pynodegl_BufferUIVec2) < 0) __PYX_ERR(0, 816, __pyx_L1_error)
  __pyx_ptype_8pynodegl_BufferUIVec2 = &__pyx_type_8pynodegl_BufferUIVec2;
  __pyx_type_8pynodegl_BufferUIVec3.tp_base = __pyx_ptype_8pynodegl__Buffer;
  if (PyType_Ready(&__pyx_type_8pynodegl_BufferUIVec3) < 0) __PYX_ERR(0, 826, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8pynodegl_BufferUIVec3.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8pynodegl_BufferUIVec3.tp_dictoffset && __pyx_type_8pynodegl_BufferUIVec3.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8pynodegl_BufferUIVec3.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_BufferUIVec3, (PyObject *)&__pyx_type_8pynodegl_BufferUIVec3) < 0) __PYX_ERR(0, 826, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8pynodegl_BufferUIVec3) < 0) __PYX_ERR(0, 826, __pyx_L1_error)
  __pyx_ptype_8pynodegl_BufferUIVec3 = &__pyx_type_8pynodegl_BufferUIVec3;
  __pyx_type_8pynodegl_BufferUIVec4.tp_base = __pyx_ptype_8pynodegl__Buffer;
  if (PyType_Ready(&__pyx_type_8pynodegl_BufferUIVec4) < 0) __PYX_ERR(0, 836, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8pynodegl_BufferUIVec4.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8pynodegl_BufferUIVec4.tp_dictoffset && __pyx_type_8pynodegl_BufferUIVec4.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8pynodegl_BufferUIVec4.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_BufferUIVec4, (PyObject *)&__pyx_type_8pynodegl_BufferUIVec4) < 0) __PYX_ERR(0, 836, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8pynodegl_BufferUIVec4) < 0) __PYX_ERR(0, 836, __pyx_L1_error)
  __pyx_ptype_8pynodegl_BufferUIVec4 = &__pyx_type_8pynodegl_BufferUIVec4;
  __pyx_type_8pynodegl_BufferUShort.tp_base = __pyx_ptype_8pynodegl__Buffer;
  if (PyType_Ready(&__pyx_type_8pynodegl_BufferUShort) < 0) __PYX_ERR(0, 846, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8pynodegl_BufferUShort.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8pynodegl_BufferUShort.tp_dictoffset && __pyx_type_8pynodegl_BufferUShort.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8pynodegl_BufferUShort.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_BufferUShort, (PyObject *)&__pyx_type_8pynodegl_BufferUShort) < 0) __PYX_ERR(0, 846, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8pynodegl_BufferUShort) < 0) __PYX_ERR(0, 846, __pyx_L1_error)
  __pyx_ptype_8pynodegl_BufferUShort = &__pyx_type_8pynodegl_BufferUShort;
  __pyx_type_8pynodegl_BufferUSVec2.tp_base = __pyx_ptype_8pynodegl__Buffer;
  if (PyType_Ready(&__pyx_type_8pynodegl_BufferUSVec2) < 0) __PYX_ERR(0, 856, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8pynodegl_BufferUSVec2.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8pynodegl_BufferUSVec2.tp_dictoffset && __pyx_type_8pynodegl_BufferUSVec2.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8pynodegl_BufferUSVec2.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_BufferUSVec2, (PyObject *)&__pyx_type_8pynodegl_BufferUSVec2) < 0) __PYX_ERR(0, 856, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8pynodegl_BufferUSVec2) < 0) __PYX_ERR(0, 856, __pyx_L1_error)
  __pyx_ptype_8pynodegl_BufferUSVec2 = &__pyx_type_8pynodegl_BufferUSVec2;
  __pyx_type_8pynodegl_BufferUSVec3.tp_base = __pyx_ptype_8pynodegl__Buffer;
  if (PyType_Ready(&__pyx_type_8pynodegl_BufferUSVec3) < 0) __PYX_ERR(0, 866, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8pynodegl_BufferUSVec3.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8pynodegl_BufferUSVec3.tp_dictoffset && __pyx_type_8pynodegl_BufferUSVec3.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8pynodegl_BufferUSVec3.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_BufferUSVec3, (PyObject *)&__pyx_type_8pynodegl_BufferUSVec3) < 0) __PYX_ERR(0, 866, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8pynodegl_BufferUSVec3) < 0) __PYX_ERR(0, 866, __pyx_L1_error)
  __pyx_ptype_8pynodegl_BufferUSVec3 = &__pyx_type_8pynodegl_BufferUSVec3;
  __pyx_type_8pynodegl_BufferUSVec4.tp_base = __pyx_ptype_8pynodegl__Buffer;
  if (PyType_Ready(&__pyx_type_8pynodegl_BufferUSVec4) < 0) __PYX_ERR(0, 876, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8pynodegl_BufferUSVec4.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8pynodegl_BufferUSVec4.tp_dictoffset && __pyx_type_8pynodegl_BufferUSVec4.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8pynodegl_BufferUSVec4.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_BufferUSVec4, (PyObject *)&__pyx_type_8pynodegl_BufferUSVec4) < 0) __PYX_ERR(0, 876, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8pynodegl_BufferUSVec4) < 0) __PYX_ERR(0, 876, __pyx_L1_error)
  __pyx_ptype_8pynodegl_BufferUSVec4 = &__pyx_type_8pynodegl_BufferUSVec4;
  __pyx_type_8pynodegl_BufferFloat.tp_base = __pyx_ptype_8pynodegl__Buffer;
  if (PyType_Ready(&__pyx_type_8pynodegl_BufferFloat) < 0) __PYX_ERR(0, 886, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8pynodegl_BufferFloat.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8pynodegl_BufferFloat.tp_dictoffset && __pyx_type_8pynodegl_BufferFloat.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8pynodegl_BufferFloat.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_BufferFloat, (PyObject *)&__pyx_type_8pynodegl_BufferFloat) < 0) __PYX_ERR(0, 886, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8pynodegl_BufferFloat) < 0) __PYX_ERR(0, 886, __pyx_L1_error)
  __pyx_ptype_8pynodegl_BufferFloat = &__pyx_type_8pynodegl_BufferFloat;
  __pyx_type_8pynodegl_BufferVec2.tp_base = __pyx_ptype_8pynodegl__Buffer;
  if (PyType_Ready(&__pyx_type_8pynodegl_BufferVec2) < 0) __PYX_ERR(0, 896, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8pynodegl_BufferVec2.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8pynodegl_BufferVec2.tp_dictoffset && __pyx_type_8pynodegl_BufferVec2.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8pynodegl_BufferVec2.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_BufferVec2, (PyObject *)&__pyx_type_8pynodegl_BufferVec2) < 0) __PYX_ERR(0, 896, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8pynodegl_BufferVec2) < 0) __PYX_ERR(0, 896, __pyx_L1_error)
  __pyx_ptype_8pynodegl_BufferVec2 = &__pyx_type_8pynodegl_BufferVec2;
  __pyx_type_8pynodegl_BufferVec3.tp_base = __pyx_ptype_8pynodegl__Buffer;
  if (PyType_Ready(&__pyx_type_8pynodegl_BufferVec3) < 0) __PYX_ERR(0, 906, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8pynodegl_BufferVec3.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8pynodegl_BufferVec3.tp_dictoffset && __pyx_type_8pynodegl_BufferVec3.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8pynodegl_BufferVec3.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_BufferVec3, (PyObject *)&__pyx_type_8pynodegl_BufferVec3) < 0) __PYX_ERR(0, 906, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8pynodegl_BufferVec3) < 0) __PYX_ERR(0, 906, __pyx_L1_error)
  __pyx_ptype_8pynodegl_BufferVec3 = &__pyx_type_8pynodegl_BufferVec3;
  __pyx_type_8pynodegl_BufferVec4.tp_base = __pyx_ptype_8pynodegl__Buffer;
  if (PyType_Ready(&__pyx_type_8pynodegl_BufferVec4) < 0) __PYX_ERR(0, 916, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8pynodegl_BufferVec4.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8pynodegl_BufferVec4.tp_dictoffset && __pyx_type_8pynodegl_BufferVec4.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8pynodegl_BufferVec4.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_BufferVec4, (PyObject *)&__pyx_type_8pynodegl_BufferVec4) < 0) __PYX_ERR(0, 916, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8pynodegl_BufferVec4) < 0) __PYX_ERR(0, 916, __pyx_L1_error)
  __pyx_ptype_8pynodegl_BufferVec4 = &__pyx_type_8pynodegl_BufferVec4;
  __pyx_type_8pynodegl_BufferMat4.tp_base = __pyx_ptype_8pynodegl__Buffer;
  if (PyType_Ready(&__pyx_type_8pynodegl_BufferMat4) < 0) __PYX_ERR(0, 926, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8pynodegl_BufferMat4.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8pynodegl_BufferMat4.tp_dictoffset && __pyx_type_8pynodegl_BufferMat4.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8pynodegl_BufferMat4.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_BufferMat4, (PyObject *)&__pyx_type_8pynodegl_BufferMat4) < 0) __PYX_ERR(0, 926, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8pynodegl_BufferMat4) < 0) __PYX_ERR(0, 926, __pyx_L1_error)
  __pyx_ptype_8pynodegl_BufferMat4 = &__pyx_type_8pynodegl_BufferMat4;
  __pyx_type_8pynodegl_Camera.tp_base = __pyx_ptype_8pynodegl__Node;
  if (PyType_Ready(&__pyx_type_8pynodegl_Camera) < 0) __PYX_ERR(0, 936, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8pynodegl_Camera.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8pynodegl_Camera.tp_dictoffset && __pyx_type_8pynodegl_Camera.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8pynodegl_Camera.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Camera, (PyObject *)&__pyx_type_8pynodegl_Camera) < 0) __PYX_ERR(0, 936, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8pynodegl_Camera) < 0) __PYX_ERR(0, 936, __pyx_L1_error)
  __pyx_ptype_8pynodegl_Camera = &__pyx_type_8pynodegl_Camera;
  __pyx_type_8pynodegl_Circle.tp_base = __pyx_ptype_8pynodegl__Node;
  if (PyType_Ready(&__pyx_type_8pynodegl_Circle) < 0) __PYX_ERR(0, 1047, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8pynodegl_Circle.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8pynodegl_Circle.tp_dictoffset && __pyx_type_8pynodegl_Circle.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8pynodegl_Circle.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Circle, (PyObject *)&__pyx_type_8pynodegl_Circle) < 0) __PYX_ERR(0, 1047, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8pynodegl_Circle) < 0) __PYX_ERR(0, 1047, __pyx_L1_error)
  __pyx_ptype_8pynodegl_Circle = &__pyx_type_8pynodegl_Circle;
  __pyx_type_8pynodegl_Compute.tp_base = __pyx_ptype_8pynodegl__Node;
  if (PyType_Ready(&__pyx_type_8pynodegl_Compute) < 0) __PYX_ERR(0, 1068, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8pynodegl_Compute.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8pynodegl_Compute.tp_dictoffset && __pyx_type_8pynodegl_Compute.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8pynodegl_Compute.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Compute, (PyObject *)&__pyx_type_8pynodegl_Compute) < 0) __PYX_ERR(0, 1068, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8pynodegl_Compute) < 0) __PYX_ERR(0, 1068, __pyx_L1_error)
  __pyx_ptype_8pynodegl_Compute = &__pyx_type_8pynodegl_Compute;
  __pyx_type_8pynodegl_ComputeProgram.tp_base = __pyx_ptype_8pynodegl__Node;
  if (PyType_Ready(&__pyx_type_8pynodegl_ComputeProgram) < 0) __PYX_ERR(0, 1096, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8pynodegl_ComputeProgram.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8pynodegl_ComputeProgram.tp_dictoffset && __pyx_type_8pynodegl_ComputeProgram.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8pynodegl_ComputeProgram.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_ComputeProgram, (PyObject *)&__pyx_type_8pynodegl_ComputeProgram) < 0) __PYX_ERR(0, 1096, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8pynodegl_ComputeProgram) < 0) __PYX_ERR(0, 1096, __pyx_L1_error)
  __pyx_ptype_8pynodegl_ComputeProgram = &__pyx_type_8pynodegl_ComputeProgram;
  __pyx_type_8pynodegl_Geometry.tp_base = __pyx_ptype_8pynodegl__Node;
  if (PyType_Ready(&__pyx_type_8pynodegl_Geometry) < 0) __PYX_ERR(0, 1107, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8pynodegl_Geometry.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8pynodegl_Geometry.tp_dictoffset && __pyx_type_8pynodegl_Geometry.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8pynodegl_Geometry.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Geometry, (PyObject *)&__pyx_type_8pynodegl_Geometry) < 0) __PYX_ERR(0, 1107, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8pynodegl_Geometry) < 0) __PYX_ERR(0, 1107, __pyx_L1_error)
  __pyx_ptype_8pynodegl_Geometry = &__pyx_type_8pynodegl_Geometry;
  __pyx_type_8pynodegl_GraphicConfig.tp_base = __pyx_ptype_8pynodegl__Node;
  if (PyType_Ready(&__pyx_type_8pynodegl_GraphicConfig) < 0) __PYX_ERR(0, 1140, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8pynodegl_GraphicConfig.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8pynodegl_GraphicConfig.tp_dictoffset && __pyx_type_8pynodegl_GraphicConfig.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8pynodegl_GraphicConfig.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_GraphicConfig, (PyObject *)&__pyx_type_8pynodegl_GraphicConfig) < 0) __PYX_ERR(0, 1140, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8pynodegl_GraphicConfig) < 0) __PYX_ERR(0, 1140, __pyx_L1_error)
  __pyx_ptype_8pynodegl_GraphicConfig = &__pyx_type_8pynodegl_GraphicConfig;
  __pyx_type_8pynodegl_Group.tp_base = __pyx_ptype_8pynodegl__Node;
  if (PyType_Ready(&__pyx_type_8pynodegl_Group) < 0) __PYX_ERR(0, 1276, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8pynodegl_Group.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8pynodegl_Group.tp_dictoffset && __pyx_type_8pynodegl_Group.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8pynodegl_Group.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Group, (PyObject *)&__pyx_type_8pynodegl_Group) < 0) __PYX_ERR(0, 1276, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8pynodegl_Group) < 0) __PYX_ERR(0, 1276, __pyx_L1_error)
  __pyx_ptype_8pynodegl_Group = &__pyx_type_8pynodegl_Group;
  __pyx_type_8pynodegl_HUD.tp_base = __pyx_ptype_8pynodegl__Node;
  if (PyType_Ready(&__pyx_type_8pynodegl_HUD) < 0) __PYX_ERR(0, 1292, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8pynodegl_HUD.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8pynodegl_HUD.tp_dictoffset && __pyx_type_8pynodegl_HUD.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8pynodegl_HUD.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_HUD, (PyObject *)&__pyx_type_8pynodegl_HUD) < 0) __PYX_ERR(0, 1292, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8pynodegl_HUD) < 0) __PYX_ERR(0, 1292, __pyx_L1_error)
  __pyx_ptype_8pynodegl_HUD = &__pyx_type_8pynodegl_HUD;
  __pyx_type_8pynodegl_Identity.tp_base = __pyx_ptype_8pynodegl__Node;
  if (PyType_Ready(&__pyx_type_8pynodegl_Identity) < 0) __PYX_ERR(0, 1344, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8pynodegl_Identity.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8pynodegl_Identity.tp_dictoffset && __pyx_type_8pynodegl_Identity.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8pynodegl_Identity.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Identity, (PyObject *)&__pyx_type_8pynodegl_Identity) < 0) __PYX_ERR(0, 1344, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8pynodegl_Identity) < 0) __PYX_ERR(0, 1344, __pyx_L1_error)
  __pyx_ptype_8pynodegl_Identity = &__pyx_type_8pynodegl_Identity;
  __pyx_type_8pynodegl_Media.tp_base = __pyx_ptype_8pynodegl__Node;
  if (PyType_Ready(&__pyx_type_8pynodegl_Media) < 0) __PYX_ERR(0, 1355, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8pynodegl_Media.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8pynodegl_Media.tp_dictoffset && __pyx_type_8pynodegl_Media.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8pynodegl_Media.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Media, (PyObject *)&__pyx_type_8pynodegl_Media) < 0) __PYX_ERR(0, 1355, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8pynodegl_Media) < 0) __PYX_ERR(0, 1355, __pyx_L1_error)
  __pyx_ptype_8pynodegl_Media = &__pyx_type_8pynodegl_Media;
  __pyx_type_8pynodegl_Program.tp_base = __pyx_ptype_8pynodegl__Node;
  if (PyType_Ready(&__pyx_type_8pynodegl_Program) < 0) __PYX_ERR(0, 1406, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8pynodegl_Program.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8pynodegl_Program.tp_dictoffset && __pyx_type_8pynodegl_Program.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8pynodegl_Program.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Program, (PyObject *)&__pyx_type_8pynodegl_Program) < 0) __PYX_ERR(0, 1406, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8pynodegl_Program) < 0) __PYX_ERR(0, 1406, __pyx_L1_error)
  __pyx_ptype_8pynodegl_Program = &__pyx_type_8pynodegl_Program;
  __pyx_type_8pynodegl_Quad.tp_base = __pyx_ptype_8pynodegl__Node;
  if (PyType_Ready(&__pyx_type_8pynodegl_Quad) < 0) __PYX_ERR(0, 1427, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8pynodegl_Quad.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8pynodegl_Quad.tp_dictoffset && __pyx_type_8pynodegl_Quad.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8pynodegl_Quad.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Quad, (PyObject *)&__pyx_type_8pynodegl_Quad) < 0) __PYX_ERR(0, 1427, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8pynodegl_Quad) < 0) __PYX_ERR(0, 1427, __pyx_L1_error)
  __pyx_ptype_8pynodegl_Quad = &__pyx_type_8pynodegl_Quad;
  __pyx_type_8pynodegl_Render.tp_base = __pyx_ptype_8pynodegl__Node;
  if (PyType_Ready(&__pyx_type_8pynodegl_Render) < 0) __PYX_ERR(0, 1516, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8pynodegl_Render.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8pynodegl_Render.tp_dictoffset && __pyx_type_8pynodegl_Render.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8pynodegl_Render.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Render, (PyObject *)&__pyx_type_8pynodegl_Render) < 0) __PYX_ERR(0, 1516, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8pynodegl_Render) < 0) __PYX_ERR(0, 1516, __pyx_L1_error)
  __pyx_ptype_8pynodegl_Render = &__pyx_type_8pynodegl_Render;
  __pyx_type_8pynodegl_RenderToTexture.tp_base = __pyx_ptype_8pynodegl__Node;
  if (PyType_Ready(&__pyx_type_8pynodegl_RenderToTexture) < 0) __PYX_ERR(0, 1564, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8pynodegl_RenderToTexture.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8pynodegl_RenderToTexture.tp_dictoffset && __pyx_type_8pynodegl_RenderToTexture.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8pynodegl_RenderToTexture.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_RenderToTexture, (PyObject *)&__pyx_type_8pynodegl_RenderToTexture) < 0) __PYX_ERR(0, 1564, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8pynodegl_RenderToTexture) < 0) __PYX_ERR(0, 1564, __pyx_L1_error)
  __pyx_ptype_8pynodegl_RenderToTexture = &__pyx_type_8pynodegl_RenderToTexture;
  __pyx_type_8pynodegl_Rotate.tp_base = __pyx_ptype_8pynodegl__Node;
  if (PyType_Ready(&__pyx_type_8pynodegl_Rotate) < 0) __PYX_ERR(0, 1615, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8pynodegl_Rotate.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8pynodegl_Rotate.tp_dictoffset && __pyx_type_8pynodegl_Rotate.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8pynodegl_Rotate.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Rotate, (PyObject *)&__pyx_type_8pynodegl_Rotate) < 0) __PYX_ERR(0, 1615, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8pynodegl_Rotate) < 0) __PYX_ERR(0, 1615, __pyx_L1_error)
  __pyx_ptype_8pynodegl_Rotate = &__pyx_type_8pynodegl_Rotate;
  __pyx_type_8pynodegl_RotateQuat.tp_base = __pyx_ptype_8pynodegl__Node;
  if (PyType_Ready(&__pyx_type_8pynodegl_RotateQuat) < 0) __PYX_ERR(0, 1664, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8pynodegl_RotateQuat.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8pynodegl_RotateQuat.tp_dictoffset && __pyx_type_8pynodegl_RotateQuat.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8pynodegl_RotateQuat.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_RotateQuat, (PyObject *)&__pyx_type_8pynodegl_RotateQuat) < 0) __PYX_ERR(0, 1664, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8pynodegl_RotateQuat) < 0) __PYX_ERR(0, 1664, __pyx_L1_error)
  __pyx_ptype_8pynodegl_RotateQuat = &__pyx_type_8pynodegl_RotateQuat;
  __pyx_type_8pynodegl_Scale.tp_base = __pyx_ptype_8pynodegl__Node;
  if (PyType_Ready(&__pyx_type_8pynodegl_Scale) < 0) __PYX_ERR(0, 1708, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8pynodegl_Scale.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8pynodegl_Scale.tp_dictoffset && __pyx_type_8pynodegl_Scale.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8pynodegl_Scale.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Scale, (PyObject *)&__pyx_type_8pynodegl_Scale) < 0) __PYX_ERR(0, 1708, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8pynodegl_Scale) < 0) __PYX_ERR(0, 1708, __pyx_L1_error)
  __pyx_ptype_8pynodegl_Scale = &__pyx_type_8pynodegl_Scale;
  __pyx_type_8pynodegl_Text.tp_base = __pyx_ptype_8pynodegl__Node;
  if (PyType_Ready(&__pyx_type_8pynodegl_Text) < 0) __PYX_ERR(0, 1752, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8pynodegl_Text.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8pynodegl_Text.tp_dictoffset && __pyx_type_8pynodegl_Text.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8pynodegl_Text.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Text, (PyObject *)&__pyx_type_8pynodegl_Text) < 0) __PYX_ERR(0, 1752, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8pynodegl_Text) < 0) __PYX_ERR(0, 1752, __pyx_L1_error)
  __pyx_ptype_8pynodegl_Text = &__pyx_type_8pynodegl_Text;
  __pyx_type_8pynodegl_Texture2D.tp_base = __pyx_ptype_8pynodegl__Node;
  if (PyType_Ready(&__pyx_type_8pynodegl_Texture2D) < 0) __PYX_ERR(0, 1871, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8pynodegl_Texture2D.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8pynodegl_Texture2D.tp_dictoffset && __pyx_type_8pynodegl_Texture2D.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8pynodegl_Texture2D.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Texture2D, (PyObject *)&__pyx_type_8pynodegl_Texture2D) < 0) __PYX_ERR(0, 1871, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8pynodegl_Texture2D) < 0) __PYX_ERR(0, 1871, __pyx_L1_error)
  __pyx_ptype_8pynodegl_Texture2D = &__pyx_type_8pynodegl_Texture2D;
  __pyx_type_8pynodegl_Texture3D.tp_base = __pyx_ptype_8pynodegl__Node;
  if (PyType_Ready(&__pyx_type_8pynodegl_Texture3D) < 0) __PYX_ERR(0, 1937, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8pynodegl_Texture3D.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8pynodegl_Texture3D.tp_dictoffset && __pyx_type_8pynodegl_Texture3D.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8pynodegl_Texture3D.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Texture3D, (PyObject *)&__pyx_type_8pynodegl_Texture3D) < 0) __PYX_ERR(0, 1937, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8pynodegl_Texture3D) < 0) __PYX_ERR(0, 1937, __pyx_L1_error)
  __pyx_ptype_8pynodegl_Texture3D = &__pyx_type_8pynodegl_Texture3D;
  __pyx_type_8pynodegl_TextureCube.tp_base = __pyx_ptype_8pynodegl__Node;
  if (PyType_Ready(&__pyx_type_8pynodegl_TextureCube) < 0) __PYX_ERR(0, 2008, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8pynodegl_TextureCube.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8pynodegl_TextureCube.tp_dictoffset && __pyx_type_8pynodegl_TextureCube.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8pynodegl_TextureCube.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_TextureCube, (PyObject *)&__pyx_type_8pynodegl_TextureCube) < 0) __PYX_ERR(0, 2008, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8pynodegl_TextureCube) < 0) __PYX_ERR(0, 2008, __pyx_L1_error)
  __pyx_ptype_8pynodegl_TextureCube = &__pyx_type_8pynodegl_TextureCube;
  __pyx_type_8pynodegl_TimeRangeFilter.tp_base = __pyx_ptype_8pynodegl__Node;
  if (PyType_Ready(&__pyx_type_8pynodegl_TimeRangeFilter) < 0) __PYX_ERR(0, 2069, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8pynodegl_TimeRangeFilter.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8pynodegl_TimeRangeFilter.tp_dictoffset && __pyx_type_8pynodegl_TimeRangeFilter.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8pynodegl_TimeRangeFilter.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_TimeRangeFilter, (PyObject *)&__pyx_type_8pynodegl_TimeRangeFilter) < 0) __PYX_ERR(0, 2069, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8pynodegl_TimeRangeFilter) < 0) __PYX_ERR(0, 2069, __pyx_L1_error)
  __pyx_ptype_8pynodegl_TimeRangeFilter = &__pyx_type_8pynodegl_TimeRangeFilter;
  __pyx_type_8pynodegl_TimeRangeModeCont.tp_base = __pyx_ptype_8pynodegl__Node;
  if (PyType_Ready(&__pyx_type_8pynodegl_TimeRangeModeCont) < 0) __PYX_ERR(0, 2097, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8pynodegl_TimeRangeModeCont.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8pynodegl_TimeRangeModeCont.tp_dictoffset && __pyx_type_8pynodegl_TimeRangeModeCont.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8pynodegl_TimeRangeModeCont.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_TimeRangeModeCont, (PyObject *)&__pyx_type_8pynodegl_TimeRangeModeCont) < 0) __PYX_ERR(0, 2097, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8pynodegl_TimeRangeModeCont) < 0) __PYX_ERR(0, 2097, __pyx_L1_error)
  __pyx_ptype_8pynodegl_TimeRangeModeCont = &__pyx_type_8pynodegl_TimeRangeModeCont;
  __pyx_type_8pynodegl_TimeRangeModeNoop.tp_base = __pyx_ptype_8pynodegl__Node;
  if (PyType_Ready(&__pyx_type_8pynodegl_TimeRangeModeNoop) < 0) __PYX_ERR(0, 2108, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8pynodegl_TimeRangeModeNoop.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8pynodegl_TimeRangeModeNoop.tp_dictoffset && __pyx_type_8pynodegl_TimeRangeModeNoop.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8pynodegl_TimeRangeModeNoop.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_TimeRangeModeNoop, (PyObject *)&__pyx_type_8pynodegl_TimeRangeModeNoop) < 0) __PYX_ERR(0, 2108, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8pynodegl_TimeRangeModeNoop) < 0) __PYX_ERR(0, 2108, __pyx_L1_error)
  __pyx_ptype_8pynodegl_TimeRangeModeNoop = &__pyx_type_8pynodegl_TimeRangeModeNoop;
  __pyx_type_8pynodegl_TimeRangeModeOnce.tp_base = __pyx_ptype_8pynodegl__Node;
  if (PyType_Ready(&__pyx_type_8pynodegl_TimeRangeModeOnce) < 0) __PYX_ERR(0, 2119, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8pynodegl_TimeRangeModeOnce.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8pynodegl_TimeRangeModeOnce.tp_dictoffset && __pyx_type_8pynodegl_TimeRangeModeOnce.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8pynodegl_TimeRangeModeOnce.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_TimeRangeModeOnce, (PyObject *)&__pyx_type_8pynodegl_TimeRangeModeOnce) < 0) __PYX_ERR(0, 2119, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8pynodegl_TimeRangeModeOnce) < 0) __PYX_ERR(0, 2119, __pyx_L1_error)
  __pyx_ptype_8pynodegl_TimeRangeModeOnce = &__pyx_type_8pynodegl_TimeRangeModeOnce;
  __pyx_type_8pynodegl_Transform.tp_base = __pyx_ptype_8pynodegl__Node;
  if (PyType_Ready(&__pyx_type_8pynodegl_Transform) < 0) __PYX_ERR(0, 2130, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8pynodegl_Transform.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8pynodegl_Transform.tp_dictoffset && __pyx_type_8pynodegl_Transform.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8pynodegl_Transform.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Transform, (PyObject *)&__pyx_type_8pynodegl_Transform) < 0) __PYX_ERR(0, 2130, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8pynodegl_Transform) < 0) __PYX_ERR(0, 2130, __pyx_L1_error)
  __pyx_ptype_8pynodegl_Transform = &__pyx_type_8pynodegl_Transform;
  __pyx_type_8pynodegl_Translate.tp_base = __pyx_ptype_8pynodegl__Node;
  if (PyType_Ready(&__pyx_type_8pynodegl_Translate) < 0) __PYX_ERR(0, 2156, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8pynodegl_Translate.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8pynodegl_Translate.tp_dictoffset && __pyx_type_8pynodegl_Translate.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8pynodegl_Translate.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Translate, (PyObject *)&__pyx_type_8pynodegl_Translate) < 0) __PYX_ERR(0, 2156, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8pynodegl_Translate) < 0) __PYX_ERR(0, 2156, __pyx_L1_error)
  __pyx_ptype_8pynodegl_Translate = &__pyx_type_8pynodegl_Translate;
  __pyx_type_8pynodegl_Triangle.tp_base = __pyx_ptype_8pynodegl__Node;
  if (PyType_Ready(&__pyx_type_8pynodegl_Triangle) < 0) __PYX_ERR(0, 2187, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8pynodegl_Triangle.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8pynodegl_Triangle.tp_dictoffset && __pyx_type_8pynodegl_Triangle.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8pynodegl_Triangle.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Triangle, (PyObject *)&__pyx_type_8pynodegl_Triangle) < 0) __PYX_ERR(0, 2187, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8pynodegl_Triangle) < 0) __PYX_ERR(0, 2187, __pyx_L1_error)
  __pyx_ptype_8pynodegl_Triangle = &__pyx_type_8pynodegl_Triangle;
  __pyx_type_8pynodegl_StreamedInt.tp_base = __pyx_ptype_8pynodegl__Node;
  if (PyType_Ready(&__pyx_type_8pynodegl_StreamedInt) < 0) __PYX_ERR(0, 2261, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8pynodegl_StreamedInt.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8pynodegl_StreamedInt.tp_dictoffset && __pyx_type_8pynodegl_StreamedInt.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8pynodegl_StreamedInt.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_StreamedInt, (PyObject *)&__pyx_type_8pynodegl_StreamedInt) < 0) __PYX_ERR(0, 2261, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8pynodegl_StreamedInt) < 0) __PYX_ERR(0, 2261, __pyx_L1_error)
  __pyx_ptype_8pynodegl_StreamedInt = &__pyx_type_8pynodegl_StreamedInt;
  __pyx_type_8pynodegl_StreamedFloat.tp_base = __pyx_ptype_8pynodegl__Node;
  if (PyType_Ready(&__pyx_type_8pynodegl_StreamedFloat) < 0) __PYX_ERR(0, 2289, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8pynodegl_StreamedFloat.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8pynodegl_StreamedFloat.tp_dictoffset && __pyx_type_8pynodegl_StreamedFloat.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8pynodegl_StreamedFloat.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_StreamedFloat, (PyObject *)&__pyx_type_8pynodegl_StreamedFloat) < 0) __PYX_ERR(0, 2289, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8pynodegl_StreamedFloat) < 0) __PYX_ERR(0, 2289, __pyx_L1_error)
  __pyx_ptype_8pynodegl_StreamedFloat = &__pyx_type_8pynodegl_StreamedFloat;
  __pyx_type_8pynodegl_StreamedVec2.tp_base = __pyx_ptype_8pynodegl__Node;
  if (PyType_Ready(&__pyx_type_8pynodegl_StreamedVec2) < 0) __PYX_ERR(0, 2317, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8pynodegl_StreamedVec2.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8pynodegl_StreamedVec2.tp_dictoffset && __pyx_type_8pynodegl_StreamedVec2.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8pynodegl_StreamedVec2.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_StreamedVec2, (PyObject *)&__pyx_type_8pynodegl_StreamedVec2) < 0) __PYX_ERR(0, 2317, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8pynodegl_StreamedVec2) < 0) __PYX_ERR(0, 2317, __pyx_L1_error)
  __pyx_ptype_8pynodegl_StreamedVec2 = &__pyx_type_8pynodegl_StreamedVec2;
  __pyx_type_8pynodegl_StreamedVec3.tp_base = __pyx_ptype_8pynodegl__Node;
  if (PyType_Ready(&__pyx_type_8pynodegl_StreamedVec3) < 0) __PYX_ERR(0, 2345, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8pynodegl_StreamedVec3.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8pynodegl_StreamedVec3.tp_dictoffset && __pyx_type_8pynodegl_StreamedVec3.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8pynodegl_StreamedVec3.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_StreamedVec3, (PyObject *)&__pyx_type_8pynodegl_StreamedVec3) < 0) __PYX_ERR(0, 2345, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8pynodegl_StreamedVec3) < 0) __PYX_ERR(0, 2345, __pyx_L1_error)
  __pyx_ptype_8pynodegl_StreamedVec3 = &__pyx_type_8pynodegl_StreamedVec3;
  __pyx_type_8pynodegl_StreamedVec4.tp_base = __pyx_ptype_8pynodegl__Node;
  if (PyType_Ready(&__pyx_type_8pynodegl_StreamedVec4) < 0) __PYX_ERR(0, 2373, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8pynodegl_StreamedVec4.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8pynodegl_StreamedVec4.tp_dictoffset && __pyx_type_8pynodegl_StreamedVec4.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8pynodegl_StreamedVec4.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_StreamedVec4, (PyObject *)&__pyx_type_8pynodegl_StreamedVec4) < 0) __PYX_ERR(0, 2373, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8pynodegl_StreamedVec4) < 0) __PYX_ERR(0, 2373, __pyx_L1_error)
  __pyx_ptype_8pynodegl_StreamedVec4 = &__pyx_type_8pynodegl_StreamedVec4;
  __pyx_type_8pynodegl_StreamedMat4.tp_base = __pyx_ptype_8pynodegl__Node;
  if (PyType_Ready(&__pyx_type_8pynodegl_StreamedMat4) < 0) __PYX_ERR(0, 2401, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8pynodegl_StreamedMat4.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8pynodegl_StreamedMat4.tp_dictoffset && __pyx_type_8pynodegl_StreamedMat4.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8pynodegl_StreamedMat4.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_StreamedMat4, (PyObject *)&__pyx_type_8pynodegl_StreamedMat4) < 0) __PYX_ERR(0, 2401, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8pynodegl_StreamedMat4) < 0) __PYX_ERR(0, 2401, __pyx_L1_error)
  __pyx_ptype_8pynodegl_StreamedMat4 = &__pyx_type_8pynodegl_StreamedMat4;
  __pyx_type_8pynodegl_StreamedBufferInt.tp_base = __pyx_ptype_8pynodegl__Node;
  if (PyType_Ready(&__pyx_type_8pynodegl_StreamedBufferInt) < 0) __PYX_ERR(0, 2429, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8pynodegl_StreamedBufferInt.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8pynodegl_StreamedBufferInt.tp_dictoffset && __pyx_type_8pynodegl_StreamedBufferInt.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8pynodegl_StreamedBufferInt.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_StreamedBufferInt, (PyObject *)&__pyx_type_8pynodegl_StreamedBufferInt) < 0) __PYX_ERR(0, 2429, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8pynodegl_StreamedBufferInt) < 0) __PYX_ERR(0, 2429, __pyx_L1_error)
  __pyx_ptype_8pynodegl_StreamedBufferInt = &__pyx_type_8pynodegl_StreamedBufferInt;
  __pyx_type_8pynodegl_StreamedBufferFloat.tp_base = __pyx_ptype_8pynodegl__Node;
  if (PyType_Ready(&__pyx_type_8pynodegl_StreamedBufferFloat) < 0) __PYX_ERR(0, 2457, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8pynodegl_StreamedBufferFloat.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8pynodegl_StreamedBufferFloat.tp_dictoffset && __pyx_type_8pynodegl_StreamedBufferFloat.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8pynodegl_StreamedBufferFloat.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_StreamedBufferFloat, (PyObject *)&__pyx_type_8pynodegl_StreamedBufferFloat) < 0) __PYX_ERR(0, 2457, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8pynodegl_StreamedBufferFloat) < 0) __PYX_ERR(0, 2457, __pyx_L1_error)
  __pyx_ptype_8pynodegl_StreamedBufferFloat = &__pyx_type_8pynodegl_StreamedBufferFloat;
  __pyx_type_8pynodegl_StreamedBufferVec2.tp_base = __pyx_ptype_8pynodegl__Node;
  if (PyType_Ready(&__pyx_type_8pynodegl_StreamedBufferVec2) < 0) __PYX_ERR(0, 2485, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8pynodegl_StreamedBufferVec2.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8pynodegl_StreamedBufferVec2.tp_dictoffset && __pyx_type_8pynodegl_StreamedBufferVec2.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8pynodegl_StreamedBufferVec2.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_StreamedBufferVec2, (PyObject *)&__pyx_type_8pynodegl_StreamedBufferVec2) < 0) __PYX_ERR(0, 2485, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8pynodegl_StreamedBufferVec2) < 0) __PYX_ERR(0, 2485, __pyx_L1_error)
  __pyx_ptype_8pynodegl_StreamedBufferVec2 = &__pyx_type_8pynodegl_StreamedBufferVec2;
  __pyx_type_8pynodegl_StreamedBufferVec3.tp_base = __pyx_ptype_8pynodegl__Node;
  if (PyType_Ready(&__pyx_type_8pynodegl_StreamedBufferVec3) < 0) __PYX_ERR(0, 2513, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8pynodegl_StreamedBufferVec3.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8pynodegl_StreamedBufferVec3.tp_dictoffset && __pyx_type_8pynodegl_StreamedBufferVec3.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8pynodegl_StreamedBufferVec3.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_StreamedBufferVec3, (PyObject *)&__pyx_type_8pynodegl_StreamedBufferVec3) < 0) __PYX_ERR(0, 2513, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8pynodegl_StreamedBufferVec3) < 0) __PYX_ERR(0, 2513, __pyx_L1_error)
  __pyx_ptype_8pynodegl_StreamedBufferVec3 = &__pyx_type_8pynodegl_StreamedBufferVec3;
  __pyx_type_8pynodegl_StreamedBufferVec4.tp_base = __pyx_ptype_8pynodegl__Node;
  if (PyType_Ready(&__pyx_type_8pynodegl_StreamedBufferVec4) < 0) __PYX_ERR(0, 2541, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8pynodegl_StreamedBufferVec4.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8pynodegl_StreamedBufferVec4.tp_dictoffset && __pyx_type_8pynodegl_StreamedBufferVec4.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8pynodegl_StreamedBufferVec4.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_StreamedBufferVec4, (PyObject *)&__pyx_type_8pynodegl_StreamedBufferVec4) < 0) __PYX_ERR(0, 2541, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8pynodegl_StreamedBufferVec4) < 0) __PYX_ERR(0, 2541, __pyx_L1_error)
  __pyx_ptype_8pynodegl_StreamedBufferVec4 = &__pyx_type_8pynodegl_StreamedBufferVec4;
  __pyx_type_8pynodegl_StreamedBufferMat4.tp_base = __pyx_ptype_8pynodegl__Node;
  if (PyType_Ready(&__pyx_type_8pynodegl_StreamedBufferMat4) < 0) __PYX_ERR(0, 2569, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8pynodegl_StreamedBufferMat4.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8pynodegl_StreamedBufferMat4.tp_dictoffset && __pyx_type_8pynodegl_StreamedBufferMat4.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8pynodegl_StreamedBufferMat4.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_StreamedBufferMat4, (PyObject *)&__pyx_type_8pynodegl_StreamedBufferMat4) < 0) __PYX_ERR(0, 2569, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8pynodegl_StreamedBufferMat4) < 0) __PYX_ERR(0, 2569, __pyx_L1_error)
  __pyx_ptype_8pynodegl_StreamedBufferMat4 = &__pyx_type_8pynodegl_StreamedBufferMat4;
  __pyx_type_8pynodegl_UniformInt.tp_base = __pyx_ptype_8pynodegl__Node;
  if (PyType_Ready(&__pyx_type_8pynodegl_UniformInt) < 0) __PYX_ERR(0, 2597, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8pynodegl_UniformInt.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8pynodegl_UniformInt.tp_dictoffset && __pyx_type_8pynodegl_UniformInt.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8pynodegl_UniformInt.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_UniformInt, (PyObject *)&__pyx_type_8pynodegl_UniformInt) < 0) __PYX_ERR(0, 2597, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8pynodegl_UniformInt) < 0) __PYX_ERR(0, 2597, __pyx_L1_error)
  __pyx_ptype_8pynodegl_UniformInt = &__pyx_type_8pynodegl_UniformInt;
  __pyx_type_8pynodegl_UniformMat4.tp_base = __pyx_ptype_8pynodegl__Node;
  if (PyType_Ready(&__pyx_type_8pynodegl_UniformMat4) < 0) __PYX_ERR(0, 2613, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8pynodegl_UniformMat4.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8pynodegl_UniformMat4.tp_dictoffset && __pyx_type_8pynodegl_UniformMat4.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8pynodegl_UniformMat4.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_UniformMat4, (PyObject *)&__pyx_type_8pynodegl_UniformMat4) < 0) __PYX_ERR(0, 2613, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8pynodegl_UniformMat4) < 0) __PYX_ERR(0, 2613, __pyx_L1_error)
  __pyx_ptype_8pynodegl_UniformMat4 = &__pyx_type_8pynodegl_UniformMat4;
  __pyx_type_8pynodegl_UniformFloat.tp_base = __pyx_ptype_8pynodegl__Node;
  if (PyType_Ready(&__pyx_type_8pynodegl_UniformFloat) < 0) __PYX_ERR(0, 2642, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8pynodegl_UniformFloat.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8pynodegl_UniformFloat.tp_dictoffset && __pyx_type_8pynodegl_UniformFloat.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8pynodegl_UniformFloat.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_UniformFloat, (PyObject *)&__pyx_type_8pynodegl_UniformFloat) < 0) __PYX_ERR(0, 2642, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8pynodegl_UniformFloat) < 0) __PYX_ERR(0, 2642, __pyx_L1_error)
  __pyx_ptype_8pynodegl_UniformFloat = &__pyx_type_8pynodegl_UniformFloat;
  __pyx_type_8pynodegl_UniformVec2.tp_base = __pyx_ptype_8pynodegl__Node;
  if (PyType_Ready(&__pyx_type_8pynodegl_UniformVec2) < 0) __PYX_ERR(0, 2658, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8pynodegl_UniformVec2.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8pynodegl_UniformVec2.tp_dictoffset && __pyx_type_8pynodegl_UniformVec2.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8pynodegl_UniformVec2.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_UniformVec2, (PyObject *)&__pyx_type_8pynodegl_UniformVec2) < 0) __PYX_ERR(0, 2658, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8pynodegl_UniformVec2) < 0) __PYX_ERR(0, 2658, __pyx_L1_error)
  __pyx_ptype_8pynodegl_UniformVec2 = &__pyx_type_8pynodegl_UniformVec2;
  __pyx_type_8pynodegl_UniformVec3.tp_base = __pyx_ptype_8pynodegl__Node;
  if (PyType_Ready(&__pyx_type_8pynodegl_UniformVec3) < 0) __PYX_ERR(0, 2682, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8pynodegl_UniformVec3.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8pynodegl_UniformVec3.tp_dictoffset && __pyx_type_8pynodegl_UniformVec3.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8pynodegl_UniformVec3.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_UniformVec3, (PyObject *)&__pyx_type_8pynodegl_UniformVec3) < 0) __PYX_ERR(0, 2682, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8pynodegl_UniformVec3) < 0) __PYX_ERR(0, 2682, __pyx_L1_error)
  __pyx_ptype_8pynodegl_UniformVec3 = &__pyx_type_8pynodegl_UniformVec3;
  __pyx_type_8pynodegl_UniformVec4.tp_base = __pyx_ptype_8pynodegl__Node;
  if (PyType_Ready(&__pyx_type_8pynodegl_UniformVec4) < 0) __PYX_ERR(0, 2706, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8pynodegl_UniformVec4.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8pynodegl_UniformVec4.tp_dictoffset && __pyx_type_8pynodegl_UniformVec4.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8pynodegl_UniformVec4.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_UniformVec4, (PyObject *)&__pyx_type_8pynodegl_UniformVec4) < 0) __PYX_ERR(0, 2706, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8pynodegl_UniformVec4) < 0) __PYX_ERR(0, 2706, __pyx_L1_error)
  __pyx_ptype_8pynodegl_UniformVec4 = &__pyx_type_8pynodegl_UniformVec4;
  __pyx_type_8pynodegl_UniformQuat.tp_base = __pyx_ptype_8pynodegl__Node;
  if (PyType_Ready(&__pyx_type_8pynodegl_UniformQuat) < 0) __PYX_ERR(0, 2730, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8pynodegl_UniformQuat.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8pynodegl_UniformQuat.tp_dictoffset && __pyx_type_8pynodegl_UniformQuat.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8pynodegl_UniformQuat.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_UniformQuat, (PyObject *)&__pyx_type_8pynodegl_UniformQuat) < 0) __PYX_ERR(0, 2730, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8pynodegl_UniformQuat) < 0) __PYX_ERR(0, 2730, __pyx_L1_error)
  __pyx_ptype_8pynodegl_UniformQuat = &__pyx_type_8pynodegl_UniformQuat;
  __pyx_type_8pynodegl_UserSwitch.tp_base = __pyx_ptype_8pynodegl__Node;
  if (PyType_Ready(&__pyx_type_8pynodegl_UserSwitch) < 0) __PYX_ERR(0, 2759, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8pynodegl_UserSwitch.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8pynodegl_UserSwitch.tp_dictoffset && __pyx_type_8pynodegl_UserSwitch.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8pynodegl_UserSwitch.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_UserSwitch, (PyObject *)&__pyx_type_8pynodegl_UserSwitch) < 0) __PYX_ERR(0, 2759, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8pynodegl_UserSwitch) < 0) __PYX_ERR(0, 2759, __pyx_L1_error)
  __pyx_ptype_8pynodegl_UserSwitch = &__pyx_type_8pynodegl_UserSwitch;
  if (PyType_Ready(&__pyx_type_8pynodegl_Viewer) < 0) __PYX_ERR(1, 169, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_8pynodegl_Viewer.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_8pynodegl_Viewer.tp_dictoffset && __pyx_type_8pynodegl_Viewer.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_8pynodegl_Viewer.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Viewer, (PyObject *)&__pyx_type_8pynodegl_Viewer) < 0) __PYX_ERR(1, 169, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_8pynodegl_Viewer) < 0) __PYX_ERR(1, 169, __pyx_L1_error)
  __pyx_ptype_8pynodegl_Viewer = &__pyx_type_8pynodegl_Viewer;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_type_import_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __pyx_t_1 = PyImport_ImportModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 9, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7cpython_4type_type = __Pyx_ImportType(__pyx_t_1, __Pyx_BUILTIN_MODULE_NAME, "type", 
  #if defined(PYPY_VERSION_NUM) && PYPY_VERSION_NUM < 0x050B0000
  sizeof(PyTypeObject),
  #else
  sizeof(PyHeapTypeObject),
  #endif
  __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7cpython_4type_type) __PYX_ERR(4, 9, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 8, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7cpython_4bool_bool = __Pyx_ImportType(__pyx_t_1, __Pyx_BUILTIN_MODULE_NAME, "bool", sizeof(PyBoolObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7cpython_4bool_bool) __PYX_ERR(5, 8, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 15, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7cpython_7complex_complex = __Pyx_ImportType(__pyx_t_1, __Pyx_BUILTIN_MODULE_NAME, "complex", sizeof(PyComplexObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7cpython_7complex_complex) __PYX_ERR(6, 15, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("array"); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 58, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7cpython_5array_array = __Pyx_ImportType(__pyx_t_1, "array", "array", sizeof(arrayobject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7cpython_5array_array) __PYX_ERR(3, 58, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_variable_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}


#if PY_MAJOR_VERSION < 3
#ifdef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC void
#else
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#endif
#else
#ifdef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC PyObject *
#else
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#endif
#endif


#if PY_MAJOR_VERSION < 3
__Pyx_PyMODINIT_FUNC initpynodegl(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC initpynodegl(void)
#else
__Pyx_PyMODINIT_FUNC PyInit_pynodegl(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit_pynodegl(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static CYTHON_SMALL_CODE int __Pyx_check_single_interpreter(void) {
    #if PY_VERSION_HEX >= 0x030700A1
    static PY_INT64_T main_interpreter_id = -1;
    PY_INT64_T current_id = PyInterpreterState_GetID(PyThreadState_Get()->interp);
    if (main_interpreter_id == -1) {
        main_interpreter_id = current_id;
        return (unlikely(current_id == -1)) ? -1 : 0;
    } else if (unlikely(main_interpreter_id != current_id))
    #else
    static PyInterpreterState *main_interpreter = NULL;
    PyInterpreterState *current_interpreter = PyThreadState_Get()->interp;
    if (!main_interpreter) {
        main_interpreter = current_interpreter;
    } else if (unlikely(main_interpreter != current_interpreter))
    #endif
    {
        PyErr_SetString(
            PyExc_ImportError,
            "Interpreter change detected - this module can only be loaded into one interpreter per process.");
        return -1;
    }
    return 0;
}
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name, int allow_none) {
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        if (allow_none || value != Py_None) {
            result = PyDict_SetItemString(moddict, to_name, value);
        }
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static CYTHON_SMALL_CODE PyObject* __pyx_pymod_create(PyObject *spec, CYTHON_UNUSED PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    if (__Pyx_check_single_interpreter())
        return NULL;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__", 0) < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static CYTHON_SMALL_CODE int __pyx_pymod_exec_pynodegl(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m) {
    if (__pyx_m == __pyx_pyinit_module) return 0;
    PyErr_SetString(PyExc_RuntimeError, "Module 'pynodegl' has already been imported. Re-initialisation is not supported.");
    return -1;
  }
  #elif PY_MAJOR_VERSION >= 3
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif
  __Pyx_RefNannySetupContext("__Pyx_PyMODINIT_FUNC PyInit_pynodegl(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #ifdef __Pxy_PyFrame_Initialize_Offsets
  __Pxy_PyFrame_Initialize_Offsets();
  #endif
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(1, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("pynodegl", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(1, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(1, 1, __pyx_L1_error)
  Py_INCREF(__pyx_b);
  __pyx_cython_runtime = PyImport_AddModule((char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(1, 1, __pyx_L1_error)
  Py_INCREF(__pyx_cython_runtime);
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(1, 1, __pyx_L1_error);
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_pynodegl) {
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s_name_2, __pyx_n_s_main) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(1, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "pynodegl")) {
      if (unlikely(PyDict_SetItemString(modules, "pynodegl", __pyx_m) < 0)) __PYX_ERR(1, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) goto __pyx_L1_error;
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) goto __pyx_L1_error;
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code();
  (void)__Pyx_modinit_variable_export_code();
  (void)__Pyx_modinit_function_export_code();
  if (unlikely(__Pyx_modinit_type_init_code() != 0)) goto __pyx_L1_error;
  if (unlikely(__Pyx_modinit_type_import_code() != 0)) goto __pyx_L1_error;
  (void)__Pyx_modinit_variable_import_code();
  (void)__Pyx_modinit_function_import_code();
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif

  /* "pynodegl.pyx":97
 *                          double *offsets, double v, double *t)
 * 
 * PLATFORM_AUTO    = NGL_PLATFORM_AUTO             # <<<<<<<<<<<<<<
 * PLATFORM_XLIB    = NGL_PLATFORM_XLIB
 * PLATFORM_ANDROID = NGL_PLATFORM_ANDROID
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(NGL_PLATFORM_AUTO); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 97, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_PLATFORM_AUTO, __pyx_t_1) < 0) __PYX_ERR(1, 97, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pynodegl.pyx":98
 * 
 * PLATFORM_AUTO    = NGL_PLATFORM_AUTO
 * PLATFORM_XLIB    = NGL_PLATFORM_XLIB             # <<<<<<<<<<<<<<
 * PLATFORM_ANDROID = NGL_PLATFORM_ANDROID
 * PLATFORM_MACOS   = NGL_PLATFORM_MACOS
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(NGL_PLATFORM_XLIB); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 98, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_PLATFORM_XLIB, __pyx_t_1) < 0) __PYX_ERR(1, 98, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pynodegl.pyx":99
 * PLATFORM_AUTO    = NGL_PLATFORM_AUTO
 * PLATFORM_XLIB    = NGL_PLATFORM_XLIB
 * PLATFORM_ANDROID = NGL_PLATFORM_ANDROID             # <<<<<<<<<<<<<<
 * PLATFORM_MACOS   = NGL_PLATFORM_MACOS
 * PLATFORM_IOS     = NGL_PLATFORM_IOS
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(NGL_PLATFORM_ANDROID); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 99, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_PLATFORM_ANDROID, __pyx_t_1) < 0) __PYX_ERR(1, 99, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pynodegl.pyx":100
 * PLATFORM_XLIB    = NGL_PLATFORM_XLIB
 * PLATFORM_ANDROID = NGL_PLATFORM_ANDROID
 * PLATFORM_MACOS   = NGL_PLATFORM_MACOS             # <<<<<<<<<<<<<<
 * PLATFORM_IOS     = NGL_PLATFORM_IOS
 * PLATFORM_WINDOWS = NGL_PLATFORM_WINDOWS
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(NGL_PLATFORM_MACOS); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 100, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_PLATFORM_MACOS, __pyx_t_1) < 0) __PYX_ERR(1, 100, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pynodegl.pyx":101
 * PLATFORM_ANDROID = NGL_PLATFORM_ANDROID
 * PLATFORM_MACOS   = NGL_PLATFORM_MACOS
 * PLATFORM_IOS     = NGL_PLATFORM_IOS             # <<<<<<<<<<<<<<
 * PLATFORM_WINDOWS = NGL_PLATFORM_WINDOWS
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(NGL_PLATFORM_IOS); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 101, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_PLATFORM_IOS, __pyx_t_1) < 0) __PYX_ERR(1, 101, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pynodegl.pyx":102
 * PLATFORM_MACOS   = NGL_PLATFORM_MACOS
 * PLATFORM_IOS     = NGL_PLATFORM_IOS
 * PLATFORM_WINDOWS = NGL_PLATFORM_WINDOWS             # <<<<<<<<<<<<<<
 * 
 * BACKEND_AUTO      = NGL_BACKEND_AUTO
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(NGL_PLATFORM_WINDOWS); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 102, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_PLATFORM_WINDOWS, __pyx_t_1) < 0) __PYX_ERR(1, 102, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pynodegl.pyx":104
 * PLATFORM_WINDOWS = NGL_PLATFORM_WINDOWS
 * 
 * BACKEND_AUTO      = NGL_BACKEND_AUTO             # <<<<<<<<<<<<<<
 * BACKEND_OPENGL    = NGL_BACKEND_OPENGL
 * BACKEND_OPENGLES  = NGL_BACKEND_OPENGLES
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(NGL_BACKEND_AUTO); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 104, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_BACKEND_AUTO, __pyx_t_1) < 0) __PYX_ERR(1, 104, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pynodegl.pyx":105
 * 
 * BACKEND_AUTO      = NGL_BACKEND_AUTO
 * BACKEND_OPENGL    = NGL_BACKEND_OPENGL             # <<<<<<<<<<<<<<
 * BACKEND_OPENGLES  = NGL_BACKEND_OPENGLES
 * BACKEND_NGFX	  = NGL_BACKEND_NGFX
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(NGL_BACKEND_OPENGL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 105, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_BACKEND_OPENGL, __pyx_t_1) < 0) __PYX_ERR(1, 105, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pynodegl.pyx":106
 * BACKEND_AUTO      = NGL_BACKEND_AUTO
 * BACKEND_OPENGL    = NGL_BACKEND_OPENGL
 * BACKEND_OPENGLES  = NGL_BACKEND_OPENGLES             # <<<<<<<<<<<<<<
 * BACKEND_NGFX	  = NGL_BACKEND_NGFX
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(NGL_BACKEND_OPENGLES); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 106, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_BACKEND_OPENGLES, __pyx_t_1) < 0) __PYX_ERR(1, 106, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pynodegl.pyx":107
 * BACKEND_OPENGL    = NGL_BACKEND_OPENGL
 * BACKEND_OPENGLES  = NGL_BACKEND_OPENGLES
 * BACKEND_NGFX	  = NGL_BACKEND_NGFX             # <<<<<<<<<<<<<<
 * 
 * LOG_VERBOSE = NGL_LOG_VERBOSE
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(NGL_BACKEND_NGFX); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 107, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_BACKEND_NGFX, __pyx_t_1) < 0) __PYX_ERR(1, 107, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pynodegl.pyx":109
 * BACKEND_NGFX	  = NGL_BACKEND_NGFX
 * 
 * LOG_VERBOSE = NGL_LOG_VERBOSE             # <<<<<<<<<<<<<<
 * LOG_DEBUG   = NGL_LOG_DEBUG
 * LOG_INFO    = NGL_LOG_INFO
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(NGL_LOG_VERBOSE); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 109, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LOG_VERBOSE, __pyx_t_1) < 0) __PYX_ERR(1, 109, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pynodegl.pyx":110
 * 
 * LOG_VERBOSE = NGL_LOG_VERBOSE
 * LOG_DEBUG   = NGL_LOG_DEBUG             # <<<<<<<<<<<<<<
 * LOG_INFO    = NGL_LOG_INFO
 * LOG_WARNING = NGL_LOG_WARNING
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(NGL_LOG_DEBUG); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 110, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LOG_DEBUG, __pyx_t_1) < 0) __PYX_ERR(1, 110, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pynodegl.pyx":111
 * LOG_VERBOSE = NGL_LOG_VERBOSE
 * LOG_DEBUG   = NGL_LOG_DEBUG
 * LOG_INFO    = NGL_LOG_INFO             # <<<<<<<<<<<<<<
 * LOG_WARNING = NGL_LOG_WARNING
 * LOG_ERROR   = NGL_LOG_ERROR
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(NGL_LOG_INFO); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 111, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LOG_INFO, __pyx_t_1) < 0) __PYX_ERR(1, 111, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pynodegl.pyx":112
 * LOG_DEBUG   = NGL_LOG_DEBUG
 * LOG_INFO    = NGL_LOG_INFO
 * LOG_WARNING = NGL_LOG_WARNING             # <<<<<<<<<<<<<<
 * LOG_ERROR   = NGL_LOG_ERROR
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(NGL_LOG_WARNING); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 112, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LOG_WARNING, __pyx_t_1) < 0) __PYX_ERR(1, 112, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pynodegl.pyx":113
 * LOG_INFO    = NGL_LOG_INFO
 * LOG_WARNING = NGL_LOG_WARNING
 * LOG_ERROR   = NGL_LOG_ERROR             # <<<<<<<<<<<<<<
 * 
 * cdef _ret_pystr(char *s):
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(NGL_LOG_ERROR); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 113, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LOG_ERROR, __pyx_t_1) < 0) __PYX_ERR(1, 113, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pynodegl.pyx":124
 * include "nodes_def.pyx"
 * 
 * def log_set_min_level(int level):             # <<<<<<<<<<<<<<
 *     ngl_log_set_min_level(level)
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_8pynodegl_1log_set_min_level, NULL, __pyx_n_s_pynodegl); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 124, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_log_set_min_level, __pyx_t_1) < 0) __PYX_ERR(1, 124, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pynodegl.pyx":161
 * 
 * 
 * def easing_evaluate(name, t, args=None, offsets=None):             # <<<<<<<<<<<<<<
 *     return _eval_solve(name, t, args, offsets, True)
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_8pynodegl_3easing_evaluate, NULL, __pyx_n_s_pynodegl); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 161, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_easing_evaluate, __pyx_t_1) < 0) __PYX_ERR(1, 161, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pynodegl.pyx":165
 * 
 * 
 * def easing_solve(name, v, args=None, offsets=None):             # <<<<<<<<<<<<<<
 *     return _eval_solve(name, v, args, offsets, False)
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_8pynodegl_5easing_solve, NULL, __pyx_n_s_pynodegl); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 165, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_easing_solve, __pyx_t_1) < 0) __PYX_ERR(1, 165, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pynodegl.pyx":1
 * # cython: c_string_type=unicode, c_string_encoding=utf8             # <<<<<<<<<<<<<<
 * #
 * # Copyright 2016 GoPro Inc.
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_1) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "array.pxd":161
 *     return extend_buffer(self, other.data.as_chars, Py_SIZE(other))
 * 
 * cdef inline void zero(array self):             # <<<<<<<<<<<<<<
 *     """ set all elements of array to zero. """
 *     memset(self.data.as_chars, 0, Py_SIZE(self) * self.ob_descr.itemsize)
 */

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init pynodegl", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_CLEAR(__pyx_m);
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init pynodegl");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule(modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, "RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* PyErrFetchRestore */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* GetException */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb)
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb)
#endif
{
    PyObject *local_type, *local_value, *local_tb;
#if CYTHON_FAST_THREAD_STATE
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    local_type = tstate->curexc_type;
    local_value = tstate->curexc_value;
    local_tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(&local_type, &local_value, &local_tb);
#endif
    PyErr_NormalizeException(&local_type, &local_value, &local_tb);
#if CYTHON_FAST_THREAD_STATE
    if (unlikely(tstate->curexc_type))
#else
    if (unlikely(PyErr_Occurred()))
#endif
        goto bad;
    #if PY_MAJOR_VERSION >= 3
    if (local_tb) {
        if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))
            goto bad;
    }
    #endif
    Py_XINCREF(local_tb);
    Py_XINCREF(local_type);
    Py_XINCREF(local_value);
    *type = local_type;
    *value = local_value;
    *tb = local_tb;
#if CYTHON_FAST_THREAD_STATE
    #if CYTHON_USE_EXC_INFO_STACK
    {
        _PyErr_StackItem *exc_info = tstate->exc_info;
        tmp_type = exc_info->exc_type;
        tmp_value = exc_info->exc_value;
        tmp_tb = exc_info->exc_traceback;
        exc_info->exc_type = local_type;
        exc_info->exc_value = local_value;
        exc_info->exc_traceback = local_tb;
    }
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = local_type;
    tstate->exc_value = local_value;
    tstate->exc_traceback = local_tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(local_type, local_value, local_tb);
#endif
    return 0;
bad:
    *type = 0;
    *value = 0;
    *tb = 0;
    Py_XDECREF(local_type);
    Py_XDECREF(local_value);
    Py_XDECREF(local_tb);
    return -1;
}

/* SwapException */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = *type;
    exc_info->exc_value = *value;
    exc_info->exc_traceback = *tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = *type;
    tstate->exc_value = *value;
    tstate->exc_traceback = *tb;
    #endif
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyErr_GetExcInfo(&tmp_type, &tmp_value, &tmp_tb);
    PyErr_SetExcInfo(*type, *value, *tb);
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#endif

/* GetTopmostException */
#if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem *
__Pyx_PyErr_GetTopmostException(PyThreadState *tstate)
{
    _PyErr_StackItem *exc_info = tstate->exc_info;
    while ((exc_info->exc_type == NULL || exc_info->exc_type == Py_None) &&
           exc_info->previous_item != NULL)
    {
        exc_info = exc_info->previous_item;
    }
    return exc_info;
}
#endif

/* SaveResetException */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = __Pyx_PyErr_GetTopmostException(tstate);
    *type = exc_info->exc_type;
    *value = exc_info->exc_value;
    *tb = exc_info->exc_traceback;
    #else
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    #endif
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
}
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = type;
    exc_info->exc_value = value;
    exc_info->exc_traceback = tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
#endif

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (__Pyx_PyUnicode_GET_LENGTH(**name) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (__Pyx_PyUnicode_GET_LENGTH(**argname) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* PyCFunctionFastCall */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject * __Pyx_PyCFunction_FastCall(PyObject *func_obj, PyObject **args, Py_ssize_t nargs) {
    PyCFunctionObject *func = (PyCFunctionObject*)func_obj;
    PyCFunction meth = PyCFunction_GET_FUNCTION(func);
    PyObject *self = PyCFunction_GET_SELF(func);
    int flags = PyCFunction_GET_FLAGS(func);
    assert(PyCFunction_Check(func));
    assert(METH_FASTCALL == (flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)));
    assert(nargs >= 0);
    assert(nargs == 0 || args != NULL);
    /* _PyCFunction_FastCallDict() must not be called with an exception set,
       because it may clear it (directly or indirectly) and so the
       caller loses its exception */
    assert(!PyErr_Occurred());
    if ((PY_VERSION_HEX < 0x030700A0) || unlikely(flags & METH_KEYWORDS)) {
        return (*((__Pyx_PyCFunctionFastWithKeywords)(void*)meth)) (self, args, nargs, NULL);
    } else {
        return (*((__Pyx_PyCFunctionFast)(void*)meth)) (self, args, nargs);
    }
}
#endif

/* PyFunctionFastCall */
#if CYTHON_FAST_PYCALL
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = __Pyx_PyFrame_GetLocalsplus(f);
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (Py_EnterRecursiveCall((char*)" while calling a Python object")) {
        return NULL;
    }
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif
#endif

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallMethO */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallOneArg */
#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, &arg, 1);
    }
#endif
    if (likely(PyCFunction_Check(func))) {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
#if CYTHON_FAST_PYCCALL
        } else if (PyCFunction_GET_FLAGS(func) & METH_FASTCALL) {
            return __Pyx_PyCFunction_FastCall(func, &arg, 1);
#endif
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

/* RaiseException */
#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    __Pyx_PyThreadState_declare
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
    if (cause) {
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = __Pyx_PyThreadState_Current;
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* UnpackUnboundCMethod */
static int __Pyx_TryUnpackUnboundCMethod(__Pyx_CachedCFunction* target) {
    PyObject *method;
    method = __Pyx_PyObject_GetAttrStr(target->type, *target->method_name);
    if (unlikely(!method))
        return -1;
    target->method = method;
#if CYTHON_COMPILING_IN_CPYTHON
    #if PY_MAJOR_VERSION >= 3
    if (likely(__Pyx_TypeCheck(method, &PyMethodDescr_Type)))
    #endif
    {
        PyMethodDescrObject *descr = (PyMethodDescrObject*) method;
        target->func = descr->d_method->ml_meth;
        target->flag = descr->d_method->ml_flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_STACKLESS);
    }
#endif
    return 0;
}

/* CallUnboundCMethod1 */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_CallUnboundCMethod1(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg) {
    if (likely(cfunc->func)) {
        int flag = cfunc->flag;
        if (flag == METH_O) {
            return (*(cfunc->func))(self, arg);
        } else if (PY_VERSION_HEX >= 0x030600B1 && flag == METH_FASTCALL) {
            if (PY_VERSION_HEX >= 0x030700A0) {
                return (*(__Pyx_PyCFunctionFast)(void*)(PyCFunction)cfunc->func)(self, &arg, 1);
            } else {
                return (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)cfunc->func)(self, &arg, 1, NULL);
            }
        } else if (PY_VERSION_HEX >= 0x030700A0 && flag == (METH_FASTCALL | METH_KEYWORDS)) {
            return (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)cfunc->func)(self, &arg, 1, NULL);
        }
    }
    return __Pyx__CallUnboundCMethod1(cfunc, self, arg);
}
#endif
static PyObject* __Pyx__CallUnboundCMethod1(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg){
    PyObject *args, *result = NULL;
    if (unlikely(!cfunc->func && !cfunc->method) && unlikely(__Pyx_TryUnpackUnboundCMethod(cfunc) < 0)) return NULL;
#if CYTHON_COMPILING_IN_CPYTHON
    if (cfunc->func && (cfunc->flag & METH_VARARGS)) {
        args = PyTuple_New(1);
        if (unlikely(!args)) goto bad;
        Py_INCREF(arg);
        PyTuple_SET_ITEM(args, 0, arg);
        if (cfunc->flag & METH_KEYWORDS)
            result = (*(PyCFunctionWithKeywords)(void*)(PyCFunction)cfunc->func)(self, args, NULL);
        else
            result = (*cfunc->func)(self, args);
    } else {
        args = PyTuple_New(2);
        if (unlikely(!args)) goto bad;
        Py_INCREF(self);
        PyTuple_SET_ITEM(args, 0, self);
        Py_INCREF(arg);
        PyTuple_SET_ITEM(args, 1, arg);
        result = __Pyx_PyObject_Call(cfunc->method, args, NULL);
    }
#else
    args = PyTuple_Pack(2, self, arg);
    if (unlikely(!args)) goto bad;
    result = __Pyx_PyObject_Call(cfunc->method, args, NULL);
#endif
bad:
    Py_XDECREF(args);
    return result;
}

/* IterFinish */
static CYTHON_INLINE int __Pyx_IterFinish(void) {
#if CYTHON_FAST_THREAD_STATE
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject* exc_type = tstate->curexc_type;
    if (unlikely(exc_type)) {
        if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) {
            PyObject *exc_value, *exc_tb;
            exc_value = tstate->curexc_value;
            exc_tb = tstate->curexc_traceback;
            tstate->curexc_type = 0;
            tstate->curexc_value = 0;
            tstate->curexc_traceback = 0;
            Py_DECREF(exc_type);
            Py_XDECREF(exc_value);
            Py_XDECREF(exc_tb);
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#else
    if (unlikely(PyErr_Occurred())) {
        if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) {
            PyErr_Clear();
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#endif
}

/* PyObjectCallNoArg */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, NULL, 0);
    }
#endif
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || __Pyx_CyFunction_Check(func)))
#else
    if (likely(PyCFunction_Check(func)))
#endif
    {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
            return __Pyx_PyObject_CallMethO(func, NULL);
        }
    }
    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
}
#endif

/* PyObjectGetMethod */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method) {
    PyObject *attr;
#if CYTHON_UNPACK_METHODS && CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_PYTYPE_LOOKUP
    PyTypeObject *tp = Py_TYPE(obj);
    PyObject *descr;
    descrgetfunc f = NULL;
    PyObject **dictptr, *dict;
    int meth_found = 0;
    assert (*method == NULL);
    if (unlikely(tp->tp_getattro != PyObject_GenericGetAttr)) {
        attr = __Pyx_PyObject_GetAttrStr(obj, name);
        goto try_unpack;
    }
    if (unlikely(tp->tp_dict == NULL) && unlikely(PyType_Ready(tp) < 0)) {
        return 0;
    }
    descr = _PyType_Lookup(tp, name);
    if (likely(descr != NULL)) {
        Py_INCREF(descr);
#if PY_MAJOR_VERSION >= 3
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || (Py_TYPE(descr) == &PyMethodDescr_Type) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr) || (Py_TYPE(descr) == &PyMethodDescr_Type)))
        #endif
#else
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr)))
        #endif
#endif
        {
            meth_found = 1;
        } else {
            f = Py_TYPE(descr)->tp_descr_get;
            if (f != NULL && PyDescr_IsData(descr)) {
                attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
                Py_DECREF(descr);
                goto try_unpack;
            }
        }
    }
    dictptr = _PyObject_GetDictPtr(obj);
    if (dictptr != NULL && (dict = *dictptr) != NULL) {
        Py_INCREF(dict);
        attr = __Pyx_PyDict_GetItemStr(dict, name);
        if (attr != NULL) {
            Py_INCREF(attr);
            Py_DECREF(dict);
            Py_XDECREF(descr);
            goto try_unpack;
        }
        Py_DECREF(dict);
    }
    if (meth_found) {
        *method = descr;
        return 1;
    }
    if (f != NULL) {
        attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
        Py_DECREF(descr);
        goto try_unpack;
    }
    if (descr != NULL) {
        *method = descr;
        return 0;
    }
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'%.50s' object has no attribute '%U'",
                 tp->tp_name, name);
#else
                 "'%.50s' object has no attribute '%.400s'",
                 tp->tp_name, PyString_AS_STRING(name));
#endif
    return 0;
#else
    attr = __Pyx_PyObject_GetAttrStr(obj, name);
    goto try_unpack;
#endif
try_unpack:
#if CYTHON_UNPACK_METHODS
    if (likely(attr) && PyMethod_Check(attr) && likely(PyMethod_GET_SELF(attr) == obj)) {
        PyObject *function = PyMethod_GET_FUNCTION(attr);
        Py_INCREF(function);
        Py_DECREF(attr);
        *method = function;
        return 1;
    }
#endif
    *method = attr;
    return 0;
}

/* PyObjectCallMethod0 */
static PyObject* __Pyx_PyObject_CallMethod0(PyObject* obj, PyObject* method_name) {
    PyObject *method = NULL, *result = NULL;
    int is_method = __Pyx_PyObject_GetMethod(obj, method_name, &method);
    if (likely(is_method)) {
        result = __Pyx_PyObject_CallOneArg(method, obj);
        Py_DECREF(method);
        return result;
    }
    if (unlikely(!method)) goto bad;
    result = __Pyx_PyObject_CallNoArg(method);
    Py_DECREF(method);
bad:
    return result;
}

/* RaiseNeedMoreValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

/* RaiseTooManyValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

/* UnpackItemEndCheck */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected) {
    if (unlikely(retval)) {
        Py_DECREF(retval);
        __Pyx_RaiseTooManyValuesError(expected);
        return -1;
    } else {
        return __Pyx_IterFinish();
    }
    return 0;
}

/* RaiseNoneIterError */
static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
}

/* UnpackTupleError */
static void __Pyx_UnpackTupleError(PyObject *t, Py_ssize_t index) {
    if (t == Py_None) {
      __Pyx_RaiseNoneNotIterableError();
    } else if (PyTuple_GET_SIZE(t) < index) {
      __Pyx_RaiseNeedMoreValuesError(PyTuple_GET_SIZE(t));
    } else {
      __Pyx_RaiseTooManyValuesError(index);
    }
}

/* UnpackTuple2 */
static CYTHON_INLINE int __Pyx_unpack_tuple2_exact(
        PyObject* tuple, PyObject** pvalue1, PyObject** pvalue2, int decref_tuple) {
    PyObject *value1 = NULL, *value2 = NULL;
#if CYTHON_COMPILING_IN_PYPY
    value1 = PySequence_ITEM(tuple, 0);  if (unlikely(!value1)) goto bad;
    value2 = PySequence_ITEM(tuple, 1);  if (unlikely(!value2)) goto bad;
#else
    value1 = PyTuple_GET_ITEM(tuple, 0);  Py_INCREF(value1);
    value2 = PyTuple_GET_ITEM(tuple, 1);  Py_INCREF(value2);
#endif
    if (decref_tuple) {
        Py_DECREF(tuple);
    }
    *pvalue1 = value1;
    *pvalue2 = value2;
    return 0;
#if CYTHON_COMPILING_IN_PYPY
bad:
    Py_XDECREF(value1);
    Py_XDECREF(value2);
    if (decref_tuple) { Py_XDECREF(tuple); }
    return -1;
#endif
}
static int __Pyx_unpack_tuple2_generic(PyObject* tuple, PyObject** pvalue1, PyObject** pvalue2,
                                       int has_known_size, int decref_tuple) {
    Py_ssize_t index;
    PyObject *value1 = NULL, *value2 = NULL, *iter = NULL;
    iternextfunc iternext;
    iter = PyObject_GetIter(tuple);
    if (unlikely(!iter)) goto bad;
    if (decref_tuple) { Py_DECREF(tuple); tuple = NULL; }
    iternext = Py_TYPE(iter)->tp_iternext;
    value1 = iternext(iter); if (unlikely(!value1)) { index = 0; goto unpacking_failed; }
    value2 = iternext(iter); if (unlikely(!value2)) { index = 1; goto unpacking_failed; }
    if (!has_known_size && unlikely(__Pyx_IternextUnpackEndCheck(iternext(iter), 2))) goto bad;
    Py_DECREF(iter);
    *pvalue1 = value1;
    *pvalue2 = value2;
    return 0;
unpacking_failed:
    if (!has_known_size && __Pyx_IterFinish() == 0)
        __Pyx_RaiseNeedMoreValuesError(index);
bad:
    Py_XDECREF(iter);
    Py_XDECREF(value1);
    Py_XDECREF(value2);
    if (decref_tuple) { Py_XDECREF(tuple); }
    return -1;
}

/* dict_iter */
static CYTHON_INLINE PyObject* __Pyx_dict_iterator(PyObject* iterable, int is_dict, PyObject* method_name,
                                                   Py_ssize_t* p_orig_length, int* p_source_is_dict) {
    is_dict = is_dict || likely(PyDict_CheckExact(iterable));
    *p_source_is_dict = is_dict;
    if (is_dict) {
#if !CYTHON_COMPILING_IN_PYPY
        *p_orig_length = PyDict_Size(iterable);
        Py_INCREF(iterable);
        return iterable;
#elif PY_MAJOR_VERSION >= 3
        static PyObject *py_items = NULL, *py_keys = NULL, *py_values = NULL;
        PyObject **pp = NULL;
        if (method_name) {
            const char *name = PyUnicode_AsUTF8(method_name);
            if (strcmp(name, "iteritems") == 0) pp = &py_items;
            else if (strcmp(name, "iterkeys") == 0) pp = &py_keys;
            else if (strcmp(name, "itervalues") == 0) pp = &py_values;
            if (pp) {
                if (!*pp) {
                    *pp = PyUnicode_FromString(name + 4);
                    if (!*pp)
                        return NULL;
                }
                method_name = *pp;
            }
        }
#endif
    }
    *p_orig_length = 0;
    if (method_name) {
        PyObject* iter;
        iterable = __Pyx_PyObject_CallMethod0(iterable, method_name);
        if (!iterable)
            return NULL;
#if !CYTHON_COMPILING_IN_PYPY
        if (PyTuple_CheckExact(iterable) || PyList_CheckExact(iterable))
            return iterable;
#endif
        iter = PyObject_GetIter(iterable);
        Py_DECREF(iterable);
        return iter;
    }
    return PyObject_GetIter(iterable);
}
static CYTHON_INLINE int __Pyx_dict_iter_next(
        PyObject* iter_obj, CYTHON_NCP_UNUSED Py_ssize_t orig_length, CYTHON_NCP_UNUSED Py_ssize_t* ppos,
        PyObject** pkey, PyObject** pvalue, PyObject** pitem, int source_is_dict) {
    PyObject* next_item;
#if !CYTHON_COMPILING_IN_PYPY
    if (source_is_dict) {
        PyObject *key, *value;
        if (unlikely(orig_length != PyDict_Size(iter_obj))) {
            PyErr_SetString(PyExc_RuntimeError, "dictionary changed size during iteration");
            return -1;
        }
        if (unlikely(!PyDict_Next(iter_obj, ppos, &key, &value))) {
            return 0;
        }
        if (pitem) {
            PyObject* tuple = PyTuple_New(2);
            if (unlikely(!tuple)) {
                return -1;
            }
            Py_INCREF(key);
            Py_INCREF(value);
            PyTuple_SET_ITEM(tuple, 0, key);
            PyTuple_SET_ITEM(tuple, 1, value);
            *pitem = tuple;
        } else {
            if (pkey) {
                Py_INCREF(key);
                *pkey = key;
            }
            if (pvalue) {
                Py_INCREF(value);
                *pvalue = value;
            }
        }
        return 1;
    } else if (PyTuple_CheckExact(iter_obj)) {
        Py_ssize_t pos = *ppos;
        if (unlikely(pos >= PyTuple_GET_SIZE(iter_obj))) return 0;
        *ppos = pos + 1;
        next_item = PyTuple_GET_ITEM(iter_obj, pos);
        Py_INCREF(next_item);
    } else if (PyList_CheckExact(iter_obj)) {
        Py_ssize_t pos = *ppos;
        if (unlikely(pos >= PyList_GET_SIZE(iter_obj))) return 0;
        *ppos = pos + 1;
        next_item = PyList_GET_ITEM(iter_obj, pos);
        Py_INCREF(next_item);
    } else
#endif
    {
        next_item = PyIter_Next(iter_obj);
        if (unlikely(!next_item)) {
            return __Pyx_IterFinish();
        }
    }
    if (pitem) {
        *pitem = next_item;
    } else if (pkey && pvalue) {
        if (__Pyx_unpack_tuple2(next_item, pkey, pvalue, source_is_dict, source_is_dict, 1))
            return -1;
    } else if (pkey) {
        *pkey = next_item;
    } else {
        *pvalue = next_item;
    }
    return 1;
}

/* PyObjectCall2Args */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2) {
    PyObject *args, *result = NULL;
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyFunction_FastCall(function, args, 2);
    }
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyCFunction_FastCall(function, args, 2);
    }
    #endif
    args = PyTuple_New(2);
    if (unlikely(!args)) goto done;
    Py_INCREF(arg1);
    PyTuple_SET_ITEM(args, 0, arg1);
    Py_INCREF(arg2);
    PyTuple_SET_ITEM(args, 1, arg2);
    Py_INCREF(function);
    result = __Pyx_PyObject_Call(function, args, NULL);
    Py_DECREF(args);
    Py_DECREF(function);
done:
    return result;
}

/* GetAttr */
static CYTHON_INLINE PyObject *__Pyx_GetAttr(PyObject *o, PyObject *n) {
#if CYTHON_USE_TYPE_SLOTS
#if PY_MAJOR_VERSION >= 3
    if (likely(PyUnicode_Check(n)))
#else
    if (likely(PyString_Check(n)))
#endif
        return __Pyx_PyObject_GetAttrStr(o, n);
#endif
    return PyObject_GetAttr(o, n);
}

/* HasAttr */
static CYTHON_INLINE int __Pyx_HasAttr(PyObject *o, PyObject *n) {
    PyObject *r;
    if (unlikely(!__Pyx_PyBaseString_Check(n))) {
        PyErr_SetString(PyExc_TypeError,
                        "hasattr(): attribute name must be string");
        return -1;
    }
    r = __Pyx_GetAttr(o, n);
    if (unlikely(!r)) {
        PyErr_Clear();
        return 0;
    } else {
        Py_DECREF(r);
        return 1;
    }
}

/* GetItemInt */
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyList_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyTuple_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely(__Pyx_is_valid_index(n, PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely(__Pyx_is_valid_index(n, PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return NULL;
                    PyErr_Clear();
                }
            }
            return m->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

/* KeywordStringCheck */
static int __Pyx_CheckKeywordStrings(
    PyObject *kwdict,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
#if CYTHON_COMPILING_IN_PYPY
    if (!kw_allowed && PyDict_Next(kwdict, &pos, &key, 0))
        goto invalid_keyword;
    return 1;
#else
    while (PyDict_Next(kwdict, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_Check(key)))
        #endif
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
    }
    if ((!kw_allowed) && unlikely(key))
        goto invalid_keyword;
    return 1;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    return 0;
#endif
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
    return 0;
}

/* CIntToDigits */
static const char DIGIT_PAIRS_10[2*10*10+1] = {
    "00010203040506070809"
    "10111213141516171819"
    "20212223242526272829"
    "30313233343536373839"
    "40414243444546474849"
    "50515253545556575859"
    "60616263646566676869"
    "70717273747576777879"
    "80818283848586878889"
    "90919293949596979899"
};
static const char DIGIT_PAIRS_8[2*8*8+1] = {
    "0001020304050607"
    "1011121314151617"
    "2021222324252627"
    "3031323334353637"
    "4041424344454647"
    "5051525354555657"
    "6061626364656667"
    "7071727374757677"
};
static const char DIGITS_HEX[2*16+1] = {
    "0123456789abcdef"
    "0123456789ABCDEF"
};

/* BuildPyUnicode */
static PyObject* __Pyx_PyUnicode_BuildFromAscii(Py_ssize_t ulength, char* chars, int clength,
                                                int prepend_sign, char padding_char) {
    PyObject *uval;
    Py_ssize_t uoffset = ulength - clength;
#if CYTHON_USE_UNICODE_INTERNALS
    Py_ssize_t i;
#if CYTHON_PEP393_ENABLED
    void *udata;
    uval = PyUnicode_New(ulength, 127);
    if (unlikely(!uval)) return NULL;
    udata = PyUnicode_DATA(uval);
#else
    Py_UNICODE *udata;
    uval = PyUnicode_FromUnicode(NULL, ulength);
    if (unlikely(!uval)) return NULL;
    udata = PyUnicode_AS_UNICODE(uval);
#endif
    if (uoffset > 0) {
        i = 0;
        if (prepend_sign) {
            __Pyx_PyUnicode_WRITE(PyUnicode_1BYTE_KIND, udata, 0, '-');
            i++;
        }
        for (; i < uoffset; i++) {
            __Pyx_PyUnicode_WRITE(PyUnicode_1BYTE_KIND, udata, i, padding_char);
        }
    }
    for (i=0; i < clength; i++) {
        __Pyx_PyUnicode_WRITE(PyUnicode_1BYTE_KIND, udata, uoffset+i, chars[i]);
    }
#else
    {
        PyObject *sign = NULL, *padding = NULL;
        uval = NULL;
        if (uoffset > 0) {
            prepend_sign = !!prepend_sign;
            if (uoffset > prepend_sign) {
                padding = PyUnicode_FromOrdinal(padding_char);
                if (likely(padding) && uoffset > prepend_sign + 1) {
                    PyObject *tmp;
                    PyObject *repeat = PyInt_FromSize_t(uoffset - prepend_sign);
                    if (unlikely(!repeat)) goto done_or_error;
                    tmp = PyNumber_Multiply(padding, repeat);
                    Py_DECREF(repeat);
                    Py_DECREF(padding);
                    padding = tmp;
                }
                if (unlikely(!padding)) goto done_or_error;
            }
            if (prepend_sign) {
                sign = PyUnicode_FromOrdinal('-');
                if (unlikely(!sign)) goto done_or_error;
            }
        }
        uval = PyUnicode_DecodeASCII(chars, clength, NULL);
        if (likely(uval) && padding) {
            PyObject *tmp = PyNumber_Add(padding, uval);
            Py_DECREF(uval);
            uval = tmp;
        }
        if (likely(uval) && sign) {
            PyObject *tmp = PyNumber_Add(sign, uval);
            Py_DECREF(uval);
            uval = tmp;
        }
done_or_error:
        Py_XDECREF(padding);
        Py_XDECREF(sign);
    }
#endif
    return uval;
}

/* CIntToPyUnicode */
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
           typedef unsigned short    uint16_t;
        #else
           typedef unsigned __int16  uint16_t;
        #endif
    #endif
#else
   #include <stdint.h>
#endif
#if defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 6))
#define GCC_DIAGNOSTIC
#endif
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_From_long(long value, Py_ssize_t width, char padding_char, char format_char) {
    char digits[sizeof(long)*3+2];
    char *dpos, *end = digits + sizeof(long)*3+2;
    const char *hex_digits = DIGITS_HEX;
    Py_ssize_t length, ulength;
    int prepend_sign, last_one_off;
    long remaining;
#ifdef GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (format_char == 'X') {
        hex_digits += 16;
        format_char = 'x';
    }
    remaining = value;
    last_one_off = 0;
    dpos = end;
    do {
        int digit_pos;
        switch (format_char) {
        case 'o':
            digit_pos = abs((int)(remaining % (8*8)));
            remaining = (long) (remaining / (8*8));
            dpos -= 2;
            *(uint16_t*)dpos = ((const uint16_t*)DIGIT_PAIRS_8)[digit_pos];
            last_one_off = (digit_pos < 8);
            break;
        case 'd':
            digit_pos = abs((int)(remaining % (10*10)));
            remaining = (long) (remaining / (10*10));
            dpos -= 2;
            *(uint16_t*)dpos = ((const uint16_t*)DIGIT_PAIRS_10)[digit_pos];
            last_one_off = (digit_pos < 10);
            break;
        case 'x':
            *(--dpos) = hex_digits[abs((int)(remaining % 16))];
            remaining = (long) (remaining / 16);
            break;
        default:
            assert(0);
            break;
        }
    } while (unlikely(remaining != 0));
    if (last_one_off) {
        assert(*dpos == '0');
        dpos++;
    }
    length = end - dpos;
    ulength = length;
    prepend_sign = 0;
    if (!is_unsigned && value <= neg_one) {
        if (padding_char == ' ' || width <= length + 1) {
            *(--dpos) = '-';
            ++length;
        } else {
            prepend_sign = 1;
        }
        ++ulength;
    }
    if (width > ulength) {
        ulength = width;
    }
    if (ulength == 1) {
        return PyUnicode_FromOrdinal(*dpos);
    }
    return __Pyx_PyUnicode_BuildFromAscii(ulength, dpos, (int) length, prepend_sign, padding_char);
}

/* CIntToPyUnicode */
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
           typedef unsigned short    uint16_t;
        #else
           typedef unsigned __int16  uint16_t;
        #endif
    #endif
#else
   #include <stdint.h>
#endif
#if defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 6))
#define GCC_DIAGNOSTIC
#endif
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_From_Py_ssize_t(Py_ssize_t value, Py_ssize_t width, char padding_char, char format_char) {
    char digits[sizeof(Py_ssize_t)*3+2];
    char *dpos, *end = digits + sizeof(Py_ssize_t)*3+2;
    const char *hex_digits = DIGITS_HEX;
    Py_ssize_t length, ulength;
    int prepend_sign, last_one_off;
    Py_ssize_t remaining;
#ifdef GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const Py_ssize_t neg_one = (Py_ssize_t) -1, const_zero = (Py_ssize_t) 0;
#ifdef GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (format_char == 'X') {
        hex_digits += 16;
        format_char = 'x';
    }
    remaining = value;
    last_one_off = 0;
    dpos = end;
    do {
        int digit_pos;
        switch (format_char) {
        case 'o':
            digit_pos = abs((int)(remaining % (8*8)));
            remaining = (Py_ssize_t) (remaining / (8*8));
            dpos -= 2;
            *(uint16_t*)dpos = ((const uint16_t*)DIGIT_PAIRS_8)[digit_pos];
            last_one_off = (digit_pos < 8);
            break;
        case 'd':
            digit_pos = abs((int)(remaining % (10*10)));
            remaining = (Py_ssize_t) (remaining / (10*10));
            dpos -= 2;
            *(uint16_t*)dpos = ((const uint16_t*)DIGIT_PAIRS_10)[digit_pos];
            last_one_off = (digit_pos < 10);
            break;
        case 'x':
            *(--dpos) = hex_digits[abs((int)(remaining % 16))];
            remaining = (Py_ssize_t) (remaining / 16);
            break;
        default:
            assert(0);
            break;
        }
    } while (unlikely(remaining != 0));
    if (last_one_off) {
        assert(*dpos == '0');
        dpos++;
    }
    length = end - dpos;
    ulength = length;
    prepend_sign = 0;
    if (!is_unsigned && value <= neg_one) {
        if (padding_char == ' ' || width <= length + 1) {
            *(--dpos) = '-';
            ++length;
        } else {
            prepend_sign = 1;
        }
        ++ulength;
    }
    if (width > ulength) {
        ulength = width;
    }
    if (ulength == 1) {
        return PyUnicode_FromOrdinal(*dpos);
    }
    return __Pyx_PyUnicode_BuildFromAscii(ulength, dpos, (int) length, prepend_sign, padding_char);
}

/* JoinPyUnicode */
static PyObject* __Pyx_PyUnicode_Join(PyObject* value_tuple, Py_ssize_t value_count, Py_ssize_t result_ulength,
                                      CYTHON_UNUSED Py_UCS4 max_char) {
#if CYTHON_USE_UNICODE_INTERNALS && CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    PyObject *result_uval;
    int result_ukind;
    Py_ssize_t i, char_pos;
    void *result_udata;
#if CYTHON_PEP393_ENABLED
    result_uval = PyUnicode_New(result_ulength, max_char);
    if (unlikely(!result_uval)) return NULL;
    result_ukind = (max_char <= 255) ? PyUnicode_1BYTE_KIND : (max_char <= 65535) ? PyUnicode_2BYTE_KIND : PyUnicode_4BYTE_KIND;
    result_udata = PyUnicode_DATA(result_uval);
#else
    result_uval = PyUnicode_FromUnicode(NULL, result_ulength);
    if (unlikely(!result_uval)) return NULL;
    result_ukind = sizeof(Py_UNICODE);
    result_udata = PyUnicode_AS_UNICODE(result_uval);
#endif
    char_pos = 0;
    for (i=0; i < value_count; i++) {
        int ukind;
        Py_ssize_t ulength;
        void *udata;
        PyObject *uval = PyTuple_GET_ITEM(value_tuple, i);
        if (unlikely(__Pyx_PyUnicode_READY(uval)))
            goto bad;
        ulength = __Pyx_PyUnicode_GET_LENGTH(uval);
        if (unlikely(!ulength))
            continue;
        if (unlikely(char_pos + ulength < 0))
            goto overflow;
        ukind = __Pyx_PyUnicode_KIND(uval);
        udata = __Pyx_PyUnicode_DATA(uval);
        if (!CYTHON_PEP393_ENABLED || ukind == result_ukind) {
            memcpy((char *)result_udata + char_pos * result_ukind, udata, (size_t) (ulength * result_ukind));
        } else {
            #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030300F0 || defined(_PyUnicode_FastCopyCharacters)
            _PyUnicode_FastCopyCharacters(result_uval, char_pos, uval, 0, ulength);
            #else
            Py_ssize_t j;
            for (j=0; j < ulength; j++) {
                Py_UCS4 uchar = __Pyx_PyUnicode_READ(ukind, udata, j);
                __Pyx_PyUnicode_WRITE(result_ukind, result_udata, char_pos+j, uchar);
            }
            #endif
        }
        char_pos += ulength;
    }
    return result_uval;
overflow:
    PyErr_SetString(PyExc_OverflowError, "join() result is too long for a Python string");
bad:
    Py_DECREF(result_uval);
    return NULL;
#else
    result_ulength++;
    value_count++;
    return PyUnicode_Join(__pyx_empty_unicode, value_tuple);
#endif
}

/* ArgTypeTest */
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact)
{
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    else if (exact) {
        #if PY_MAJOR_VERSION == 2
        if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(__Pyx_TypeCheck(obj, type))) return 1;
    }
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected %.200s, got %.200s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
    return 0;
}

/* PyIntBinop */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, int inplace, int zerodivision_check) {
    (void)inplace;
    (void)zerodivision_check;
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long x;
        long a = PyInt_AS_LONG(op1);
            x = (long)((unsigned long)a + b);
            if (likely((x^a) >= 0 || (x^b) >= 0))
                return PyInt_FromLong(x);
            return PyLong_Type.tp_as_number->nb_add(op1, op2);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a, x;
#ifdef HAVE_LONG_LONG
        const PY_LONG_LONG llb = intval;
        PY_LONG_LONG lla, llx;
#endif
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                default: return PyLong_Type.tp_as_number->nb_add(op1, op2);
            }
        }
                x = a + b;
            return PyLong_FromLong(x);
#ifdef HAVE_LONG_LONG
        long_long:
                llx = lla + llb;
            return PyLong_FromLongLong(llx);
#endif
        
        
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
            double result;
            PyFPE_START_PROTECT("add", return NULL)
            result = ((double)a) + (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceAdd : PyNumber_Add)(op1, op2);
}
#endif

/* CallUnboundCMethod2 */
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030600B1
static CYTHON_INLINE PyObject *__Pyx_CallUnboundCMethod2(__Pyx_CachedCFunction *cfunc, PyObject *self, PyObject *arg1, PyObject *arg2) {
    if (likely(cfunc->func)) {
        PyObject *args[2] = {arg1, arg2};
        if (cfunc->flag == METH_FASTCALL) {
            #if PY_VERSION_HEX >= 0x030700A0
            return (*(__Pyx_PyCFunctionFast)(void*)(PyCFunction)cfunc->func)(self, args, 2);
            #else
            return (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)cfunc->func)(self, args, 2, NULL);
            #endif
        }
        #if PY_VERSION_HEX >= 0x030700A0
        if (cfunc->flag == (METH_FASTCALL | METH_KEYWORDS))
            return (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)cfunc->func)(self, args, 2, NULL);
        #endif
    }
    return __Pyx__CallUnboundCMethod2(cfunc, self, arg1, arg2);
}
#endif
static PyObject* __Pyx__CallUnboundCMethod2(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg1, PyObject* arg2){
    PyObject *args, *result = NULL;
    if (unlikely(!cfunc->func && !cfunc->method) && unlikely(__Pyx_TryUnpackUnboundCMethod(cfunc) < 0)) return NULL;
#if CYTHON_COMPILING_IN_CPYTHON
    if (cfunc->func && (cfunc->flag & METH_VARARGS)) {
        args = PyTuple_New(2);
        if (unlikely(!args)) goto bad;
        Py_INCREF(arg1);
        PyTuple_SET_ITEM(args, 0, arg1);
        Py_INCREF(arg2);
        PyTuple_SET_ITEM(args, 1, arg2);
        if (cfunc->flag & METH_KEYWORDS)
            result = (*(PyCFunctionWithKeywords)(void*)(PyCFunction)cfunc->func)(self, args, NULL);
        else
            result = (*cfunc->func)(self, args);
    } else {
        args = PyTuple_New(3);
        if (unlikely(!args)) goto bad;
        Py_INCREF(self);
        PyTuple_SET_ITEM(args, 0, self);
        Py_INCREF(arg1);
        PyTuple_SET_ITEM(args, 1, arg1);
        Py_INCREF(arg2);
        PyTuple_SET_ITEM(args, 2, arg2);
        result = __Pyx_PyObject_Call(cfunc->method, args, NULL);
    }
#else
    args = PyTuple_Pack(3, self, arg1, arg2);
    if (unlikely(!args)) goto bad;
    result = __Pyx_PyObject_Call(cfunc->method, args, NULL);
#endif
bad:
    Py_XDECREF(args);
    return result;
}

/* dict_getitem_default */
static PyObject* __Pyx_PyDict_GetItemDefault(PyObject* d, PyObject* key, PyObject* default_value) {
    PyObject* value;
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
    value = PyDict_GetItemWithError(d, key);
    if (unlikely(!value)) {
        if (unlikely(PyErr_Occurred()))
            return NULL;
        value = default_value;
    }
    Py_INCREF(value);
    if ((1));
#else
    if (PyString_CheckExact(key) || PyUnicode_CheckExact(key) || PyInt_CheckExact(key)) {
        value = PyDict_GetItem(d, key);
        if (unlikely(!value)) {
            value = default_value;
        }
        Py_INCREF(value);
    }
#endif
    else {
        if (default_value == Py_None)
            value = __Pyx_CallUnboundCMethod1(&__pyx_umethod_PyDict_Type_get, d, key);
        else
            value = __Pyx_CallUnboundCMethod2(&__pyx_umethod_PyDict_Type_get, d, key, default_value);
    }
    return value;
}

/* PyDictVersioning */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    return likely(dict) ? __PYX_GET_DICT_VERSION(dict) : 0;
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj) {
    PyObject **dictptr = NULL;
    Py_ssize_t offset = Py_TYPE(obj)->tp_dictoffset;
    if (offset) {
#if CYTHON_COMPILING_IN_CPYTHON
        dictptr = (likely(offset > 0)) ? (PyObject **) ((char *)obj + offset) : _PyObject_GetDictPtr(obj);
#else
        dictptr = _PyObject_GetDictPtr(obj);
#endif
    }
    return (dictptr && *dictptr) ? __PYX_GET_DICT_VERSION(*dictptr) : 0;
}
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    if (unlikely(!dict) || unlikely(tp_dict_version != __PYX_GET_DICT_VERSION(dict)))
        return 0;
    return obj_dict_version == __Pyx_get_object_dict_version(obj);
}
#endif

/* GetModuleGlobalName */
#if CYTHON_USE_DICT_VERSIONS
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value)
#else
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name)
#endif
{
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1
    result = _PyDict_GetItem_KnownHash(__pyx_d, name, ((PyASCIIObject *) name)->hash);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    } else if (unlikely(PyErr_Occurred())) {
        return NULL;
    }
#else
    result = PyDict_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
#endif
#else
    result = PyObject_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
    PyErr_Clear();
#endif
    return __Pyx_GetBuiltinName(name);
}

/* PyObject_GenericGetAttrNoDict */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject *__Pyx_RaiseGenericGetAttributeError(PyTypeObject *tp, PyObject *attr_name) {
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'%.50s' object has no attribute '%U'",
                 tp->tp_name, attr_name);
#else
                 "'%.50s' object has no attribute '%.400s'",
                 tp->tp_name, PyString_AS_STRING(attr_name));
#endif
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name) {
    PyObject *descr;
    PyTypeObject *tp = Py_TYPE(obj);
    if (unlikely(!PyString_Check(attr_name))) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    assert(!tp->tp_dictoffset);
    descr = _PyType_Lookup(tp, attr_name);
    if (unlikely(!descr)) {
        return __Pyx_RaiseGenericGetAttributeError(tp, attr_name);
    }
    Py_INCREF(descr);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyType_HasFeature(Py_TYPE(descr), Py_TPFLAGS_HAVE_CLASS)))
    #endif
    {
        descrgetfunc f = Py_TYPE(descr)->tp_descr_get;
        if (unlikely(f)) {
            PyObject *res = f(descr, obj, (PyObject *)tp);
            Py_DECREF(descr);
            return res;
        }
    }
    return descr;
}
#endif

/* PyObject_GenericGetAttr */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name) {
    if (unlikely(Py_TYPE(obj)->tp_dictoffset)) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    return __Pyx_PyObject_GenericGetAttrNoDict(obj, attr_name);
}
#endif

/* PyErrExceptionMatches */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx_PyErr_ExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        if (__Pyx_PyErr_GivenExceptionMatches(exc_type, PyTuple_GET_ITEM(tuple, i))) return 1;
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err) {
    PyObject *exc_type = tstate->curexc_type;
    if (exc_type == err) return 1;
    if (unlikely(!exc_type)) return 0;
    if (unlikely(PyTuple_Check(err)))
        return __Pyx_PyErr_ExceptionMatchesTuple(exc_type, err);
    return __Pyx_PyErr_GivenExceptionMatches(exc_type, err);
}
#endif

/* PyObjectGetAttrStrNoError */
static void __Pyx_PyObject_GetAttrStr_ClearAttributeError(void) {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (likely(__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        __Pyx_PyErr_Clear();
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name) {
    PyObject *result;
#if CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_TYPE_SLOTS && PY_VERSION_HEX >= 0x030700B1
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro == PyObject_GenericGetAttr)) {
        return _PyObject_GenericGetAttrWithDict(obj, attr_name, NULL, 1);
    }
#endif
    result = __Pyx_PyObject_GetAttrStr(obj, attr_name);
    if (unlikely(!result)) {
        __Pyx_PyObject_GetAttrStr_ClearAttributeError();
    }
    return result;
}

/* SetupReduce */
static int __Pyx_setup_reduce_is_named(PyObject* meth, PyObject* name) {
  int ret;
  PyObject *name_attr;
  name_attr = __Pyx_PyObject_GetAttrStr(meth, __pyx_n_s_name_2);
  if (likely(name_attr)) {
      ret = PyObject_RichCompareBool(name_attr, name, Py_EQ);
  } else {
      ret = -1;
  }
  if (unlikely(ret < 0)) {
      PyErr_Clear();
      ret = 0;
  }
  Py_XDECREF(name_attr);
  return ret;
}
static int __Pyx_setup_reduce(PyObject* type_obj) {
    int ret = 0;
    PyObject *object_reduce = NULL;
    PyObject *object_reduce_ex = NULL;
    PyObject *reduce = NULL;
    PyObject *reduce_ex = NULL;
    PyObject *reduce_cython = NULL;
    PyObject *setstate = NULL;
    PyObject *setstate_cython = NULL;
#if CYTHON_USE_PYTYPE_LOOKUP
    if (_PyType_Lookup((PyTypeObject*)type_obj, __pyx_n_s_getstate)) goto __PYX_GOOD;
#else
    if (PyObject_HasAttr(type_obj, __pyx_n_s_getstate)) goto __PYX_GOOD;
#endif
#if CYTHON_USE_PYTYPE_LOOKUP
    object_reduce_ex = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#else
    object_reduce_ex = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#endif
    reduce_ex = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_ex); if (unlikely(!reduce_ex)) goto __PYX_BAD;
    if (reduce_ex == object_reduce_ex) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_reduce = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#else
        object_reduce = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#endif
        reduce = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce); if (unlikely(!reduce)) goto __PYX_BAD;
        if (reduce == object_reduce || __Pyx_setup_reduce_is_named(reduce, __pyx_n_s_reduce_cython)) {
            reduce_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_reduce_cython);
            if (likely(reduce_cython)) {
                ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce, reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
            } else if (reduce == object_reduce || PyErr_Occurred()) {
                goto __PYX_BAD;
            }
            setstate = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_setstate);
            if (!setstate) PyErr_Clear();
            if (!setstate || __Pyx_setup_reduce_is_named(setstate, __pyx_n_s_setstate_cython)) {
                setstate_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_setstate_cython);
                if (likely(setstate_cython)) {
                    ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate, setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                    ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                } else if (!setstate || PyErr_Occurred()) {
                    goto __PYX_BAD;
                }
            }
            PyType_Modified((PyTypeObject*)type_obj);
        }
    }
    goto __PYX_GOOD;
__PYX_BAD:
    if (!PyErr_Occurred())
        PyErr_Format(PyExc_RuntimeError, "Unable to initialize pickling for %s", ((PyTypeObject*)type_obj)->tp_name);
    ret = -1;
__PYX_GOOD:
#if !CYTHON_USE_PYTYPE_LOOKUP
    Py_XDECREF(object_reduce);
    Py_XDECREF(object_reduce_ex);
#endif
    Py_XDECREF(reduce);
    Py_XDECREF(reduce_ex);
    Py_XDECREF(reduce_cython);
    Py_XDECREF(setstate);
    Py_XDECREF(setstate_cython);
    return ret;
}

/* TypeImport */
#ifndef __PYX_HAVE_RT_ImportType
#define __PYX_HAVE_RT_ImportType
static PyTypeObject *__Pyx_ImportType(PyObject *module, const char *module_name, const char *class_name,
    size_t size, enum __Pyx_ImportType_CheckSize check_size)
{
    PyObject *result = 0;
    char warning[200];
    Py_ssize_t basicsize;
#ifdef Py_LIMITED_API
    PyObject *py_basicsize;
#endif
    result = PyObject_GetAttrString(module, class_name);
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#ifndef Py_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if ((size_t)basicsize < size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        goto bad;
    }
    if (check_size == __Pyx_ImportType_CheckSize_Error && (size_t)basicsize != size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        goto bad;
    }
    else if (check_size == __Pyx_ImportType_CheckSize_Warn && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(result);
    return NULL;
}
#endif

/* CLineInTraceback */
#ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(CYTHON_NCP_UNUSED PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    if (unlikely(!__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
        __PYX_PY_DICT_LOOKUP_IF_MODIFIED(
            use_cline, *cython_runtime_dict,
            __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback))
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (use_cline == Py_False || (use_cline != Py_True && PyObject_Not(use_cline) != 0)) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, ((size_t)new_max) * sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
    const int neg_one = (int) ((int) 0 - (int) 1), const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

/* CIntFromPyVerify */
#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) ((long) 0 - (long) 1), const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) ((int) 0 - (int) 1), const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CIntFromPy */
static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *x) {
    const size_t neg_one = (size_t) ((size_t) 0 - (size_t) 1), const_zero = (size_t) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(size_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(size_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (size_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case  1: __PYX_VERIFY_RETURN_INT(size_t, digit, digits[0])
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 2 * PyLong_SHIFT) {
                            return (size_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 3 * PyLong_SHIFT) {
                            return (size_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 4 * PyLong_SHIFT) {
                            return (size_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (size_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(size_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(size_t) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case -1: __PYX_VERIFY_RETURN_INT(size_t, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(size_t,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(size_t) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) ((((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) ((((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) ((((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(size_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(size_t) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            size_t val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (size_t) -1;
        }
    } else {
        size_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (size_t) -1;
        val = __Pyx_PyInt_As_size_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to size_t");
    return (size_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to size_t");
    return (size_t) -1;
}

/* CIntFromPy */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) ((long) 0 - (long) 1), const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* FastTypeChecks */
#if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = a->tp_base;
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    int res = exc_type1 ? __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type1) : 0;
    if (!res) {
        res = __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
    return res;
}
#endif
static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    assert(PyExceptionClass_Check(exc_type));
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        PyObject *t = PyTuple_GET_ITEM(tuple, i);
        #if PY_MAJOR_VERSION < 3
        if (likely(exc_type == t)) return 1;
        #endif
        if (likely(PyExceptionClass_Check(t))) {
            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;
        } else {
        }
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        if (likely(PyExceptionClass_Check(exc_type))) {
            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
        } else if (likely(PyTuple_Check(exc_type))) {
            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
        } else {
        }
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    assert(PyExceptionClass_Check(exc_type1));
    assert(PyExceptionClass_Check(exc_type2));
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* CheckBinaryVersion */
static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* InitStrings */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject* x) {
    int retval;
    if (unlikely(!x)) return -1;
    retval = __Pyx_PyObject_IsTrue(x);
    Py_DECREF(x);
    return retval;
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type %.200s).  "
                "The ability to return an instance of a strict subclass of int "
                "is deprecated, and may be removed in a future version of Python.",
                Py_TYPE(result)->tp_name)) {
            Py_DECREF(result);
            return NULL;
        }
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type %.200s)",
                 type_name, type_name, Py_TYPE(result)->tp_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(b);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
